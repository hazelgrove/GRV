// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Expect_test_common__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_common = [0];
   runtime.caml_register_global(0, Expect_test_common, "Expect_test_common__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_common_Import = [0];
   runtime.caml_register_global
    (0, Expect_test_common_Import, "Expect_test_common__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__File
//# unitInfo: Requires: Assert_failure, Base, Base__Comparable, Base__Ppx_compare_lib, Base__String, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__Filename, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_end_pos$0 = "end_pos",
    cst_filename$0 = "filename",
    cst_line_number$0 = "line_number",
    cst_line_start$0 = "line_start",
    cst_start_pos$0 = "start_pos",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_024 = "file.ml.Location.T.t",
    Base = global_data.Base,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_String = global_data.Base__String,
    Base_Comparable = global_data.Base__Comparable,
    hash_fold_t = Base_String[26],
    t_of_sexp = Base_String[27],
    sexp_of_t = Base_String[28],
    of_string = Base_String[29],
    to_string = Base_String[30],
    symbol = Base_String[31],
    symbol$0 = Base_String[32],
    symbol$1 = Base_String[33],
    symbol$2 = Base_String[34],
    symbol$3 = Base_String[35],
    symbol$4 = Base_String[36],
    compare = Base_String[37],
    min = Base_String[38],
    max = Base_String[39],
    ascending = Base_String[40],
    descending = Base_String[41],
    between = Base_String[42],
    clamp_exn = Base_String[43],
    clamp = Base_String[44],
    comparator = Base_String[45],
    pp = Base_String[46],
    hashable = Base_String[47],
    equal = Base_String[121],
    cst_Expect_test_collector_File =
      "Expect_test_collector.File.Digest.of_string, unexpected length",
    cst_Expect_test_collector_File$0 =
      "Expect_test_collector.File.Digest.of_string",
    _b_ = [0, cst_end_pos$0],
    _c_ = [0, cst_start_pos$0],
    _d_ = [0, cst_line_start$0],
    _e_ = [0, cst_line_number$0],
    _f_ = [0, cst_filename$0],
    _a_ = [0, "common/file.ml", 76, 22],
    cst_end_pos = cst_end_pos$0,
    cst_start_pos = cst_start_pos$0,
    cst_line_start = cst_line_start$0,
    cst_line_number = cst_line_number$0,
    cst_filename = cst_filename$0;
   function relative_to(dir, t){
    return caml_call1(Stdlib_Filename[5], t)
            ? caml_call2(Stdlib_Filename[4], dir, t)
            : t;
   }
   var
    Name =
      [0,
       relative_to,
       hash_fold_t,
       function(_s_){return runtime.Base_hash_string(_s_);},
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable];
   a:
   {
    try{var v = runtime.caml_sys_getcwd(0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), dir_or_error = [0, 3458171, exn];
     break a;
    }
    var dir_or_error = [0, 17724, v];
   }
   function initial_dir(param){
    if(3458171 <= dir_or_error[1]){
     var exn = dir_or_error[2];
     throw caml_maybe_attach_backtrace(exn, 1);
    }
    var v = dir_or_error[2];
    return v;
   }
   function t_of_sexp$0(sexp_002){
    if(0 === sexp_002[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_024, sexp_002);
    var
     field_sexps_003 = sexp_002[1],
     filename_004 = [0, 0],
     line_number_006 = [0, 0],
     line_start_008 = [0, 0],
     start_pos_010 = [0, 0],
     end_pos_012 = [0, 0],
     duplicates_014 = [0, 0],
     extra_015 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_003;
       for(;;){
        if(! param) break;
        var sexp_002$0 = param[1];
        if(1 !== sexp_002$0[0]) break b;
        var _m_ = sexp_002$0[1];
        if(! _m_) break c;
        var _n_ = _m_[1];
        if(0 !== _n_[0]) break e;
        var field_sexps_018 = _m_[2], field_name_016 = _n_[1];
        if(field_sexps_018 && field_sexps_018[2]) break d;
        var
         tail_026 = param[2],
         field_sexp_017$5 =
           function(field_sexps_018){
            function field_sexp_017(param){
             if(! field_sexps_018)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_024, sexp_002);
             if(field_sexps_018[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
             var x_027 = field_sexps_018[1];
             return x_027;
            }
            return field_sexp_017;
           },
         field_sexp_017 = field_sexp_017$5(field_sexps_018);
        if(caml_string_notequal(field_name_016, cst_end_pos$0))
         if(caml_string_notequal(field_name_016, cst_filename$0))
          if(caml_string_notequal(field_name_016, cst_line_number$0))
           if(caml_string_notequal(field_name_016, cst_line_start$0))
            if(caml_string_notequal(field_name_016, cst_start_pos$0)){
             if(Sexplib0_Sexp_conv[26][1])
              extra_015[1] = [0, field_name_016, extra_015[1]];
            }
            else if(start_pos_010[1])
             duplicates_014[1] = [0, field_name_016, duplicates_014[1]];
            else{
             var
              field_sexp_017$0 = field_sexp_017(0),
              fvalue_020 = caml_call1(Base[119], field_sexp_017$0);
             start_pos_010[1] = [0, fvalue_020];
            }
           else if(line_start_008[1])
            duplicates_014[1] = [0, field_name_016, duplicates_014[1]];
           else{
            var
             field_sexp_017$1 = field_sexp_017(0),
             fvalue_021 = caml_call1(Base[119], field_sexp_017$1);
            line_start_008[1] = [0, fvalue_021];
           }
          else if(line_number_006[1])
           duplicates_014[1] = [0, field_name_016, duplicates_014[1]];
          else{
           var
            field_sexp_017$2 = field_sexp_017(0),
            fvalue_022 = caml_call1(Base[119], field_sexp_017$2);
           line_number_006[1] = [0, fvalue_022];
          }
         else if(filename_004[1])
          duplicates_014[1] = [0, field_name_016, duplicates_014[1]];
         else{
          var
           field_sexp_017$3 = field_sexp_017(0),
           fvalue_023 = caml_call1(Name[4], field_sexp_017$3);
          filename_004[1] = [0, fvalue_023];
         }
        else if(end_pos_012[1])
         duplicates_014[1] = [0, field_name_016, duplicates_014[1]];
        else{
         var
          field_sexp_017$4 = field_sexp_017(0),
          fvalue_019 = caml_call1(Base[119], field_sexp_017$4);
         end_pos_012[1] = [0, fvalue_019];
        }
        var param = tail_026;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_024, sexp_002$0);
    }
    if(duplicates_014[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_024,
              duplicates_014[1],
              sexp_002);
    if(extra_015[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_024,
              extra_015[1],
              sexp_002);
    var
     _o_ = filename_004[1],
     _p_ = line_number_006[1],
     _q_ = line_start_008[1],
     _r_ = start_pos_010[1],
     match = end_pos_012[1];
    if(_o_ && _p_ && _q_ && _r_ && match){
     var
      end_pos_013 = match[1],
      start_pos_011 = _r_[1],
      line_start_009 = _q_[1],
      line_number_007 = _p_[1],
      filename_005 = _o_[1];
     return [0,
             filename_005,
             line_number_007,
             line_start_009,
             start_pos_011,
             end_pos_013];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_024,
             sexp_002,
             [0,
              [0, 0 === filename_004[1] ? 1 : 0, cst_filename],
              [0,
               [0, 0 === line_number_006[1] ? 1 : 0, cst_line_number],
               [0,
                [0, 0 === line_start_008[1] ? 1 : 0, cst_line_start],
                [0,
                 [0, 0 === start_pos_010[1] ? 1 : 0, cst_start_pos],
                 [0, [0, 0 === end_pos_012[1] ? 1 : 0, cst_end_pos], 0]]]]]);
   }
   function sexp_of_t$0(param){
    var
     end_pos_037 = param[5],
     start_pos_035 = param[4],
     line_start_033 = param[3],
     line_number_031 = param[2],
     filename_029 = param[1],
     arg_038 = caml_call1(Base[120], end_pos_037),
     bnds_028 = [0, [1, [0, _b_, [0, arg_038, 0]]], 0],
     arg_036 = caml_call1(Base[120], start_pos_035),
     bnds_028$0 = [0, [1, [0, _c_, [0, arg_036, 0]]], bnds_028],
     arg_034 = caml_call1(Base[120], line_start_033),
     bnds_028$1 = [0, [1, [0, _d_, [0, arg_034, 0]]], bnds_028$0],
     arg_032 = caml_call1(Base[120], line_number_031),
     bnds_028$2 = [0, [1, [0, _e_, [0, arg_032, 0]]], bnds_028$1],
     arg_030 = caml_call1(Name[5], filename_029),
     bnds_028$3 = [0, [1, [0, _f_, [0, arg_030, 0]]], bnds_028$2];
    return [1, bnds_028$3];
   }
   function compare$0(a_039, b_040){
    if(caml_call2(Base_Ppx_compare_lib[1], a_039, b_040)) return 0;
    var n = caml_call2(Name[15], a_039[1], b_040[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base[115], a_039[2], b_040[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base[115], a_039[3], b_040[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Base[115], a_039[4], b_040[4]);
    return 0 === n$2 ? caml_call2(Base[115], a_039[5], b_040[5]) : n$2;
   }
   var
    include = caml_call1(Base_Comparable[10], [0, compare$0, sexp_of_t$0]),
    symbol$5 = include[1],
    symbol$6 = include[2],
    symbol$7 = include[3],
    symbol$8 = include[4],
    symbol$9 = include[5],
    symbol$10 = include[6],
    equal$0 = include[7],
    compare$1 = include[8],
    min$0 = include[9],
    max$0 = include[10],
    ascending$0 = include[11],
    descending$0 = include[12],
    between$0 = include[13],
    clamp_exn$0 = include[14],
    clamp$0 = include[15],
    comparator$0 = include[16];
   function beginning_of_file(filename){return [0, filename, 1, 0, 0, 0];}
   function of_source_code_position(pos){
    var
     _h_ = pos[4],
     _i_ = pos[4],
     _j_ = pos[3],
     _k_ = pos[2],
     _l_ = caml_call1(Stdlib_Filename[13], pos[1]);
    return [0, caml_call1(Name[6], _l_), _k_, _j_, _i_, _h_];
   }
   var sexp_of_t$1 = Base[165], compare$2 = Base[160];
   function to_string$0(t){return t;}
   function of_string$0(s){
    if(runtime.caml_ml_string_length(s) !== 32)
     caml_call1(Base[202], cst_Expect_test_collector_File);
    var i = 0;
    for(;;){
     var match = runtime.caml_string_get(s, i);
     a:
     {
      b:
      {
       if(58 <= match){
        if(5 < match - 97 >>> 0) break b;
       }
       else if(48 > match) break b;
       break a;
      }
      caml_call1(Base[202], cst_Expect_test_collector_File$0);
     }
     var _g_ = i + 1 | 0;
     if(31 === i) return s;
     var i = _g_;
    }
   }
   var
    Expect_test_common_File =
      [0,
       Name,
       initial_dir,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        beginning_of_file,
        of_source_code_position,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        equal$0,
        compare$1,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0],
       [0, sexp_of_t$1, compare$2, of_string$0, to_string$0]];
   runtime.caml_register_global
    (27, Expect_test_common_File, "Expect_test_common__File");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__Expectation
//# unitInfo: Requires: Base__Ppx_compare_lib, Expect_test_common__File, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Expect_test_common_File = global_data.Expect_test_common__File,
    _e_ = [0, "body_location"],
    _f_ = [0, "extid_location"],
    _g_ = [0, "body"],
    _h_ = [0, "tag"],
    _a_ = [0, "Output"],
    _b_ = [0, "Unreachable"],
    _c_ = [0, "Exact"],
    _d_ = [0, "Pretty"];
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    if(0 === param[0]){
     var
      arg0_002 = param[1],
      res0_003 = caml_call1(Sexplib0_Sexp_conv[7], arg0_002);
     return [1, [0, _c_, [0, res0_003, 0]]];
    }
    var arg0_004 = param[1], res0_005 = caml_call1(of_a_001, arg0_004);
    return [1, [0, _d_, [0, res0_005, 0]]];
   }
   function compare(cmp_a, a_007, b_008){
    if(caml_call2(Base_Ppx_compare_lib[1], a_007, b_008)) return 0;
    a:
    {
     if(typeof a_007 === "number"){
      if(0 === a_007){
       if(typeof b_008 === "number"){if(0 === b_008) return 0;}
       else if(0 === b_008[0]) break a;
       return -1;
      }
      if(typeof b_008 !== "number"){if(1 === b_008[0]) return 1; break a;}
      if(1 === b_008) return 0;
     }
     else{
      if(0 === a_007[0]){
       var a_009 = a_007[1];
       if(typeof b_008 !== "number" && 0 === b_008[0]){
        var b_010 = b_008[1];
        return caml_call2(Base_Ppx_compare_lib[6][8], a_009, b_010);
       }
       return -1;
      }
      var a_011 = a_007[1];
      if(typeof b_008 !== "number"){
       if(0 === b_008[0]) break a;
       var b_012 = b_008[1];
       return caml_call2(cmp_a, a_011, b_012);
      }
      if(0 !== b_008) return -1;
     }
     return 1;
    }
    return 1;
   }
   function equal(cmp_a, a_013, b_014){
    if(caml_call2(Base_Ppx_compare_lib[1], a_013, b_014)) return 1;
    a:
    {
     if(typeof a_013 === "number"){
      if(0 === a_013){
       if(typeof b_014 === "number"){if(0 === b_014) return 1;}
       else if(0 === b_014[0]) break a;
       return 0;
      }
      if(typeof b_014 !== "number"){if(1 === b_014[0]) return 0; break a;}
      if(1 === b_014) return 1;
     }
     else{
      if(0 === a_013[0]){
       var a_015 = a_013[1];
       if(typeof b_014 !== "number" && 0 === b_014[0]){
        var b_016 = b_014[1];
        return caml_call2(Base_Ppx_compare_lib[6][21], a_015, b_016);
       }
       return 0;
      }
      var a_017 = a_013[1];
      if(typeof b_014 !== "number"){
       if(0 === b_014[0]) break a;
       var b_018 = b_014[1];
       return caml_call2(cmp_a, a_017, b_018);
      }
      if(0 !== b_014) return 0;
     }
     return 0;
    }
    return 0;
   }
   function map_pretty(t, f){
    if(typeof t !== "number" && 1 === t[0]){
     var x = t[1];
     return [1, caml_call1(f, x)];
    }
    return t;
   }
   var Body = [0, sexp_of_t, compare, equal, map_pretty];
   function sexp_of_t$0(of_a_019, param){
    var
     body_location_027 = param[4],
     extid_location_025 = param[3],
     body_023 = param[2],
     tag_021 = param[1],
     arg_028 = caml_call1(Expect_test_common_File[3][2], body_location_027),
     bnds_020 = [0, [1, [0, _e_, [0, arg_028, 0]]], 0],
     arg_026 = caml_call1(Expect_test_common_File[3][2], extid_location_025),
     bnds_020$0 = [0, [1, [0, _f_, [0, arg_026, 0]]], bnds_020],
     arg_024 = caml_call2(Body[1], of_a_019, body_023),
     bnds_020$1 = [0, [1, [0, _g_, [0, arg_024, 0]]], bnds_020$0],
     arg_022 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], tag_021),
     bnds_020$2 = [0, [1, [0, _h_, [0, arg_022, 0]]], bnds_020$1];
    return [1, bnds_020$2];
   }
   function compare$0(cmp_a, a_029, b_030){
    if(caml_call2(Base_Ppx_compare_lib[1], a_029, b_030)) return 0;
    var
     n =
       caml_call3
        (Base_Ppx_compare_lib[6][12],
         Base_Ppx_compare_lib[6][8],
         a_029[1],
         b_030[1]);
    if(0 !== n) return n;
    var n$0 = caml_call3(Body[2], cmp_a, a_029[2], b_030[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Expect_test_common_File[3][12], a_029[3], b_030[3]);
    return 0 === n$1
            ? caml_call2(Expect_test_common_File[3][12], a_029[4], b_030[4])
            : n$1;
   }
   function equal$0(cmp_a, a_035, b_036){
    if(caml_call2(Base_Ppx_compare_lib[1], a_035, b_036)) return 1;
    var
     _l_ =
       caml_call3
        (Base_Ppx_compare_lib[6][25],
         Base_Ppx_compare_lib[6][21],
         a_035[1],
         b_036[1]);
    if(_l_){
     var _m_ = caml_call3(Body[3], cmp_a, a_035[2], b_036[2]);
     if(_m_){
      var
       _n_ = caml_call2(Expect_test_common_File[3][11], a_035[3], b_036[3]);
      if(_n_)
       return caml_call2(Expect_test_common_File[3][11], a_035[4], b_036[4]);
      var _o_ = _n_;
     }
     else
      var _o_ = _m_;
    }
    else
     var _o_ = _l_;
    return _o_;
   }
   function sexp_of_t$1(x_041){
    return sexp_of_t$0(Sexplib0_Sexp_conv[7], x_041);
   }
   function compare$1(a_042, b_043){
    return compare$0(Base_Ppx_compare_lib[6][8], a_042, b_043);
   }
   var Raw = [0, sexp_of_t$1, compare$1];
   function map_pretty$0(t, f){
    var _i_ = t[4], _j_ = t[3], _k_ = caml_call2(Body[4], t[2], f);
    return [0, t[1], _k_, _j_, _i_];
   }
   var
    Expect_test_common_Expectation =
      [0, Body, sexp_of_t$0, compare$0, equal$0, Raw, map_pretty$0];
   runtime.caml_register_global
    (11, Expect_test_common_Expectation, "Expect_test_common__Expectation");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Std = [0],
    Expect_test_common = [0, Std];
   runtime.caml_register_global(0, Expect_test_common, "Expect_test_common");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
