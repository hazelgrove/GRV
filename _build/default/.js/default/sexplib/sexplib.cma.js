// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Sexplib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib = [0];
   runtime.caml_register_global(0, Sexplib, "Sexplib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Type
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Type = [0];
   runtime.caml_register_global(0, Sexplib_Type, "Sexplib__Type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Src_pos
//# unitInfo: Requires: Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    zero = [0, 0, 0],
    origin = [0, 1, 1],
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ = [0, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]], "%d:%d"];
   function sexp_of_t(param){
    var col = param[2], row = param[1];
    return [0, caml_call3(Stdlib_Printf[4], _a_, row, col)];
   }
   function add(t1, t2){return [0, t1[1] + t2[1] | 0, t1[2] + t2[2] | 0];}
   function sub(t1, t2){return [0, t1[1] - t2[1] | 0, t1[2] - t2[2] | 0];}
   function geq(t1, t2){
    var
     c2 = t2[2],
     r2 = t2[1],
     c1 = t1[2],
     r1 = t1[1],
     _b_ = r1 === r2 ? c1 - c2 | 0 : r1 - r2 | 0;
    return 0 <= _b_ ? 1 : 0;
   }
   function of_lexing(param){
    var pos_cnum = param[4], pos_bol = param[3], pos_lnum = param[2];
    return [0, pos_lnum, (pos_cnum - pos_bol | 0) + 1 | 0];
   }
   var
    Sexplib_Src_pos =
      [0,
       [0, sexp_of_t, zero, add, sub],
       [0, sexp_of_t, origin, of_lexing, sub, add, sub, geq]];
   runtime.caml_register_global(4, Sexplib_Src_pos, "Sexplib__Src_pos");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Type_with_layout
//# unitInfo: Requires: Sexplib__Src_pos, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    Stdlib_List = global_data.Stdlib__List,
    _b_ = [0, "Atom"],
    _c_ = [0, "List"],
    _d_ = [0, "Sexp"],
    _e_ = [0, "Comment"],
    _f_ = [0, "Plain_comment"],
    _g_ = [0, "Sexp_comment"],
    _a_ = [1, 0];
   function map(t, f){
    var _t_ = caml_call2(Stdlib_List[21], f, t);
    return caml_call1(Stdlib_List[9], _t_);
   }
   function Make(Pos){
    var of_pos = Pos[1];
    function of_list(of_a, xs){return [1, map(xs, of_a)];}
    function of_t(param){
     if(0 !== param[0]){
      var
       v3$0 = param[3],
       v2$0 = param[2],
       v1$0 = param[1],
       _r_ = [0, caml_call1(of_pos, v3$0), 0],
       _s_ = [0, of_list(of_t_or_comment, v2$0), _r_];
      return [1, [0, _c_, [0, caml_call1(of_pos, v1$0), _s_]]];
     }
     var v3 = param[3], v2 = param[2], v1 = param[1], _p_ = 0;
     if(v3) var x = v3[1], _q_ = [1, [0, [0, x], 0]]; else var _q_ = _a_;
     return [1,
             [0,
              _b_,
              [0, caml_call1(of_pos, v1), [0, [0, v2], [0, _q_, _p_]]]]];
    }
    function of_t_or_comment(param){
     if(0 === param[0]){
      var t = param[1];
      return [1, [0, _d_, [0, of_t(t), 0]]];
     }
     var c = param[1];
     return [1, [0, _e_, [0, of_comment(c), 0]]];
    }
    function of_comment(param){
     if(0 === param[0]){
      var v2 = param[2], v1 = param[1];
      return [1, [0, _f_, [0, caml_call1(of_pos, v1), [0, [0, v2], 0]]]];
     }
     var
      v3 = param[3],
      v2$0 = param[2],
      v1$0 = param[1],
      _n_ = [0, of_t(v3), 0],
      _o_ = [0, of_list(of_comment, v2$0), _n_];
     return [1, [0, _g_, [0, caml_call1(of_pos, v1$0), _o_]]];
    }
    var
     To_sexp = [0, of_t, of_comment, of_t_or_comment],
     sexp_of_t = To_sexp[1],
     sexp_of_comment = To_sexp[2],
     sexp_of_t_or_comment = To_sexp[3];
    return [0, , , sexp_of_t, sexp_of_comment, sexp_of_t_or_comment];
   }
   var
    include = Make([0, Sexplib_Src_pos[1][1]]),
    sexp_of_t = include[3],
    sexp_of_comment = include[4],
    sexp_of_t_or_comment = include[5],
    Parsed = Make([0, Sexplib_Src_pos[2][1]]);
   function rel(outer_p, p){
    return caml_call2(Sexplib_Src_pos[2][4], p, outer_p);
   }
   function aux_t(outer_p, param){
    if(0 === param[0]){
     var sopt = param[3], s = param[2], pos = param[1];
     return [0, rel(outer_p, pos), s, sopt];
    }
    var
     end_pos = param[3],
     tocs = param[2],
     start_pos = param[1],
     _l_ = rel(outer_p, end_pos),
     _m_ = map(tocs, function(toc){return aux_toc(start_pos, toc);});
    return [1, rel(outer_p, start_pos), _m_, _l_];
   }
   function aux_toc(outer_p, param){
    if(0 === param[0]){var t = param[1]; return [0, aux_t(outer_p, t)];}
    var c = param[1];
    return [1, aux_c(outer_p, c)];
   }
   function aux_c(outer_p, param){
    if(0 === param[0]){
     var txt = param[2], pos = param[1];
     return [0, rel(outer_p, pos), txt];
    }
    var
     t = param[3],
     cs = param[2],
     pos$0 = param[1],
     _j_ = aux_t(outer_p, t),
     _k_ = map(cs, function(c){return aux_c(outer_p, c);});
    return [1, rel(outer_p, pos$0), _k_, _j_];
   }
   function relativize(toc){return aux_toc(Sexplib_Src_pos[2][2], toc);}
   var
    _h_ = [0, Parsed[3], Parsed[4], Parsed[5]],
    Sexplib_Type_with_layout =
      [0,
       function(_i_){return [0];},
       _h_,
       sexp_of_t,
       sexp_of_comment,
       sexp_of_t_or_comment,
       relativize];
   runtime.caml_register_global
    (9, Sexplib_Type_with_layout, "Sexplib__Type_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Parser
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Parsing, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    what = "sexp",
    yylhs =
      "\xff\xff\x01\0\x01\0\x06\0\x06\0\x06\0\x06\0\b\0\b\0\x05\0\x05\0\x02\0\x02\0\x02\0\x02\0\x07\0\x07\0\x07\0\x07\0\x04\0\x04\0\x03\0\x03\0\0\0\0\0\0\0\0\0",
    yylen =
      "\x02\0\x02\0\x01\0\x01\0\x02\0\x03\0\x01\0\x02\0\x03\0\x01\0\x02\0\x01\0\x02\0\x01\0\x02\0\x01\0\x01\0\x02\0\x02\0\x02\0\x01\0\x02\0\x01\0\x02\0\x02\0\x02\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x03\0\0\0\0\0\x17\0\0\0\x02\0\t\0\r\0\x18\0\0\0\x0b\0\x16\0\x19\0\x0f\0\0\0\x10\0\x14\0\x1a\0\0\0\x04\0\0\0\0\0\x07\0\x01\0\n\0\x0e\0\f\0\x15\0\x11\0\x12\0\x13\0\x05\0\b\0",
    yydgoto = "\x05\0\n\0\x0f\0\x13\0\x18\0\x0b\0\x14\0\x15\0\r\0",
    yysindex =
      '(\0"\xff\x01\0\x06\0\x0b\0\0\0\0\0\0\0:\xff"\xff\0\0"\xff\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\x1a\0\0\0?\xff"\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex = "\0\0\0\0\0\0\0\0\0\0\xfe\xff\x03\0\x05\0\x1d\0",
    yytable =
      "\x10\0\x0e\0\0\0\0\0\f\0\x11\0\x12\0\x1c\0\0\0\x19\0\0\0\x17\0\x1d\0\x1b\0\x1e\0\0\0 \0\0\0\0\0!\0\0\0\"\0\0\0\0\0#\0\0\0%\0\0\0#\0\0\0#\0'\0\x16\0\x16\0\x06\0\x07\0\b\0\x16\0\t\0\0\0\x1f\0\x01\0\x02\0\x03\0\x04\0\x1f\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0$\0\0\0$\0\x1f\0\x06\0\x07\0\b\0\x1a\0\t\0\x06\0\x07\0\b\0&\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0\x06\0\x07\0\b\0\0\0\t\0",
    yycheck =
      "\x02\0\0\0\xff\xff\xff\xff\x01\0\x02\0\0\0\t\0\xff\xff\x04\0\xff\xff\0\0\t\0\b\0\x0b\0\xff\xff\0\0\xff\xff\xff\xff\x10\0\xff\xff\0\0\xff\xff\xff\xff\x15\0\xff\xff\0\0\xff\xff\x19\0\xff\xff\x1b\0\x1c\0\x03\0\x04\0\0\x01\x01\x01\x02\x01\b\0\x04\x01\xff\xff\x0b\0\x01\0\x02\0\x03\0\x04\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\x1b\0\x1c\0\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01\0\x01\x01\x01\x02\x01\xff\xff\x04\x01",
    yynames_const = "LPAREN\0RPAREN\0EOF\0HASH_SEMI\0",
    yynames_block = "STRING\0",
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    yytransl_const = [0, 258, 259, 0, 260, 0].slice(),
    yytransl_block = [0, 257, 0],
    cst_parser = "parser",
    _y_ = [1, 0],
    _a_ =
      [0,
       [11,
        "Sexplib.Parser: failed to parse line ",
        [4, 0, 0, 0, [11, " char ", [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]],
       "Sexplib.Parser: failed to parse line %d char %d: %s"],
    yytablesize = 286;
   function _b_(caml_parser_env){
    var _F_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _F_], 1);
   }
   function _c_(caml_parser_env){
    var _E_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _E_], 1);
   }
   function _d_(caml_parser_env){
    var _D_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _D_], 1);
   }
   function _e_(caml_parser_env){
    var _C_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _C_], 1);
   }
   function _f_(caml_parser_env){return 0;}
   function _g_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return caml_call1(Stdlib_List[9], _1);
   }
   function _h_(caml_parser_env){return 0;}
   function _i_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return _1;
   }
   function _j_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return _1;
   }
   function _k_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _2, _1];
   }
   function _l_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return 0;
   }
   function _m_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, 0];
   }
   function _n_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return 0;
   }
   function _o_(caml_parser_env){return 0;}
   function _p_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _2];
   }
   function _q_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1];
   }
   function _r_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return 0;
   }
   function _s_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return 0;
   }
   function _t_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return 0;
   }
   function _u_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return 0;
   }
   function _v_(caml_parser_env){
    var
     pos = caml_call1(Stdlib_Parsing[5], 0),
     msg =
       caml_call4(Stdlib_Printf[4], _a_, pos[2], pos[4] - pos[3] | 0, what);
    return caml_call1(Stdlib[2], msg);
   }
   function _w_(caml_parser_env){
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return [1, caml_call1(Stdlib_List[9], _2)];
   }
   function _x_(caml_parser_env){return _y_;}
   function _z_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1];
   }
   function _A_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return _1;
   }
   function _B_(caml_parser_env){
    caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return _2;
   }
   var
    yyact =
      [0,
       function(param){return caml_call1(Stdlib[2], cst_parser);},
       _B_,
       _A_,
       _z_,
       _x_,
       _w_,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       _h_,
       _g_,
       _f_,
       _e_,
       _d_,
       _c_,
       _b_],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       yytablesize,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
   function sexp(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 1, lexfun, lexbuf);
   }
   function sexp_opt(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 2, lexfun, lexbuf);
   }
   function sexps(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 3, lexfun, lexbuf);
   }
   function rev_sexps(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 4, lexfun, lexbuf);
   }
   var Sexplib_Parser = [0, sexp, sexp_opt, sexps, rev_sexps];
   runtime.caml_register_global(20, Sexplib_Parser, "Sexplib__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Parser_with_layout
//# unitInfo: Requires: Sexplib__Src_pos, Sexplib__Type_with_layout, Stdlib, Stdlib__List, Stdlib__Parsing, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    what = "sexp",
    yylhs =
      "\xff\xff\x06\0\x06\0\x06\0\b\0\b\0\t\0\t\0\n\0\n\0\x07\0\x07\0\x01\0\x02\0\x02\0\x0b\0\x0b\0\x05\0\x05\0\x03\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0",
    yylen =
      "\x02\0\x01\0\x03\0\x01\0\x01\0\x03\0\0\0\x02\0\x01\0\x01\0\0\0\x02\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0\x01\0\x02\0\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\0\0\n\0\0\0\0\0\x03\0\x01\0\x04\0\n\0\x06\0\x16\0\b\0\t\0\f\0\x0e\0\r\0\x17\0\x14\0\x0f\0\x18\0\0\0\x19\0\0\0\x12\0\x1a\0\0\0\0\0\0\0\x13\0\x10\0\x15\0\x0b\0\x11\0\x02\0\x05\0\x07\0",
    yydgoto =
      "\x06\0\x14\0\x12\0\x15\0\x17\0\x1a\0\r\0\x18\0\x0e\0\x1d\0\x0f\0\x16\0",
    yysindex =
      "%\0\t\xff\x01\0\x07\0\0\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\0\0\x19\0\0\0\0\0\x1f\0 \xff\t\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex =
      "\0\0\x02\0\0\0\0\0\0\0\0\0\xe3\xff\xfb\xff\xeb\xff\0\0\xea\xff\n\0",
    yytable =
      '$\0\x10\0!\0\f\0\x11\0\x1c\0!\0\x13\0%\0\x07\0\b\0\t\0\n\0\x19\0\x0b\0\x1b\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\0\0\x1f\0 \0\0\0\0\0\0\0\x1f\0\0\0"\0\x07\0\b\0\t\0\n\0#\0\x0b\0\x01\0\x02\0\x03\0\x04\0\xx07\0\b\0\t\0\n\0\0\0\x0b\0\x07\0\b\0\t\0\n\0\0\0\x0b\0\x07\0\b\0\t\0\n\0\0\0\x0b\0\x07\0\b\0\t\0\n\0\0\0\x0b\0\x07\0\b\0\t\0\n\0\0\0\x0b\0\x07\0\b\0\t\0\n\0\0\0\x0b\0',
    yycheck =
      "\x1d\0\0\0\x18\0\x01\0\x02\0\n\0\x1c\0\0\0\x1d\0\0\x01\x01\x01\x02\x01\x03\x01\0\0\x05\x01\x05\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x16\0\0\0\xff\xff\xff\xff\xff\xff\x1b\0\xff\xff\0\0\0\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x01\0\x02\0\x03\0\x04\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01\0\x01\x01\x01\x02\x01\x03\x01\xff\xff\x05\x01",
    yynames_const = "LPAREN\0RPAREN\0EOF\0HASH_SEMI\0",
    yynames_block = "STRING\0COMMENT\0",
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Sexplib_Type_with_layout = global_data.Sexplib__Type_with_layout,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    coerce = Sexplib_Src_pos[2][3],
    cst_parser = "parser",
    _a_ =
      [0,
       [11,
        "Sexplib.Parser: failed to parse line ",
        [4, 0, 0, 0, [11, " char ", [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]],
       "Sexplib.Parser: failed to parse line %d char %d: %s"],
    _b_ = [0, 259, 260, 0, 261, 0];
   function start_pos(param){
    return caml_call1(coerce, caml_call1(Stdlib_Parsing[5], 0));
   }
   var
    yytransl_const = _b_.slice(),
    yytransl_block = [0, 257, 258, 0],
    yytablesize = 292;
   function _c_(caml_parser_env){
    var _H_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _H_], 1);
   }
   function _d_(caml_parser_env){
    var _G_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _G_], 1);
   }
   function _e_(caml_parser_env){
    var _F_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _F_], 1);
   }
   function _f_(caml_parser_env){
    var _E_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _E_], 1);
   }
   function _g_(caml_parser_env){
    var _D_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _D_], 1);
   }
   function _h_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return caml_call1(Stdlib_List[9], _1);
   }
   function _i_(caml_parser_env){return 0;}
   function _j_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return caml_call1(Stdlib_List[9], _1);
   }
   function _k_(caml_parser_env){return 0;}
   function _l_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return _1;
   }
   function _m_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _2, _1];
   }
   function _n_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, 0];
   }
   function _o_(caml_parser_env){return 0;}
   function _p_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1];
   }
   function _q_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return caml_call1(Sexplib_Type_with_layout[6], _1);
   }
   function _r_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _2, _1];
   }
   function _s_(caml_parser_env){return 0;}
   function _t_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [1, _1];
   }
   function _u_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1];
   }
   function _v_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _2, _1];
   }
   function _w_(caml_parser_env){return 0;}
   function _x_(caml_parser_env){
    var
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     cs = caml_call1(Stdlib_List[9], _2);
    return [1, start_pos(0), cs, _3];
   }
   function _y_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     pos_opt = _1[2],
     x = _1[1];
    if(pos_opt)
     var pos = pos_opt[1], pos$0 = caml_call1(coerce, pos);
    else
     var pos$0 = start_pos(0);
    return [0, pos$0, x];
   }
   function _z_(caml_parser_env){
    var
     pos = caml_call1(Stdlib_Parsing[5], 0),
     msg =
       caml_call4(Stdlib_Printf[4], _a_, pos[2], pos[4] - pos[3] | 0, what);
    return caml_call1(Stdlib[2], msg);
   }
   function _A_(caml_parser_env){
    var
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     ts = caml_call1(Stdlib_List[9], _2),
     p = caml_call1(Stdlib_Parsing[6], 0),
     _C_ = caml_call1(coerce, [0, p[1], p[2], p[3], p[4] - 1 | 0]);
    return [1, start_pos(0), ts, _C_];
   }
   function _B_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     y = _1[2],
     x = _1[1];
    if(y)
     var
      match = y[1],
      x$0 = match[2],
      pos = match[1],
      y$0 = [0, x$0],
      y$1 = y$0,
      pos$0 = caml_call1(coerce, pos);
    else
     var y$2 = [0, x], pos$1 = start_pos(0), y$1 = y$2, pos$0 = pos$1;
    return [0, pos$0, x, y$1];
   }
   var
    yyact =
      [0,
       function(param){return caml_call1(Stdlib[2], cst_parser);},
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       _h_,
       _g_,
       _f_,
       _e_,
       _d_,
       _c_],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       yytablesize,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
   function sexp(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 1, lexfun, lexbuf);
   }
   function sexp_opt(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 2, lexfun, lexbuf);
   }
   function sexps(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 3, lexfun, lexbuf);
   }
   function sexps_abs(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 4, lexfun, lexbuf);
   }
   function rev_sexps(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 5, lexfun, lexbuf);
   }
   var
    Sexplib_Parser_with_layout =
      [0, sexp, sexp_opt, sexps, sexps_abs, rev_sexps];
   runtime.caml_register_global
    (21, Sexplib_Parser_with_layout, "Sexplib__Parser_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Lexer
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Buffer, Stdlib__Char, Stdlib__Lexing, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_char = " char ",
    cst_src_lexer_mll = "src/lexer.mll",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xf4\xff\n\0+\x005\0\xfa\xff\xfb\xff\xfc\xff\x01\0\x06\0\x06\0\xff\xffV\0\xf8\xff\xf9\xff`\0\x81\0\x8b\0\xac\0\xb6\0\xdc\0\xe6\0\x07\x01\xf7\xff\x11\x012\x01<\x01]\x01g\x01\x88\x01\x92\x01\xb5\x01\xbf\x01\xe0\x01\xea\x01\x0b\x02%\0\xf6\xffP\0\xf8\xff\x17\x02\xff\xff\xf9\xff9\x02!\x02\xfc\xff\x07\0\x10\0\x11\0p\x02\xfb\xff\x90\x02\xfa\xffQ\0\xfa\xff\xfd\xffz\0\xff\xff\xa6\0\x82\x01\xfc\xff\xfb\xff\xad\x01\xfb\x01",
       "\xff\xff\xff\xff\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\x02\0\x01\0\xff\xff\xff\xff\n\0\xff\xff\xff\xff\t\0\n\0\t\0\t\0\t\0\t\0\t\0\n\0\xff\xff\t\0\n\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\t\0\t\0\t\0\xff\xff\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x06\0\xff\xff\x06\0\x01\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       '\x02\0\0\0\x02\0\x02\0\x02\0\0\0\0\0\0\0\b\0\xff\xff\xff\xff\0\0\x02\0\0\0\0\0\x14\0\x02\0\x12\0\x12\0\x12\0\x14\0\x14\0\x02\0\0\0\x1d\0\x02\0\x1b\0\x1b\0\x1b\0\x1d\0\x1d\0\x02\0\x02\0"\0"\0"\0&\0\0\0&\0\0\0*\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\x008\0\0\0\0\x008\0\0\x008\x008\0\0\0\0\x008\x008\0',
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\x0b\0\xff\xff\t\0\n\0\xff\xff\t\0\x0b\x000\0\t\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0/\x000\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\x05\0\x04\0\0\0\0\0\t\0\0\0\x07\0\x06\0\xff\xff\0\0\xff\xff \0\0\0'\0/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\b\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0)\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\x17\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\f\0\0\0\xff\xff9\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\x0e\0\0\0\xff\xff7\0;\0\0\0\xff\xff\0\0\xff\xff\x10\0\0\0\0\0\x03\0\0\0\xff\xff\xff\xff\xff\xff(\0\xff\xff\x13\0\xff\xff\0\0\x1f\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff?\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\x10\0\0\0\0\0\x16\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\0\x009\0\r\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\x007\0=\0\0\0\0\0\xff\xff:\0\xff\xff\x13\0\0\0\0\0\x0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x13\0\0\0\0\0\x0f\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0>\0\0\0\0\0\0\0\0\0\0\0\xff\xff\x11\0\xff\xff\x15\0\x01\0\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x15\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff:\0\0\0\0\0%\0\0\0\xff\xff\x11\0\xff\xff\x18\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x18\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff6\0\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x11\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff\x1a\0\xff\xff\0\0\x19\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff9\0\x1c\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\x007\0;\0\xff\xff\0\0\xff\xff\0\0\xff\xff\x18\0\xff\xff\0\0\x19\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x1a\0\xff\xff\xff\xff\x1c\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff#\0\x1c\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff \0\x1c\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0<\0\0\0\xff\xff\0\0\xff\xff#\0\x1e\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff#\0\x1e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\xff\xff?\0\0\0\0\0/\0\0\0\0\0.\0\xff\xff\0\0\0\0\0\0>\0\0\0\xff\xff\0\0\xff\xff#\0\0\0\0\0\x1f\0\xff\xff\xff\xff\xff\xff\0\0\0\0-\0\0\0-\0\0\0!\0\xff\xff\0\0-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\0\0!\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0!\0\xff\xff\0\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0-\0\0\0\0\0\0\0\xff\xff\0\0-\x003\x003\x003\x003\x003\x003\0\0\0\0\0\xff\xff\0\0\0\0-\0\0\0!\0\xff\xff-\0\0\0-\0\0\0\0\0\0\0+\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\x003\x003\x003\x003\x003\x003\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\b\0\0\0\0\0\b\0\t\0\n\0.\0\t\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\t\0\xff\xff\0\0\0\0\x02\0\xff\xff\x02\0\x02\0\xff\xff$\0/\x000\0\x02\0\x02\0\x03\0\x03\0\xff\xff\x03\0\x03\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x04\0\x04\0\xff\xff\x04\0\x04\0\xff\xff\xff\xff\x02\0\xff\xff$\0\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x04\0\xff\xff\x04\0\x04\0\xff\xff&\x005\0\xff\xff\x04\0\x04\0\f\0\f\0\xff\xff\f\0\f\0\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\x0f\0\x0f\0\xff\xff\x0f\0\x0f\0\xff\xff\xff\xff\x04\0\xff\xff&\x005\x005\0\xff\xff\f\0\xff\xff\f\0\f\0\xff\xff\xff\xff\0\0\xff\xff\f\0\f\0\x0f\0$\0\x0f\0\x0f\x008\0\xff\xff\x02\0\xff\xff\x0f\0\x0f\0\x10\0\x10\0\xff\xff\x10\0\x10\0\xff\xff\xff\xff\f\0\xff\xff\xff\xff\x11\0\x11\0\xff\xff\x11\0\x11\0\xff\xff\xff\xff\x0f\x008\x008\0\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x10\0\x10\0\xff\xff\xff\xff\x03\0\xff\xff\x10\0\x10\0\x11\0&\0\x11\0\x11\0\xff\xff:\0\x04\0\xff\xff\x11\0\x11\0\x12\0\x12\0\xff\xff\x12\0\x12\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff\x13\0\x13\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\x11\0\xff\xff:\0:\0\xff\xff\xff\xff\x12\x005\0\x12\0\x12\0\xff\xff\xff\xff\f\0\xff\xff\x12\0\x12\0\x13\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\x0f\0\xff\xff\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x12\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\x15\0\x13\0\x15\0\x15\0\xff\xff\xff\xff8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x10\0\x14\0\x14\0\0\0\b\0\xff\xff\xff\xff\x14\0\x14\0\x15\0\x11\0\x15\0\x15\0\x02\0\xff\xff\xff\xff\xff\xff\x15\0\x15\0\x16\0\x16\0\xff\xff\x16\0\x16\0\xff\xff\xff\xff\x14\0\xff\xff\xff\xff\x18\0\x18\0\xff\xff\x18\0\x18\0\xff\xff\xff\xff\x15\0:\0\xff\xff\xff\xff$\0\xff\xff\x16\0\x12\0\x16\0\x16\0\x03\0\xff\xff\xff\xff\xff\xff\x16\0\x16\0\x18\0\x13\0\x18\0\x18\0\x04\0\xff\xff\xff\xff\xff\xff\x18\0\x18\0\x19\0\x19\0\xff\xff\x19\0\x19\0\xff\xff\xff\xff\x16\0\xff\xff\xff\xff\x1a\0\x1a\0\xff\xff\x1a\0\x1a\0\xff\xff\xff\xff\x18\0\xff\xff\xff\xff\xff\xff&\x005\0\x19\0\xff\xff\x19\0\x19\0\f\0\xff\xff\x14\0\xff\xff\x19\0\x19\0\x1a\0\xff\xff\x1a\0\x1a\0\x0f\0\xff\xff\x15\0\xff\xff\x1a\0\x1a\0\x1b\0\x1b\0\xff\xff\x1b\0\x1b\0\xff\xff\xff\xff\x19\0\xff\xff\xff\xff\x1c\0\x1c\0\xff\xff\x1c\0\x1c\0\xff\xff\xff\xff\x1a\0\xff\xff\xff\xff8\0\xff\xff\xff\xff\x1b\0\xff\xff\x1b\0\x1b\0\x10\0\xff\xff\x16\0\xff\xff\x1b\0\x1b\0\x1c\0\xff\xff\x1c\0\x1c\0\x11\0;\0\x18\0\xff\xff\x1c\0\x1c\0\x1d\0\x1d\0\xff\xff\x1d\0\x1d\0\xff\xff\xff\xff\x1b\0\xff\xff\xff\xff\x1e\0\x1e\0\xff\xff\x1e\0\x1e\0\xff\xff\xff\xff\x1c\0\xff\xff;\0;\0:\0\xff\xff\x1d\0\xff\xff\x1d\0\x1d\0\x12\0\xff\xff\x19\0\xff\xff\x1d\0\x1d\0\x1e\0\xff\xff\x1e\0\x1e\0\x13\0>\0\x1a\0\xff\xff\x1e\0\x1e\0\xff\xff\xff\xff\x1f\0\x1f\0\xff\xff\x1f\0\x1f\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff \0 \0\xff\xff \0 \0\x1e\0\xff\xff>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1b\0\xff\xff\xff\xff\x14\0\x1f\0\x1f\0 \0\xff\xff \0 \0\x1c\0\xff\xff\xff\xff\x15\0 \0 \0!\0!\0\xff\xff!\0!\0\xff\xff\xff\xff\x1f\0\xff\xff\xff\xff"\0"\0\xff\xff"\0"\0\xff\xff\xff\xff \0\xff\xff\xff\xff\xff\xff;\0\xff\xff!\0\xff\xff!\0!\0\x1d\0?\0\xff\xff\x16\0!\0!\0"\0\xff\xff"\0"\0\x1e\0\xff\xff\xff\xff\x18\0"\0"\0#\0#\0\xff\xff#\0#\0\xff\xff\xff\xff!\0\xff\xff?\0?\0\xff\xff\xff\xff(\0\xff\xff\xff\xff(\0"\0\xff\xff\xff\xff\xff\xff>\0\xff\xff#\0\xff\xff#\0#\0\xff\xff\xff\xff\x1f\0\x19\0#\0#\0\xff\xff\xff\xff(\0\xff\xff(\0\xff\xff \0\x1a\0\xff\xff(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff!\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0\x1c\0\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0(\0\xff\xff\xff\xff\xff\xff?\0\xff\xff(\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff;\0\xff\xff\xff\xff(\0\xff\xff#\0\x1d\0(\0\xff\xff(\0\xff\xff\xff\xff\xff\xff(\0\xff\xff\xff\xff\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff!\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff',
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Char = global_data.Stdlib__Char,
    Assert_failure = global_data.Assert_failure,
    cst_illegal_end_of_comment = "illegal end of comment",
    cst_comment_tokens_in_unquoted = "comment tokens in unquoted atom",
    _b_ =
      [0,
       [11,
        "Sexplib.Lexer.scan_string: illegal escape at line ",
        [4,
         0,
         0,
         0,
         [11,
          cst_char,
          [4, 0, 0, 0, [11, ": `\\", [0, [0, [0, [12, 39, 0]]]]]]]]],
       "Sexplib.Lexer.scan_string: illegal escape at line %d char %d: `\\%c%c%c'"],
    _c_ =
      [0,
       [11,
        "Sexplib.Lexer.scan_string: unterminated string at line ",
        [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]],
       "Sexplib.Lexer.scan_string: unterminated string at line %d char %d"],
    _d_ = [0, cst_src_lexer_mll, 234, 16],
    _e_ =
      [0,
       [11,
        "Sexplib.Lexer.scan_block_comment: unterminated block comment at line ",
        [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]],
       "Sexplib.Lexer.scan_block_comment: unterminated block comment at line %d char %d"],
    _f_ = [0, cst_src_lexer_mll, 239, 16],
    _a_ =
      [0,
       [11,
        "Sexplib.Lexer.main: ",
        [2,
         0,
         [11, " at line ", [4, 0, 0, 0, [11, cst_char, [4, 0, 0, 0, 0]]]]]],
       "Sexplib.Lexer.main: %s at line %d char %d"],
    lf = 10;
   function found_newline(lexbuf){
    var lex_curr_p = lexbuf[12];
    return function(diff){
     lexbuf[12] =
      [0,
       lex_curr_p[1],
       lex_curr_p[2] + 1 | 0,
       lex_curr_p[4] - diff | 0,
       lex_curr_p[4]];
     return;};
   }
   function lexeme_len(param){
    var lex_start_pos = param[5], lex_curr_pos = param[6];
    return lex_curr_pos - lex_start_pos | 0;
   }
   function main_failure(lexbuf, msg){
    var
     match = caml_call1(Stdlib_Lexing[12], lexbuf),
     pos_cnum = match[4],
     pos_bol = match[3],
     pos_lnum = match[2],
     msg$0 =
       caml_call4
        (Stdlib_Printf[4], _a_, msg, pos_lnum, pos_cnum - pos_bol | 0);
    return caml_call1(Stdlib[2], msg$0);
   }
   function Make(X){
    function _l_(buf, lexbuf){
     for(;;){
      var ocaml_lex_state = 0;
      for(;;){
       var
        ocaml_lex_state$0 =
          caml_call3
           (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
       if(11 >= ocaml_lex_state$0 >>> 0) break;
       caml_call1(lexbuf[1], lexbuf);
       var ocaml_lex_state = ocaml_lex_state$0;
      }
      switch(ocaml_lex_state$0){
        case 0:
         found_newline(lexbuf)(0); break;
        case 1: break;
        case 2:
         var
          text = caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5], lexbuf[6]);
         return caml_call4(X[2][7], text, _l_, buf, lexbuf);
        case 3:
         return X[2][1];
        case 4:
         return X[2][2];
        case 5:
         var pos = caml_call1(Stdlib_Lexing[12], lexbuf);
         caml_call2(X[1][4], buf, lexbuf);
         scan_string(buf, pos, lexbuf);
         var tok = caml_call2(X[2][6], pos, buf);
         caml_call1(X[1][5], buf);
         return tok;
        case 6:
         return X[2][5];
        case 7:
         var pos$0 = caml_call1(Stdlib_Lexing[12], lexbuf);
         caml_call2(X[1][4], buf, lexbuf);
         var locs = [0, pos$0, 0], locs$0 = locs;
         for(;;){
          var ocaml_lex_state$1 = 53;
          for(;;){
           var
            ocaml_lex_state$2 =
              caml_call3
               (Stdlib_Lexing[20],
                ocaml_lex_tables,
                ocaml_lex_state$1,
                lexbuf);
           if(5 >= ocaml_lex_state$2 >>> 0) break;
           caml_call1(lexbuf[1], lexbuf);
           var ocaml_lex_state$1 = ocaml_lex_state$2;
          }
          switch(ocaml_lex_state$2){
            case 0:
             caml_call2(X[1][4], buf, lexbuf);
             found_newline(lexbuf)(0);
             continue;
            case 1:
             caml_call2(X[1][4], buf, lexbuf); continue;
            case 2:
             caml_call2(X[1][4], buf, lexbuf);
             var
              cur = caml_call1(Stdlib_Lexing[13], lexbuf),
              start = [0, cur[1], cur[2], cur[3], cur[4] - 1 | 0];
             scan_string(buf, start, lexbuf);
             continue;
            case 3:
             caml_call2(X[1][4], buf, lexbuf);
             var
              cur$0 = caml_call1(Stdlib_Lexing[13], lexbuf),
              start$0 = [0, cur$0[1], cur$0[2], cur$0[3], cur$0[4] - 2 | 0],
              locs$1 = [0, start$0, locs$0],
              locs$0 = locs$1;
             continue;
            case 4:
             caml_call2(X[1][4], buf, lexbuf);
             if(! locs$0)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
             var locs$2 = locs$0[2];
             if(locs$2){var locs$0 = locs$2; continue;}
             break;
            default:
             if(! locs$0)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
             var
              match = locs$0[1],
              pos_cnum = match[4],
              pos_bol = match[3],
              pos_lnum = match[2],
              msg =
                caml_call3
                 (Stdlib_Printf[4], _e_, pos_lnum, pos_cnum - pos_bol | 0);
             caml_call1(Stdlib[2], msg);
          }
          var tok$0 = caml_call4(X[2][8], pos$0, _l_, buf, lexbuf);
          caml_call1(X[1][5], buf);
          return tok$0;
         }
        case 8:
         return main_failure(lexbuf, cst_illegal_end_of_comment);
        case 9:
         return main_failure(lexbuf, cst_comment_tokens_in_unquoted);
        case 10:
         var
          str = caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5], lexbuf[6]);
         return caml_call1(X[2][4], str);
        default: return X[2][3];
      }
     }
    }
    function scan_string(buf, start, lexbuf){
     for(;;){
      var ocaml_lex_state = 36;
      for(;;){
       var
        ocaml_lex_state$0 =
          caml_call3
           (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
       if(9 >= ocaml_lex_state$0 >>> 0) break;
       caml_call1(lexbuf[1], lexbuf);
       var ocaml_lex_state = ocaml_lex_state$0;
      }
      switch(ocaml_lex_state$0){
        case 0:
         caml_call2(X[1][4], buf, lexbuf); return;
        case 1:
         var len = lexeme_len(lexbuf) - 2 | 0;
         found_newline(lexbuf)(len);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 2:
         var len$0 = lexeme_len(lexbuf) - 3 | 0;
         found_newline(lexbuf)(len$0);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 3:
         var c = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 1 | 0);
         a:
         {
          if(110 <= c){
           if(117 > c)
            switch(c - 110 | 0){
              case 0:
               var _n_ = 10; break a;
              case 4:
               var _n_ = 13; break a;
              case 6:
               var _n_ = 9; break a;
            }
          }
          else if(98 === c){var _n_ = 8; break a;}
          var _n_ = c;
         }
         caml_call2(X[1][2], buf, _n_);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 4:
         var
          c1 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 1 | 0),
          c2 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 2 | 0),
          c3 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 3 | 0),
          v =
            ((100 * (c1 - 48 | 0) | 0) + (10 * (c2 - 48 | 0) | 0) | 0)
            + (c3 - 48 | 0)
            | 0;
         if(255 < v){
          var
           match = caml_call1(Stdlib_Lexing[13], lexbuf),
           pos_cnum = match[4],
           pos_bol = match[3],
           pos_lnum = match[2],
           msg =
             caml_call6
              (Stdlib_Printf[4],
               _b_,
               pos_lnum,
               (pos_cnum - pos_bol | 0) - 3 | 0,
               c1,
               c2,
               c3);
          caml_call1(Stdlib[2], msg);
         }
         var _o_ = caml_call1(Stdlib_Char[1], v);
         caml_call2(X[1][2], buf, _o_);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 5:
         var
          c1$0 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 2 | 0),
          c2$0 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 3 | 0),
          val1 =
            97 <= c1$0
             ? c1$0 - 87 | 0
             : 65 <= c1$0 ? c1$0 - 55 | 0 : c1$0 - 48 | 0,
          val2 =
            97 <= c2$0
             ? c2$0 - 87 | 0
             : 65 <= c2$0 ? c2$0 - 55 | 0 : c2$0 - 48 | 0,
          v$0 = (val1 * 16 | 0) + val2 | 0,
          _p_ = caml_call1(Stdlib_Char[1], v$0);
         caml_call2(X[1][2], buf, _p_);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 6:
         var c$0 = caml_call2(Stdlib_Lexing[18], lexbuf, lexbuf[5] + 1 | 0);
         caml_call2(X[1][2], buf, 92);
         caml_call2(X[1][2], buf, c$0);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 7:
         found_newline(lexbuf)(0);
         caml_call2(X[1][2], buf, lf);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        case 8:
         var ofs = lexbuf[5], len$1 = lexbuf[6] - ofs | 0;
         caml_call4(X[1][3], buf, lexbuf[2], ofs, len$1);
         caml_call2(X[1][4], buf, lexbuf);
         break;
        default:
         var
          msg$0 =
            caml_call3
             (Stdlib_Printf[4], _c_, start[2], start[4] - start[3] | 0);
         return caml_call1(Stdlib[2], msg$0);
      }
     }
    }
    function main(buf){
     if(buf){
      var buf$0 = buf[1];
      caml_call1(Stdlib_Buffer[8], buf$0);
      var buf$1 = caml_call1(X[1][6], buf$0);
     }
     else
      var buf$1 = caml_call1(X[1][1], 64);
     return function(_m_){return _l_(buf$1, _m_);};
    }
    return [0, main];
   }
   var
    create = Stdlib_Buffer[1],
    clear = Stdlib_Buffer[8],
    add_char = Stdlib_Buffer[12],
    add_subbytes = Stdlib_Buffer[19];
   function add_lexeme(param, _k_){return 0;}
   function of_buffer(b){return b;}
   var eof = 2, lparen = 0, rparen = 1, hash_semi = 3;
   function simple_string(x){return [0, x];}
   function quoted_string(param, buf){
    return [0, caml_call1(Stdlib_Buffer[2], buf)];
   }
   function block_comment(pos, main, buf, lexbuf){return caml_call2(main, buf, lexbuf);
   }
   function comment(text, main, buf, lexbuf){return caml_call2(main, buf, lexbuf);
   }
   var
    Vanilla =
      Make
       ([0,
         [0, create, add_char, add_subbytes, add_lexeme, clear, of_buffer],
         [0,
          lparen,
          rparen,
          eof,
          simple_string,
          hash_semi,
          quoted_string,
          comment,
          block_comment]]);
   function create$0(n){
    var _j_ = caml_call1(Stdlib_Buffer[1], n);
    return [0, caml_call1(Stdlib_Buffer[1], n), _j_];
   }
   function of_buffer$0(contents){
    return [0, contents, caml_call1(Stdlib_Buffer[1], 64)];
   }
   function add_char$0(t, ch){return caml_call2(Stdlib_Buffer[12], t[1], ch);}
   function add_subbytes$0(t, str, ofs, len){
    return caml_call4(Stdlib_Buffer[19], t[1], str, ofs, len);
   }
   function add_lexeme$0(t, lexbuf){
    var _i_ = caml_call1(Stdlib_Lexing[8], lexbuf);
    return caml_call2(Stdlib_Buffer[16], t[2], _i_);
   }
   function clear$0(t){
    caml_call1(Stdlib_Buffer[8], t[2]);
    return caml_call1(Stdlib_Buffer[8], t[1]);
   }
   var eof$0 = 2, lparen$0 = 0, rparen$0 = 1, hash_semi$0 = 3;
   function simple_string$0(x){return [0, [0, x, 0]];}
   function quoted_string$0(pos, param){
    var
     lexeme = param[2],
     contents = param[1],
     _h_ = [0, [0, pos, caml_call1(Stdlib_Buffer[2], lexeme)]];
    return [0, [0, caml_call1(Stdlib_Buffer[2], contents), _h_]];
   }
   function block_comment$0(pos, param, _g_, lexbuf){
    var lexeme = _g_[2];
    return [1, [0, caml_call1(Stdlib_Buffer[2], lexeme), [0, pos]]];
   }
   function comment$0(text, param, buf, lexbuf){return [1, [0, text, 0]];}
   var
    With_layout =
      Make
       ([0,
         [0,
          create$0,
          add_char$0,
          add_subbytes$0,
          add_lexeme$0,
          clear$0,
          of_buffer$0],
         [0,
          lparen$0,
          rparen$0,
          eof$0,
          simple_string$0,
          hash_semi$0,
          quoted_string$0,
          comment$0,
          block_comment$0]]),
    main = Vanilla[1],
    main_with_layout = With_layout[1],
    Sexplib_Lexer = [0, main, main_with_layout];
   runtime.caml_register_global(15, Sexplib_Lexer, "Sexplib__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Pre_sexp
//# unitInfo: Requires: Assert_failure, Parsexp, Parsexp__Old_parser_cont_state, Parsexp__Parse_error, Parsexp__Positions, Sexplib0__Sexp, Sexplib0__Sexp_conv, Sexplib__Lexer, Sexplib__Parser, Sexplib__Type, Stdlib, Stdlib__Bigarray, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Format, Stdlib__List, Stdlib__Printf, Stdlib__Random, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = " ",
    cst$7 = ": ",
    cst_Sexplib_Sexp = "Sexplib.Sexp.",
    cst_src_pre_sexp_ml = "src/pre_sexp.ml",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$6,
    cst$3 = cst$6,
    cst$2 = cst$6,
    cst$1 = cst$6,
    cst$0 = cst$6,
    cst = "\n",
    gen_load_sexp_loc = "Sexplib.Sexp.gen_load_sexp",
    unit = [1, 0],
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Parsexp_Old_parser_cont_state = global_data.Parsexp__Old_parser_cont_state,
    Parsexp = global_data.Parsexp,
    Parsexp_Parse_error = global_data.Parsexp__Parse_error,
    Parsexp_Positions = global_data.Parsexp__Positions,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib_Parser = global_data.Sexplib__Parser,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Sexplib_Lexer = global_data.Sexplib__Lexer,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    of_int_style = Sexplib0_Sexp[17],
    of_float_style = Sexplib0_Sexp[16],
    to_string = Sexplib0_Sexp[15],
    to_string_mach = Sexplib0_Sexp[14],
    to_string_hum = Sexplib0_Sexp[13],
    pp = Sexplib0_Sexp[12],
    pp_mach = Sexplib0_Sexp[11],
    pp_hum_indent = Sexplib0_Sexp[10],
    pp_hum = Sexplib0_Sexp[9],
    default_indent = Sexplib0_Sexp[8],
    message = Sexplib0_Sexp[7],
    Of_sexp_error = Sexplib0_Sexp[6],
    Not_found_s = Sexplib0_Sexp[5],
    compare = Sexplib0_Sexp[4],
    equal = Sexplib0_Sexp[3],
    include = Sexplib0_Sexp[18],
    size = include[1],
    buffer = include[2],
    to_buffer = include[3],
    to_buffer_hum = include[4],
    to_buffer_mach = include[5],
    to_buffer_gen = include[6],
    mach_maybe_esc_str = include[7],
    must_escape = include[8],
    esc_str = include[9],
    t_sexp_grammar = Sexplib0_Sexp_conv[59],
    cst_Sexplib_Sexp_subst_found_s =
      "Sexplib.Sexp.subst_found: short list when position requested",
    cst_Sexplib_Sexp_subst_found_a =
      "Sexplib.Sexp.subst_found: atom when position requested",
    _F_ = [0, cst_src_pre_sexp_ml, 875, 13],
    _D_ =
      [0,
       [2, 0, [12, 58, [4, 0, 0, 0, [12, 58, [4, 0, 0, 0, 0]]]]],
       "%s:%d:%d"],
    cst_Annotated_of_bigstring = "Annotated.of_bigstring",
    cst_Annotated_of_string = "Annotated.of_string",
    _B_ =
      [0,
       [2, 0, [11, ": more than one S-expression in file ", [2, 0, 0]]],
       "%s: more than one S-expression in file %s"],
    cst_additional_incomplete_data = "additional incomplete data",
    _C_ =
      [0,
       [2,
        0,
        [11,
         cst$7,
         [2, 0, [11, " in state ", [2, 0, [11, " loading file ", [2, 0, 0]]]]]]],
       "%s: %s in state %s loading file %s"],
    _A_ =
      [0,
       [2, 0, [11, ": EOF in ", [2, 0, [11, " while in state ", [2, 0, 0]]]]],
       "%s: EOF in %s while in state %s"],
    cst_of_bigstring = "of_bigstring",
    cst_of_string = "of_string",
    _x_ =
      [0,
       [11,
        cst_Sexplib_Sexp,
        [2,
         0,
         [11, ": got multiple S-expressions where only one was expected.", 0]]],
       "Sexplib.Sexp.%s: got multiple S-expressions where only one was expected."],
    _y_ =
      [0,
       [11,
        cst_Sexplib_Sexp,
        [2,
         0,
         [11,
          ": S-expression followed by data at position ",
          [4, 0, 0, 0, [11, "...", 0]]]]],
       "Sexplib.Sexp.%s: S-expression followed by data at position %d..."],
    _z_ =
      [0,
       [11,
        cst_Sexplib_Sexp,
        [2,
         0,
         [11,
          ": incomplete S-expression while in state ",
          [2, 0, [11, cst$7, [2, 0, 0]]]]]],
       "Sexplib.Sexp.%s: incomplete S-expression while in state %s: %s"],
    cst_Sexplib_Sexp_input_rev_sex =
      "Sexplib.Sexp.input_rev_sexps: reached EOF while in state ",
    cst_Sexplib_Sexp_parser_contin =
      "Sexplib.Sexp: parser continuation called twice",
    _w_ = [0, 0],
    cst_parse_pos_0 = "parse: pos < 0",
    cst_parse_len_0 = "parse: len < 0",
    cst_parse_pos_len_str_len = "parse: pos + len > str_len",
    _o_ = [0, "buf_pos"],
    _p_ = [0, "global_offset"],
    _q_ = [0, "text_char"],
    _r_ = [0, "text_line"],
    _s_ = [0, "err_msg"],
    _t_ = [0, "Sexplib.Sexp.Parse_error"],
    _u_ = [0, cst_src_pre_sexp_ml, 308, 11],
    cst_Sexplib_Sexp_Parse_pos_cre = "Sexplib.Sexp.Parse_pos.create: ",
    cst_text_line_1 = "text_line < 1",
    cst_text_char_0 = "text_char < 0",
    cst_global_offset_0 = "global_offset < 0",
    cst_buf_pos_0 = "buf_pos < 0",
    _l_ = [0, cst_src_pre_sexp_ml, 246, 6],
    _i_ = [0, "Result"],
    _j_ = [0, "Error"],
    _g_ = [0, cst_src_pre_sexp_ml, 198, 13],
    _c_ = [0, "containing_sexp"],
    _d_ = [0, "invalid_sexp"],
    _e_ = [0, [0, "Of_sexp_error"], 0],
    cst_tmp = "tmp",
    _b_ = [0, 1, [0, 3, [0, 5, [0, 7, 0]]]],
    _a_ = [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
    cst_Sexplib_Pre_sexp_Annot_Con = "Sexplib__Pre_sexp.Annot.Conv_exn",
    _h_ = [0, 0],
    cst_Sexplib_Pre_sexp_Annot_Ann = "Sexplib__Pre_sexp.Annot.Annot_sexp",
    _m_ = [0, 0],
    cst_Sexplib_Pre_sexp_Parse_err = "Sexplib__Pre_sexp.Parse_error",
    _v_ = [0, 0],
    cst_Sexplib_Pre_sexp_Parser_ou =
      "Sexplib__Pre_sexp.Parser_output.Bare_sexp.Found",
    cst_Sexplib_Pre_sexp_Parser_ou$0 =
      "Sexplib__Pre_sexp.Parser_output.Annotated_sexp.Found",
    cst_Sexplib_Pre_sexp_Of_string = "Sexplib__Pre_sexp.Of_string_conv_exn.E",
    _G_ = [0, 0];
   function with_new_buffer(oc, f){
    var buf = caml_call1(buffer, 0);
    caml_call1(f, buf);
    return caml_call2(Stdlib_Buffer[10], oc, buf);
   }
   function output_hum(oc, sexp){
    return with_new_buffer
            (oc,
             function(buf){return caml_call3(to_buffer_hum, buf, 0, sexp);});
   }
   function output_hum_indent(indent, oc, sexp){
    return with_new_buffer
            (oc,
             function(buf){
              return caml_call3(to_buffer_hum, buf, [0, indent], sexp);
             });
   }
   function output_mach(oc, sexp){
    return with_new_buffer
            (oc, function(buf){return caml_call2(to_buffer_mach, buf, sexp);});
   }
   var prng = [0, 0];
   function temp_file_name(prefix, suffix){
    var match = prng[1];
    if(match)
     var v = match[1], rand_state = v;
    else{
     var ret = caml_call1(Stdlib_Random[15][2], 0);
     prng[1] = [0, ret];
     var rand_state = ret;
    }
    var rnd = caml_call1(Stdlib_Random[15][4], rand_state) & 16777215;
    return caml_call4(Stdlib_Printf[4], _a_, prefix, rnd, suffix);
   }
   function open_temp_file(opt, prefix, suffix){
    if(opt) var sth = opt[1], perm = sth; else var perm = 438;
    var counter = 0;
    for(;;){
     var name = temp_file_name(prefix, suffix);
     try{
      var oc = caml_call3(Stdlib[62], _b_, perm, name), _a7_ = [0, name, oc];
      return _a7_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(1000 <= counter) throw caml_maybe_attach_backtrace(e, 0);
      var counter$0 = counter + 1 | 0, counter = counter$0;
     }
    }
   }
   var Tmp_file = [0, prng, temp_file_name, open_temp_file];
   function save_of_output(perm, output_function, file, sexp){
    var
     match = caml_call3(Tmp_file[3], perm, file, cst_tmp),
     oc = match[2],
     tmp_name = match[1];
    try{caml_call2(output_function, oc, sexp); caml_call1(Stdlib[76], oc);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[77], oc);
     try{runtime.caml_sys_remove(tmp_name);}catch(_a6_){}
     throw caml_maybe_attach_backtrace(e, 0);
    }
    return runtime.caml_sys_rename(tmp_name, file);
   }
   function output_sexp_nl(do_output, oc, sexp){
    caml_call2(do_output, oc, sexp);
    return caml_call2(Stdlib[66], oc, cst);
   }
   function save_hum(perm, file, sexp){
    return save_of_output
            (perm,
             function(_a4_, _a5_){
              return output_sexp_nl(output_hum, _a4_, _a5_);
             },
             file,
             sexp);
   }
   function save_mach(perm, file, sexp){
    return save_of_output(perm, output_mach, file, sexp);
   }
   function output_sexps_nl(do_output, oc, sexps){
    function _a2_(_a3_){return output_sexp_nl(do_output, oc, _a3_);}
    return caml_call2(Stdlib_List[17], _a2_, sexps);
   }
   function save_sexps_hum(perm, file, sexps){
    return save_of_output
            (perm,
             function(_a0_, _a1_){
              return output_sexps_nl(output_hum, _a0_, _a1_);
             },
             file,
             sexps);
   }
   function save_sexps_mach(perm, file, sexps){
    return save_of_output
            (perm,
             function(_aY_, _aZ_){
              return output_sexps_nl(output_mach, _aY_, _aZ_);
             },
             file,
             sexps);
   }
   function scan_sexp(buf, lexbuf){
    var _aX_ = caml_call1(Sexplib_Lexer[1], buf);
    return caml_call2(Sexplib_Parser[1], _aX_, lexbuf);
   }
   function scan_sexp_opt(buf, lexbuf){
    var _aW_ = caml_call1(Sexplib_Lexer[1], buf);
    return caml_call2(Sexplib_Parser[2], _aW_, lexbuf);
   }
   function scan_sexps(buf, lexbuf){
    var _aV_ = caml_call1(Sexplib_Lexer[1], buf);
    return caml_call2(Sexplib_Parser[3], _aV_, lexbuf);
   }
   function scan_rev_sexps(buf, lexbuf){
    var _aU_ = caml_call1(Sexplib_Lexer[1], buf);
    return caml_call2(Sexplib_Parser[4], _aU_, lexbuf);
   }
   function get_main_buf(buf){
    if(buf)
     var buf$0 = buf[1], buf$1 = buf$0;
    else
     var buf$1 = caml_call1(Stdlib_Buffer[1], 128);
    return caml_call1(Sexplib_Lexer[1], [0, buf$1]);
   }
   function scan_fold_sexps(buf, f, init, lexbuf){
    var main = get_main_buf(buf), acc = init;
    for(;;){
     var match = caml_call2(Sexplib_Parser[2], main, lexbuf);
     if(! match) return acc;
     var sexp = match[1], acc$0 = caml_call2(f, acc, sexp), acc = acc$0;
    }
   }
   function scan_iter_sexps(buf, f, lexbuf){
    var _aT_ = 0;
    return scan_fold_sexps
            (buf,
             function(param, sexp){return caml_call1(f, sexp);},
             _aT_,
             lexbuf);
   }
   function scan_sexps_conv(buf, f, lexbuf){
    function coll(acc, sexp){return [0, caml_call1(f, sexp), acc];}
    var _aS_ = scan_fold_sexps(buf, coll, 0, lexbuf);
    return caml_call1(Stdlib_List[9], _aS_);
   }
   function sexp_conversion_error_message
   (containing_sexp, location, invalid_sexp, param, exn){
    var _aJ_ = 0;
    if(containing_sexp)
     var x = containing_sexp[1], _aK_ = [0, [1, [0, _c_, [0, x, 0]]], 0];
    else
     var _aK_ = 0;
    var _aL_ = [0, _aK_, _aJ_];
    if(invalid_sexp)
     var x$0 = invalid_sexp[1], _aM_ = [0, [1, [0, _d_, [0, x$0, 0]]], 0];
    else
     var _aM_ = 0;
    var _aN_ = [0, _aM_, _aL_], _aO_ = 0;
    if(exn[1] === Stdlib[7])
     var x$1 = exn[2], _aP_ = [0, x$1];
    else
     var _aP_ = caml_call1(Sexplib0_Sexp_conv[67], exn);
    var _aQ_ = [0, [0, _aP_, _aO_], _aN_];
    if(location)
     var x$2 = location[1], _aR_ = [0, [0, x$2], 0];
    else
     var _aR_ = 0;
    return [1, caml_call1(Stdlib_List[13], [0, _e_, [0, _aR_, _aQ_]])];
   }
   var Conv_exn = [248, cst_Sexplib_Pre_sexp_Annot_Con, caml_fresh_oo_id(0)];
   function _f_(param){
    if(param[1] !== Conv_exn)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    var exn = param[3], location = param[2];
    return sexp_conversion_error_message(0, [0, location], 0, 0, exn);
   }
   caml_call4(Sexplib0_Sexp_conv[70][1], 0, _h_, Conv_exn, _f_);
   function get_sexp(param){
    var sexp = 0 === param[0] ? param[2] : param[3];
    return sexp;
   }
   function get_range(param){var range = param[1]; return range;}
   function sexp_of_conv(sexp_of_a, param){
    if(1025039613 <= param[1]){
     var a = param[2];
     return [1, [0, _i_, [0, caml_call1(sexp_of_a, a), 0]]];
    }
    var
     match = param[2],
     t = match[2],
     exn = match[1],
     _aI_ = [0, get_sexp(t), 0];
    return [1,
            [0,
             _j_,
             [0, [1, [0, caml_call1(Sexplib0_Sexp_conv[67], exn), _aI_]], 0]]];
   }
   var
    Annot_sexp = [248, cst_Sexplib_Pre_sexp_Annot_Ann, caml_fresh_oo_id(0)];
   function find_sexp(annot_sexp, sexp){
    function loop(annot_sexp){
     var sub_sexp = 0 === annot_sexp[0] ? annot_sexp[2] : annot_sexp[3];
     if(sexp === sub_sexp)
      throw caml_maybe_attach_backtrace([0, Annot_sexp, annot_sexp], 1);
     if(0 === annot_sexp[0]) return 0;
     var annots = annot_sexp[2];
     return caml_call2(Stdlib_List[17], loop, annots);
    }
    try{loop(annot_sexp); var _aH_ = 0; return _aH_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Annot_sexp) throw caml_maybe_attach_backtrace(exn, 0);
     var res = exn[2];
     return [0, res];
    }
   }
   var
    Annot =
      [0, Conv_exn, get_sexp, get_range, sexp_of_conv, Annot_sexp, find_sexp];
   function _k_(param){
    if(param[1] !== Of_sexp_error)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    var exn = param[2];
    if(exn[1] === Annot[1]){
     var invalid_sexp = param[3], exn$0 = exn[3], location = exn[2];
     return sexp_conversion_error_message
             (0, [0, location], [0, invalid_sexp], 0, exn$0);
    }
    var invalid_sexp$0 = param[3];
    return sexp_conversion_error_message(0, 0, [0, invalid_sexp$0], 0, exn);
   }
   caml_call4(Sexplib0_Sexp_conv[70][1], 0, _m_, Of_sexp_error, _k_);
   function create(opt, _aF_, _aE_, _aD_, param){
    if(opt) var sth = opt[1], text_line = sth; else var text_line = 1;
    if(_aF_) var sth$0 = _aF_[1], text_char = sth$0; else var text_char = 0;
    if(_aE_) var sth$1 = _aE_[1], buf_pos = sth$1; else var buf_pos = 0;
    if(_aD_)
     var sth$2 = _aD_[1], global_offset = sth$2;
    else
     var global_offset = 0;
    function fail(msg){
     var _aG_ = caml_call2(Stdlib[28], cst_Sexplib_Sexp_Parse_pos_cre, msg);
     return caml_call1(Stdlib[2], _aG_);
    }
    return 1 <= text_line
            ? 0
              <= text_char
              ? 0
                <= global_offset
                ? 0
                  <= buf_pos
                  ? [0, text_line, text_char, global_offset, buf_pos]
                  : fail(cst_buf_pos_0)
                : fail(cst_global_offset_0)
              : fail(cst_text_char_0)
            : fail(cst_text_line_1);
   }
   function with_buf_pos(t, buf_pos){return [0, t[1], t[2], t[3], buf_pos];}
   var
    Parse_pos = [0, create, with_buf_pos],
    Parse_error = [248, cst_Sexplib_Pre_sexp_Parse_err, caml_fresh_oo_id(0)];
   function _n_(param){
    if(param[1] !== Parse_error)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
    var
     pe = param[2],
     ppos = pe[2][2][1],
     _az_ =
       [0,
        [1, [0, _o_, [0, caml_call1(Sexplib0_Sexp_conv[10], ppos[4]), 0]]],
        0],
     _aA_ =
       [0,
        [1, [0, _p_, [0, caml_call1(Sexplib0_Sexp_conv[10], ppos[3]), 0]]],
        _az_],
     _aB_ =
       [0,
        [1, [0, _q_, [0, caml_call1(Sexplib0_Sexp_conv[10], ppos[2]), 0]]],
        _aA_],
     _aC_ =
       [0,
        [1, [0, _r_, [0, caml_call1(Sexplib0_Sexp_conv[10], ppos[1]), 0]]],
        _aB_];
    return [1,
            [0,
             _t_,
             [0, [1, [0, [1, [0, _s_, [0, [0, pe[1]], 0]]], _aC_]], 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[70][1], 0, _v_, Parse_error, _n_);
   function annotate_sexp(sexp, iter){
    if(0 === sexp[0]){
     var
      start_pos = caml_call2(Parsexp_Positions[17][3], iter, 0),
      end_pos = caml_call2(Parsexp_Positions[17][3], iter, 0);
     return [0, [0, start_pos, end_pos], sexp];
    }
    var
     sexps = sexp[1],
     start_pos$0 = caml_call2(Parsexp_Positions[17][3], iter, 0);
    function _ax_(sexp){return annotate_sexp(sexp, iter);}
    var
     _ay_ = caml_call2(Stdlib_List[21], _ax_, sexps),
     annot = caml_call1(Stdlib_List[9], _ay_),
     end_pos$0 = caml_call2(Parsexp_Positions[17][3], iter, 0);
    return [1, [0, start_pos$0, end_pos$0], annot, sexp];
   }
   var Found = [248, cst_Sexplib_Pre_sexp_Parser_ou, caml_fresh_oo_id(0)];
   function raise_found(state, sexp){throw [0, Found, sexp];}
   var Found$0 = [248, cst_Sexplib_Pre_sexp_Parser_ou$0, caml_fresh_oo_id(0)];
   function raise_found$0(state, param){
    var
     positions = param[2],
     sexp = param[1],
     annot =
       annotate_sexp(sexp, caml_call1(Parsexp_Positions[17][1], positions));
    throw [0, Found$0, annot];
   }
   var
    Parser_output =
      [0,
       [0, Parsexp[5], Found, raise_found],
       [0, Parsexp[8], Found$0, raise_found$0]];
   function Make_parser(T){
    function parse_pos_of_state(state, buf_pos){
     var
      _av_ = caml_call1(T[1][1][2], state),
      _aw_ = caml_call1(T[1][1][4], state);
     return [0, caml_call1(T[1][1][3], state), _aw_, _av_, buf_pos];
    }
    function run_feed_loop(state, stack, pos, len, str){
     if(pos < 0) caml_call1(Stdlib[1], cst_parse_pos_0);
     if(len < 0) caml_call1(Stdlib[1], cst_parse_len_0);
     var str_len = caml_call1(T[4], str), pos_len = pos + len | 0;
     if(str_len < pos_len) caml_call1(Stdlib[1], cst_parse_pos_len_str_len);
     var
      max_pos = pos_len - 1 | 0,
      previous_offset = caml_call1(T[1][1][2], state);
     try{var stack$0 = caml_call5(T[5], state, stack, str, max_pos, pos);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === T[2]){
       var
        result = exn[2],
        offset = caml_call1(T[1][1][2], state),
        next_pos = pos + (offset - previous_offset | 0) | 0;
       return [0, result, parse_pos_of_state(state, next_pos)];
      }
      if(exn[1] !== Parsexp_Parse_error[5])
       throw caml_maybe_attach_backtrace(exn, 0);
      var
       err = exn[2],
       pos$0 = pos + (caml_call1(T[1][1][2], state) - previous_offset | 0) | 0,
       msg = caml_call1(Parsexp_Parse_error[3], err);
      if(434889564 > caml_call1(Parsexp_Parse_error[6][1], err))
       return caml_call1(Stdlib[2], msg);
      var
       parse_state = [0, parse_pos_of_state(state, pos$0)],
       parse_error = [0, msg, [0, 925483562, parse_state]];
      throw caml_maybe_attach_backtrace([0, Parse_error, parse_error], 1);
     }
     var used_ref = [0, 0];
     function parse_fun(pos, len, str){
      return used_ref[1]
              ? caml_call1(Stdlib[2], cst_Sexplib_Sexp_parser_contin)
              : (used_ref
                 [1]
                = 1,
                run_feed_loop(state, stack$0, pos, len, str));
     }
     var cont_state = caml_call1(T[1][1][9], state);
     return [1, cont_state, parse_fun];
    }
    function parse(opt, len, str){
     if(opt)
      var sth = opt[1], parse_pos = sth;
     else
      var parse_pos = caml_call5(Parse_pos[1], 0, 0, 0, 0, 0);
     var
      text_line = parse_pos[1],
      text_char = parse_pos[2],
      global_offset = parse_pos[3],
      buf_pos = parse_pos[4],
      pos = [0, text_line, text_char, global_offset],
      state = caml_call3(T[1][1][8], [0, pos], _w_, T[3]),
      stack = T[1][2][1];
     if(len)
      var x = len[1], len$0 = x;
     else
      var len$0 = caml_call1(T[4], str) - buf_pos | 0;
     return run_feed_loop(state, stack, buf_pos, len$0, str);
    }
    return [0, parse];
   }
   var
    include$0 = Parser_output[1],
    Impl = include$0[1],
    Found$1 = include$0[2],
    raise_found$1 = include$0[3],
    length = caml_ml_string_length;
   function unsafe_feed_loop(state, stack, str, max_pos, pos){
    var stack$0 = stack, pos$0 = pos;
    for(;;){
     if(pos$0 > max_pos) return stack$0;
     var
      stack$1 =
        caml_call3
         (Impl[3], state, caml_string_unsafe_get(str, pos$0), stack$0),
      pos$1 = pos$0 + 1 | 0,
      stack$0 = stack$1,
      pos$0 = pos$1;
    }
   }
   var
    String_single_sexp =
      Make_parser([0, Impl, Found$1, raise_found$1, length, unsafe_feed_loop]),
    parse_str = String_single_sexp[1],
    parse = String_single_sexp[1],
    include$1 = Parser_output[2],
    Impl$0 = include$1[1],
    Found$2 = include$1[2],
    raise_found$2 = include$1[3],
    length$0 = caml_ml_string_length;
   function unsafe_feed_loop$0(state, stack, str, max_pos, pos){
    var stack$0 = stack, pos$0 = pos;
    for(;;){
     if(pos$0 > max_pos) return stack$0;
     var
      stack$1 =
        caml_call3
         (Impl$0[3], state, caml_string_unsafe_get(str, pos$0), stack$0),
      pos$1 = pos$0 + 1 | 0,
      stack$0 = stack$1,
      pos$0 = pos$1;
    }
   }
   var
    String_single_annot =
      Make_parser
       ([0, Impl$0, Found$2, raise_found$2, length$0, unsafe_feed_loop$0]),
    parse_str_annot = String_single_annot[1],
    include$2 = Parser_output[1],
    Impl$1 = include$2[1],
    Found$3 = include$2[2],
    raise_found$3 = include$2[3],
    length$1 = caml_ba_dim_1;
   function unsafe_feed_loop$1(state, stack, str, max_pos, pos){
    var stack$0 = stack, pos$0 = pos;
    for(;;){
     if(pos$0 > max_pos) return stack$0;
     var
      _au_ = caml_ba_get_1(str, pos$0),
      stack$1 = caml_call3(Impl$1[3], state, _au_, stack$0),
      pos$1 = pos$0 + 1 | 0,
      stack$0 = stack$1,
      pos$0 = pos$1;
    }
   }
   var
    Bigstring_single_sexp =
      Make_parser
       ([0, Impl$1, Found$3, raise_found$3, length$1, unsafe_feed_loop$1]),
    parse_bigstring = Bigstring_single_sexp[1],
    include$3 = Parser_output[2],
    Impl$2 = include$3[1],
    Found$4 = include$3[2],
    raise_found$4 = include$3[3],
    length$2 = caml_ba_dim_1;
   function unsafe_feed_loop$2(state, stack, str, max_pos, pos){
    var stack$0 = stack, pos$0 = pos;
    for(;;){
     if(pos$0 > max_pos) return stack$0;
     var
      _at_ = caml_ba_get_1(str, pos$0),
      stack$1 = caml_call3(Impl$2[3], state, _at_, stack$0),
      pos$1 = pos$0 + 1 | 0,
      stack$0 = stack$1,
      pos$0 = pos$1;
    }
   }
   var
    Bigstring_single_annot =
      Make_parser
       ([0, Impl$2, Found$4, raise_found$4, length$2, unsafe_feed_loop$2]),
    parse_bigstring_annot = Bigstring_single_annot[1];
   function mk_this_parse(parse_pos, my_parse){
    return function(pos, len, str){
     if(parse_pos){
      var parse_pos$0 = parse_pos[1];
      parse_pos$0[4] = pos;
      var parse_pos$1 = parse_pos$0;
     }
     else
      var parse_pos$1 = caml_call5(Parse_pos[1], 0, 0, [0, pos], 0, 0);
     return caml_call3(my_parse, [0, parse_pos$1], [0, len], str);};
   }
   function feed_end_of_input(this_parse, ws_buf){
    var match = caml_call3(this_parse, 0, 1, ws_buf);
    if(0 === match[0]){var sexp = match[1]; return [0, sexp];}
    var cont_state = match[1];
    return [1, cont_state];
   }
   function gen_input_sexp(my_parse, parse_pos, ic){
    var
     buf = caml_create_bytes(1),
     this_parse$1 = mk_this_parse(parse_pos, my_parse),
     this_parse = this_parse$1;
    for(;;){
     try{var c = caml_call1(Stdlib[82], ic);}
     catch(_as_){
      var _ar_ = caml_wrap_exception(_as_);
      if(_ar_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_ar_, 0);
      var match = feed_end_of_input(this_parse, cst$0);
      if(0 !== match[0]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
      var sexp = match[1];
      return sexp;
     }
     caml_bytes_set(buf, 0, c);
     var
      match$0 =
        caml_call3(this_parse, 0, 1, caml_call1(Stdlib_Bytes[44], buf));
     if(0 === match$0[0]){var sexp$0 = match$0[1]; return sexp$0;}
     var this_parse$0 = match$0[2], this_parse = this_parse$0;
    }
   }
   function input_sexp(parse_pos, ic){
    return gen_input_sexp(parse, parse_pos, ic);
   }
   function gen_input_rev_sexps(my_parse, ws_buf, parse_pos, opt, ic){
    if(opt)
     var sth = opt[1], buf = sth;
    else
     var buf = caml_create_bytes(8192);
    var
     rev_sexps_ref = [0, 0],
     buf_len = caml_ml_bytes_length(buf),
     len$2 = caml_call4(Stdlib[84], ic, buf, 0, buf_len),
     this_parse$2 = mk_this_parse(parse_pos, my_parse),
     this_parse = this_parse$2,
     pos = 0,
     len = len$2;
    for(;;){
     if(0 >= len){
      var match$0 = feed_end_of_input(this_parse, ws_buf);
      if(0 === match$0[0]){
       var sexp$0 = match$0[1];
       return [0, sexp$0, rev_sexps_ref[1]];
      }
      var cont_state = match$0[1];
      if(! cont_state) return rev_sexps_ref[1];
      var
       _ap_ = caml_call1(Parsexp_Old_parser_cont_state[2], cont_state),
       _aq_ = caml_call2(Stdlib[28], cst_Sexplib_Sexp_input_rev_sex, _ap_);
      return caml_call1(Stdlib[2], _aq_);
     }
     var
      match =
        caml_call3(this_parse, pos, len, caml_call1(Stdlib_Bytes[44], buf));
     if(0 === match[0]){
      var parse_pos$0 = match[2], sexp = match[1], buf_pos = parse_pos$0[4];
      rev_sexps_ref[1] = [0, sexp, rev_sexps_ref[1]];
      var
       n_parsed = buf_pos - pos | 0,
       this_parse$0 = mk_this_parse([0, parse_pos$0], my_parse);
      if(n_parsed === len)
       var
        new_len = caml_call4(Stdlib[84], ic, buf, 0, buf_len),
        this_parse = this_parse$0,
        pos = 0,
        len = new_len;
      else
       var
        len$0 = len - n_parsed | 0,
        this_parse = this_parse$0,
        pos = buf_pos,
        len = len$0;
     }
     else
      var
       this_parse$1 = match[2],
       len$1 = caml_call4(Stdlib[84], ic, buf, 0, buf_len),
       this_parse = this_parse$1,
       pos = 0,
       len = len$1;
    }
   }
   function input_rev_sexps(parse_pos, buf, ic){
    return gen_input_rev_sexps(parse, cst$1, parse_pos, buf, ic);
   }
   function input_sexps(parse_pos, buf, ic){
    var _ao_ = input_rev_sexps(parse_pos, buf, ic);
    return caml_call1(Stdlib_List[9], _ao_);
   }
   function of_string_bigstring(loc, my_parse, ws_buf, get_len, get_sub, str){
    var match = caml_call3(my_parse, 0, 0, str);
    if(0 === match[0]){
     var
      parse_pos = match[2],
      sexp = match[1],
      match$0 = caml_call3(my_parse, [0, parse_pos], 0, str);
     if(0 === match$0[0]){
      var _ak_ = caml_call2(Stdlib_Format[138], _x_, loc);
      return caml_call1(Stdlib[2], _ak_);
     }
     if(! match$0[1]) return sexp;
     var _al_ = caml_call3(Stdlib_Format[138], _y_, loc, parse_pos[4]);
     return caml_call1(Stdlib[2], _al_);
    }
    var
     this_parse = match[2],
     match$1 = feed_end_of_input(this_parse, ws_buf);
    if(0 === match$1[0]){var sexp$0 = match$1[1]; return sexp$0;}
    var
     cont_state = match$1[1],
     cont_state_str = caml_call1(Parsexp_Old_parser_cont_state[2], cont_state),
     _am_ = caml_call3(get_sub, str, 0, caml_call1(get_len, str)),
     _an_ = caml_call4(Stdlib_Format[138], _z_, loc, cont_state_str, _am_);
    return caml_call1(Stdlib[2], _an_);
   }
   function of_string(str){
    return of_string_bigstring
            (cst_of_string,
             parse,
             cst$2,
             caml_ml_string_length,
             Stdlib_String[15],
             str);
   }
   function of_string_many(str){return caml_call1(Parsexp[4][10], str);}
   function get_bstr_sub_str(bstr, pos, len){
    var str = caml_create_bytes(len), _ai_ = len - 1 | 0, _ah_ = 0;
    if(_ai_ >= 0){
     var i = _ah_;
     for(;;){
      caml_bytes_set(str, i, caml_ba_get_1(bstr, pos + i | 0));
      var _aj_ = i + 1 | 0;
      if(_ai_ === i) break;
      var i = _aj_;
     }
    }
    return caml_call1(Stdlib_Bytes[44], str);
   }
   var
    bstr_ws_buf =
      caml_call3
       (Stdlib_Bigarray[19][1], Stdlib_Bigarray[13], Stdlib_Bigarray[15], 1);
   runtime.caml_ba_set_1(bstr_ws_buf, 0, 32);
   function of_bigstring(bstr){
    return of_string_bigstring
            (cst_of_bigstring,
             parse_bigstring,
             bstr_ws_buf,
             caml_ba_dim_1,
             get_bstr_sub_str,
             bstr);
   }
   function gen_load_rev_sexps(input_rev_sexps, buf, file){
    var ic = caml_call1(Stdlib[79], file);
    try{
     var sexps = caml_call3(input_rev_sexps, 0, buf, ic);
     caml_call1(Stdlib[93], ic);
     return sexps;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     caml_call1(Stdlib[94], ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_rev_sexps(buf, file){
    return gen_load_rev_sexps(input_rev_sexps, buf, file);
   }
   function load_sexps(buf, file){
    var _ag_ = load_rev_sexps(buf, file);
    return caml_call1(Stdlib_List[9], _ag_);
   }
   function gen_load_sexp(my_parse, opt, _aa_, file){
    if(opt) var sth = opt[1], strict = sth; else var strict = 1;
    if(_aa_)
     var sth$0 = _aa_[1], buf = sth$0;
    else
     var buf = caml_create_bytes(8192);
    var
     buf_len = caml_ml_bytes_length(buf),
     ic = caml_call1(Stdlib[79], file);
    try{
     var this_parse$4 = mk_this_parse(0, my_parse);
     a:
     {
      var this_parse = this_parse$4;
      for(;;){
       var len = caml_call4(Stdlib[84], ic, buf, 0, buf_len);
       if(0 === len){
        var match = feed_end_of_input(this_parse, cst$3);
        if(0 === match[0]){var sexp = match[1], sexp$1 = sexp; break a;}
        var
         cont_state = match[1],
         _ab_ = caml_call1(Parsexp_Old_parser_cont_state[2], cont_state),
         _ac_ =
           caml_call4(Stdlib_Format[138], _A_, gen_load_sexp_loc, file, _ab_),
         sexp$1 = caml_call1(Stdlib[2], _ac_);
        break a;
       }
       var
        match$0 =
          caml_call3(this_parse, 0, len, caml_call1(Stdlib_Bytes[44], buf));
       if(0 === match$0[0]) break;
       var this_parse$3 = match$0[2], this_parse = this_parse$3;
      }
      var sexp$0 = match$0[1], parse_pos = match$0[2], buf_pos = parse_pos[4];
      if(strict){
       var
        this_parse$2 = mk_this_parse([0, parse_pos], my_parse),
        len$2 = len - buf_pos | 0,
        this_parse$0 = this_parse$2,
        pos = buf_pos,
        len$0 = len$2;
       for(;;){
        var
         match$1 =
           caml_call3
            (this_parse$0, pos, len$0, caml_call1(Stdlib_Bytes[44], buf));
        if(0 === match$1[0]){
         var
          _ad_ = caml_call3(Stdlib_Format[138], _B_, gen_load_sexp_loc, file),
          sexp$1 = caml_call1(Stdlib[2], _ad_);
         break;
        }
        var
         this_parse$1 = match$1[2],
         cont_state$0 = match$1[1],
         len$1 = caml_call4(Stdlib[84], ic, buf, 0, buf_len);
        if(0 >= len$1){
         if(0 === cont_state$0){var sexp$1 = sexp$0; break;}
         var
          _ae_ = caml_call1(Parsexp_Old_parser_cont_state[2], cont_state$0),
          _af_ =
            caml_call5
             (Stdlib_Format[138],
              _C_,
              gen_load_sexp_loc,
              cst_additional_incomplete_data,
              _ae_,
              file),
          sexp$1 = caml_call1(Stdlib[2], _af_);
         break;
        }
        var this_parse$0 = this_parse$1, pos = 0, len$0 = len$1;
       }
      }
      else
       var sexp$1 = sexp$0;
     }
     caml_call1(Stdlib[93], ic);
     return sexp$1;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     caml_call1(Stdlib[94], ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function load_sexp(strict, buf, file){
    return gen_load_sexp(parse, strict, buf, file);
   }
   var
    Conv_exn$0 = Annot[1],
    get_sexp$0 = Annot[2],
    get_range$0 = Annot[3],
    sexp_of_conv$0 = Annot[4],
    Annot_sexp$0 = Annot[5],
    find_sexp$0 = Annot[6];
   function input_rev_sexps$0(parse_pos, buf, ic){
    return gen_input_rev_sexps(parse_str_annot, cst$4, parse_pos, buf, ic);
   }
   function input_sexp$0(parse_pos, ic){
    return gen_input_sexp(parse_str_annot, parse_pos, ic);
   }
   function input_sexps$0(parse_pos, buf, ic){
    var _$_ = input_rev_sexps$0(parse_pos, buf, ic);
    return caml_call1(Stdlib_List[9], _$_);
   }
   function of_string$0(str){
    return of_string_bigstring
            (cst_Annotated_of_string,
             parse_str_annot,
             cst$5,
             caml_ml_string_length,
             Stdlib_String[15],
             str);
   }
   function of_bigstring$0(bstr){
    return of_string_bigstring
            (cst_Annotated_of_bigstring,
             parse_bigstring_annot,
             bstr_ws_buf,
             caml_ba_dim_1,
             get_bstr_sub_str,
             bstr);
   }
   function load_rev_sexps$0(buf, file){
    return gen_load_rev_sexps(input_rev_sexps$0, buf, file);
   }
   function load_sexps$0(buf, file){
    var ___ = load_rev_sexps$0(buf, file);
    return caml_call1(Stdlib_List[9], ___);
   }
   function load_sexp$0(strict, buf, file){
    return gen_load_sexp(parse_str_annot, strict, buf, file);
   }
   function conv(f, annot_sexp){
    var sexp = caml_call1(get_sexp$0, annot_sexp);
    try{var _Z_ = [0, 1025039613, caml_call1(f, sexp)]; return _Z_;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     if(e[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var
      bad_sexp = e[3],
      exc = e[2],
      match = caml_call2(find_sexp$0, annot_sexp, bad_sexp);
     if(! match) throw caml_maybe_attach_backtrace(e, 0);
     var bad_annot_sexp = match[1];
     return [0, 106380200, [0, exc, bad_annot_sexp]];
    }
   }
   function get_conv_exn(file, exc, annot_sexp){
    var
     range = caml_call1(get_range$0, annot_sexp),
     match = range[1],
     col = match[2],
     line = match[1],
     loc = caml_call4(Stdlib_Format[138], _D_, file, line, col),
     _Y_ = caml_call1(get_sexp$0, annot_sexp);
    return [0, Of_sexp_error, [0, Annot[1], loc, exc], _Y_];
   }
   var
    Annotated =
      [0,
       Conv_exn$0,
       get_sexp$0,
       get_range$0,
       sexp_of_conv$0,
       Annot_sexp$0,
       find_sexp$0,
       parse_str_annot,
       parse_bigstring_annot,
       input_rev_sexps$0,
       input_sexp$0,
       input_sexps$0,
       of_string$0,
       of_bigstring$0,
       load_rev_sexps$0,
       load_sexps$0,
       load_sexp$0,
       conv,
       get_conv_exn];
   function load_sexp_conv(opt, _T_, file, f){
    if(opt) var sth = opt[1], strict = sth; else var strict = 1;
    if(_T_)
     var sth$0 = _T_[1], buf = sth$0;
    else
     var buf = caml_create_bytes(8192);
    var sexp = load_sexp([0, strict], [0, buf], file);
    try{var _W_ = [0, 1025039613, caml_call1(f, sexp)]; return _W_;}
    catch(_X_){
     var _U_ = caml_wrap_exception(_X_);
     if(_U_[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(_U_, 0);
     var _V_ = caml_call3(Annotated[16], [0, strict], [0, buf], file);
     return caml_call2(Annotated[17], f, _V_);
    }
   }
   function raise_conv_exn(file, param){
    if(1025039613 <= param[1]){var res = param[2]; return res;}
    var match = param[2], annot_sexp = match[2], exc = match[1];
    throw caml_maybe_attach_backtrace
           (caml_call3(Annotated[18], file, exc, annot_sexp), 1);
   }
   function load_sexp_conv_exn(strict, buf, file, f){
    return raise_conv_exn(file, load_sexp_conv(strict, buf, file, f));
   }
   function load_sexps_conv(opt, file, f){
    if(opt)
     var sth = opt[1], buf = sth;
    else
     var buf = caml_create_bytes(8192);
    var rev_sexps = load_rev_sexps([0, buf], file);
    try{
     var
      _R_ = function(sexp){return [0, 1025039613, caml_call1(f, sexp)];},
      _S_ = caml_call2(Stdlib_List[21], _R_, rev_sexps);
     return _S_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     if(e[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var rev_annot_sexps = caml_call2(Annotated[14], [0, buf], file);
     if(! rev_annot_sexps) throw caml_maybe_attach_backtrace(e, 0);
     var
      _Q_ =
        function(annot_sexp){return caml_call2(Annotated[17], f, annot_sexp);};
     return caml_call2(Stdlib_List[21], _Q_, rev_annot_sexps);
    }
   }
   function load_sexps_conv_exn(opt, file, f){
    if(opt)
     var sth = opt[1], buf = sth;
    else
     var buf = caml_create_bytes(8192);
    var rev_sexps = load_rev_sexps([0, buf], file);
    try{var _P_ = caml_call2(Stdlib_List[21], f, rev_sexps); return _P_;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     if(e[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(e, 0);
     var rev_annot_sexps = caml_call2(Annotated[14], [0, buf], file);
     if(! rev_annot_sexps) throw caml_maybe_attach_backtrace(e, 0);
     var
      _O_ =
        function(annot_sexp){
         return raise_conv_exn(file, caml_call2(Annotated[17], f, annot_sexp));
        };
     return caml_call2(Stdlib_List[21], _O_, rev_annot_sexps);
    }
   }
   function gen_of_string_conv(of_string, annot_of_string, str, f){
    var sexp = caml_call1(of_string, str);
    try{var _M_ = [0, 1025039613, caml_call1(f, sexp)]; return _M_;}
    catch(_N_){
     var _K_ = caml_wrap_exception(_N_);
     if(_K_[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(_K_, 0);
     var _L_ = caml_call1(annot_of_string, str);
     return caml_call2(Annotated[17], f, _L_);
    }
   }
   function of_string_conv(str, f){
    return gen_of_string_conv(of_string, Annotated[12], str, f);
   }
   function of_bigstring_conv(bstr, f){
    return gen_of_string_conv(of_bigstring, Annotated[13], bstr, f);
   }
   var E = [248, cst_Sexplib_Pre_sexp_Of_string, caml_fresh_oo_id(0)];
   function _E_(param){
    if(param[1] !== E)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
    var osce = param[2];
    return sexp_conversion_error_message
            ([0, osce[2]], 0, [0, osce[3]], 0, osce[1]);
   }
   caml_call4(Sexplib0_Sexp_conv[70][1], 0, _G_, E, _E_);
   var Of_string_conv_exn = [0, E];
   function gen_of_string_conv_exn(of_string, str, f){
    var sexp = caml_call1(of_string, str);
    try{var _J_ = caml_call1(f, sexp); return _J_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Of_sexp_error) throw caml_maybe_attach_backtrace(exn, 0);
     var sub_sexp = exn[3], exc = exn[2];
     throw caml_maybe_attach_backtrace
            ([0, Of_string_conv_exn[1], [0, exc, sexp, sub_sexp]], 1);
    }
   }
   function of_string_conv_exn(str, f){
    return gen_of_string_conv_exn(of_string, str, f);
   }
   function of_bigstring_conv_exn(bstr, f){
    return gen_of_string_conv_exn(of_bigstring, bstr, f);
   }
   function of_string_many_conv_exn(str, f){
    var sexps = of_string_many(str);
    function _I_(sexp){
     return gen_of_string_conv_exn(function(x){return x;}, sexp, f);
    }
    return caml_call2(Stdlib_List[19], _I_, sexps);
   }
   function is_unit(param){
    if(1 === param[0] && ! param[1]) return 1;
    return 0;
   }
   function search_physical(sexp, contained){
    if(sexp === contained) return 398750242;
    if(0 === sexp[0]) return -358247754;
    var lst = sexp[1], i = 0, param = lst;
    for(;;){
     if(! param) return -358247754;
     var t = param[2], h = param[1], res = search_physical(h, contained);
     if(typeof res === "number" && 398750242 > res){
      var i$0 = i + 1 | 0, i = i$0, param = t;
      continue;
     }
     return [0, 4003188, [0, i, res]];
    }
   }
   function subst_found(sexp, subst, param){
    if(typeof param === "number") return subst;
    var match = param[2], found = match[2], pos = match[1];
    if(0 === sexp[0])
     return caml_call1(Stdlib[2], cst_Sexplib_Sexp_subst_found_a);
    var lst = sexp[1], acc = 0, pos$0 = pos, param$0 = lst;
    for(;;){
     if(! param$0)
      return caml_call1(Stdlib[2], cst_Sexplib_Sexp_subst_found_s);
     var h = param$0[1], t = param$0[2];
     if(0 === pos$0){
      var t$0 = param$0[2], _H_ = [0, subst_found(h, subst, found), t$0];
      return [1, caml_call2(Stdlib_List[12], acc, _H_)];
     }
     var
      pos$1 = pos$0 - 1 | 0,
      acc$0 = [0, h, acc],
      acc = acc$0,
      pos$0 = pos$1,
      param$0 = t;
    }
   }
   var
    Sexplib_Pre_sexp =
      [0,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       size,
       buffer,
       to_buffer,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer_gen,
       mach_maybe_esc_str,
       must_escape,
       esc_str,
       t_sexp_grammar,
       with_new_buffer,
       output_hum,
       output_hum_indent,
       output_mach,
       output_mach,
       Tmp_file,
       save_of_output,
       output_sexp_nl,
       save_hum,
       save_mach,
       save_mach,
       output_sexps_nl,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps_mach,
       scan_sexp,
       scan_sexp_opt,
       scan_sexps,
       scan_rev_sexps,
       get_main_buf,
       scan_fold_sexps,
       scan_iter_sexps,
       scan_sexps_conv,
       sexp_conversion_error_message,
       Annot,
       Parse_pos,
       Parse_error,
       Parser_output,
       Make_parser,
       String_single_sexp,
       parse_str,
       parse,
       String_single_annot,
       parse_str_annot,
       Bigstring_single_sexp,
       parse_bigstring,
       Bigstring_single_annot,
       parse_bigstring_annot,
       mk_this_parse,
       feed_end_of_input,
       gen_input_sexp,
       input_sexp,
       gen_input_rev_sexps,
       input_rev_sexps,
       input_sexps,
       of_string_bigstring,
       of_string,
       of_string_many,
       get_bstr_sub_str,
       bstr_ws_buf,
       of_bigstring,
       gen_load_rev_sexps,
       load_rev_sexps,
       load_sexps,
       gen_load_sexp_loc,
       gen_load_sexp,
       load_sexp,
       Annotated,
       load_sexp_conv,
       raise_conv_exn,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       gen_of_string_conv,
       of_string_conv,
       of_bigstring_conv,
       Of_string_conv_exn,
       gen_of_string_conv_exn,
       of_string_conv_exn,
       of_bigstring_conv_exn,
       of_string_many_conv_exn,
       unit,
       is_unit,
       search_physical,
       subst_found];
   runtime.caml_register_global(80, Sexplib_Pre_sexp, "Sexplib__Pre_sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_with_layout
//# unitInfo: Requires: Assert_failure, Sexplib__Lexer, Sexplib__Pre_sexp, Sexplib__Src_pos, Sexplib__Type_with_layout, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "#;",
    Sexplib_Pre_sexp = global_data.Sexplib__Pre_sexp,
    Sexplib_Src_pos = global_data.Sexplib__Src_pos,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Sexplib_Type_with_layout = global_data.Sexplib__Type_with_layout,
    Sexplib_Lexer = global_data.Sexplib__Lexer,
    _a_ = [0, "src/sexp_with_layout.ml", 109, 4];
   function iter(t, f){return caml_call2(Stdlib_List[17], f, t);}
   function map(t, f){
    var _t_ = caml_call2(Stdlib_List[21], f, t);
    return caml_call1(Stdlib_List[9], _t_);
   }
   var
    List = [0, iter, map],
    Make = Sexplib_Type_with_layout[1],
    Parsed = Sexplib_Type_with_layout[2],
    sexp_of_t = Sexplib_Type_with_layout[3],
    sexp_of_comment = Sexplib_Type_with_layout[4],
    sexp_of_t_or_comment = Sexplib_Type_with_layout[5],
    relativize = Sexplib_Type_with_layout[6],
    sexp_of_pos = Sexplib_Src_pos[1][1],
    main = Sexplib_Lexer[2],
    Lexer = [0, main];
   function return$0(a, putc, st){return a;}
   function bind(m, f, putc, st){
    return caml_call3(f, caml_call2(m, putc, st), putc, st);
   }
   function run(putc, m){
    return caml_call2
            (m, putc, [0, Sexplib_Src_pos[1][2], Sexplib_Src_pos[2][2], 0, 0]);
   }
   function emit_char(putc, st, c){
    var match = st[2], col = match[2], row = match[1];
    caml_call1(putc, c);
    return 10 === c
            ? (st[2] = [0, 1 + row | 0, 1], 0)
            : (st[2] = [0, row, 1 + col | 0], 0);
   }
   function emit_string(putc, st, str){
    var n = caml_ml_string_length(str), _r_ = n - 1 | 0, _q_ = 0;
    if(_r_ >= 0){
     var i = _q_;
     for(;;){
      emit_char(putc, st, caml_string_get(str, i));
      var _s_ = i + 1 | 0;
      if(_r_ === i) break;
      var i = _s_;
     }
    }
    return 0;
   }
   function emit_chars(putc, st, c, n){
    return emit_string(putc, st, caml_call2(Stdlib_String[1], n, c));
   }
   function advance(putc, anchor, st, delta, unescaped_atom, line_comment){
    var
     _l_ = st[1],
     _m_ = caml_call2(Sexplib_Src_pos[2][5], anchor, delta),
     new_pos = caml_call2(Sexplib_Src_pos[2][5], _m_, _l_);
    if(unescaped_atom){
     var _n_ = st[3];
     if(_n_)
      var
       match = _n_[1],
       prev_unescaped = match[2],
       immed_after = match[1],
       _o_ = caml_equal(new_pos, immed_after),
       prev_unescaped$0 = _o_ ? prev_unescaped : _o_,
       prev_unescaped$1 = prev_unescaped$0;
     else
      var prev_unescaped$1 = 0;
     var need_to_leave_room_between_two = prev_unescaped$1;
    }
    else
     var need_to_leave_room_between_two = unescaped_atom;
    var
     need_to_clear_line_comment = new_pos[1] === st[4] ? 1 : 0,
     _p_ = 1 - caml_call2(Sexplib_Src_pos[2][7], new_pos, st[2]),
     need_to_reposition =
       _p_ || need_to_clear_line_comment || need_to_leave_room_between_two;
    if(need_to_reposition)
     var
      new_row = 1 + st[2][1] | 0,
      row_delta = new_row - new_pos[1] | 0,
      new_pos$0 = [0, new_row, new_pos[2]],
      row_delta$0 = row_delta;
    else
     var new_pos$0 = new_pos, row_delta$0 = 0;
    if(st[2][1] < new_pos$0[1]){
     var n = new_pos$0[1] - st[2][1] | 0;
     emit_chars(putc, st, 10, n);
    }
    if(st[2][2] < new_pos$0[2]){
     var n$0 = new_pos$0[2] - st[2][2] | 0;
     emit_chars(putc, st, 32, n$0);
    }
    if(! caml_equal(new_pos$0, st[2]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    if(line_comment) st[4] = st[2][1];
    st[1] = [0, st[1][1] + row_delta$0 | 0, st[1][2]];
    return 0;
   }
   function render_t(putc, anchor, st, t){
    if(0 !== t[0]){
     var end_delta = t[3], tocs = t[2], start_delta = t[1];
     advance(putc, anchor, st, start_delta, 0, 0);
     var child_anchor = caml_call2(Sexplib_Src_pos[2][6], st[2], st[1]);
     emit_char(putc, st, 40);
     var _k_ = function(toc){return render_toc(putc, child_anchor, st, toc);};
     caml_call2(List[1], tocs, _k_);
     advance(putc, anchor, st, end_delta, 0, 0);
     emit_char(putc, st, 41);
     return 0;
    }
    var fmt_text = t[3], text = t[2], delta = t[1];
    a:
    {
     if(fmt_text){
      var text$0 = fmt_text[1];
      if(runtime.caml_string_notequal(text$0, "")){var fmt_text$0 = text$0; break a;}
     }
     var fmt_text$0 = caml_call1(Sexplib_Pre_sexp[22], text);
    }
    var unescaped = 34 !== caml_string_get(fmt_text$0, 0) ? 1 : 0;
    advance(putc, anchor, st, delta, unescaped, 0);
    emit_string(putc, st, fmt_text$0);
    st[3] = [0, [0, st[2], unescaped]];
    return 0;
   }
   function render_toc(putc, anchor, st, param){
    if(0 === param[0]){
     var t = param[1];
     return render_t(putc, anchor, st, t);
    }
    var c = param[1];
    return render_c(putc, anchor, st, c);
   }
   function render_c(putc, anchor, st, param){
    if(0 === param[0]){
     var
      text = param[2],
      delta = param[1],
      _h_ = 0 < caml_ml_string_length(text) ? 1 : 0,
      line_comment = _h_ ? 59 === caml_string_get(text, 0) ? 1 : 0 : _h_;
     advance(putc, anchor, st, delta, 0, line_comment);
     return emit_string(putc, st, text);
    }
    var t = param[3], cs = param[2], delta$0 = param[1];
    advance(putc, anchor, st, delta$0, 0, 0);
    emit_string(putc, st, cst);
    function _i_(_j_){return render_c(putc, anchor, st, _j_);}
    caml_call2(List[1], cs, _i_);
    return render_t(putc, anchor, st, t);
   }
   function render(asexp, putc, st){
    return render_toc(putc, Sexplib_Src_pos[2][2], st, asexp);
   }
   var
    Render =
      [0,
       return$0,
       bind,
       run,
       emit_char,
       emit_string,
       emit_chars,
       advance,
       render_t,
       render_toc,
       render_c,
       render,
       render];
   function forget_t$0(counter, t, k){
    if(0 === t[0]){var x = t[2]; return caml_call1(k, [0, x]);}
    var tocs = t[2];
    function _g_(xs){return caml_call1(k, [1, xs]);}
    if(counter >= 50)
     return caml_trampoline_return(forget_tocs$0, [0, tocs, _g_]);
    var counter$0 = counter + 1 | 0;
    return forget_tocs$0(counter$0, tocs, _g_);
   }
   function forget_tocs$0(counter, tocs, k){
    if(! tocs) return caml_call1(k, 0);
    var tocs$0 = tocs[2], toc = tocs[1];
    function _f_(param){
     if(! param) return forget_tocs(tocs$0, k);
     var x = param[1];
     return forget_tocs
             (tocs$0, function(xs){return caml_call1(k, [0, x, xs]);});
    }
    if(counter >= 50)
     return caml_trampoline_return(forget_toc$0, [0, toc, _f_]);
    var counter$0 = counter + 1 | 0;
    return forget_toc$0(counter$0, toc, _f_);
   }
   function forget_toc$0(counter, toc, k){
    if(0 !== toc[0]) return caml_call1(k, 0);
    var t = toc[1];
    function _e_(x){return caml_call1(k, [0, x]);}
    if(counter >= 50) return caml_trampoline_return(forget_t$0, [0, t, _e_]);
    var counter$0 = counter + 1 | 0;
    return forget_t$0(counter$0, t, _e_);
   }
   function forget_t(t, k){return caml_trampoline(forget_t$0(0, t, k));}
   function forget_tocs(tocs, k){
    return caml_trampoline(forget_tocs$0(0, tocs, k));
   }
   function forget_toc(toc, k){
    return caml_trampoline(forget_toc$0(0, toc, k));
   }
   var Cps = [0, forget_t, forget_toc, forget_tocs];
   function t(x){
    function _d_(y){return y;}
    return caml_call2(Cps[1], x, _d_);
   }
   function t_or_comment(x){
    function _c_(y){return y;}
    return caml_call2(Cps[2], x, _c_);
   }
   function t_or_comments(x){
    function _b_(y){return y;}
    return caml_call2(Cps[3], x, _b_);
   }
   var
    Forget = [0, Cps, t, t_or_comment, t_or_comments],
    Sexplib_Sexp_with_layout =
      [0,
       List,
       Make,
       Parsed,
       sexp_of_t,
       sexp_of_comment,
       sexp_of_t_or_comment,
       relativize,
       sexp_of_pos,
       Lexer,
       Render,
       Forget];
   runtime.caml_register_global
    (10, Sexplib_Sexp_with_layout, "Sexplib__Sexp_with_layout");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp
//# unitInfo: Requires: Parsexp__Old_parser_cont_state, Sexplib__Parser_with_layout, Sexplib__Pre_sexp, Sexplib__Sexp_with_layout
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib_Pre_sexp = global_data.Sexplib__Pre_sexp,
    Sexplib_Sexp_with_layout = global_data.Sexplib__Sexp_with_layout,
    Sexplib_Parser_with_layout = global_data.Sexplib__Parser_with_layout,
    Parsexp_Old_parser_cont_state = global_data.Parsexp__Old_parser_cont_state,
    equal = Sexplib_Pre_sexp[1],
    compare = Sexplib_Pre_sexp[2],
    default_indent = Sexplib_Pre_sexp[6],
    pp_hum = Sexplib_Pre_sexp[7],
    pp_hum_indent = Sexplib_Pre_sexp[8],
    pp_mach = Sexplib_Pre_sexp[9],
    pp = Sexplib_Pre_sexp[10],
    to_string_hum = Sexplib_Pre_sexp[11],
    to_string_mach = Sexplib_Pre_sexp[12],
    to_string = Sexplib_Pre_sexp[13],
    size = Sexplib_Pre_sexp[16],
    to_buffer = Sexplib_Pre_sexp[18],
    to_buffer_hum = Sexplib_Pre_sexp[19],
    to_buffer_mach = Sexplib_Pre_sexp[20],
    to_buffer_gen = Sexplib_Pre_sexp[21],
    t_sexp_grammar = Sexplib_Pre_sexp[25],
    output_hum = Sexplib_Pre_sexp[27],
    output_hum_indent = Sexplib_Pre_sexp[28],
    output_mach = Sexplib_Pre_sexp[29],
    output = Sexplib_Pre_sexp[30],
    save_hum = Sexplib_Pre_sexp[34],
    save_mach = Sexplib_Pre_sexp[35],
    save = Sexplib_Pre_sexp[36],
    save_sexps_hum = Sexplib_Pre_sexp[38],
    save_sexps_mach = Sexplib_Pre_sexp[39],
    save_sexps = Sexplib_Pre_sexp[40],
    scan_sexp = Sexplib_Pre_sexp[41],
    scan_sexp_opt = Sexplib_Pre_sexp[42],
    scan_sexps = Sexplib_Pre_sexp[43],
    scan_rev_sexps = Sexplib_Pre_sexp[44],
    scan_fold_sexps = Sexplib_Pre_sexp[46],
    scan_iter_sexps = Sexplib_Pre_sexp[47],
    scan_sexps_conv = Sexplib_Pre_sexp[48],
    Parse_pos = Sexplib_Pre_sexp[51],
    Parse_error = Sexplib_Pre_sexp[52],
    parse = Sexplib_Pre_sexp[57],
    parse_bigstring = Sexplib_Pre_sexp[61],
    input_sexp = Sexplib_Pre_sexp[67],
    input_rev_sexps = Sexplib_Pre_sexp[69],
    input_sexps = Sexplib_Pre_sexp[70],
    of_string = Sexplib_Pre_sexp[72],
    of_string_many = Sexplib_Pre_sexp[73],
    of_bigstring = Sexplib_Pre_sexp[76],
    load_rev_sexps = Sexplib_Pre_sexp[78],
    load_sexps = Sexplib_Pre_sexp[79],
    load_sexp = Sexplib_Pre_sexp[82],
    Annotated = Sexplib_Pre_sexp[83],
    load_sexp_conv = Sexplib_Pre_sexp[84],
    load_sexp_conv_exn = Sexplib_Pre_sexp[86],
    load_sexps_conv = Sexplib_Pre_sexp[87],
    load_sexps_conv_exn = Sexplib_Pre_sexp[88],
    of_string_conv = Sexplib_Pre_sexp[90],
    of_bigstring_conv = Sexplib_Pre_sexp[91],
    Of_string_conv_exn = Sexplib_Pre_sexp[92],
    of_string_conv_exn = Sexplib_Pre_sexp[94],
    of_bigstring_conv_exn = Sexplib_Pre_sexp[95],
    of_string_many_conv_exn = Sexplib_Pre_sexp[96],
    unit = Sexplib_Pre_sexp[97],
    is_unit = Sexplib_Pre_sexp[98],
    search_physical = Sexplib_Pre_sexp[99],
    subst_found = Sexplib_Pre_sexp[100],
    _a_ = Sexplib_Sexp_with_layout[10],
    _b_ = Sexplib_Sexp_with_layout[11],
    _c_ =
      [0,
       Sexplib_Sexp_with_layout[8],
       Sexplib_Sexp_with_layout[4],
       Sexplib_Sexp_with_layout[5],
       Sexplib_Sexp_with_layout[6],
       [0, _b_[2], _b_[3], _b_[4]],
       [0, _a_[1], _a_[2], _a_[12], _a_[3]],
       [0,
        Sexplib_Parser_with_layout[1],
        Sexplib_Parser_with_layout[2],
        Sexplib_Parser_with_layout[3],
        Sexplib_Parser_with_layout[5],
        Sexplib_Parser_with_layout[4]],
       Sexplib_Sexp_with_layout[9]];
   function _d_(_g_){return _g_;}
   function _e_(_f_){return _f_;}
   var
    Sexplib_Sexp =
      [0,
       compare,
       equal,
       default_indent,
       size,
       scan_sexp,
       scan_sexps,
       scan_rev_sexps,
       scan_sexp_opt,
       scan_iter_sexps,
       scan_fold_sexps,
       scan_sexps_conv,
       Parse_pos,
       [0, Parsexp_Old_parser_cont_state[2]],
       [0,
        Annotated[4],
        Annotated[1],
        Annotated[2],
        Annotated[3],
        Annotated[6],
        Annotated[7],
        Annotated[8],
        Annotated[10],
        Annotated[11],
        Annotated[9],
        Annotated[16],
        Annotated[15],
        Annotated[14],
        Annotated[12],
        Annotated[13],
        Annotated[17],
        Annotated[18]],
       Parse_error,
       parse,
       parse_bigstring,
       input_sexp,
       input_sexps,
       input_rev_sexps,
       load_sexp,
       load_sexps,
       load_rev_sexps,
       load_sexp_conv,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       output_hum,
       output_hum_indent,
       output_mach,
       output,
       save_hum,
       save_mach,
       save,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       Of_string_conv_exn,
       of_string,
       of_string_many,
       of_string_conv,
       of_string_many_conv_exn,
       of_string_conv_exn,
       of_bigstring,
       of_bigstring_conv,
       of_bigstring_conv_exn,
       to_string_hum,
       to_string_mach,
       to_string,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer,
       to_buffer_gen,
       unit,
       is_unit,
       _e_,
       _d_,
       t_sexp_grammar,
       search_physical,
       subst_found,
       _c_];
   runtime.caml_register_global(4, Sexplib_Sexp, "Sexplib__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Sexp_intf = [0];
   runtime.caml_register_global(0, Sexplib_Sexp_intf, "Sexplib__Sexp_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Conv
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib__Sexp, Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    vec_sexp_grammar = [2, [1, 3]],
    mat_sexp_grammar = [2, [0, 2, [0, 2, [1, 3]]]],
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    default_string_of_float = Sexplib0_Sexp_conv[1],
    write_old_option_format = Sexplib0_Sexp_conv[2],
    read_old_option_format = Sexplib0_Sexp_conv[3],
    list_map = Sexplib0_Sexp_conv[4],
    sexp_of_unit = Sexplib0_Sexp_conv[5],
    sexp_of_bool = Sexplib0_Sexp_conv[6],
    sexp_of_string = Sexplib0_Sexp_conv[7],
    sexp_of_bytes = Sexplib0_Sexp_conv[8],
    sexp_of_char = Sexplib0_Sexp_conv[9],
    sexp_of_int = Sexplib0_Sexp_conv[10],
    sexp_of_float = Sexplib0_Sexp_conv[11],
    sexp_of_int32 = Sexplib0_Sexp_conv[12],
    sexp_of_int64 = Sexplib0_Sexp_conv[13],
    sexp_of_nativeint = Sexplib0_Sexp_conv[14],
    sexp_of_ref = Sexplib0_Sexp_conv[15],
    sexp_of_lazy_t = Sexplib0_Sexp_conv[16],
    sexp_of_option = Sexplib0_Sexp_conv[17],
    sexp_of_pair = Sexplib0_Sexp_conv[18],
    sexp_of_triple = Sexplib0_Sexp_conv[19],
    sexp_of_list = Sexplib0_Sexp_conv[20],
    sexp_of_array = Sexplib0_Sexp_conv[21],
    sexp_of_hashtbl = Sexplib0_Sexp_conv[22],
    sexp_of_opaque = Sexplib0_Sexp_conv[23],
    sexp_of_fun = Sexplib0_Sexp_conv[24],
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    record_check_extra_fields = Sexplib0_Sexp_conv[26],
    of_sexp_error = Sexplib0_Sexp_conv[27],
    of_sexp_error_exn = Sexplib0_Sexp_conv[28],
    unit_of_sexp = Sexplib0_Sexp_conv[29],
    bool_of_sexp = Sexplib0_Sexp_conv[30],
    string_of_sexp = Sexplib0_Sexp_conv[31],
    bytes_of_sexp = Sexplib0_Sexp_conv[32],
    char_of_sexp = Sexplib0_Sexp_conv[33],
    int_of_sexp = Sexplib0_Sexp_conv[34],
    float_of_sexp = Sexplib0_Sexp_conv[35],
    int32_of_sexp = Sexplib0_Sexp_conv[36],
    int64_of_sexp = Sexplib0_Sexp_conv[37],
    nativeint_of_sexp = Sexplib0_Sexp_conv[38],
    ref_of_sexp = Sexplib0_Sexp_conv[39],
    lazy_t_of_sexp = Sexplib0_Sexp_conv[40],
    option_of_sexp = Sexplib0_Sexp_conv[41],
    pair_of_sexp = Sexplib0_Sexp_conv[42],
    triple_of_sexp = Sexplib0_Sexp_conv[43],
    list_of_sexp = Sexplib0_Sexp_conv[44],
    array_of_sexp = Sexplib0_Sexp_conv[45],
    hashtbl_of_sexp = Sexplib0_Sexp_conv[46],
    opaque_of_sexp = Sexplib0_Sexp_conv[47],
    fun_of_sexp = Sexplib0_Sexp_conv[48],
    unit_sexp_grammar = Sexplib0_Sexp_conv[49],
    bool_sexp_grammar = Sexplib0_Sexp_conv[50],
    string_sexp_grammar = Sexplib0_Sexp_conv[51],
    bytes_sexp_grammar = Sexplib0_Sexp_conv[52],
    char_sexp_grammar = Sexplib0_Sexp_conv[53],
    int_sexp_grammar = Sexplib0_Sexp_conv[54],
    float_sexp_grammar = Sexplib0_Sexp_conv[55],
    int32_sexp_grammar = Sexplib0_Sexp_conv[56],
    int64_sexp_grammar = Sexplib0_Sexp_conv[57],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv[58],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv[59],
    ref_sexp_grammar = Sexplib0_Sexp_conv[60],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv[61],
    option_sexp_grammar = Sexplib0_Sexp_conv[62],
    list_sexp_grammar = Sexplib0_Sexp_conv[63],
    array_sexp_grammar = Sexplib0_Sexp_conv[64],
    opaque_sexp_grammar = Sexplib0_Sexp_conv[65],
    fun_sexp_grammar = Sexplib0_Sexp_conv[66],
    sexp_of_exn = Sexplib0_Sexp_conv[67],
    printexc_prefer_sexp = Sexplib0_Sexp_conv[68],
    sexp_of_exn_opt = Sexplib0_Sexp_conv[69],
    Exn_converter = Sexplib0_Sexp_conv[70],
    _a_ =
      [0,
       [11, "of_string failed on ", [2, 0, [11, " with ", [2, 0, 0]]]],
       "of_string failed on %s with %s"],
    cst_float_mat_of_sexp_not_enou = "float_mat_of_sexp: not enough data",
    cst_float_mat_of_sexp_list_nee = "float_mat_of_sexp: list needed",
    cst_float_mat_of_sexp_list_too = "float_mat_of_sexp: list too short",
    cst_float_mat_of_sexp_too_much = "float_mat_of_sexp: too much data",
    cst_float_vec_of_sexp_list_nee = "float_vec_of_sexp: list needed",
    cst_bigstring_of_sexp_atom_nee = "bigstring_of_sexp: atom needed";
   function sexp_of_float_vec(vec){
    var lst_ref = [0, 0], _y_ = caml_ba_dim_1(vec);
    if(_y_ >= 1){
     var i = _y_;
     for(;;){
      var _z_ = lst_ref[1];
      lst_ref[1] = [0, caml_call1(sexp_of_float, caml_ba_get_1(vec, i)), _z_];
      var _A_ = i - 1 | 0;
      if(1 === i) break;
      var i = _A_;
     }
    }
    return [1, lst_ref[1]];
   }
   function sexp_of_bigstring(bstr){
    var
     n = caml_ba_dim_1(bstr),
     str = runtime.caml_create_bytes(n),
     _w_ = n - 1 | 0,
     _v_ = 0;
    if(_w_ >= 0){
     var i = _v_;
     for(;;){
      runtime.caml_bytes_set(str, i, caml_ba_get_1(bstr, i));
      var _x_ = i + 1 | 0;
      if(_w_ === i) break;
      var i = _x_;
     }
    }
    return [0, caml_call1(Stdlib_Bytes[44], str)];
   }
   function sexp_of_float32_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_float64_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_vec(vec){return sexp_of_float_vec(vec);}
   function sexp_of_float_mat(mat){
    var
     m = caml_ba_dim_1(mat),
     n = runtime.caml_ba_dim_2(mat),
     lst_ref = [0, 0];
    if(n >= 1){
     var row = n;
     for(;;){
      if(m >= 1){
       var col = m;
       for(;;){
        var _t_ = lst_ref[1];
        lst_ref[1] =
         [0,
          caml_call1(sexp_of_float, runtime.caml_ba_get_2(mat, col, row)),
          _t_];
        var _u_ = col - 1 | 0;
        if(1 === col) break;
        var col = _u_;
       }
      }
      var _s_ = row - 1 | 0;
      if(1 === row) break;
      var row = _s_;
     }
    }
    var _q_ = lst_ref[1], _r_ = [0, caml_call1(sexp_of_int, n), _q_];
    return [1, [0, caml_call1(sexp_of_int, m), _r_]];
   }
   function sexp_of_float32_mat(mat){return sexp_of_float_mat(mat);}
   function sexp_of_float64_mat(mat){return sexp_of_float_mat(mat);}
   function sexp_of_mat(mat){return sexp_of_float_mat(mat);}
   var bigstring_sexp_grammar = 4;
   function bigstring_of_sexp(sexp){
    if(0 !== sexp[0])
     return caml_call2(of_sexp_error, cst_bigstring_of_sexp_atom_nee, sexp);
    var
     str = sexp[1],
     len = runtime.caml_ml_string_length(str),
     bstr =
       caml_call3
        (Stdlib_Bigarray[19][1],
         Stdlib_Bigarray[13],
         Stdlib_Bigarray[15],
         len),
     _o_ = len - 1 | 0,
     _n_ = 0;
    if(_o_ >= 0){
     var i = _n_;
     for(;;){
      caml_ba_set_1(bstr, i, runtime.caml_string_get(str, i));
      var _p_ = i + 1 | 0;
      if(_o_ === i) break;
      var i = _p_;
     }
    }
    return bstr;
   }
   function float_vec_of_sexp(empty_float_vec, create_float_vec, sexp){
    if(0 === sexp[0])
     return caml_call2(of_sexp_error, cst_float_vec_of_sexp_list_nee, sexp);
    var lst = sexp[1];
    if(! lst) return empty_float_vec;
    var
     len = caml_call1(Stdlib_List[1], lst),
     res = caml_call1(create_float_vec, len),
     i = 1,
     param = lst;
    for(;;){
     if(! param) return res;
     var t = param[2], h = param[1];
     caml_ba_set_1(res, i, caml_call1(float_of_sexp, h));
     var i$0 = i + 1 | 0, i = i$0, param = t;
    }
   }
   var
    create_float32_vec =
      caml_call2
       (Stdlib_Bigarray[19][1], Stdlib_Bigarray[1], Stdlib_Bigarray[16]),
    create_float64_vec =
      caml_call2
       (Stdlib_Bigarray[19][1], Stdlib_Bigarray[2], Stdlib_Bigarray[16]),
    empty_float32_vec = caml_call1(create_float32_vec, 0),
    empty_float64_vec = caml_call1(create_float64_vec, 0);
   function float32_vec_of_sexp(_m_){
    return float_vec_of_sexp(empty_float32_vec, create_float32_vec, _m_);
   }
   function float64_vec_of_sexp(_l_){
    return float_vec_of_sexp(empty_float64_vec, create_float64_vec, _l_);
   }
   function vec_of_sexp(_k_){
    return float_vec_of_sexp(empty_float64_vec, create_float64_vec, _k_);
   }
   function check_too_much_data(sexp, data, res){
    return 0 === data
            ? res
            : caml_call2(of_sexp_error, cst_float_mat_of_sexp_too_much, sexp);
   }
   function float_mat_of_sexp(create_float_mat, sexp){
    if(0 === sexp[0])
     return caml_call2(of_sexp_error, cst_float_mat_of_sexp_list_nee, sexp);
    var _j_ = sexp[1];
    if(_j_){
     var match = _j_[2];
     if(match){
      var
       data = match[2],
       sn = match[1],
       sm = _j_[1],
       m = caml_call1(int_of_sexp, sm),
       n = caml_call1(int_of_sexp, sn),
       res = caml_call2(create_float_mat, m, n);
      if(0 !== m && 0 !== n){
       var col = 1, data$0 = data;
       for(;;){
        var
         vec = caml_call2(Stdlib_Bigarray[20][6], res, col),
         row = 1,
         param = data$0;
        for(;;){
         if(! param)
          return caml_call2
                  (of_sexp_error, cst_float_mat_of_sexp_not_enou, sexp);
         var data$1 = param[2], h = param[1];
         caml_ba_set_1(vec, row, caml_call1(float_of_sexp, h));
         if(row === m) break;
         var row$0 = row + 1 | 0, row = row$0, param = data$1;
        }
        if(col === n) return check_too_much_data(sexp, data$1, res);
        var col$0 = col + 1 | 0, col = col$0, data$0 = data$1;
       }
      }
      return check_too_much_data(sexp, data, res);
     }
    }
    return caml_call2(of_sexp_error, cst_float_mat_of_sexp_list_too, sexp);
   }
   var
    create_float32_mat =
      caml_call2
       (Stdlib_Bigarray[20][1], Stdlib_Bigarray[1], Stdlib_Bigarray[16]),
    create_float64_mat =
      caml_call2
       (Stdlib_Bigarray[20][1], Stdlib_Bigarray[2], Stdlib_Bigarray[16]);
   function float32_mat_of_sexp(_i_){
    return float_mat_of_sexp(create_float32_mat, _i_);
   }
   function float64_mat_of_sexp(_h_){
    return float_mat_of_sexp(create_float64_mat, _h_);
   }
   function mat_of_sexp(_g_){
    return float_mat_of_sexp(create_float64_mat, _g_);
   }
   function string_of_of_sexp_of(to_sexp, x){
    var _f_ = caml_call1(to_sexp, x);
    return caml_call1(Sexplib_Sexp[53], _f_);
   }
   function of_string_of_of_sexp(of_sexp, s){
    try{
     var
      sexp = caml_call1(Sexplib_Sexp[43], s),
      _e_ = caml_call1(of_sexp, sexp);
     return _e_;
    }
    catch(e$0){
     var
      e = caml_wrap_exception(e$0),
      _b_ = caml_call1(sexp_of_exn, e),
      _c_ = caml_call2(Sexplib_Sexp[51], 0, _b_),
      _d_ = caml_call3(Stdlib_Printf[4], _a_, s, _c_);
     return caml_call1(Stdlib[2], _d_);
    }
   }
   var
    Sexplib_Conv =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       sexp_of_bigstring,
       sexp_of_float32_vec,
       sexp_of_float64_vec,
       sexp_of_vec,
       sexp_of_float32_mat,
       sexp_of_float64_mat,
       sexp_of_mat,
       string_of_of_sexp_of,
       bigstring_sexp_grammar,
       bigstring_of_sexp,
       vec_sexp_grammar,
       float32_vec_of_sexp,
       vec_sexp_grammar,
       float64_vec_of_sexp,
       vec_sexp_grammar,
       vec_of_sexp,
       mat_sexp_grammar,
       float32_mat_of_sexp,
       mat_sexp_grammar,
       float64_mat_of_sexp,
       mat_sexp_grammar,
       mat_of_sexp,
       of_string_of_of_sexp];
   runtime.caml_register_global(16, Sexplib_Conv, "Sexplib__Conv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Std
//# unitInfo: Requires: Sexplib__Conv, Stdlib__Hashtbl, Stdlib__Lazy
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    create = Stdlib_Hashtbl[1],
    clear = Stdlib_Hashtbl[2],
    reset = Stdlib_Hashtbl[3],
    copy = Stdlib_Hashtbl[4],
    add = Stdlib_Hashtbl[5],
    find = Stdlib_Hashtbl[6],
    find_opt = Stdlib_Hashtbl[7],
    find_all = Stdlib_Hashtbl[8],
    mem = Stdlib_Hashtbl[9],
    remove = Stdlib_Hashtbl[10],
    replace = Stdlib_Hashtbl[11],
    iter = Stdlib_Hashtbl[12],
    filter_map_inplace = Stdlib_Hashtbl[13],
    fold = Stdlib_Hashtbl[14],
    length = Stdlib_Hashtbl[15],
    randomize = Stdlib_Hashtbl[16],
    is_randomized = Stdlib_Hashtbl[17],
    rebuild = Stdlib_Hashtbl[18],
    stats = Stdlib_Hashtbl[19],
    to_seq = Stdlib_Hashtbl[20],
    to_seq_keys = Stdlib_Hashtbl[21],
    to_seq_values = Stdlib_Hashtbl[22],
    add_seq = Stdlib_Hashtbl[23],
    replace_seq = Stdlib_Hashtbl[24],
    of_seq = Stdlib_Hashtbl[25],
    Make = Stdlib_Hashtbl[26],
    MakeSeeded = Stdlib_Hashtbl[27],
    hash = Stdlib_Hashtbl[28],
    seeded_hash = Stdlib_Hashtbl[29],
    hash_param = Stdlib_Hashtbl[30],
    seeded_hash_param = Stdlib_Hashtbl[31],
    sexp_of_t = Sexplib_Conv[22],
    t_of_sexp = Sexplib_Conv[46],
    Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       seeded_hash_param,
       sexp_of_t,
       t_of_sexp],
    Undefined = Stdlib_Lazy[1],
    map = Stdlib_Lazy[2],
    is_val = Stdlib_Lazy[3],
    from_val = Stdlib_Lazy[4],
    map_val = Stdlib_Lazy[5],
    from_fun = Stdlib_Lazy[6],
    force_val = Stdlib_Lazy[7],
    t_of_sexp$0 = Sexplib_Conv[40],
    sexp_of_t$0 = Sexplib_Conv[16],
    t_sexp_grammar = Sexplib_Conv[61],
    Lazy =
      [0,
       Undefined,
       map,
       is_val,
       from_val,
       map_val,
       from_fun,
       force_val,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar],
    sexp_of_unit = Sexplib_Conv[5],
    unit_of_sexp = Sexplib_Conv[29],
    unit_sexp_grammar = Sexplib_Conv[49],
    sexp_of_bool = Sexplib_Conv[6],
    bool_of_sexp = Sexplib_Conv[30],
    bool_sexp_grammar = Sexplib_Conv[50],
    sexp_of_string = Sexplib_Conv[7],
    string_of_sexp = Sexplib_Conv[31],
    string_sexp_grammar = Sexplib_Conv[51],
    sexp_of_char = Sexplib_Conv[9],
    char_of_sexp = Sexplib_Conv[33],
    char_sexp_grammar = Sexplib_Conv[53],
    sexp_of_int = Sexplib_Conv[10],
    int_of_sexp = Sexplib_Conv[34],
    int_sexp_grammar = Sexplib_Conv[54],
    sexp_of_float = Sexplib_Conv[11],
    float_of_sexp = Sexplib_Conv[35],
    float_sexp_grammar = Sexplib_Conv[55],
    sexp_of_int32 = Sexplib_Conv[12],
    int32_of_sexp = Sexplib_Conv[36],
    int32_sexp_grammar = Sexplib_Conv[56],
    sexp_of_int64 = Sexplib_Conv[13],
    int64_of_sexp = Sexplib_Conv[37],
    int64_sexp_grammar = Sexplib_Conv[57],
    sexp_of_nativeint = Sexplib_Conv[14],
    nativeint_of_sexp = Sexplib_Conv[38],
    nativeint_sexp_grammar = Sexplib_Conv[58],
    sexp_of_ref = Sexplib_Conv[15],
    ref_of_sexp = Sexplib_Conv[39],
    ref_sexp_grammar = Sexplib_Conv[60],
    sexp_of_lazy_t = Sexplib_Conv[16],
    lazy_t_of_sexp = Sexplib_Conv[40],
    lazy_t_sexp_grammar = Sexplib_Conv[61],
    sexp_of_option = Sexplib_Conv[17],
    option_of_sexp = Sexplib_Conv[41],
    option_sexp_grammar = Sexplib_Conv[62],
    sexp_of_list = Sexplib_Conv[20],
    list_of_sexp = Sexplib_Conv[44],
    list_sexp_grammar = Sexplib_Conv[63],
    sexp_of_array = Sexplib_Conv[21],
    array_of_sexp = Sexplib_Conv[45],
    array_sexp_grammar = Sexplib_Conv[64],
    sexp_of_exn = Sexplib_Conv[67],
    exn_sexp_grammar = Sexplib_Conv[59],
    Sexplib_Std =
      [0,
       Hashtbl,
       Lazy,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       sexp_of_string,
       string_of_sexp,
       string_sexp_grammar,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       sexp_of_float,
       float_of_sexp,
       float_sexp_grammar,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       sexp_of_exn,
       exn_sexp_grammar];
   runtime.caml_register_global(3, Sexplib_Std, "Sexplib__Std");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_grammar_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Sexplib_Sexp_grammar_intf = [0];
   runtime.caml_register_global
    (0, Sexplib_Sexp_grammar_intf, "Sexplib__Sexp_grammar_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Sexp_grammar
//# unitInfo: Requires: Sexplib0__Sexp_grammar, Sexplib__Sexp_grammar_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    coerce = Sexplib0_Sexp_grammar[1],
    doc_comment_tag = Sexplib0_Sexp_grammar[2];
   function remember_to_update_these_toget(t_of_sexp, t_sexp_grammar){return [0, t_of_sexp, t_sexp_grammar];
   }
   var
    Sexplib_Sexp_grammar =
      [0, coerce, doc_comment_tag, remember_to_update_these_toget];
   runtime.caml_register_global
    (1, Sexplib_Sexp_grammar, "Sexplib__Sexp_grammar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Path
//# unitInfo: Requires: Sexplib__Sexp, Stdlib, Stdlib__Bytes, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Path = "Path.",
    cst_extract_match$1 = "extract_match",
    cst_extract_pos$1 = "extract_pos",
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    cst_EOF_reading_index = "EOF reading index",
    cst_empty_index = "empty index",
    _d_ =
      [0,
       [11, "illegal character in index: ", [0, 0]],
       "illegal character in index: %c"],
    cst_double = "double '.'",
    cst_EOF_after_escape = "EOF after escape",
    _e_ =
      [0,
       [11, "'.' expected; got '", [0, [12, 39, 0]]],
       "'.' expected; got '%c'"],
    cst_path_empty = "path empty",
    cst_Path_parse = "Path.parse: ",
    _c_ =
      [0,
       [11,
        'Path.extract_rec: key "',
        [2, 0, [11, '" not found in: ', [2, 0, 0]]]],
       'Path.extract_rec: key "%s" not found in: %s'],
    cst_extract_rec = "extract_rec",
    cst_extract_match = cst_extract_match$1,
    cst_extract_match$0 = cst_extract_match$1,
    cst_Path_extract_match_unexpec =
      "Path.extract_match: unexpected nested list in: ",
    cst_extract_pos = cst_extract_pos$1,
    cst_extract_pos$0 = cst_extract_pos$1,
    _b_ =
      [0,
       [11,
        cst_Path,
        [2,
         0,
         [11, ": illegal index ", [4, 0, 0, 0, [11, " in: ", [2, 0, 0]]]]]],
       "Path.%s: illegal index %d in: %s"],
    _a_ =
      [0,
       [11, cst_Path, [2, 0, [11, ": illegal atom: ", [2, 0, 0]]]],
       "Path.%s: illegal atom: %s"];
   function illegal_atom(loc, sexp){
    var
     _m_ = caml_call1(Sexplib_Sexp[53], sexp),
     _n_ = caml_call3(Stdlib_Format[138], _a_, loc, _m_);
    return caml_call1(Stdlib[2], _n_);
   }
   function extract_pos_lst(loc, sexp, ix, lst){
    var acc = 0, n = ix, param = lst;
    for(;;){
     if(! param){
      var
       sexp_str = caml_call1(Sexplib_Sexp[53], sexp),
       _l_ = caml_call4(Stdlib_Format[138], _b_, loc, ix, sexp_str);
      return caml_call1(Stdlib[2], _l_);
     }
     var t = param[2], h = param[1];
     if(0 === n){
      var
       subst =
         function(param){
          if(! param) return caml_call2(Stdlib_List[12], acc, t);
          var x = param[1];
          return caml_call2(Stdlib_List[12], acc, [0, x, t]);
         };
      return [0, subst, h];
     }
     var
      n$0 = n - 1 | 0,
      acc$0 = [0, h, acc],
      acc = acc$0,
      n = n$0,
      param = t;
    }
   }
   function extract_pos(n, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_pos, sexp);
    var
     lst = sexp[1],
     match = extract_pos_lst(cst_extract_pos$0, sexp, n, lst),
     el = match[2],
     subst = match[1];
    return [0, function(x){return [1, caml_call1(subst, x)];}, el];
   }
   function extract_match(tag, arg_ix, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_match, sexp);
    var match = sexp[1];
    if(match){
     var sexp$0 = match[1];
     if(0 === sexp$0[0]){
      var args = match[2], str = sexp$0[1];
      if(caml_string_equal(str, tag)){
       var
        match$0 =
          extract_pos_lst(cst_extract_match$0, [1, args], arg_ix, args),
        el = match$0[2],
        subst = match$0[1];
       return [0,
               function(maybe_x){
                return [1, [0, sexp$0, caml_call1(subst, maybe_x)]];
               },
               el];
      }
     }
    }
    var
     sexp_str = caml_call1(Sexplib_Sexp[53], sexp),
     _k_ = caml_call2(Stdlib[28], cst_Path_extract_match_unexpec, sexp_str);
    return caml_call1(Stdlib[2], _k_);
   }
   function extract_rec(key, sexp){
    if(0 === sexp[0]) return illegal_atom(cst_extract_rec, sexp);
    var lst = sexp[1], acc = 0, param = lst;
    for(;;){
     if(! param){
      var
       sexp_str = caml_call1(Sexplib_Sexp[53], sexp),
       _j_ = caml_call3(Stdlib_Format[138], _c_, key, sexp_str);
      return caml_call1(Stdlib[2], _j_);
     }
     var h = param[1];
     if(1 === h[0]){
      var _h_ = h[1];
      if(_h_){
       var sexp$0 = _h_[1];
       if(0 === sexp$0[0]){
        var _i_ = _h_[2];
        if(_i_ && ! _i_[2]){
         var rest = param[2], v = _i_[1], str = sexp$0[1];
         if(caml_string_equal(str, key)){
          var
           subst =
             function(x){
              return [1,
                      caml_call2
                       (Stdlib_List[12],
                        acc,
                        [0, [1, [0, sexp$0, [0, x, 0]]], rest])];
             };
          return [0, subst, v];
         }
        }
       }
      }
     }
     var t = param[2], acc$0 = [0, h, acc], acc = acc$0, param = t;
    }
   }
   function id(x){return x;}
   function subst_option(param, rest){
    var
     el = param[2],
     sup_subst = param[1],
     match = subst_path(el, rest),
     sub_el = match[2],
     sub_subst = match[1];
    function subst(x){
     return caml_call1(sup_subst, [0, caml_call1(sub_subst, x)]);
    }
    return [0, subst, sub_el];
   }
   function subst_path(sexp, param){
    if(! param) return [0, id, sexp];
    var match = param[1];
    switch(match[0]){
      case 0:
       var t = param[2], n = match[1];
       return subst_option(extract_pos(n, sexp), t);
      case 1:
       var t$0 = param[2], arg_ix = match[2], tag = match[1];
       return subst_option(extract_match(tag, arg_ix, sexp), t$0);
      default:
       var
        rest = param[2],
        key = match[1],
        match$0 = extract_rec(key, sexp),
        el = match$0[2],
        rec_subst = match$0[1],
        match$1 = subst_path(el, rest),
        sub_el = match$1[2],
        sub_subst = match$1[1],
        subst =
          function(x){return caml_call1(rec_subst, caml_call1(sub_subst, x));};
       return [0, subst, sub_el];
    }
   }
   function implode(lst){
    var
     len = caml_call1(Stdlib_List[1], lst),
     str = runtime.caml_create_bytes(len),
     ix = 0,
     param = lst;
    for(;;){
     if(! param) return caml_call1(Stdlib_Bytes[44], str);
     var t = param[2], h = param[1];
     runtime.caml_bytes_set(str, ix, h);
     var ix$0 = ix + 1 | 0, ix = ix$0, param = t;
    }
   }
   function fail_parse(msg){
    var _g_ = caml_call2(Stdlib[28], cst_Path_parse, msg);
    return caml_call1(Stdlib[2], _g_);
   }
   function parse(str){
    var len = runtime.caml_ml_string_length(str);
    if(0 === len) return fail_parse(cst_path_empty);
    var acc = 0, dot_ix = 0;
    for(;;){
     var c = caml_string_get(str, dot_ix);
     if(46 !== c) return fail_parse(caml_call2(Stdlib_Format[138], _e_, c));
     var dot_ix1 = dot_ix + 1 | 0;
     if(dot_ix1 === len) return caml_call1(Stdlib_List[9], acc);
     var acc$0 = acc, str_acc = 0, ix = dot_ix1;
     for(;;){
      if(ix === len){
       var _f_ = [0, [2, implode(caml_call1(Stdlib_List[9], str_acc))], 0];
       return caml_call2(Stdlib_List[12], acc$0, _f_);
      }
      var c$0 = caml_string_get(str, ix), switcher = c$0 - 91 | 0;
      if(1 < switcher >>> 0)
       if(-45 === switcher){
        if(0 === str_acc) fail_parse(cst_double);
        var
         path_el = [2, implode(caml_call1(Stdlib_List[9], str_acc))],
         ix$0 = ix + 1 | 0,
         acc$1 = [0, path_el, acc$0],
         acc$0 = acc$1,
         str_acc = 0,
         ix = ix$0;
       }
       else
        var
         ix$1 = ix + 1 | 0,
         str_acc$0 = [0, c$0, str_acc],
         str_acc = str_acc$0,
         ix = ix$1;
      else{
       if(! switcher) break;
       var ix1 = ix + 1 | 0;
       if(ix1 === len) return fail_parse(cst_EOF_after_escape);
       var
        ix$2 = ix + 1 | 0,
        str_acc$1 = [0, caml_string_get(str, ix1), str_acc],
        str_acc = str_acc$1,
        ix = ix$2;
      }
     }
     var ix$6 = ix + 1 | 0;
     a:
     {
      var index_acc = 0, ix$3 = ix$6;
      for(;;){
       if(ix$3 === len) return fail_parse(cst_EOF_reading_index);
       var match = caml_string_get(str, ix$3);
       if(58 <= match) break;
       if(48 > match) break a;
       if(index_acc)
        var
         index_acc$1 = index_acc[1],
         new_index_acc = [0, ((10 * index_acc$1 | 0) + match | 0) - 48 | 0],
         ix$4 = ix$3 + 1 | 0,
         index_acc = new_index_acc,
         ix$3 = ix$4;
       else
        var
         ix$5 = ix$3 + 1 | 0,
         index_acc$2 = [0, match - 48 | 0],
         index_acc = index_acc$2,
         ix$3 = ix$5;
      }
      if(93 === match){
       if(! index_acc) return fail_parse(cst_empty_index);
       var
        index_acc$0 = index_acc[1],
        path_el$0 =
          0 === str_acc
           ? [0, index_acc$0]
           : [1, implode(caml_call1(Stdlib_List[9], str_acc)), index_acc$0],
        dot_ix$0 = ix$3 + 1 | 0;
       if(dot_ix$0 === len)
        return caml_call2(Stdlib_List[12], acc$0, [0, path_el$0, 0]);
       var acc$2 = [0, path_el$0, acc$0], acc = acc$2, dot_ix = dot_ix$0;
       continue;
      }
     }
     return fail_parse(caml_call2(Stdlib_Format[138], _d_, match));
    }
   }
   function get_subst(path, str, sexp){
    if(path)
     var path$0 = path[1], path$1 = path$0;
    else if(str)
     var str$0 = str[1], path$1 = parse(str$0);
    else
     var path$1 = 0;
    return subst_path(sexp, path$1);
   }
   function get(path, str, sexp){return get_subst(path, str, sexp)[2];}
   function replace(path, str, sexp, subst){
    var subst_fun = get_subst(path, str, sexp)[1];
    return caml_call1(subst_fun, subst);
   }
   function replace_no_path(str, sexp, subst){return replace(0, [0, str], sexp, subst);
   }
   var
    Sexplib_Path =
      [0,
       parse,
       get,
       replace,
       replace_no_path,
       subst_path,
       extract_pos,
       extract_match,
       extract_rec];
   runtime.caml_register_global(22, Sexplib_Path, "Sexplib__Path");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Exn_magic
//# unitInfo: Requires: Sexplib__Conv, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Sexplib_Conv = global_data.Sexplib__Conv;
   function register(exc, exc_name){
    function _u_(exc){return [0, exc_name];}
    var _v_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _v_, _u_);
   }
   function register1(make_exc, exc_name, sexp_of_arg1){
    var exc = caml_call1(make_exc, 0);
    function _s_(exc){
     var sexp1 = caml_call1(sexp_of_arg1, exc[2]);
     return [1, [0, [0, exc_name], [0, sexp1, 0]]];
    }
    var _t_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _t_, _s_);
   }
   function register2(make_exc, exc_name, sexp_of_arg1, sexp_of_arg2){
    var exc = caml_call2(make_exc, 0, 0);
    function _q_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]);
     return [1, [0, [0, exc_name], [0, sexp1, [0, sexp2, 0]]]];
    }
    var _r_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _r_, _q_);
   }
   function register3
   (make_exc, exc_name, sexp_of_arg1, sexp_of_arg2, sexp_of_arg3){
    var exc = caml_call3(make_exc, 0, 0, 0);
    function _o_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]);
     return [1, [0, [0, exc_name], [0, sexp1, [0, sexp2, [0, sexp3, 0]]]]];
    }
    var _p_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _p_, _o_);
   }
   function register4
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4){
    var exc = caml_call4(make_exc, 0, 0, 0, 0);
    function _m_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]);
     return [1,
             [0,
              [0, exc_name],
              [0, sexp1, [0, sexp2, [0, sexp3, [0, sexp4, 0]]]]]];
    }
    var _n_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _n_, _m_);
   }
   function register5
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5){
    var exc = caml_call5(make_exc, 0, 0, 0, 0, 0);
    function _k_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]);
     return [1,
             [0,
              [0, exc_name],
              [0, sexp1, [0, sexp2, [0, sexp3, [0, sexp4, [0, sexp5, 0]]]]]]];
    }
    var _l_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _l_, _k_);
   }
   function register6
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6){
    var exc = caml_call6(make_exc, 0, 0, 0, 0, 0, 0);
    function _i_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]),
      sexp6 = caml_call1(sexp_of_arg6, exc[7]);
     return [1,
             [0,
              [0, exc_name],
              [0,
               sexp1,
               [0, sexp2, [0, sexp3, [0, sexp4, [0, sexp5, [0, sexp6, 0]]]]]]]];
    }
    var _j_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _j_, _i_);
   }
   function register7
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7){
    var exc = caml_call7(make_exc, 0, 0, 0, 0, 0, 0, 0);
    function _g_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]),
      sexp6 = caml_call1(sexp_of_arg6, exc[7]),
      sexp7 = caml_call1(sexp_of_arg7, exc[8]);
     return [1,
             [0,
              [0, exc_name],
              [0,
               sexp1,
               [0,
                sexp2,
                [0, sexp3, [0, sexp4, [0, sexp5, [0, sexp6, [0, sexp7, 0]]]]]]]]];
    }
    var _h_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _h_, _g_);
   }
   function register8
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8){
    var exc = caml_call8(make_exc, 0, 0, 0, 0, 0, 0, 0, 0);
    function _e_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]),
      sexp6 = caml_call1(sexp_of_arg6, exc[7]),
      sexp7 = caml_call1(sexp_of_arg7, exc[8]),
      sexp8 = caml_call1(sexp_of_arg8, exc[9]);
     return [1,
             [0,
              [0, exc_name],
              [0,
               sexp1,
               [0,
                sexp2,
                [0,
                 sexp3,
                 [0, sexp4, [0, sexp5, [0, sexp6, [0, sexp7, [0, sexp8, 0]]]]]]]]]];
    }
    var _f_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _f_, _e_);
   }
   function register9
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8,
    sexp_of_arg9){
    var exc = caml_call9(make_exc, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    function _c_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]),
      sexp6 = caml_call1(sexp_of_arg6, exc[7]),
      sexp7 = caml_call1(sexp_of_arg7, exc[8]),
      sexp8 = caml_call1(sexp_of_arg8, exc[9]),
      sexp9 = caml_call1(sexp_of_arg9, exc[10]);
     return [1,
             [0,
              [0, exc_name],
              [0,
               sexp1,
               [0,
                sexp2,
                [0,
                 sexp3,
                 [0,
                  sexp4,
                  [0,
                   sexp5,
                   [0, sexp6, [0, sexp7, [0, sexp8, [0, sexp9, 0]]]]]]]]]]];
    }
    var _d_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _d_, _c_);
   }
   function register10
   (make_exc,
    exc_name,
    sexp_of_arg1,
    sexp_of_arg2,
    sexp_of_arg3,
    sexp_of_arg4,
    sexp_of_arg5,
    sexp_of_arg6,
    sexp_of_arg7,
    sexp_of_arg8,
    sexp_of_arg9,
    sexp_of_arg10){
    var exc = caml_call10(make_exc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    function _a_(exc){
     var
      sexp1 = caml_call1(sexp_of_arg1, exc[2]),
      sexp2 = caml_call1(sexp_of_arg2, exc[3]),
      sexp3 = caml_call1(sexp_of_arg3, exc[4]),
      sexp4 = caml_call1(sexp_of_arg4, exc[5]),
      sexp5 = caml_call1(sexp_of_arg5, exc[6]),
      sexp6 = caml_call1(sexp_of_arg6, exc[7]),
      sexp7 = caml_call1(sexp_of_arg7, exc[8]),
      sexp8 = caml_call1(sexp_of_arg8, exc[9]),
      sexp9 = caml_call1(sexp_of_arg9, exc[10]),
      sexp10 = caml_call1(sexp_of_arg10, exc[11]);
     return [1,
             [0,
              [0, exc_name],
              [0,
               sexp1,
               [0,
                sexp2,
                [0,
                 sexp3,
                 [0,
                  sexp4,
                  [0,
                   sexp5,
                   [0,
                    sexp6,
                    [0, sexp7, [0, sexp8, [0, sexp9, [0, sexp10, 0]]]]]]]]]]]];
    }
    var _b_ = caml_call1(Stdlib_Obj[23][1], exc);
    return caml_call4(Sexplib_Conv[70][1], 0, 0, _b_, _a_);
   }
   var
    Sexplib_Exn_magic =
      [0,
       register,
       register1,
       register2,
       register3,
       register4,
       register5,
       register6,
       register7,
       register8,
       register9,
       register10];
   runtime.caml_register_global(2, Sexplib_Exn_magic, "Sexplib__Exn_magic");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Sexplib__Conv_error
//# unitInfo: Requires: Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Of_sexp_error = Sexplib0_Sexp_conv_error[1],
    tuple_of_size_n_expected = Sexplib0_Sexp_conv_error[2],
    stag_no_args = Sexplib0_Sexp_conv_error[3],
    stag_incorrect_n_args = Sexplib0_Sexp_conv_error[4],
    stag_takes_args = Sexplib0_Sexp_conv_error[5],
    nested_list_invalid_sum = Sexplib0_Sexp_conv_error[6],
    empty_list_invalid_sum = Sexplib0_Sexp_conv_error[7],
    unexpected_stag = Sexplib0_Sexp_conv_error[8],
    record_sexp_bool_with_payload = Sexplib0_Sexp_conv_error[9],
    record_only_pairs_expected = Sexplib0_Sexp_conv_error[10],
    record_superfluous_fields = Sexplib0_Sexp_conv_error[11],
    record_duplicate_fields = Sexplib0_Sexp_conv_error[12],
    record_extra_fields = Sexplib0_Sexp_conv_error[13],
    record_get_undefined_loop = Sexplib0_Sexp_conv_error[14],
    record_undefined_elements = Sexplib0_Sexp_conv_error[15],
    record_list_instead_atom = Sexplib0_Sexp_conv_error[16],
    record_poly_field_value = Sexplib0_Sexp_conv_error[17],
    No_variant_match = Sexplib0_Sexp_conv_error[18],
    no_variant_match = Sexplib0_Sexp_conv_error[19],
    no_matching_variant_found = Sexplib0_Sexp_conv_error[20],
    ptag_no_args = Sexplib0_Sexp_conv_error[21],
    ptag_incorrect_n_args = Sexplib0_Sexp_conv_error[22],
    ptag_takes_args = Sexplib0_Sexp_conv_error[23],
    nested_list_invalid_poly_var = Sexplib0_Sexp_conv_error[24],
    empty_list_invalid_poly_var = Sexplib0_Sexp_conv_error[25],
    empty_type = Sexplib0_Sexp_conv_error[26],
    Sexplib_Conv_error =
      [0,
       Of_sexp_error,
       tuple_of_size_n_expected,
       stag_no_args,
       stag_incorrect_n_args,
       stag_takes_args,
       nested_list_invalid_sum,
       empty_list_invalid_sum,
       unexpected_stag,
       record_sexp_bool_with_payload,
       record_only_pairs_expected,
       record_superfluous_fields,
       record_duplicate_fields,
       record_extra_fields,
       record_get_undefined_loop,
       record_undefined_elements,
       record_list_instead_atom,
       record_poly_field_value,
       No_variant_match,
       no_variant_match,
       no_matching_variant_found,
       ptag_no_args,
       ptag_incorrect_n_args,
       ptag_takes_args,
       nested_list_invalid_poly_var,
       empty_list_invalid_poly_var,
       empty_type];
   runtime.caml_register_global(1, Sexplib_Conv_error, "Sexplib__Conv_error");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
