// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_js__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Async_js = [0];
   runtime.caml_register_global(0, Async_js, "Async_js__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js__Debug
//# unitInfo: Requires: Assert_failure, Core, Core__Array, Core__List, Core__Set, Core__Sexp, Core__String, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_0c01ba057ff4b2be6bc7c9d261$2 = "0c01ba057ff4b2be6bc7c9d261a1daab",
    cst_Async_js_Debug$0 = "Async_js__Debug",
    cst_async_js$0 = "async_js",
    cst_src_debug_ml$17 = "src/debug.ml",
    caml_js_from_array = runtime.caml_js_from_array,
    caml_js_object = runtime.caml_js_object,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_String = global_data.Core__String,
    Core_Array = global_data.Core__Array,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Sexp = global_data.Core__Sexp;
   global_data.Assert_failure;
   global_data.Sexplib0__Sexp_conv_error;
   global_data.Sexplib0__Sexp_conv;
   var
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js_Debug$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js$0);
   caml_call1(Expect_test_collector[5][1], cst_src_debug_ml$17);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js$0, cst);
   var
    _A_ = [0, [12, 102, [4, 0, 0, 0, 0]], "f%d"],
    _B_ = [0, [4, 0, 0, 0, 0], "%d"],
    cst_src_debug_ml$12 = cst_src_debug_ml$17,
    cst_A_B_A_C = " ((A B) (A C)) ",
    cst_src_debug_ml$7 = cst_src_debug_ml$17,
    _c_ = [0, "field2"],
    _d_ = [0, "field1"],
    _e_ = [0, "Bar"],
    _f_ = [0, "Foo"],
    _b_ = [0, "some_name"],
    cst_src_debug_ml = cst_src_debug_ml$17,
    _g_ = [0, [0, "debug"], [0, "other string"]],
    cst_src_debug_ml$0 = cst_src_debug_ml$17,
    cst_src_debug_ml$1 = cst_src_debug_ml$17,
    cst_src_debug_ml$2 = cst_src_debug_ml$17,
    _i_ = [1, ' "Foo" '],
    _j_ = [0, cst$1],
    cst_src_debug_ml$3 = cst_src_debug_ml$17,
    cst_src_debug_ml$4 = cst_src_debug_ml$17,
    _m_ =
      [1,
       ' {"Bar":null,"field1":{"some_name":"debug"},"field2":["other string"]} '],
    _n_ = [0, cst$1],
    cst_src_debug_ml$5 = cst_src_debug_ml$17,
    cst_src_debug_ml$6 = cst_src_debug_ml$17,
    cst_0c01ba057ff4b2be6bc7c9d261 = cst_0c01ba057ff4b2be6bc7c9d261$2,
    cst_src_debug_ml$8 = cst_src_debug_ml$17,
    cst_src_debug_ml$9 = cst_src_debug_ml$17,
    _t_ = [1, ' [{"A":"B"},{"A":"C"}] '],
    _u_ = [0, cst$1],
    _w_ = [0, "duplicate keys are displayed correctly"],
    cst_src_debug_ml$10 = cst_src_debug_ml$17,
    cst_src_debug_ml$11 = cst_src_debug_ml$17,
    cst_0c01ba057ff4b2be6bc7c9d261$0 = cst_0c01ba057ff4b2be6bc7c9d261$2,
    cst_src_debug_ml$13 = cst_src_debug_ml$17,
    cst_src_debug_ml$14 = cst_src_debug_ml$17,
    _D_ = [1, " 999 "],
    _E_ = [0, cst$1],
    _G_ = [0, "no stack overflow"],
    cst_src_debug_ml$15 = cst_src_debug_ml$17,
    cst_src_debug_ml$16 = cst_src_debug_ml$17,
    cst_0c01ba057ff4b2be6bc7c9d261$1 = cst_0c01ba057ff4b2be6bc7c9d261$2,
    cst_async_js = cst_async_js$0,
    cst_Async_js_Debug = cst_Async_js_Debug$0;
   function is_valid_field_name(seen, name){
    if
     (caml_call2(Core_String[126], name, cst$0)
      || ! (9 < runtime.caml_string_get(name, 0) - 48 >>> 0))
     var _ab_ = 0;
    else
     var
      _aa_ =
        function(param){
         a:
         {
          if(91 <= param){
           if(97 <= param){
            if(123 > param) break a;
           }
           else if(95 === param) break a;
          }
          else
           if(58 <= param){
            if(65 <= param) break a;
           }
           else if(48 <= param) break a;
          return 0;
         }
         return 1;
        },
      _ab_ = caml_call2(Core_String[11], name, _aa_);
    var _ac_ = _ab_ ? 1 - caml_call2(Core_Set[10], seen, name) : _ab_;
    return _ac_;
   }
   function any_of_sexp(param){
    if(0 === param[0]){var s = param[1]; return caml_jsstring_of_string(s);}
    var list$0 = param[1];
    if(list$0){
     var _X_ = list$0[1];
     if(0 === _X_[0]){
      var _Y_ = list$0[2];
      if(_Y_ && ! _Y_[2]){
       var v$0 = _Y_[1], name$1 = _X_[1];
       return caml_js_object([0, [0, name$1, any_of_sexp(v$0)]]);
      }
     }
    }
    var
     seen$2 = Core_String[141][54],
     seen = seen$2,
     rev_acc = 0,
     list = list$0;
    for(;;){
     if(list){
      var match = list[1];
      if(0 === match[0]){
       var rest = list[2], name = match[1];
       if(is_valid_field_name(seen, name)){
        var
         rev_acc$0 = [0, [0, name, 0], rev_acc],
         seen$0 = caml_call2(Core_Set[11], seen, name),
         seen = seen$0,
         rev_acc = rev_acc$0,
         list = rest;
        continue;
       }
      }
      else{
       var _U_ = match[1];
       if(_U_){
        var _V_ = _U_[1];
        if(0 === _V_[0]){
         var _W_ = _U_[2];
         if(_W_ && ! _W_[2]){
          var rest$0 = list[2], v = _W_[1], name$0 = _V_[1];
          if(is_valid_field_name(seen, name$0)){
           var
            rev_acc$1 = [0, [0, name$0, [0, v]], rev_acc],
            seen$1 = caml_call2(Core_Set[11], seen, name$0),
            seen = seen$1,
            rev_acc = rev_acc$1,
            list = rest$0;
           continue;
          }
         }
        }
       }
      }
      var match$0 = 0;
     }
     else
      var match$0 = [0, caml_call1(Core_List[34], rev_acc)];
     if(! match$0){
      var _$_ = caml_call2(Core_List[72], list$0, any_of_sexp);
      return caml_js_from_array(caml_call1(Core_Array[52], _$_));
     }
     var l = match$0[1];
     if(! l) return caml_js_from_array([0]);
     var
      _Z_ =
        function(param){
         var match = param[2], name = param[1];
         if(! match) return [0, name, Js_of_ocaml_Js[1]];
         var v = match[1];
         return [0, name, any_of_sexp(v)];
        },
      ___ = caml_call2(Core_List[72], l, _Z_);
     return caml_js_object(caml_call1(Core_Array[52], ___));
    }
   }
   function log_s(sexp){
    var _T_ = any_of_sexp(sexp);
    return Js_of_ocaml_Firebug[1].log(_T_);
   }
   function log_s_as_string(sexp){
    var _S_ = caml_jsstring_of_string(caml_call2(Core_Sexp[81], 0, sexp));
    return Js_of_ocaml_Firebug[1].log(_S_);
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config);
   function _a_(param){
    function sexp_of_t(param){
     if(! param) return _f_;
     var
      field2_043 = param[2],
      field1_041 = param[1],
      arg_044 = caml_call2(Core[454], Core[471], field2_043),
      bnds_040 = [0, [1, [0, _c_, [0, arg_044, 0]]], 0],
      some_name_017 = field1_041[1],
      arg_018 = caml_call1(Core[471], some_name_017),
      bnds_016 = [0, [1, [0, _b_, [0, arg_018, 0]]], 0],
      arg_042 = [1, bnds_016],
      bnds_040$0 = [0, [1, [0, _d_, [0, arg_042, 0]]], bnds_040];
     return [1, [0, _e_, bnds_040$0]];
    }
    function to_string(any){
     return caml_string_of_jsstring(Js_of_ocaml_Js[38].stringify(any));
    }
    var _O_ = to_string(any_of_sexp(sexp_of_t(0)));
    caml_call1(Core[32], _O_);
    var
     _P_ =
       [0,
        caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml),
        68,
        2051,
        2055,
        2061];
    caml_call1(Expect_test_collector$0[1], _P_);
    var _Q_ = to_string(any_of_sexp(sexp_of_t(_g_)));
    caml_call1(Core[32], _Q_);
    var
     _R_ =
       [0,
        caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$0),
        74,
        2238,
        2242,
        2248];
    return caml_call1(Expect_test_collector$0[1], _R_);
   }
   var
    _h_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$1),
       68,
       2051,
       2062,
       2073],
    _k_ =
      [0,
       [0,
        _j_,
        _i_,
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$2),
         68,
         2051,
         2055,
         2061],
        _h_],
       0],
    _l_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$3),
       74,
       2238,
       2249,
       2324],
    _o_ =
      [0,
       [0,
        _n_,
        _m_,
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$4),
         74,
         2238,
         2242,
         2248],
        _l_],
       _k_],
    _p_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$6),
       50,
       1611,
       1611,
       2325],
    _q_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_0c01ba057ff4b2be6bc7c9d261);
   caml_call9
    (Expect_test_collector$0[3],
     _q_,
     _p_,
     cst_src_debug_ml$5,
     0,
     0,
     _o_,
     0,
     Inline_test_config,
     _a_);
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config);
   function _r_(param){
    var
     sexp_with_duplicate_keys = caml_call1(Core_Sexp[73], cst_A_B_A_C),
     any = any_of_sexp(sexp_with_duplicate_keys),
     _M_ = caml_string_of_jsstring(Js_of_ocaml_Js[38].stringify(any));
    caml_call1(Core[32], _M_);
    var
     _N_ =
       [0,
        caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$7),
        83,
        2654,
        2658,
        2664];
    return caml_call1(Expect_test_collector$1[1], _N_);
   }
   var
    _s_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$8),
       83,
       2654,
       2665,
       2692],
    _v_ =
      [0,
       [0,
        _u_,
        _t_,
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$9),
         83,
         2654,
         2658,
         2664],
        _s_],
       0],
    _x_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$11),
       77,
       2330,
       2330,
       2693],
    _y_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_0c01ba057ff4b2be6bc7c9d261$0);
   caml_call9
    (Expect_test_collector$1[3],
     _y_,
     _x_,
     cst_src_debug_ml$10,
     _w_,
     0,
     _v_,
     0,
     Inline_test_config,
     _r_);
   var
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config);
   function _z_(param){
    function _J_(i){return [0, caml_call2(Core[257], _A_, i), i];}
    var x_049 = caml_call2(Core_Array[40], 10000, _J_);
    function _K_(param){
     var
      arg1_046 = param[2],
      arg0_045 = param[1],
      res0_047 = caml_call1(Core[471], arg0_045),
      res1_048 = caml_call1(Core[356], arg1_046);
     return [1, [0, res0_047, [0, res1_048, 0]]];
    }
    var sexp = caml_call2(Core[288], _K_, x_049), t8 = any_of_sexp(sexp);
    caml_call2(Core[250], _B_, t8.f999);
    var
     _L_ =
       [0,
        caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$12),
        91,
        2923,
        2927,
        2933];
    return caml_call1(Expect_test_collector$2[1], _L_);
   }
   var
    _C_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$13),
       91,
       2923,
       2934,
       2943],
    _F_ =
      [0,
       [0,
        _E_,
        _D_,
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$14),
         91,
         2923,
         2927,
         2933],
        _C_],
       0],
    _H_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_debug_ml$16),
       86,
       2698,
       2698,
       2944],
    _I_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_0c01ba057ff4b2be6bc7c9d261$1);
   caml_call9
    (Expect_test_collector$2[3],
     _I_,
     _H_,
     cst_src_debug_ml$15,
     _G_,
     0,
     _F_,
     0,
     Inline_test_config,
     _z_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js_Debug);
   var Async_js_Debug = [0, log_s, log_s_as_string, any_of_sexp];
   runtime.caml_register_global(89, Async_js_Debug, cst_Async_js_Debug$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js__Rpc
//# unitInfo: Requires: Assert_failure, Async_js__Debug, Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Pipe, Async_rpc_kernel__Pipe_transport, Async_rpc_kernel__Rpc, Async_rpc_kernel__Transport, Core, Core__Error, Core__Info, Core__List, Core__Or_error, Core__String, Expect_test_collector, Inline_test_config, Js_of_ocaml__Dom, Js_of_ocaml__Js, Js_of_ocaml__Typed_array, Js_of_ocaml__Url, Js_of_ocaml__WebSockets, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__List, Uri, Uri_sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_js_Rpc$0 = "Async_js__Rpc",
    cst_async_js$0 = "async_js",
    cst_https$1 = "https:",
    cst_src_rpc_ml$0 = "src/rpc.ml",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = " (",
    cst = "",
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel = global_data.Async_kernel,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Async_rpc_kernel_Pipe_transpor =
      global_data.Async_rpc_kernel__Pipe_transport,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Info = global_data.Core__Info,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Core_String = global_data.Core__String,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Js_of_ocaml_Typed_array = global_data.Js_of_ocaml__Typed_array,
    Async_js_Debug = global_data.Async_js__Debug,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Js_of_ocaml_WebSockets = global_data.Js_of_ocaml__WebSockets,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Assert_failure = global_data.Assert_failure,
    Core_List = global_data.Core__List;
   global_data.Sexplib0__Sexp_conv_error;
   var
    Stdlib_List = global_data.Stdlib__List,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Uri = global_data.Uri,
    Uri_sexp = global_data.Uri_sexp,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js_Rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js$0);
   caml_call1(Expect_test_collector[5][1], cst_src_rpc_ml$0);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js$0, cst);
   var
    to_string = Uri[8],
    make = Uri[11],
    sexp_of_t = Uri_sexp[4],
    compare_close_event_code = Core[352],
    sexp_of_close_event_code = Core[356],
    _y_ = [0, "uri"],
    _z_ = [0, "description"],
    cst_websocket = "websocket",
    cst_https = cst_https$1,
    cst_wss = "wss",
    cst_ws = "ws",
    cst_https$0 = cst_https$1,
    cst_RPC_connection_closed_by_c = "RPC connection closed by client",
    cst_BUG_onopen_called_but_read =
      "BUG: onopen called but readyState is CONNECTING",
    cst_websocket_send_buffer = "websocket##send_buffer",
    cst_websocket_encountered_unex = "websocket encountered unexpected error",
    _x_ = [0, 0],
    cst_closed = "closed",
    cst_connection_failed = "connection failed",
    cst_WebSocket_s_sexp_Close_cod = "WebSocket %s (%{sexp:Close_code.t})",
    _v_ = [12, 41, 0],
    _w_ = [0, 0],
    cst_WebSocket = "WebSocket ",
    cst_WebSocket_failed_immediate =
      "WebSocket failed immediately (illegal URI?)",
    cst_close_reason_was_too_long_ =
      "close-reason-was-too-long-or-contains-invalid-utf8",
    _u_ = [0, cst_src_rpc_ml$0, 100, 33],
    _c_ = [0, "Normal_closure"],
    _d_ = [0, "Going_away"],
    _e_ = [0, "Protocol_error"],
    _f_ = [0, "Unsupported_data"],
    _g_ = [0, "No_status_Received"],
    _h_ = [0, "Abnormal_closure"],
    _i_ = [0, "Invalid_frame_payload_data"],
    _j_ = [0, "Policy_violation"],
    _k_ = [0, "Message_too_big"],
    _l_ = [0, "Missing_extension"],
    _m_ = [0, "Internal_error"],
    _n_ = [0, "Service_restart"],
    _o_ = [0, "Try_again_later"],
    _p_ = [0, "Bad_gateway"],
    _q_ = [0, "TLS_handshake"],
    _r_ = [0, "Unknown_close_event_code"],
    _s_ = [0, "Invalid_close_event_code"],
    cst_src_rpc_ml = cst_src_rpc_ml$0,
    cst_to_int_of_int_round_trip = "to_int -> of_int round-trip",
    cst_async_js = cst_async_js$0,
    cst_Async_js_Rpc = cst_Async_js_Rpc$0,
    all_of_close_event_code = 0;
   function compare(a_004, b_005){
    if(caml_call2(Ppx_compare_lib[1], a_004, b_005)) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  if(typeof a_004 !== "number"){
                   if(0 === a_004[0]){
                    var a_006 = a_004[1];
                    if(typeof b_005 !== "number"){
                     if(0 !== b_005[0]) return -1;
                     var b_007 = b_005[1];
                     return caml_call2(compare_close_event_code, a_006, b_007);
                    }
                    switch(b_005){
                      case 0:
                       break a;
                      case 1:
                       break b;
                      case 2:
                       break c;
                      case 3:
                       break d;
                      case 4:
                       break e;
                      case 5:
                       break f;
                      case 6:
                       break g;
                      case 7:
                       break h;
                      case 8:
                       break i;
                      case 9:
                       break j;
                      case 10:
                       break k;
                      case 11:
                       break l;
                      case 12:
                       break m;
                      case 13:
                       break n;
                    }
                   }
                   else{
                    var a_008 = a_004[1];
                    if(typeof b_005 !== "number"){
                     if(0 === b_005[0]) return 1;
                     var b_009 = b_005[1];
                     return caml_call2(compare_close_event_code, a_008, b_009);
                    }
                    switch(b_005){
                      case 0:
                       break a;
                      case 1:
                       break b;
                      case 2:
                       break c;
                      case 3:
                       break d;
                      case 4:
                       break e;
                      case 5:
                       break f;
                      case 6:
                       break g;
                      case 7:
                       break h;
                      case 8:
                       break i;
                      case 9:
                       break j;
                      case 10:
                       break k;
                      case 11:
                       break l;
                      case 12:
                       break m;
                      case 13:
                       break n;
                    }
                   }
                   return 1;
                  }
                  switch(a_004){
                    case 0:
                     if(typeof b_005 === "number" && ! b_005) return 0;
                     return -1;
                    case 1:
                     if(typeof b_005 === "number"){
                      if(1 === b_005) return 0;
                      if(! b_005) break a;
                     }
                     return -1;
                    case 2:
                     if(typeof b_005 === "number" && 3 > b_005)
                      switch(b_005){
                        case 2:
                         return 0;
                        case 0:
                         break a;
                        default: break b;
                      }
                     return -1;
                    case 3:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 3:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                      }
                     return -1;
                    case 4:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 4:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                      }
                     return -1;
                    case 5:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 5:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                      }
                     return -1;
                    case 6:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 6:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                      }
                     return -1;
                    case 7:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 7:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                      }
                     return -1;
                    case 8:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 8:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                      }
                     return -1;
                    case 9:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 9:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                        case 8:
                         break i;
                      }
                     return -1;
                    case 10:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 10:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                        case 8:
                         break i;
                        case 9:
                         break j;
                      }
                     return -1;
                    case 11:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 11:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                        case 8:
                         break i;
                        case 9:
                         break j;
                        case 10:
                         break k;
                      }
                     return -1;
                    case 12:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 12:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                        case 8:
                         break i;
                        case 9:
                         break j;
                        case 10:
                         break k;
                        case 11:
                         break l;
                      }
                     return -1;
                    case 13:
                     if(typeof b_005 === "number")
                      switch(b_005){
                        case 13:
                         return 0;
                        case 0:
                         break a;
                        case 1:
                         break b;
                        case 2:
                         break c;
                        case 3:
                         break d;
                        case 4:
                         break e;
                        case 5:
                         break f;
                        case 6:
                         break g;
                        case 7:
                         break h;
                        case 8:
                         break i;
                        case 9:
                         break j;
                        case 10:
                         break k;
                        case 11:
                         break l;
                        case 12:
                         break m;
                      }
                     return -1;
                    default:
                     if(typeof b_005 !== "number") return -1;
                     switch(b_005){
                       case 14:
                        return 0;
                       case 0:
                        break a;
                       case 1:
                        break b;
                       case 2:
                        break c;
                       case 3:
                        break d;
                       case 4:
                        break e;
                       case 5:
                        break f;
                       case 6:
                        break g;
                       case 7:
                        break h;
                       case 8:
                        break i;
                       case 9:
                        break j;
                       case 10:
                        break k;
                       case 11:
                        break l;
                       case 12:
                        break m;
                     }
                  }
                 }
                 return 1;
                }
                return 1;
               }
               return 1;
              }
              return 1;
             }
             return 1;
            }
            return 1;
           }
           return 1;
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   var l = all_of_close_event_code, acc = 0;
   for(;;){
    if(! l) break;
    var
     l$0 = l[2],
     enumerate_011 = l[1],
     acc$0 = [0, [1, enumerate_011], acc],
     l = l$0,
     acc = acc$0;
   }
   var
    l$1 = all_of_close_event_code,
    acc$1 = 0,
    _a_ = caml_call1(Stdlib_List[9], acc);
   for(;;){
    if(! l$1) break;
    var
     l$2 = l$1[2],
     enumerate_010 = l$1[1],
     acc$2 = [0, [0, enumerate_010], acc$1],
     l$1 = l$2,
     acc$1 = acc$2;
   }
   var
    _b_ = caml_call1(Stdlib_List[9], acc$1),
    all =
      [0,
       0,
       [0,
        1,
        [0,
         2,
         [0,
          3,
          [0,
           4,
           [0,
            5,
            [0,
             6,
             [0,
              7,
              [0,
               8,
               [0,
                9,
                [0,
                 10,
                 [0,
                  11,
                  [0,
                   12,
                   [0, 13, [0, 14, caml_call2(Stdlib_List[11], _b_, _a_)]]]]]]]]]]]]]]],
    normal_closure = 0;
   function of_int(code){
    var switcher = code - 1000 | 0;
    if(15 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 2;
       case 3:
        return 3;
       case 4: break;
       case 5:
        return 4;
       case 6:
        return 5;
       case 7:
        return 6;
       case 8:
        return 7;
       case 9:
        return 8;
       case 10:
        return 9;
       case 11:
        return 10;
       case 12:
        return 11;
       case 13:
        return 12;
       case 14:
        return 13;
       default: return 14;
     }
    if(caml_call2(Core[88], code, 3000) && caml_call2(Core[89], code, 4999))
     return [0, code];
    return [1, code];
   }
   function to_int(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return 1000;
       case 1:
        return 1001;
       case 2:
        return 1002;
       case 3:
        return 1003;
       case 4:
        return 1005;
       case 5:
        return 1006;
       case 6:
        return 1007;
       case 7:
        return 1008;
       case 8:
        return 1009;
       case 9:
        return 1010;
       case 10:
        return 1011;
       case 11:
        return 1012;
       case 12:
        return 1013;
       case 13:
        return 1014;
       default: return 1015;
     }
    if(0 === param[0]){var code = param[1]; return code;}
    var code$0 = param[1];
    return code$0;
   }
   function _t_(param){
    function _ae_(x_031){
     var
      x_030 = of_int(to_int(x_031)),
      _af_ = 0 === compare(x_030, x_031) ? 1 : 0;
     if(_af_) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
    }
    caml_call2(Core_List[9], all, _ae_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[5],
     Inline_test_config,
     cst_to_int_of_int_round_trip,
     0,
     cst_src_rpc_ml,
     99,
     4,
     134,
     _t_);
   function client(opt, heartbeat_config, description, implementations, param){
    if(opt)
     var sth = opt[1], uri = sth;
    else{
     var
      scheme =
        caml_call2(Core_String[126], Js_of_ocaml_Url[10][3], cst_https)
         ? cst_wss
         : cst_ws,
      match$0 = Js_of_ocaml_Url[10][2];
     if(match$0)
      var port = match$0[1], port$0 = port;
     else
      var
       port$0 =
         caml_call2(Core_String[126], Js_of_ocaml_Url[10][3], cst_https$0)
          ? Js_of_ocaml_Url[4]
          : Js_of_ocaml_Url[3];
     var
      host = Js_of_ocaml_Url[10][1],
      uri =
        caml_call8(make, [0, scheme], 0, [0, host], [0, port$0], 0, 0, 0, 0);
    }
    var match$1 = [0, [1, [0, _y_, [0, caml_call1(sexp_of_t, uri), 0]]], 0];
    if(description)
     var
      v = description[1],
      _N_ = [0, [1, [0, _z_, [0, caml_call1(Core_Info[6], v), 0]]], match$1];
    else
     var _N_ = match$1;
    var res = [0, caml_call1(Sexplib0_Sexp_conv[7], cst_websocket), _N_];
    if(res[2]) var _O_ = [1, res]; else var h = res[1], _O_ = h;
    var
     description$0 = caml_call1(Core_Info[18], _O_),
     match$2 = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     from_server_w = match$2[2],
     from_server_r = match$2[1],
     match$3 = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     to_server_w = match$3[2],
     to_server_r = match$3[1];
    a:
    {
     var
      _P_ =
        function(error){
         if(0 !== error[0]) return caml_call1(Async_kernel[19], error);
         var
          transport =
            caml_call3
             (Async_rpc_kernel_Pipe_transpor[2],
              Async_rpc_kernel_Pipe_transpor[1][2],
              from_server_r,
              to_server_w);
         function _$_(param){
          if(0 === param[0]){
           var connection = param[1];
           return caml_call1(Async_kernel[19], [0, connection]);
          }
          var exn = param[1];
          function _ab_(param){
           var _ad_ = caml_call2(Core_Or_error[37], 0, exn);
           return caml_call1(Async_kernel[19], _ad_);
          }
          var _ac_ = caml_call1(Async_rpc_kernel_Transport[5], transport);
          return caml_call2(Async_kernel[22][2], _ac_, _ab_);
         }
         function create(param){
          var implementations = param[2], connection_state = param[1];
          return caml_call7
                  (Async_rpc_kernel_Rpc[5][4],
                   [0, implementations],
                   connection_state,
                   0,
                   heartbeat_config,
                   [0, description$0],
                   0,
                   transport);
         }
         if(implementations)
          var
           implementations$0 = implementations[1],
           _aa_ = create(implementations$0);
         else
          var _aa_ = create(caml_call1(Async_rpc_kernel_Rpc[5][3][1], 0));
         return caml_call2(Async_kernel[22][2], _aa_, _$_);
        };
     try{
      var
       _E_ = caml_jsstring_of_string(caml_call2(to_string, 0, uri)),
       websocket = new Js_of_ocaml_WebSockets[1](_E_);
     }
     catch(exn$1){
      var exn = caml_wrap_exception(exn$1);
      if(exn[1] === Js_of_ocaml_Js[57]){
       var
        exn$0 = exn[2],
        _C_ =
          caml_call1
           (Core_Or_error[41], runtime.caml_string_of_jsstring(exn$0.message)),
        _Q_ = caml_call1(Async_kernel[19], _C_);
       break a;
      }
      var
       _D_ = caml_call2(Core_Or_error[37], 0, exn),
       _Q_ = caml_call1(Async_kernel[19], _D_);
      break a;
     }
     var
      connected_ivar = caml_call1(Async_kernel_Ivar[12], 0),
      cleanup =
        function(reason){
         caml_call2(Async_kernel_Ivar[15], connected_ivar, [1, reason]);
         caml_call1(Async_kernel_Pipe[14], from_server_w);
         caml_call1(Async_kernel_Pipe[15], to_server_r);
         var reason$0 = caml_call1(Core_Error[9], reason);
         function close(reason){
          return websocket.close
                  (to_int(normal_closure), caml_jsstring_of_string(reason));
         }
         try{close(reason$0);}
         catch(___){return close(cst_close_reason_was_too_long_);}
         return 0;
        },
      onclose =
        function(close_event){
         var
          what_happened =
            caml_call1(Async_kernel_Ivar[17], connected_ivar)
             ? cst_closed
             : cst_connection_failed,
          _X_ = of_int(close_event.code),
          _Y_ =
            [0,
             [11,
              cst_WebSocket,
              [2,
               0,
               [11,
                cst$0,
                [24,
                 _w_,
                 function(param, custom_printf_034){
                  if(typeof custom_printf_034 === "number")
                   switch(custom_printf_034){
                     case 0:
                      var _Z_ = _c_; break;
                     case 1:
                      var _Z_ = _d_; break;
                     case 2:
                      var _Z_ = _e_; break;
                     case 3:
                      var _Z_ = _f_; break;
                     case 4:
                      var _Z_ = _g_; break;
                     case 5:
                      var _Z_ = _h_; break;
                     case 6:
                      var _Z_ = _i_; break;
                     case 7:
                      var _Z_ = _j_; break;
                     case 8:
                      var _Z_ = _k_; break;
                     case 9:
                      var _Z_ = _l_; break;
                     case 10:
                      var _Z_ = _m_; break;
                     case 11:
                      var _Z_ = _n_; break;
                     case 12:
                      var _Z_ = _o_; break;
                     case 13:
                      var _Z_ = _p_; break;
                     default: var _Z_ = _q_;
                   }
                  else if(0 === custom_printf_034[0])
                   var
                    arg0_026 = custom_printf_034[1],
                    res0_027 = caml_call1(sexp_of_close_event_code, arg0_026),
                    _Z_ = [1, [0, _r_, [0, res0_027, 0]]];
                  else
                   var
                    arg0_028 = custom_printf_034[1],
                    res0_029 = caml_call1(sexp_of_close_event_code, arg0_028),
                    _Z_ = [1, [0, _s_, [0, res0_029, 0]]];
                  return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _Z_);
                 },
                 _v_]]]],
             cst_WebSocket_s_sexp_Close_cod],
          reason = caml_call3(Core[257], _Y_, what_happened, _X_);
         cleanup(caml_call1(Core_Error[12], reason));
         return Js_of_ocaml_Js[8];
        },
      onmessage =
        function(event){
         var data = caml_call1(Js_of_ocaml_Typed_array[50][3], event.data);
         caml_call2(Async_kernel_Pipe[32], from_server_w, data);
         return Js_of_ocaml_Js[8];
        },
      connected =
        function(param){
         return caml_call2(Async_kernel_Ivar[15], connected_ivar, _x_);
        };
     websocket.binaryType = "arraybuffer";
     var match = websocket.readyState;
     if(1 === match)
      connected(0);
     else if(match)
      cleanup(caml_call1(Core_Error[12], cst_WebSocket_failed_immediate));
     else{
      var
       _M_ = function(param){connected(0); return Js_of_ocaml_Js[8];},
       t11 = caml_call1(Js_of_ocaml_Dom[10], _M_);
      websocket.onopen = t11;
     }
     var
      _F_ =
        function(param){
         var
          _W_ =
            caml_call1(Sexplib0_Sexp_conv[7], cst_websocket_encountered_unex);
         caml_call1(Async_js_Debug[1], _W_);
         return Js_of_ocaml_Js[8];
        },
      t13 = caml_call1(Js_of_ocaml_Dom[10], _F_);
     websocket.onerror = t13;
     var t15 = caml_call1(Js_of_ocaml_Dom[10], onmessage);
     websocket.onmessage = t15;
     var t17 = caml_call1(Js_of_ocaml_Dom[10], onclose);
     websocket.onclose = t17;
     var
      connected_deferred = caml_call1(Async_kernel_Ivar[18], connected_ivar),
      _G_ =
        function(param){
         if(0 !== param[0]) return caml_call1(Async_kernel[19], 0);
         function _R_(data){
          var match = websocket.readyState;
          if(1 === match){
           var buffer = caml_call1(Js_of_ocaml_Typed_array[50][1], data);
           try{var _U_ = websocket.send(buffer); return _U_;}
           catch(exn$0){
            var
             exn = caml_wrap_exception(exn$0),
             _S_ = caml_call2(Core_Error[25], 0, exn),
             _T_ = caml_call2(Core_Error[20], _S_, cst_websocket_send_buffer);
            return caml_call1(Core_Error[28], _T_);
           }
          }
          if(match) return 0;
          var
           _V_ =
             caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_onopen_called_but_read);
          return caml_call1(Core[253], _V_);
         }
         return caml_call5(Async_kernel_Pipe[51], 0, 0, 0, to_server_r, _R_);
        },
      _H_ = caml_call2(Async_kernel[22][2], connected_deferred, _G_);
     caml_call1(Async_kernel[6], _H_);
     var
      _I_ =
        function(param){
         return cleanup
                 (caml_call1(Core_Error[12], cst_RPC_connection_closed_by_c));
        },
      _J_ = [0, caml_call1(Async_kernel_Pipe[17], from_server_w), 0],
      _K_ = [0, caml_call1(Async_kernel_Pipe[17], to_server_r), _J_],
      _L_ = caml_call1(Async_kernel_Deferred[24], _K_),
      cleanup_when_a_pipe_is_closed =
        caml_call2(Async_kernel[22][3], _L_, _I_);
     caml_call1(Async_kernel[6], cleanup_when_a_pipe_is_closed);
     var _Q_ = connected_deferred;
    }
    return caml_call2(Async_kernel[22][2], _Q_, _P_);
   }
   function client_exn
   (uri, heartbeat_config, description, implementations, param){
    var
     _A_ = Core_Or_error[36],
     _B_ = client(uri, heartbeat_config, description, implementations, 0);
    return caml_call2(Async_kernel[21], _B_, _A_);
   }
   var
    Connection = Async_rpc_kernel_Rpc[5],
    sexp_of_t$0 = Connection[1],
    create = Connection[4],
    contains_magic_prefix = Connection[5],
    description = Connection[6],
    add_heartbeat_callback = Connection[7],
    reset_heartbeat_timeout = Connection[8],
    last_seen_alive = Connection[9],
    close = Connection[10],
    close_finished = Connection[11],
    close_reason = Connection[12],
    is_closed = Connection[13],
    bytes_to_write = Connection[14],
    flushed = Connection[15],
    with_close = Connection[16],
    server_with_close = Connection[17];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js_Rpc);
   var
    Async_js_Rpc =
      [0,
       [0,
        sexp_of_t$0,
        create,
        contains_magic_prefix,
        description,
        add_heartbeat_callback,
        reset_heartbeat_timeout,
        last_seen_alive,
        close,
        close_finished,
        close_reason,
        is_closed,
        bytes_to_write,
        flushed,
        with_close,
        server_with_close,
        client,
        client_exn]];
   runtime.caml_register_global(162, Async_js_Rpc, cst_Async_js_Rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js__Persistent_connection
//# unitInfo: Requires: Async_rpc_kernel__Persistent_connection, Base__Sexpable, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_js_Persistent_connec$0 = "Async_js__Persistent_connection",
    cst_async_js$0 = "async_js";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Uri = global_data.Uri,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Sexpable = global_data.Base__Sexpable,
    Async_rpc_kernel_Persistent_co =
      global_data.Async_rpc_kernel__Persistent_connection;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js_Persistent_connec$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js$0);
   caml_call1(Expect_test_collector[5][1], "src/persistent_connection.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js$0, cst);
   var
    equal = Uri[3],
    of_string = Uri[7],
    cst_async_js = cst_async_js$0,
    cst_Async_js_Persistent_connec = cst_Async_js_Persistent_connec$0;
   function to_string(s){return caml_call2(Uri[8], 0, s);}
   var
    include = caml_call1(Base_Sexpable[5], [0, of_string, to_string]),
    sexp_of_t = include[2],
    include$0 = Async_rpc_kernel_Persistent_co[1],
    sexp_of_t$0 = include$0[1],
    Event = include$0[2],
    create = include$0[3],
    connected = include$0[4],
    connected_or_failed_to_connect = include$0[5],
    current_connection = include$0[6],
    server_name = include$0[7],
    close = include$0[8],
    is_closed = include$0[9],
    close_finished = include$0[10],
    close_when_current_connection_ = include$0[11],
    _a_ = Async_rpc_kernel_Persistent_co[1][3],
    _b_ = [0, equal, sexp_of_t];
   function create_from_uri(_l_){
    var _m_ = caml_call1(_a_, _l_);
    return function(_r_, _q_, _p_, _o_, _n_){
     return caml_call6(_m_, _r_, _q_, _p_, _o_, _n_, _b_);};
   }
   var func = Async_rpc_kernel_Persistent_co[1][3];
   function equal$0(a_001, b_002){
    function _k_(a_003, b_004){return caml_call2(equal, a_003, b_004);}
    return caml_call3(Core[452], _k_, a_001, b_002);
   }
   function sexp_of_t$1(x_007){
    return caml_call2(Core[454], sexp_of_t, x_007);
   }
   var _c_ = [0, equal$0, sexp_of_t$1];
   function create_from_uri_option(_d_){
    var _e_ = caml_call1(func, _d_);
    return function(_j_, _i_, _h_, _g_, _f_){
     return caml_call6(_e_, _j_, _i_, _h_, _g_, _f_, _c_);};
   }
   var
    Rpc =
      [0,
       sexp_of_t$0,
       Event,
       create,
       connected,
       connected_or_failed_to_connect,
       current_connection,
       server_name,
       close,
       is_closed,
       close_finished,
       close_when_current_connection_,
       create_from_uri,
       create_from_uri_option];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js_Persistent_connec);
   var
    Async_js_Persistent_connection =
      [0, Rpc, Async_rpc_kernel_Persistent_co[2]];
   runtime.caml_register_global
    (15, Async_js_Persistent_connection, cst_Async_js_Persistent_connec$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js__Http
//# unitInfo: Requires: Async_kernel__Deferred_or_error, Async_kernel__Ivar, Base__Or_error, Core, Core__List, Core__Option, Core__Or_error, Core__Result, Core__String, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__File, Js_of_ocaml__Js, Js_of_ocaml__Url, Js_of_ocaml__XmlHttpRequest, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Async_js_Http$0 = "Async_js__Http",
    cst_async_js$0 = "async_js",
    cst_code = "code",
    cst_status_text = "status_text",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    method_string = "GET",
    cst$0 = "&",
    cst$1 = "?",
    method_string$0 = "POST",
    cst = cst$2,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Result = global_data.Core__Result,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Core_Or_error = global_data.Core__Or_error,
    Base_Or_error = global_data.Base__Or_error,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js_Http$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js$0);
   caml_call1(Expect_test_collector[5][1], "src/http.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js$0, cst);
   var
    Response_type = [0],
    Response = [0],
    Post_body = [0],
    Method_with_args = [0],
    _a_ = [0, cst_status_text],
    _b_ = [0, cst_code],
    cst_No_response_returned_despi =
      "No response returned despite successful request",
    _c_ = [0, cst_status_text],
    _d_ = [0, cst_code],
    cst_Request_failed = "Request failed",
    cst_Timeout = "Timeout",
    cst_Network_error = "Network error",
    cst_async_js = cst_async_js$0,
    cst_Async_js_Http = cst_Async_js_Http$0;
   function request(opt, on_progress, on_upload_progress, url, response_type){
    if(opt) var sth = opt[1], headers = sth; else var headers = 0;
    return function(method_with_args){
     if(0 === method_with_args[0])
      var
       args = method_with_args[1],
       _j_ = caml_call1(Js_of_ocaml_Url[6], args),
       _i_ = caml_call2(Core_String[39], url, 63),
       _k_ = caml_call1(Core_Option[57], _i_) ? cst$0 : cst$1,
       _l_ = caml_call2(Core[18], _k_, _j_),
       method_string$1 = method_string,
       url$0 = caml_call2(Core[18], url, _l_);
     else
      var method_string$1 = method_string$0, url$0 = url;
     var req = caml_call1(Js_of_ocaml_XmlHttpRequest[1], 0);
     req.open
      (caml_jsstring_of_string(method_string$1),
       caml_jsstring_of_string(url$0),
       Js_of_ocaml_Js[7]);
     switch(response_type){
       case 0:
        req.responseType = "arraybuffer"; break;
       case 1:
        req.responseType = "blob"; break;
       case 2:
        req.responseType = "document"; break;
       case 3:
        req.responseType = "json"; break;
       case 4:
        req.responseType = "text"; break;
       default: req.responseType = cst$2;
     }
     function _m_(param){
      var value = param[2], name = param[1];
      return req.setRequestHeader
              (caml_jsstring_of_string(name), caml_jsstring_of_string(value));
     }
     caml_call2(Core_List[9], headers, _m_);
     var response = caml_call1(Async_kernel_Ivar[12], 0);
     function _n_(param){
      var _J_ = caml_call1(Core_Or_error[41], cst_Network_error);
      caml_call2(Async_kernel_Ivar[15], response, _J_);
      return Js_of_ocaml_Js[7];
     }
     var t19 = caml_call1(Js_of_ocaml_Dom[10], _n_);
     req.onerror = t19;
     function _o_(param){
      var _I_ = caml_call1(Core_Or_error[41], cst_Timeout);
      caml_call2(Async_kernel_Ivar[15], response, _I_);
      return Js_of_ocaml_Js[7];
     }
     var t21 = caml_call1(Js_of_ocaml_Dom[10], _o_);
     req.ontimeout = t21;
     var
      t38 =
        runtime.caml_js_wrap_callback
         (function(param){
           if(4 > req.readyState) return 0;
           a:
           {
            if
             (caml_call2(Core[88], req.status, 200)
              && caml_call2(Core[92], req.status, 300)){
             var
              _u_ =
                function(content){
                 function get_header(s){
                  function _F_(v){return [0, caml_string_of_jsstring(v)];}
                  function _G_(param){return 0;}
                  var
                   _H_ =
                     req.getResponseHeader(runtime.caml_jsbytes_of_string(s));
                  return caml_call3(Js_of_ocaml_Js[5][7], _H_, _G_, _F_);
                 }
                 return [0, [0, req.status, get_header, content]];
                },
              get_text_contents_or_error =
                function(param){
                 var _A_ = Core_Result[20];
                 function _B_(param){
                  var
                   _C_ =
                     [0,
                      [1,
                       [0,
                        _a_,
                        [0,
                         caml_call1
                          (Core[471], caml_string_of_jsstring(req.statusText)),
                         0]]],
                      0],
                   _D_ =
                     [0,
                      [1,
                       [0,
                        [1, [0, _b_, [0, caml_call1(Core[356], req.status), 0]]],
                        _C_]],
                      0],
                   _E_ =
                     [1,
                      [0,
                       caml_call1
                        (Sexplib0_Sexp_conv[7], cst_No_response_returned_despi),
                       _D_]];
                  return caml_call1(Core[233], _E_);
                 }
                 return caml_call3
                         (Js_of_ocaml_Js[5][7], req.responseText, _B_, _A_);
                };
             switch(response_type){
               case 0:
                var
                 _v_ = [0, caml_call1(Js_of_ocaml_File[3][5], req.response)];
                break;
               case 1:
                var
                 _v_ = [0, caml_call1(Js_of_ocaml_File[3][2], req.response)];
                break;
               case 2:
                var
                 _v_ = [0, caml_call1(Js_of_ocaml_File[3][1], req.response)];
                break;
               case 3:
                var
                 _v_ = [0, caml_call1(Js_of_ocaml_File[3][3], req.response)];
                break;
               case 4:
                var _v_ = get_text_contents_or_error(0); break;
               default:
                var
                 _w_ = get_text_contents_or_error(0),
                 _v_ =
                   caml_call2(Core_Or_error[48], _w_, caml_string_of_jsstring);
             }
             var res = caml_call2(Base_Or_error[25][4][2], _v_, _u_);
             break a;
            }
            var
             _x_ =
               [0,
                [1,
                 [0,
                  _c_,
                  [0,
                   caml_call1
                    (Core[471], caml_string_of_jsstring(req.statusText)),
                   0]]],
                0],
             _y_ =
               [0,
                [1,
                 [0,
                  [1, [0, _d_, [0, caml_call1(Core[356], req.status), 0]]],
                  _x_]],
                0],
             _z_ =
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7], cst_Request_failed),
                 _y_]],
             res = caml_call1(Core_Or_error[40], _z_);
           }
           return caml_call2(Async_kernel_Ivar[15], response, res);
          });
     req.onreadystatechange = t38;
     function _p_(on_progress){
      function _t_(t41){
       caml_call2(on_progress, t41.loaded, t41.total);
       return Js_of_ocaml_Js[7];
      }
      var t42 = caml_call1(Js_of_ocaml_Dom[10], _t_);
      return req.onprogress = t42;
     }
     caml_call2(Core_Option[41], on_progress, _p_);
     function _q_(upload){
      function _r_(on_upload_progress){
       function _s_(t46){
        caml_call2(on_upload_progress, t46.loaded, t46.total);
        return Js_of_ocaml_Js[7];
       }
       var t47 = caml_call1(Js_of_ocaml_Dom[10], _s_);
       return upload.onprogress = t47;
      }
      return caml_call2(Core_Option[41], on_upload_progress, _r_);
     }
     caml_call2(Js_of_ocaml_Js[6][6], req.upload, _q_);
     if(0 === method_with_args[0])
      req.send(Js_of_ocaml_Js[1]);
     else{
      var body = method_with_args[1];
      if(body){
       var body$0 = body[1];
       switch(body$0[0]){
         case 0:
          var b = body$0[1]; req.send(b); break;
         case 1:
          var d = body$0[1]; req.send(d); break;
         case 2:
          var s = body$0[1];
          req.send(caml_call1(Js_of_ocaml_Js[2], caml_jsstring_of_string(s)));
          break;
         default: var fd = body$0[1]; req.send(fd);
       }
      }
      else
       req.send(Js_of_ocaml_Js[1]);
     }
     return caml_call1(Async_kernel_Ivar[18], response);};
   }
   function get(opt, url){
    if(opt) var sth = opt[1], arguments$0 = sth; else var arguments$0 = 0;
    function _g_(resp){return resp[3];}
    var _h_ = request(0, 0, 0, url, 5)([0, arguments$0]);
    return caml_call2(Async_kernel_Deferred_or_error[14], _h_, _g_);
   }
   function post(body, url){
    function _e_(resp){return resp[3];}
    var _f_ = request(0, 0, 0, url, 5)([1, body]);
    return caml_call2(Async_kernel_Deferred_or_error[14], _f_, _e_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js_Http);
   var
    Async_js_Http =
      [0,
       Response_type,
       Post_body,
       Method_with_args,
       Response,
       request,
       get,
       post];
   runtime.caml_register_global(82, Async_js_Http, cst_Async_js_Http$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js__Async_js0
//# unitInfo: Requires: Async_kernel__Clock_ns, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler, Base__Exn, Core, Core__Float, Core__Option, Core__Stack, Core__Time_ns, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_js_Async_js0$0 = "Async_js__Async_js0",
    cst_async_js$0 = "async_js",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    ready_state_change = "readystatechange",
    complete = "complete",
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Core = global_data.Core,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Base_Exn = global_data.Base__Exn,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Float = global_data.Core__Float,
    Core_Option = global_data.Core__Option,
    Core_Stack = global_data.Core__Stack,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js_Async_js0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js$0);
   caml_call1(Expect_test_collector[5][1], "src/async_js0.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js$0, cst);
   var
    cst_Async_kernel_Monitor_try_w = "Async_kernel: Monitor.try_with",
    cst_Async_kernel_Unhandled_exc = "Async_kernel: Unhandled exception",
    cst_async_js = cst_async_js$0,
    cst_Async_js_Async_js0 = cst_Async_js_Async_js0$0;
   function sleep(d){
    var _C_ = caml_call1(Core_Time_ns[1][81], d);
    return caml_call1(Async_kernel_Clock_ns[4], _C_);
   }
   function yield$0(param){
    var _B_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call1(Async_kernel_Scheduler[67], _B_);
   }
   function extract_js_error(exn){
    var _A_ = caml_call1(Js_of_ocaml_Js[56], exn);
    return caml_call1(Js_of_ocaml_Js[5][10], _A_);
   }
   var state = [0, 0], timeouts = caml_call1(Core_Stack[23], 0);
   function run_after(f, ms){
    caml_call2(Js_of_ocaml_Dom_html[118], f, ms);
    return 0;
   }
   function loop(param){
    var t = caml_call1(Async_kernel_Scheduler[2], 0), match = state[1];
    if(! caml_call1(Async_kernel_Scheduler[20], t) && 1 !== match){
     state[1] = 1;
     caml_call1(Async_kernel_Scheduler[14], t);
     if(caml_call1(Async_kernel_Scheduler[44], t))
      var next_wakeup = 1;
     else{
      var match$0 = caml_call1(Async_kernel_Scheduler[17], t);
      if(match$0)
       var
        next = match$0[1],
        now = caml_call1(Core_Time_ns[65], 0),
        d = caml_call2(Core_Time_ns[72], next, now),
        d_ms$0 = caml_call1(Core_Time_ns[1][90], d),
        _x_ = caml_call2(Core_Float[121], d_ms$0, 0.) ? 1 : [0, next, d_ms$0],
        _y_ = _x_;
      else
       var _y_ = 0;
      var next_wakeup = _y_;
     }
     var
      _s_ =
        function(param){
         var
          exn = param[1],
          exn$0 = caml_call1(Async_kernel_Monitor[13], exn);
         if(exn$0[1] === Js_of_ocaml_Js[57]){
          var err = exn$0[2];
          return caml_call1(Js_of_ocaml_Js[54], err);
         }
         var match = extract_js_error(exn$0);
         if(! match) throw caml_maybe_attach_backtrace(exn$0, 0);
         var
          err$0 = match[1],
          _z_ = caml_jsstring_of_string(caml_call1(Base_Exn[10], exn$0));
         Js_of_ocaml_Firebug[1].error(_z_);
         return caml_call1(Js_of_ocaml_Js[54], err$0);
        },
      _t_ = caml_call1(Async_kernel_Scheduler[21], t);
     caml_call2(Core_Option[41], _t_, _s_);
     if(typeof next_wakeup === "number")
      return next_wakeup
              ? (state[1] = 2, run_after(loop, 0.))
              : (state[1] = 0, 0);
     var d_ms = next_wakeup[2], at = next_wakeup[1];
     state[1] = 0;
     var _u_ = caml_call1(Core_Stack[7], timeouts);
     if(_u_)
      var _v_ = _u_;
     else
      var
       _w_ = caml_call1(Core_Stack[29], timeouts),
       _v_ = caml_call2(Core_Time_ns[19], at, _w_);
     return _v_
             ? (caml_call2
                (Core_Stack[25], timeouts, at),
               run_after(run_timeout, d_ms))
             : _v_;
    }
    return 0;
   }
   function run_timeout(param){
    caml_call1(Core_Stack[27], timeouts);
    return loop(0);
   }
   function run(param){
    return state[1] ? 0 : (run_after(loop, 0.), state[1] = 2, 0);
   }
   function log(name, exn){
    var exn$0 = caml_call1(Async_kernel_Monitor[13], exn);
    if(exn$0[1] === Js_of_ocaml_Js[57])
     var err = exn$0[2], exn$1 = [0, 16617, err];
    else{
     var match$0 = extract_js_error(exn$0);
     if(match$0)
      var err$2 = match$0[1], _r_ = [0, 566177629, [0, exn$0, err$2]];
     else
      var _r_ = [0, 3458171, exn$0];
     var exn$1 = _r_;
    }
    var _o_ = exn$1[1];
    if(3458171 === _o_){
     var
      exn$2 = exn$1[2],
      _p_ = caml_jsstring_of_string(caml_call1(Base_Exn[10], exn$2));
     return Js_of_ocaml_Firebug[1].error(caml_jsstring_of_string(name), _p_);
    }
    if(566177629 <= _o_){
     var
      match = exn$1[2],
      err$0 = match[2],
      exn$3 = match[1],
      _q_ = caml_jsstring_of_string(caml_call1(Base_Exn[10], exn$3));
     return Js_of_ocaml_Firebug[1].error
             (caml_jsstring_of_string(name), _q_, err$0);
    }
    var err$1 = exn$1[2];
    return Js_of_ocaml_Firebug[1].error(caml_jsstring_of_string(name), err$1);
   }
   var
    initialized_ref = [0, 0],
    initialization =
      [246,
       function(param){
        var t = caml_call1(Async_kernel_Scheduler[2], 0);
        initialized_ref[1] = 1;
        function _i_(param){return run(0);}
        caml_call2(Async_kernel_Scheduler[51], t, _i_);
        function _j_(param){return run(0);}
        caml_call2(Async_kernel_Scheduler[52], t, _j_);
        caml_call2(Async_kernel_Scheduler[50], t, run);
        function _k_(_n_){return log(cst_Async_kernel_Monitor_try_w, _n_);}
        Async_kernel_Monitor[25][1][1] = _k_;
        function _l_(_m_){return log(cst_Async_kernel_Unhandled_exc, _m_);}
        caml_call2(Async_kernel_Monitor[7], Async_kernel_Monitor[24], _l_);
        return run(0);
       }];
   function init(param){return caml_call1(Core[237], initialization);}
   function initialized(param){return initialized_ref[1];}
   function js_string_compare(s){
    var compare_using_javascript_tripl = Core[246];
    return caml_call1
            (compare_using_javascript_tripl, caml_jsstring_of_string(s));
   }
   var
    readystatechange_ev =
      caml_call1(Js_of_ocaml_Dom[14][1], ready_state_change);
   function add_event(target, evt, handler){
    caml_call4
     (Js_of_ocaml_Dom_html[17], target, evt, handler, Js_of_ocaml_Js[8]);
    return;
   }
   function document_loaded(param){
    var t12 = Js_of_ocaml_Dom_html[2], _a_ = t12.readyState;
    if(caml_call1(js_string_compare(complete), _a_))
     return Async_kernel_Deferred[18];
    var loaded = caml_call1(Async_kernel_Ivar[12], 0);
    function handler(evt){
     var
      _e_ = evt.type,
      _f_ = 1 - caml_call1(js_string_compare(ready_state_change), _e_);
     if(_f_)
      var _g_ = _f_;
     else
      var
       t14 = Js_of_ocaml_Dom_html[2],
       _h_ = t14.readyState,
       _g_ = caml_call1(js_string_compare(complete), _h_);
     if(_g_) caml_call2(Async_kernel_Ivar[15], loaded, 0);
     return Js_of_ocaml_Js[7];
    }
    var _b_ = caml_call1(Js_of_ocaml_Dom[10], handler);
    add_event(Js_of_ocaml_Dom_html[2], Js_of_ocaml_Dom_html[15][54], _b_);
    var _c_ = caml_call1(Js_of_ocaml_Dom[10], handler);
    add_event(Js_of_ocaml_Dom_html[2], readystatechange_ev, _c_);
    var _d_ = caml_call1(Js_of_ocaml_Dom[10], handler);
    add_event(Js_of_ocaml_Dom_html[8], Js_of_ocaml_Dom_html[15][36], _d_);
    return caml_call1(Async_kernel_Ivar[18], loaded);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js_Async_js0);
   var
    Async_js_Async_js0 =
      [0, sleep, yield$0, init, initialized, document_loaded];
   runtime.caml_register_global
    (40, Async_js_Async_js0, cst_Async_js_Async_js0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_js
//# unitInfo: Requires: Async_js__Async_js0, Async_js__Debug, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_js = "Async_js",
    cst_async_js = "async_js";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_js_Async_js0 = global_data.Async_js__Async_js0,
    Async_js_Debug = global_data.Async_js__Debug;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_js);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_js);
   caml_call1(Expect_test_collector[5][1], "src/async_js.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_js, cst);
   var
    sleep = Async_js_Async_js0[1],
    yield$0 = Async_js_Async_js0[2],
    init = Async_js_Async_js0[3],
    initialized = Async_js_Async_js0[4],
    document_loaded = Async_js_Async_js0[5],
    log_s = Async_js_Debug[1],
    log_s_as_string = Async_js_Debug[2];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_js);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_js);
   var
    Async_js =
      [0,
       sleep,
       yield$0,
       init,
       initialized,
       document_loaded,
       log_s,
       log_s_as_string];
   runtime.caml_register_global(13, Async_js, cst_Async_js);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
