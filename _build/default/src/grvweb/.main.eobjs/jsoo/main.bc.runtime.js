// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=runtime, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Assert_failure, Division_by_zero, End_of_file, Failure, Invalid_argument, Match_failure, Not_found, Out_of_memory, Stack_overflow, Sys_blocked_io, Sys_error, Undefined_recursive_module
//# unitInfo: Primitives: %caml_format_int_special, %direct_int_div, %direct_int_mod, %direct_int_mul, %direct_obj_tag, %identity, %int_add, %int_and, %int_asr, %int_div, %int_lsl, %int_lsr, %int_mod, %int_mul, %int_neg, %int_or, %int_sub, %int_xor, Base_am_testing, Base_caml_exn_is_most_recent_exn, Base_clear_caml_backtrace_pos, Base_hash_double, Base_hash_string, Base_int_math_int32_clz, Base_int_math_int32_ctz, Base_int_math_int64_clz, Base_int_math_int64_ctz, Base_int_math_int64_pow_stub, Base_int_math_int_clz, Base_int_math_int_ctz, Base_int_math_int_popcount, Base_int_math_int_pow_stub, Base_int_math_nativeint_clz, Base_int_math_nativeint_ctz, Base_internalhash_fold_float, Base_internalhash_fold_int, Base_internalhash_fold_int64, Base_internalhash_fold_string, Base_internalhash_get_hash_value, BigStringReader, MlBytes, MlFakeDevice, MlFakeFd, MlFakeFd_out, MlFakeFile, MlFile, MlInt64, MlMutex, MlNat, MlNodeDevice, MlNodeFd, MlObjectTable, MlStringReader, Ml_Bigarray, Ml_Bigarray_c_1_1, UInt8ArrayReader, add_nat, bigstring_alloc, bigstring_blit_bigstring_bytes_stub, bigstring_blit_bytes_bigstring_stub, bigstring_blit_string_bigstring_stub, bigstring_blit_stub, bigstring_destroy_stub, bigstring_find, bigstring_is_mmapped_stub, bigstring_memcmp_bytes_stub, bigstring_memcmp_stub, bigstring_memset_stub, bigstring_of_array_buffer, bigstring_of_typed_array, bigstring_realloc, bigstring_to_array_buffer, bigstring_to_typed_array, bigstringaf_blit_from_bytes, bigstringaf_blit_to_bigstring, bigstringaf_blit_to_bytes, bigstringaf_memchr, bigstringaf_memcmp_bigstring, bigstringaf_memcmp_string, bin_prot_blit_buf_bytes_stub, bin_prot_blit_buf_float_array_stub, bin_prot_blit_buf_stub, bin_prot_blit_bytes_buf_stub, bin_prot_blit_float_array_buf_stub, bin_prot_blit_string_buf_stub, blit_nat, caml_MD5Final, caml_MD5Init, caml_MD5Transform, caml_MD5Update, caml_abs_float, caml_acos_float, caml_acosh_float, caml_add_float, caml_alloc_dummy, caml_alloc_dummy_float, caml_alloc_dummy_infix, caml_alloc_stack, caml_argv, caml_array_append, caml_array_blit, caml_array_bound_error, caml_array_concat, caml_array_fill, caml_array_get, caml_array_get_addr, caml_array_get_float, caml_array_of_bytes, caml_array_of_string, caml_array_set, caml_array_set_addr, caml_array_set_float, caml_array_sub, caml_array_unsafe_get, caml_array_unsafe_get_float, caml_array_unsafe_set, caml_array_unsafe_set_float, caml_asin_float, caml_asinh_float, caml_atan2_float, caml_atan_float, caml_atanh_float, caml_atomic_cas, caml_atomic_exchange, caml_atomic_fetch_add, caml_atomic_load, caml_atomic_make_contended, caml_ba_blit, caml_ba_change_layout, caml_ba_compare, caml_ba_create, caml_ba_create_buffer, caml_ba_create_from, caml_ba_create_unsafe, caml_ba_custom_name, caml_ba_deserialize, caml_ba_dim, caml_ba_dim_1, caml_ba_dim_2, caml_ba_dim_3, caml_ba_fill, caml_ba_from_typed_array, caml_ba_get_1, caml_ba_get_2, caml_ba_get_3, caml_ba_get_generic, caml_ba_get_size, caml_ba_get_size_per_element, caml_ba_hash, caml_ba_init, caml_ba_kind, caml_ba_kind_of_typed_array, caml_ba_layout, caml_ba_map_file, caml_ba_map_file_bytecode, caml_ba_num_dims, caml_ba_reshape, caml_ba_serialize, caml_ba_set_1, caml_ba_set_2, caml_ba_set_3, caml_ba_set_generic, caml_ba_slice, caml_ba_sub, caml_ba_to_typed_array, caml_ba_uint8_get16, caml_ba_uint8_get32, caml_ba_uint8_get64, caml_ba_uint8_set16, caml_ba_uint8_set32, caml_ba_uint8_set64, caml_backtrace_status, caml_bigstring_blit_ba_to_ba, caml_bigstring_blit_ba_to_bytes, caml_bigstring_blit_bytes_to_ba, caml_bigstring_blit_string_to_ba, caml_bigstring_memcmp, caml_blit_bytes, caml_blit_string, caml_bswap16, caml_build_symbols, caml_bytes_bound_error, caml_bytes_compare, caml_bytes_equal, caml_bytes_get, caml_bytes_get16, caml_bytes_get32, caml_bytes_get64, caml_bytes_greaterequal, caml_bytes_greaterthan, caml_bytes_lessequal, caml_bytes_lessthan, caml_bytes_notequal, caml_bytes_of_array, caml_bytes_of_jsbytes, caml_bytes_of_string, caml_bytes_of_utf16_jsstring, caml_bytes_set, caml_bytes_set16, caml_bytes_set32, caml_bytes_set64, caml_bytes_unsafe_get, caml_bytes_unsafe_set, caml_call_gen, caml_callback, caml_cbrt_float, caml_ceil_float, caml_channel_descriptor, caml_check_bound, caml_check_bound_bigstring, caml_classify_float, caml_compare, caml_compare_val, caml_compare_val_get_custom, caml_compare_val_number_custom, caml_compare_val_tag, caml_continuation_use_and_update_handler_noexc, caml_continuation_use_noexc, caml_convert_bytes_to_array, caml_convert_raw_backtrace, caml_convert_raw_backtrace_slot, caml_convert_string_to_bytes, caml_copysign_float, caml_cos_float, caml_cosh_float, caml_create_bytes, caml_create_file, caml_create_string, caml_current_dir, caml_custom_event_index, caml_custom_ops, caml_decompress_input, caml_div, caml_div_float, caml_domain_dls, caml_domain_dls_get, caml_domain_dls_set, caml_domain_id, caml_domain_spawn, caml_ensure_stack_capacity, caml_ephe_blit_data, caml_ephe_blit_key, caml_ephe_check_data, caml_ephe_check_key, caml_ephe_create, caml_ephe_data_offset, caml_ephe_get_data, caml_ephe_get_data_copy, caml_ephe_get_key, caml_ephe_get_key_copy, caml_ephe_key_offset, caml_ephe_set_data, caml_ephe_set_key, caml_ephe_unset_data, caml_ephe_unset_key, caml_eq_float, caml_equal, caml_erf_float, caml_erfc_float, caml_eventlog_pause, caml_eventlog_resume, caml_executable_name, caml_exn_with_js_backtrace, caml_exp2_float, caml_exp_float, caml_expm1_float, caml_failwith, caml_fatal_uncaught_exception, caml_fill_bytes, caml_fill_string, caml_final_register, caml_final_register_called_without_value, caml_final_release, caml_finish_formatting, caml_float_compare, caml_float_of_bytes, caml_float_of_int, caml_float_of_string, caml_floatarray_blit, caml_floatarray_create, caml_floatarray_get, caml_floatarray_set, caml_floatarray_unsafe_get, caml_floatarray_unsafe_set, caml_floor_float, caml_fma_float, caml_fmod_float, caml_format_exception, caml_format_float, caml_format_int, caml_fresh_oo_id, caml_frexp_float, caml_fs_init, caml_gc_compaction, caml_gc_counters, caml_gc_full_major, caml_gc_get, caml_gc_huge_fallback_count, caml_gc_major, caml_gc_major_slice, caml_gc_minor, caml_gc_minor_words, caml_gc_quick_stat, caml_gc_set, caml_gc_stat, caml_ge_float, caml_get_continuation_callstack, caml_get_current_callstack, caml_get_exception_backtrace, caml_get_exception_raw_backtrace, caml_get_global_data, caml_get_major_bucket, caml_get_major_credit, caml_get_minor_free, caml_get_public_method, caml_get_root, caml_global_data, caml_gr_arc_aux, caml_gr_blit_image, caml_gr_clear_graph, caml_gr_close_graph, caml_gr_close_subwindow, caml_gr_create_image, caml_gr_current_x, caml_gr_current_y, caml_gr_display_mode, caml_gr_doc_of_state, caml_gr_draw_arc, caml_gr_draw_char, caml_gr_draw_image, caml_gr_draw_rect, caml_gr_draw_str, caml_gr_draw_string, caml_gr_dump_image, caml_gr_fill_arc, caml_gr_fill_poly, caml_gr_fill_rect, caml_gr_lineto, caml_gr_make_image, caml_gr_moveto, caml_gr_open_graph, caml_gr_open_subwindow, caml_gr_plot, caml_gr_point_color, caml_gr_remember_mode, caml_gr_resize_window, caml_gr_set_color, caml_gr_set_font, caml_gr_set_line_width, caml_gr_set_text_size, caml_gr_set_window_title, caml_gr_sigio_handler, caml_gr_sigio_signal, caml_gr_size_x, caml_gr_size_y, caml_gr_state, caml_gr_state_create, caml_gr_state_get, caml_gr_state_init, caml_gr_state_set, caml_gr_synchronize, caml_gr_text_size, caml_gr_wait_event, caml_gr_window_id, caml_greaterequal, caml_greaterthan, caml_gt_float, caml_hash, caml_hash_mix_bigstring, caml_hash_mix_bytes, caml_hash_mix_bytes_arr, caml_hash_mix_final, caml_hash_mix_float, caml_hash_mix_int, caml_hash_mix_int64, caml_hash_mix_jsbytes, caml_hash_mix_string, caml_hash_nat, caml_hexstring_of_float, caml_hypot_float, caml_input_value, caml_input_value_from_bytes, caml_input_value_from_reader, caml_input_value_from_string, caml_input_value_to_outside_heap, caml_install_signal_handler, caml_int32_add, caml_int32_and, caml_int32_bits_of_float, caml_int32_bswap, caml_int32_compare, caml_int32_div, caml_int32_float_of_bits, caml_int32_format, caml_int32_mod, caml_int32_mul, caml_int32_neg, caml_int32_of_float, caml_int32_of_int, caml_int32_of_string, caml_int32_or, caml_int32_shift_left, caml_int32_shift_right, caml_int32_shift_right_unsigned, caml_int32_sub, caml_int32_to_float, caml_int32_to_int, caml_int32_unmarshal, caml_int32_xor, caml_int64_add, caml_int64_and, caml_int64_bits_of_float, caml_int64_bswap, caml_int64_compare, caml_int64_create_lo_hi, caml_int64_create_lo_mi_hi, caml_int64_div, caml_int64_float_of_bits, caml_int64_format, caml_int64_hash, caml_int64_hi32, caml_int64_is_negative, caml_int64_is_zero, caml_int64_lo32, caml_int64_marshal, caml_int64_mod, caml_int64_mul, caml_int64_neg, caml_int64_of_bytes, caml_int64_of_float, caml_int64_of_int, caml_int64_of_int32, caml_int64_of_nativeint, caml_int64_of_string, caml_int64_offset, caml_int64_or, caml_int64_shift_left, caml_int64_shift_right, caml_int64_shift_right_unsigned, caml_int64_sub, caml_int64_to_bytes, caml_int64_to_float, caml_int64_to_int, caml_int64_to_int32, caml_int64_to_nativeint, caml_int64_ult, caml_int64_unmarshal, caml_int64_xor, caml_int_compare, caml_int_of_float, caml_int_of_string, caml_invalid_argument, caml_is_continuation_tag, caml_is_js, caml_is_ml_bytes, caml_is_ml_string, caml_is_printable, caml_is_special_exception, caml_js_call, caml_js_delete, caml_js_equals, caml_js_error_of_exception, caml_js_error_option_of_exception, caml_js_eval_string, caml_js_expr, caml_js_from_array, caml_js_from_bool, caml_js_from_float, caml_js_from_int32, caml_js_from_nativeint, caml_js_from_string, caml_js_fun_call, caml_js_function_arity, caml_js_get, caml_js_get_console, caml_js_html_entities, caml_js_html_escape, caml_js_instanceof, caml_js_meth_call, caml_js_new, caml_js_object, caml_js_on_ie, caml_js_pure_expr, caml_js_set, caml_js_strict_equals, caml_js_to_array, caml_js_to_bool, caml_js_to_byte_string, caml_js_to_float, caml_js_to_int32, caml_js_to_nativeint, caml_js_to_string, caml_js_typeof, caml_js_var, caml_js_wrap_callback, caml_js_wrap_callback_arguments, caml_js_wrap_callback_strict, caml_js_wrap_callback_unsafe, caml_js_wrap_meth_callback, caml_js_wrap_meth_callback_arguments, caml_js_wrap_meth_callback_strict, caml_js_wrap_meth_callback_unsafe, caml_jsbytes_of_string, caml_jsoo_flags_effects, caml_jsoo_flags_use_js_string, caml_jsstring_of_string, caml_lazy_make_forward, caml_lazy_read_result, caml_lazy_reset_to_lazy, caml_lazy_update_to_forcing, caml_lazy_update_to_forward, caml_ldexp_float, caml_le_float, caml_lessequal, caml_lessthan, caml_lex_array, caml_lex_engine, caml_list_mount_point, caml_list_of_js_array, caml_list_to_js_array, caml_log10_float, caml_log1p_float, caml_log2_float, caml_log_float, caml_lt_float, caml_lxm_next, caml_make_array, caml_make_float_vect, caml_make_path, caml_make_vect, caml_marshal_constants, caml_marshal_data_size, caml_marshal_header_size, caml_maybe_attach_backtrace, caml_maybe_print_stats, caml_md5_bytes, caml_md5_chan, caml_md5_string, caml_memprof_discard, caml_memprof_set, caml_memprof_start, caml_memprof_stop, caml_ml_bytes_content, caml_ml_bytes_length, caml_ml_channel_size, caml_ml_channel_size_64, caml_ml_channels, caml_ml_close_channel, caml_ml_condition_broadcast, caml_ml_condition_new, caml_ml_condition_signal, caml_ml_condition_wait, caml_ml_debug_info_status, caml_ml_domain_cpu_relax, caml_ml_domain_id, caml_ml_domain_set_name, caml_ml_domain_unique_token, caml_ml_enable_runtime_warnings, caml_ml_flush, caml_ml_input, caml_ml_input_bigarray, caml_ml_input_block, caml_ml_input_char, caml_ml_input_int, caml_ml_input_scan_line, caml_ml_is_buffered, caml_ml_mutex_lock, caml_ml_mutex_new, caml_ml_mutex_try_lock, caml_ml_mutex_unlock, caml_ml_open_descriptor_in, caml_ml_open_descriptor_out, caml_ml_out_channels_list, caml_ml_output, caml_ml_output_bigarray, caml_ml_output_bytes, caml_ml_output_char, caml_ml_output_int, caml_ml_output_ta, caml_ml_pos_in, caml_ml_pos_in_64, caml_ml_pos_out, caml_ml_pos_out_64, caml_ml_runtime_warnings_enabled, caml_ml_seek_in, caml_ml_seek_in_64, caml_ml_seek_out, caml_ml_seek_out_64, caml_ml_set_binary_mode, caml_ml_set_buffered, caml_ml_set_channel_name, caml_ml_set_channel_output, caml_ml_set_channel_refill, caml_ml_string_length, caml_mod, caml_modf_float, caml_mount_autoload, caml_mul, caml_mul_float, caml_named_value, caml_named_values, caml_nativeint_add, caml_nativeint_and, caml_nativeint_bswap, caml_nativeint_compare, caml_nativeint_div, caml_nativeint_format, caml_nativeint_mod, caml_nativeint_mul, caml_nativeint_neg, caml_nativeint_of_float, caml_nativeint_of_int, caml_nativeint_of_int32, caml_nativeint_of_string, caml_nativeint_or, caml_nativeint_shift_left, caml_nativeint_shift_right, caml_nativeint_shift_right_unsigned, caml_nativeint_sub, caml_nativeint_to_float, caml_nativeint_to_int, caml_nativeint_to_int32, caml_nativeint_unmarshal, caml_nativeint_xor, caml_neg_float, caml_neq_float, caml_new_lex_engine, caml_new_string, caml_nextafter_float, caml_notequal, caml_obj_add_offset, caml_obj_block, caml_obj_compare_and_swap, caml_obj_dup, caml_obj_is_block, caml_obj_is_shared, caml_obj_make_forward, caml_obj_raw_field, caml_obj_reachable_words, caml_obj_set_raw_field, caml_obj_set_tag, caml_obj_tag, caml_obj_truncate, caml_obj_update_tag, caml_obj_with_tag, caml_ojs_iterate_properties, caml_ojs_new_arr, caml_ojs_wrap_fun_arguments, caml_oo_last_id, caml_out_channel_pos_fd, caml_output_val, caml_output_value, caml_output_value_to_buffer, caml_output_value_to_bytes, caml_output_value_to_string, caml_parse_digit, caml_parse_engine, caml_parse_format, caml_parse_sign_and_base, caml_parser_trace, caml_pos_in, caml_pos_out, caml_power_float, caml_pure_js_expr, caml_raise_constant, caml_raise_end_of_file, caml_raise_no_such_file, caml_raise_not_a_dir, caml_raise_not_found, caml_raise_sys_error, caml_raise_with_arg, caml_raise_with_args, caml_raise_with_string, caml_raise_zero_divide, caml_raw_backtrace_length, caml_raw_backtrace_next_slot, caml_raw_backtrace_slot, caml_read_file_content, caml_recommended_domain_count, caml_record_backtrace, caml_record_backtrace_flag, caml_refill, caml_register_channel_for_spacetime, caml_register_global, caml_register_named_value, caml_restore_raw_backtrace, caml_root, caml_round_float, caml_runtime_events_create_cursor, caml_runtime_events_free_cursor, caml_runtime_events_pause, caml_runtime_events_read_poll, caml_runtime_events_resume, caml_runtime_events_start, caml_runtime_events_user_register, caml_runtime_events_user_resolve, caml_runtime_events_user_write, caml_runtime_parameters, caml_runtime_variant, caml_runtime_warnings, caml_seek_in, caml_seek_out, caml_set_oo_id, caml_set_parser_trace, caml_set_static_env, caml_signbit_float, caml_sin_float, caml_sinh_float, caml_spacetime_enabled, caml_spacetime_only_works_for_native_code, caml_sqrt_float, caml_str_initialize, caml_str_repeat, caml_string_bound_error, caml_string_compare, caml_string_equal, caml_string_get, caml_string_get16, caml_string_get32, caml_string_get64, caml_string_greaterequal, caml_string_greaterthan, caml_string_hash, caml_string_lessequal, caml_string_lessthan, caml_string_notequal, caml_string_of_array, caml_string_of_bytes, caml_string_of_jsbytes, caml_string_of_jsstring, caml_string_set, caml_string_set16, caml_string_set32, caml_string_set64, caml_string_unsafe_get, caml_string_unsafe_set, caml_sub_float, caml_subarray_to_jsbytes, caml_sys_argv, caml_sys_chdir, caml_sys_close, caml_sys_const_backend_type, caml_sys_const_big_endian, caml_sys_const_int_size, caml_sys_const_max_wosize, caml_sys_const_naked_pointers_checked, caml_sys_const_ostype_cygwin, caml_sys_const_ostype_unix, caml_sys_const_ostype_win32, caml_sys_const_word_size, caml_sys_executable_name, caml_sys_exit, caml_sys_fds, caml_sys_file_exists, caml_sys_get_argv, caml_sys_get_config, caml_sys_getcwd, caml_sys_getenv, caml_sys_is_directory, caml_sys_is_regular_file, caml_sys_isatty, caml_sys_mkdir, caml_sys_modify_argv, caml_sys_open, caml_sys_open_for_node, caml_sys_random_seed, caml_sys_read_directory, caml_sys_remove, caml_sys_rename, caml_sys_rmdir, caml_sys_system_command, caml_sys_time, caml_sys_time_include_children, caml_sys_unsafe_getenv, caml_tan_float, caml_tanh_float, caml_to_js_string, caml_trailing_slash, caml_trampoline, caml_trampoline_return, caml_trunc_float, caml_uint8_array_of_bytes, caml_uint8_array_of_string, caml_unix_cleanup, caml_unix_closedir, caml_unix_filedescr_of_fd, caml_unix_findclose, caml_unix_findfirst, caml_unix_findnext, caml_unix_getpwuid, caml_unix_gettimeofday, caml_unix_getuid, caml_unix_gmtime, caml_unix_has_symlink, caml_unix_inet_addr_of_string, caml_unix_isatty, caml_unix_localtime, caml_unix_lstat, caml_unix_lstat_64, caml_unix_mkdir, caml_unix_mktime, caml_unix_opendir, caml_unix_readdir, caml_unix_readlink, caml_unix_rewinddir, caml_unix_rmdir, caml_unix_startup, caml_unix_stat, caml_unix_stat_64, caml_unix_symlink, caml_unix_time, caml_unix_unlink, caml_unmount, caml_update_dummy, caml_utf16_of_utf8, caml_utf8_of_utf16, caml_weak_blit, caml_weak_check, caml_weak_create, caml_weak_get, caml_weak_get_copy, caml_weak_set, caml_wrap_exception, caml_xmlhttprequest_create, compare_digits_nat, compare_nat, compare_nat_real, complement_nat, core_array_unsafe_float_blit, core_array_unsafe_int_blit, core_gc_compactions, core_gc_heap_chunks, core_gc_heap_words, core_gc_major_collections, core_gc_major_plus_minor_words, core_gc_major_words, core_gc_minor_collections, core_gc_minor_words, core_gc_promoted_words, core_gc_run_memprof_callbacks, core_gc_top_heap_words, core_heap_block_is_heap_block, core_md5_digest_subbigstring, core_md5_fd, core_time_ns_format, create_nat, decr_nat, deserialize_nat, div_digit_nat, div_helper, div_nat, expect_test_collector_after_test, expect_test_collector_before_test, expect_test_collector_saved_stderr, expect_test_collector_saved_stdout, fs_node_supported, incr_nat, initialize_nat, internalhash_fold_bigstring, is_digit_int, is_digit_odd, is_digit_zero, js_performance, js_prof_clear_marks, js_prof_clear_measures, js_prof_mark, js_prof_measure, jsoo_create_file, jsoo_create_file_extern, jsoo_effect_not_supported, jsoo_floor_log2, jsoo_is_ascii, jsoo_mount_point, jsoo_sys_getenv, land_digit_nat, length_nat, lor_digit_nat, lxor_digit_nat, make_unix_err_args, mult_digit_nat, mult_nat, nat_of_array, nth_digit_nat, nth_digit_nat_native, num_digits_nat, num_leading_zero_bits_in_digit, os_type, path_is_absolute, re_match, re_partial_match, re_replacement_text, re_search_backward, re_search_forward, re_string_match, resolve_fs_device, serialize_nat, set_digit_nat, set_digit_nat_native, set_to_zero_nat, shift_left_nat, shift_right_nat, square_nat, sub_nat, time_now_nanoseconds_since_unix_epoch_or_zero, unix_closedir, unix_getpwuid, unix_gettimeofday, unix_getuid, unix_gmtime, unix_has_symlink, unix_inet_addr_of_string, unix_isatty, unix_localtime, unix_lstat, unix_lstat_64, unix_mkdir, unix_mktime, unix_opendir, unix_readdir, unix_readlink, unix_rewinddir, unix_rmdir, unix_stat, unix_stat_64, unix_symlink, unix_time, unix_unlink, win_cleanup, win_filedescr_of_channel, win_findclose, win_findfirst, win_findnext, win_handle_fd, win_startup
//# unitInfo: Force_link: true
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   var joo_global_object = globalThis;
   (function(){
      var
       DefaultLocale =
         {days:
          ["Sunday",
           "Monday",
           "Tuesday",
           "Wednesday",
           "Thursday",
           "Friday",
           "Saturday"],
          shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          months:
          ["January",
           "February",
           "March",
           "April",
           "May",
           "June",
           "July",
           "August",
           "September",
           "October",
           "November",
           "December"],
          shortMonths:
          ["Jan",
           "Feb",
           "Mar",
           "Apr",
           "May",
           "Jun",
           "Jul",
           "Aug",
           "Sep",
           "Oct",
           "Nov",
           "Dec"],
          AM: "AM",
          PM: "PM",
          am: "am",
          pm: "pm",
          formats:
          {D: "%m/%d/%y",
           F: "%Y-%m-%d",
           R: "%H:%M",
           T: "%H:%M:%S",
           X: "%T",
           c: "%a %b %d %X %Y",
           r: "%I:%M:%S %p",
           v: "%e-%b-%Y",
           x: "%D"}},
       defaultStrftime = new Strftime(DefaultLocale, 0, false),
       isCommonJS = typeof module !== "undefined",
       namespace;
      if(isCommonJS){
       namespace = module.exports = adaptedStrftime;
       namespace.strftime = deprecatedStrftime;
       if(joo_global_object) joo_global_object.strftime = adaptedStrftime;
      }
      else{
       namespace =
        joo_global_object || function(){return this || (1, eval)("this");}();
       namespace.strftime = adaptedStrftime;
      }
      var
       _require = isCommonJS ? "require('strftime')" : "strftime",
       _deprecationWarnings = {};
      function deprecationWarning(name, instead){
       if(! _deprecationWarnings[name]){
        if
         (typeof console !== "undefined" && typeof console.warn == "function")
         console.warn
          ("[WARNING] " + name
           +
            " is deprecated and will be removed in version 1.0. Instead, use `"
           + instead
           + "`.");
        _deprecationWarnings[name] = true;
       }
      }
      namespace.strftimeTZ = deprecatedStrftimeTZ;
      namespace.strftimeUTC = deprecatedStrftimeUTC;
      namespace.localizedStrftime = deprecatedStrftimeLocalized;
      function adaptForwards(fn){
       fn.localize = defaultStrftime.localize.bind(defaultStrftime);
       fn.timezone = defaultStrftime.timezone.bind(defaultStrftime);
       fn.utc = defaultStrftime.utc.bind(defaultStrftime);
      }
      adaptForwards(adaptedStrftime);
      function adaptedStrftime(fmt, d, locale){
       if(d && d.days){locale = d; d = undefined;}
       if(locale)
        deprecationWarning
         ("`" + _require + "(format, [date], [locale])`",
          "var s = " + _require + ".localize(locale); s(format, [date])");
       var
        strftime = locale ? defaultStrftime.localize(locale) : defaultStrftime;
       return strftime(fmt, d);
      }
      adaptForwards(deprecatedStrftime);
      function deprecatedStrftime(fmt, d, locale){
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftime(format, [date], [locale])`",
          "var s = " + _require + ".localize(locale); s(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftime(format, [date])`",
          _require + "(format, [date])");
       var
        strftime = locale ? defaultStrftime.localize(locale) : defaultStrftime;
       return strftime(fmt, d);
      }
      function deprecatedStrftimeTZ(fmt, d, locale, timezone){
       if
        ((typeof locale == "number" || typeof locale == "string")
         && timezone == null){
        timezone = locale;
        locale = undefined;
       }
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftimeTZ(format, date, locale, tz)`",
          "var s = " + _require
          + ".localize(locale).timezone(tz); s(format, [date])` or `var s = "
          + _require
          + ".localize(locale); s.timezone(tz)(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftimeTZ(format, date, tz)`",
          "var s = " + _require + ".timezone(tz); s(format, [date])` or `"
          + _require
          + ".timezone(tz)(format, [date])");
       var
        strftime =
          (locale ? defaultStrftime.localize(locale) : defaultStrftime).timezone
           (timezone);
       return strftime(fmt, d);
      }
      var utcStrftime = defaultStrftime.utc();
      function deprecatedStrftimeUTC(fmt, d, locale){
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftimeUTC(format, date, locale)`",
          "var s = " + _require + ".localize(locale).utc(); s(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftimeUTC(format, [date])`",
          "var s = " + _require + ".utc(); s(format, [date])");
       var strftime = locale ? utcStrftime.localize(locale) : utcStrftime;
       return strftime(fmt, d);
      }
      function deprecatedStrftimeLocalized(locale){
       deprecationWarning
        ("`" + _require + ".localizedStrftime(locale)`",
         _require + ".localize(locale)");
       return defaultStrftime.localize(locale);
      }
      if(typeof Date.now !== "function")
       Date.now = function(){return + new Date();};
      function Strftime(locale, customTimezoneOffset, useUtcTimezone){
       var
        _locale = locale || DefaultLocale,
        _customTimezoneOffset = customTimezoneOffset || 0,
        _useUtcBasedDate = useUtcTimezone || false,
        _cachedDateTimestamp = 0,
        _cachedDate;
       function _strftime(format, date){
        var timestamp;
        if(! date){
         var currentTimestamp = Date.now();
         if(currentTimestamp > _cachedDateTimestamp){
          _cachedDateTimestamp = currentTimestamp;
          _cachedDate = new Date(_cachedDateTimestamp);
          timestamp = _cachedDateTimestamp;
          if(_useUtcBasedDate)
           _cachedDate =
            new
             Date
             (_cachedDateTimestamp + getTimestampToUtcOffsetFor(_cachedDate)
              + _customTimezoneOffset);
         }
         date = _cachedDate;
        }
        else{
         timestamp = date.getTime();
         if(_useUtcBasedDate)
          date =
           new
            Date
            (date.getTime() + getTimestampToUtcOffsetFor(date)
             + _customTimezoneOffset);
        }
        return _processFormat(format, date, _locale, timestamp);
       }
       function _processFormat(format, date, locale, timestamp){
        var
         resultString = "",
         padding = null,
         isInScope = false,
         length = format.length,
         extendedTZ = false;
        for(var i = 0; i < length; i++){
         var currentCharCode = format.charCodeAt(i);
         if(isInScope === true){
          if(currentCharCode === 45){padding = ""; continue;}
          else if(currentCharCode === 95){padding = " "; continue;}
          else if(currentCharCode === 48){padding = "0"; continue;}
          else if(currentCharCode === 58){
           if(extendedTZ)
            if
             (typeof console !== "undefined"
              && typeof console.warn == "function")
             console.warn
              ("[WARNING] detected use of unsupported %:: or %::: modifiers to strftime");
           extendedTZ = true;
           continue;
          }
          switch(currentCharCode){
            case 65:
             resultString += locale.days[date.getDay()]; break;
            case 66:
             resultString += locale.months[date.getMonth()]; break;
            case 67:
             resultString +=
              padTill2(Math.floor(date.getFullYear() / 100), padding);
             break;
            case 68:
             resultString +=
              _processFormat(locale.formats.D, date, locale, timestamp);
             break;
            case 70:
             resultString +=
              _processFormat(locale.formats.F, date, locale, timestamp);
             break;
            case 72:
             resultString += padTill2(date.getHours(), padding); break;
            case 73:
             resultString += padTill2(hours12(date.getHours()), padding);
             break;
            case 76:
             resultString += padTill3(Math.floor(timestamp % 1000)); break;
            case 77:
             resultString += padTill2(date.getMinutes(), padding); break;
            case 80:
             resultString += date.getHours() < 12 ? locale.am : locale.pm;
             break;
            case 82:
             resultString +=
              _processFormat(locale.formats.R, date, locale, timestamp);
             break;
            case 83:
             resultString += padTill2(date.getSeconds(), padding); break;
            case 84:
             resultString +=
              _processFormat(locale.formats.T, date, locale, timestamp);
             break;
            case 85:
             resultString += padTill2(weekNumber(date, "sunday"), padding);
             break;
            case 87:
             resultString += padTill2(weekNumber(date, "monday"), padding);
             break;
            case 88:
             resultString +=
              _processFormat(locale.formats.X, date, locale, timestamp);
             break;
            case 89:
             resultString += date.getFullYear(); break;
            case 90:
             if(_useUtcBasedDate && _customTimezoneOffset === 0)
              resultString += "GMT";
             else{
              var tzString = date.toString().match(/\(([\w\s]+)\)/);
              resultString += tzString && tzString[1] || "";
             }
             break;
            case 97:
             resultString += locale.shortDays[date.getDay()]; break;
            case 98:
             resultString += locale.shortMonths[date.getMonth()]; break;
            case 99:
             resultString +=
              _processFormat(locale.formats.c, date, locale, timestamp);
             break;
            case 100:
             resultString += padTill2(date.getDate(), padding); break;
            case 101:
             resultString +=
              padTill2(date.getDate(), padding == null ? " " : padding);
             break;
            case 104:
             resultString += locale.shortMonths[date.getMonth()]; break;
            case 106:
             var
              y = new Date(date.getFullYear(), 0, 1),
              day =
                Math.ceil
                 ((date.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
             resultString += padTill3(day);
             break;
            case 107:
             resultString +=
              padTill2(date.getHours(), padding == null ? " " : padding);
             break;
            case 108:
             resultString +=
              padTill2
               (hours12(date.getHours()), padding == null ? " " : padding);
             break;
            case 109:
             resultString += padTill2(date.getMonth() + 1, padding); break;
            case 110:
             resultString += "\n"; break;
            case 111:
             resultString += String(date.getDate()) + ordinal(date.getDate());
             break;
            case 112:
             resultString += date.getHours() < 12 ? locale.AM : locale.PM;
             break;
            case 114:
             resultString +=
              _processFormat(locale.formats.r, date, locale, timestamp);
             break;
            case 115:
             resultString += Math.floor(timestamp / 1000); break;
            case 116:
             resultString += "\t"; break;
            case 117:
             var day = date.getDay();
             resultString += day === 0 ? 7 : day;
             break;
            case 118:
             resultString +=
              _processFormat(locale.formats.v, date, locale, timestamp);
             break;
            case 119:
             resultString += date.getDay(); break;
            case 120:
             resultString +=
              _processFormat(locale.formats.x, date, locale, timestamp);
             break;
            case 121:
             resultString += ("" + date.getFullYear()).slice(2); break;
            case 122:
             if(_useUtcBasedDate && _customTimezoneOffset === 0)
              resultString += extendedTZ ? "+00:00" : "+0000";
             else{
              var off;
              if(_customTimezoneOffset !== 0)
               off = _customTimezoneOffset / (60 * 1000);
              else
               off = - date.getTimezoneOffset();
              var
               sign = off < 0 ? "-" : "+",
               sep = extendedTZ ? ":" : "",
               hours = Math.floor(Math.abs(off / 60)),
               mins = Math.abs(off % 60);
              resultString += sign + padTill2(hours) + sep + padTill2(mins);
             }
             break;
            default: resultString += format[i]; break;
          }
          padding = null;
          isInScope = false;
          continue;
         }
         if(currentCharCode === 37){isInScope = true; continue;}
         resultString += format[i];
        }
        return resultString;
       }
       var strftime = _strftime;
       strftime.localize =
        function(locale){
         return new
                 Strftime
                 (locale || _locale, _customTimezoneOffset, _useUtcBasedDate);
        };
       strftime.timezone =
        function(timezone){
         var
          customTimezoneOffset = _customTimezoneOffset,
          useUtcBasedDate = _useUtcBasedDate,
          timezoneType = typeof timezone;
         if(timezoneType === "number" || timezoneType === "string"){
          useUtcBasedDate = true;
          if(timezoneType === "string"){
           var
            sign = timezone[0] === "-" ? - 1 : 1,
            hours = parseInt(timezone.slice(1, 3), 10),
            minutes = parseInt(timezone.slice(3, 5), 10);
           customTimezoneOffset = sign * (60 * hours + minutes) * 60 * 1000;
          }
          else if(timezoneType === "number")
           customTimezoneOffset = timezone * 60 * 1000;
         }
         return new Strftime(_locale, customTimezoneOffset, useUtcBasedDate);
        };
       strftime.utc =
        function(){return new Strftime(_locale, _customTimezoneOffset, true);};
       return strftime;
      }
      function padTill2(numberToPad, paddingChar){
       if(paddingChar === "" || numberToPad > 9) return numberToPad;
       if(paddingChar == null) paddingChar = "0";
       return paddingChar + numberToPad;
      }
      function padTill3(numberToPad){
       if(numberToPad > 99) return numberToPad;
       if(numberToPad > 9) return "0" + numberToPad;
       return "00" + numberToPad;
      }
      function hours12(hour){
       if(hour === 0) return 12; else if(hour > 12) return hour - 12;
       return hour;
      }
      function weekNumber(date, firstWeekday){
       firstWeekday = firstWeekday || "sunday";
       var weekday = date.getDay();
       if(firstWeekday === "monday")
        if(weekday === 0) weekday = 6; else weekday--;
       var
        firstDayOfYearUtc = Date.UTC(date.getFullYear(), 0, 1),
        dateUtc =
          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()),
        yday = Math.floor((dateUtc - firstDayOfYearUtc) / 86400000),
        weekNum = (yday + 7 - weekday) / 7;
       return Math.floor(weekNum);
      }
      function ordinal(number){
       var i = number % 10, ii = number % 100;
       if(ii >= 11 && ii <= 13 || i === 0 || i >= 4) return "th";
       switch(i){case 1: return "st";case 2: return "nd";case 3: return "rd";
       }
      }
      function getTimestampToUtcOffsetFor(date){
       return (date.getTimezoneOffset() || 0) * 60000;
      }
     }
     ());
  }
  (globalThis));
(function(globalThis){
   (function(f){
      if(typeof exports === "object" && typeof module !== "undefined")
       module.exports = f();
      else if(typeof define === "function" && define.amd)
       define([], f);
      else{
       var g;
       if(typeof window !== "undefined")
        g = window;
       else if(typeof global !== "undefined")
        g = global;
       else if(typeof self !== "undefined") g = self; else g = this;
       g.VirtualDom = f();
      }
     }
     (function(){
       var define, module, exports;
       return function e(t, n, r){
                 function s(o, u){
                  if(! n[o]){
                   if(! t[o]){
                    var a = typeof require == "function" && require;
                    if(! u && a) return a(o, ! 0);
                    if(i) return i(o, ! 0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f;
                   }
                   var l = n[o] = {exports: {}};
                   t[o][0].call
                    (l.exports,
                     function(e){var n = t[o][1][e]; return s(n ? n : e);},
                     l,
                     l.exports,
                     e,
                     t,
                     n,
                     r);
                  }
                  return n[o].exports;
                 }
                 var i = typeof require == "function" && require;
                 for(var o = 0; o < r.length; o++) s(r[o]);
                 return s;
                }
                ({1:
                  [function(require, module, exports){
                    var createElement = require("./vdom/create-element.js");
                    module.exports = createElement;
                   },
                   {"./vdom/create-element.js": 24}],
                  2:
                  [function(require, module, exports){
                    var diff = require("./vtree/diff.js");
                    module.exports = diff;
                   },
                   {"./vtree/diff.js": 47}],
                  3:
                  [function(require, module, exports){
                    module.exports =
                     function(undef){
                       var
                        nativeSplit = String.prototype.split,
                        compliantExecNpcg = /()??/.exec("")[1] === undef,
                        self;
                       self =
                        function(str, separator, limit){
                         if
                          (Object.prototype.toString.call(separator)
                           !== "[object RegExp]")
                          return nativeSplit.call(str, separator, limit);
                         var
                          output = [],
                          flags =
                            (separator.ignoreCase ? "i" : "")
                            + (separator.multiline ? "m" : "")
                            + (separator.extended ? "x" : "")
                            + (separator.sticky ? "y" : ""),
                          lastLastIndex = 0,
                          separator = new RegExp(separator.source, flags + "g"),
                          separator2,
                          match,
                          lastIndex,
                          lastLength;
                         str += "";
                         if(! compliantExecNpcg)
                          separator2 =
                           new RegExp("^" + separator.source + "$(?!\\s)", flags);
                         limit = limit === undef ? - 1 >>> 0 : limit >>> 0;
                         while(match = separator.exec(str)){
                          lastIndex = match.index + match[0].length;
                          if(lastIndex > lastLastIndex){
                           output.push(str.slice(lastLastIndex, match.index));
                           if(! compliantExecNpcg && match.length > 1)
                            match[0].replace
                             (separator2,
                              function(){
                               for(var i = 1; i < arguments.length - 2; i++)
                                if(arguments[i] === undef) match[i] = undef;
                              });
                           if(match.length > 1 && match.index < str.length)
                            Array.prototype.push.apply(output, match.slice(1));
                           lastLength = match[0].length;
                           lastLastIndex = lastIndex;
                           if(output.length >= limit) break;
                          }
                          if(separator.lastIndex === match.index)
                           separator.lastIndex++;
                         }
                         if(lastLastIndex === str.length){
                          if(lastLength || ! separator.test("")) output.push("");
                         }
                         else
                          output.push(str.slice(lastLastIndex));
                         return output.length > limit
                                 ? output.slice(0, limit)
                                 : output;
                        };
                       return self;
                      }
                      ();
                   },
                   {}],
                  4:
                  [function(require, module, exports){
                    "use strict";
                    var
                     OneVersionConstraint = require("individual/one-version"),
                     MY_VERSION = "7";
                    OneVersionConstraint("ev-store", MY_VERSION);
                    var hashKey = "__EV_STORE_KEY@" + MY_VERSION;
                    module.exports = EvStore;
                    function EvStore(elem){
                     var hash = elem[hashKey];
                     if(! hash) hash = elem[hashKey] = {};
                     return hash;
                    }
                   },
                   {"individual/one-version": 6}],
                  5:
                  [function(require, module, exports){
                    (function(global){
                       "use strict";
                       var
                        root =
                          typeof window !== "undefined"
                           ? window
                           : typeof global !== "undefined" ? global : {};
                       module.exports = Individual;
                       function Individual(key, value){
                        if(key in root) return root[key];
                        root[key] = value;
                        return value;
                       }
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {}],
                  6:
                  [function(require, module, exports){
                    "use strict";
                    var Individual = require("./index.js");
                    module.exports = OneVersion;
                    function OneVersion(moduleName, version, defaultValue){
                     var
                      key = "__INDIVIDUAL_ONE_VERSION_" + moduleName,
                      enforceKey = key + "_ENFORCE_SINGLETON",
                      versionValue = Individual(enforceKey, version);
                     if(versionValue !== version)
                      throw new
                             Error
                             ("Can only have one copy of " + moduleName + ".\n"
                              + "You already have version "
                              + versionValue
                              + " installed.\n"
                              + "This means you cannot install version "
                              + version);
                     return Individual(key, defaultValue);
                    }
                   },
                   {"./index.js": 5}],
                  7:
                  [function(require, module, exports){
                    (function(global){
                       var
                        topLevel =
                          typeof global !== "undefined"
                           ? global
                           : typeof window !== "undefined" ? window : {},
                        minDoc = require("min-document");
                       if(typeof document !== "undefined")
                        module.exports = document;
                       else{
                        var doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
                        if(! doccy)
                         doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
                        module.exports = doccy;
                       }
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {"min-document": 17}],
                  8:
                  [function(require, module, exports){
                    var
                     domWalk = require("dom-walk"),
                     Comment = require("./dom-comment.js"),
                     DOMText = require("./dom-text.js"),
                     DOMElement = require("./dom-element.js"),
                     DocumentFragment = require("./dom-fragment.js"),
                     Event = require("./event.js"),
                     dispatchEvent = require("./event/dispatch-event.js"),
                     addEventListener = require("./event/add-event-listener.js"),
                     removeEventListener =
                       require("./event/remove-event-listener.js");
                    module.exports = Document;
                    function Document(){
                     if(! (this instanceof Document)) return new Document();
                     this.head = this.createElement("head");
                     this.body = this.createElement("body");
                     this.documentElement = this.createElement("html");
                     this.documentElement.appendChild(this.head);
                     this.documentElement.appendChild(this.body);
                     this.childNodes = [this.documentElement];
                     this.nodeType = 9;
                    }
                    var proto = Document.prototype;
                    proto.createTextNode =
                     function(value){return new DOMText(value, this);};
                    proto.createElementNS =
                     function(namespace, tagName){
                      var ns = namespace === null ? null : String(namespace);
                      return new DOMElement(tagName, this, ns);
                     };
                    proto.createElement =
                     function(tagName){return new DOMElement(tagName, this);};
                    proto.createDocumentFragment =
                     function(){return new DocumentFragment(this);};
                    proto.createEvent =
                     function(family){return new Event(family);};
                    proto.createComment =
                     function(data){return new Comment(data, this);};
                    proto.getElementById =
                     function(id){
                      id = String(id);
                      var
                       result =
                         domWalk
                          (this.childNodes,
                           function(node){if(String(node.id) === id) return node;});
                      return result || null;
                     };
                    proto.getElementsByClassName =
                     DOMElement.prototype.getElementsByClassName;
                    proto.getElementsByTagName =
                     DOMElement.prototype.getElementsByTagName;
                    proto.contains = DOMElement.prototype.contains;
                    proto.removeEventListener = removeEventListener;
                    proto.addEventListener = addEventListener;
                    proto.dispatchEvent = dispatchEvent;
                   },
                   {"./dom-comment.js": 9,
                    "./dom-element.js": 10,
                    "./dom-fragment.js": 11,
                    "./dom-text.js": 12,
                    "./event.js": 13,
                    "./event/add-event-listener.js": 14,
                    "./event/dispatch-event.js": 15,
                    "./event/remove-event-listener.js": 16,
                    "dom-walk": 18}],
                  9:
                  [function(require, module, exports){
                    module.exports = Comment;
                    function Comment(data, owner){
                     if(! (this instanceof Comment))
                      return new Comment(data, owner);
                     this.data = data;
                     this.nodeValue = data;
                     this.length = data.length;
                     this.ownerDocument = owner || null;
                    }
                    Comment.prototype.nodeType = 8;
                    Comment.prototype.nodeName = "#comment";
                    Comment.prototype.toString =
                     function(){return "[object Comment]";};
                   },
                   {}],
                  10:
                  [function(require, module, exports){
                    var
                     domWalk = require("dom-walk"),
                     dispatchEvent = require("./event/dispatch-event.js"),
                     addEventListener = require("./event/add-event-listener.js"),
                     removeEventListener =
                       require("./event/remove-event-listener.js"),
                     serializeNode = require("./serialize.js"),
                     htmlns = "http://www.w3.org/1999/xhtml";
                    module.exports = DOMElement;
                    function DOMElement(tagName, owner, namespace){
                     if(! (this instanceof DOMElement))
                      return new DOMElement(tagName);
                     var
                      ns = namespace === undefined ? htmlns : namespace || null;
                     this.tagName =
                      ns === htmlns ? String(tagName).toUpperCase() : tagName;
                     this.nodeName = this.tagName;
                     this.className = "";
                     this.dataset = {};
                     this.childNodes = [];
                     this.parentNode = null;
                     this.style = {};
                     this.ownerDocument = owner || null;
                     this.namespaceURI = ns;
                     this._attributes = {};
                     if(this.tagName === "INPUT") this.type = "text";
                    }
                    DOMElement.prototype.type = "DOMElement";
                    DOMElement.prototype.nodeType = 1;
                    DOMElement.prototype.appendChild =
                     function(child){
                      if(child.parentNode) child.parentNode.removeChild(child);
                      this.childNodes.push(child);
                      child.parentNode = this;
                      return child;
                     };
                    DOMElement.prototype.replaceChild =
                     function(elem, needle){
                      if(elem.parentNode) elem.parentNode.removeChild(elem);
                      var index = this.childNodes.indexOf(needle);
                      needle.parentNode = null;
                      this.childNodes[index] = elem;
                      elem.parentNode = this;
                      return needle;
                     };
                    DOMElement.prototype.removeChild =
                     function(elem){
                      var index = this.childNodes.indexOf(elem);
                      this.childNodes.splice(index, 1);
                      elem.parentNode = null;
                      return elem;
                     };
                    DOMElement.prototype.insertBefore =
                     function(elem, needle){
                      if(elem.parentNode) elem.parentNode.removeChild(elem);
                      var
                       index =
                         needle === null || needle === undefined
                          ? - 1
                          : this.childNodes.indexOf(needle);
                      if(index > - 1)
                       this.childNodes.splice(index, 0, elem);
                      else
                       this.childNodes.push(elem);
                      elem.parentNode = this;
                      return elem;
                     };
                    DOMElement.prototype.setAttributeNS =
                     function(namespace, name, value){
                      var
                       prefix = null,
                       localName = name,
                       colonPosition = name.indexOf(":");
                      if(colonPosition > - 1){
                       prefix = name.substr(0, colonPosition);
                       localName = name.substr(colonPosition + 1);
                      }
                      var
                       attributes =
                         this._attributes[namespace]
                         || (this._attributes[namespace] = {});
                      attributes[localName] = {value: value, prefix: prefix};
                     };
                    DOMElement.prototype.getAttributeNS =
                     function(namespace, name){
                      var
                       attributes = this._attributes[namespace],
                       value =
                         attributes && attributes[name] && attributes[name].value;
                      if(typeof value !== "string") return null;
                      return value;
                     };
                    DOMElement.prototype.removeAttributeNS =
                     function(namespace, name){
                      var attributes = this._attributes[namespace];
                      if(attributes) delete attributes[name];
                     };
                    DOMElement.prototype.hasAttributeNS =
                     function(namespace, name){
                      var attributes = this._attributes[namespace];
                      return ! ! attributes && name in attributes;
                     };
                    DOMElement.prototype.setAttribute =
                     function(name, value){
                      return this.setAttributeNS(null, name, value);
                     };
                    DOMElement.prototype.getAttribute =
                     function(name){return this.getAttributeNS(null, name);};
                    DOMElement.prototype.removeAttribute =
                     function(name){return this.removeAttributeNS(null, name);};
                    DOMElement.prototype.hasAttribute =
                     function(name){return this.hasAttributeNS(null, name);};
                    DOMElement.prototype.removeEventListener = removeEventListener;
                    DOMElement.prototype.addEventListener = addEventListener;
                    DOMElement.prototype.dispatchEvent = dispatchEvent;
                    DOMElement.prototype.focus = function(){return void 0;};
                    DOMElement.prototype.toString =
                     function(){return serializeNode(this);};
                    DOMElement.prototype.getElementsByClassName =
                     function(classNames){
                      var classes = classNames.split(" "), elems = [];
                      domWalk
                       (this,
                        function(node){
                         if(node.nodeType === 1){
                          var
                           nodeClassName = node.className || "",
                           nodeClasses = nodeClassName.split(" ");
                          if
                           (classes.every
                             (function(item){return nodeClasses.indexOf(item) !== - 1;}))
                           elems.push(node);
                         }
                        });
                      return elems;
                     };
                    DOMElement.prototype.getElementsByTagName =
                     function(tagName){
                      tagName = tagName.toLowerCase();
                      var elems = [];
                      domWalk
                       (this.childNodes,
                        function(node){
                         if
                          (node.nodeType === 1
                           &&
                            (tagName === "*" || node.tagName.toLowerCase() === tagName))
                          elems.push(node);
                        });
                      return elems;
                     };
                    DOMElement.prototype.contains =
                     function(element){
                      return domWalk
                              (this, function(node){return element === node;})
                             || false;
                     };
                   },
                   {"./event/add-event-listener.js": 14,
                    "./event/dispatch-event.js": 15,
                    "./event/remove-event-listener.js": 16,
                    "./serialize.js": 19,
                    "dom-walk": 18}],
                  11:
                  [function(require, module, exports){
                    var DOMElement = require("./dom-element.js");
                    module.exports = DocumentFragment;
                    function DocumentFragment(owner){
                     if(! (this instanceof DocumentFragment))
                      return new DocumentFragment();
                     this.childNodes = [];
                     this.parentNode = null;
                     this.ownerDocument = owner || null;
                    }
                    DocumentFragment.prototype.type = "DocumentFragment";
                    DocumentFragment.prototype.nodeType = 11;
                    DocumentFragment.prototype.nodeName = "#document-fragment";
                    DocumentFragment.prototype.appendChild = DOMElement.prototype.appendChild;
                    DocumentFragment.prototype.replaceChild = DOMElement.prototype.replaceChild;
                    DocumentFragment.prototype.removeChild = DOMElement.prototype.removeChild;
                    DocumentFragment.prototype.toString =
                     function(){
                      return this.childNodes.map
                               (function(node){return String(node);}).join
                              ("");
                     };
                   },
                   {"./dom-element.js": 10}],
                  12:
                  [function(require, module, exports){
                    module.exports = DOMText;
                    function DOMText(value, owner){
                     if(! (this instanceof DOMText)) return new DOMText(value);
                     this.data = value || "";
                     this.length = this.data.length;
                     this.ownerDocument = owner || null;
                    }
                    DOMText.prototype.type = "DOMTextNode";
                    DOMText.prototype.nodeType = 3;
                    DOMText.prototype.nodeName = "#text";
                    DOMText.prototype.toString = function(){return this.data;};
                    DOMText.prototype.replaceData =
                     function(index, length, value){
                      var
                       current = this.data,
                       left = current.substring(0, index),
                       right = current.substring(index + length, current.length);
                      this.data = left + value + right;
                      this.length = this.data.length;
                     };
                   },
                   {}],
                  13:
                  [function(require, module, exports){
                    module.exports = Event;
                    function Event(family){}
                    Event.prototype.initEvent =
                     function(type, bubbles, cancelable){
                      this.type = type;
                      this.bubbles = bubbles;
                      this.cancelable = cancelable;
                     };
                    Event.prototype.preventDefault = function(){};
                   },
                   {}],
                  14:
                  [function(require, module, exports){
                    module.exports = addEventListener;
                    function addEventListener(type, listener){
                     var elem = this;
                     if(! elem.listeners) elem.listeners = {};
                     if(! elem.listeners[type]) elem.listeners[type] = [];
                     if(elem.listeners[type].indexOf(listener) === - 1)
                      elem.listeners[type].push(listener);
                    }
                   },
                   {}],
                  15:
                  [function(require, module, exports){
                    module.exports = dispatchEvent;
                    function dispatchEvent(ev){
                     var elem = this, type = ev.type;
                     if(! ev.target) ev.target = elem;
                     if(! elem.listeners) elem.listeners = {};
                     var listeners = elem.listeners[type];
                     if(listeners)
                      return listeners.forEach
                              (function(listener){
                                ev.currentTarget = elem;
                                if(typeof listener === "function")
                                 listener(ev);
                                else
                                 listener.handleEvent(ev);
                               });
                     if(elem.parentNode) elem.parentNode.dispatchEvent(ev);
                    }
                   },
                   {}],
                  16:
                  [function(require, module, exports){
                    module.exports = removeEventListener;
                    function removeEventListener(type, listener){
                     var elem = this;
                     if(! elem.listeners) return;
                     if(! elem.listeners[type]) return;
                     var
                      list = elem.listeners[type],
                      index = list.indexOf(listener);
                     if(index !== - 1) list.splice(index, 1);
                    }
                   },
                   {}],
                  17:
                  [function(require, module, exports){
                    var Document = require("./document.js");
                    module.exports = new Document();
                   },
                   {"./document.js": 8}],
                  18:
                  [function(require, module, exports){
                    var slice = Array.prototype.slice;
                    module.exports = iterativelyWalk;
                    function iterativelyWalk(nodes, cb){
                     if(! ("length" in nodes)) nodes = [nodes];
                     nodes = slice.call(nodes);
                     while(nodes.length){
                      var node = nodes.shift(), ret = cb(node);
                      if(ret) return ret;
                      if(node.childNodes && node.childNodes.length)
                       nodes = slice.call(node.childNodes).concat(nodes);
                     }
                    }
                   },
                   {}],
                  19:
                  [function(require, module, exports){
                    module.exports = serializeNode;
                    var
                     voidElements =
                       /area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr/i;
                    function serializeNode(node){
                     switch(node.nodeType){
                       case 3:
                        return escapeText(node.data);
                       case 8:
                        return "<!--" + node.data + "-->";
                       default: return serializeElement(node);
                     }
                    }
                    function serializeElement(elem){
                     var strings = [], tagname = elem.tagName;
                     if(elem.namespaceURI === "http://www.w3.org/1999/xhtml")
                      tagname = tagname.toLowerCase();
                     strings.push
                      ("<" + tagname + properties(elem) + datasetify(elem));
                     if(voidElements.test(tagname))
                      strings.push(" />");
                     else{
                      strings.push(">");
                      if(elem.childNodes.length)
                       strings.push.apply
                        (strings, elem.childNodes.map(serializeNode));
                      else if(elem.textContent || elem.innerText)
                       strings.push(escapeText(elem.textContent || elem.innerText));
                      else if(elem.innerHTML) strings.push(elem.innerHTML);
                      strings.push("<\/" + tagname + ">");
                     }
                     return strings.join("");
                    }
                    function isProperty(elem, key){
                     var type = typeof elem[key];
                     if(key === "style" && Object.keys(elem.style).length > 0)
                      return true;
                     return elem.hasOwnProperty(key)
                            &&
                             (type === "string" || type === "boolean"
                             || type === "number")
                            && key !== "nodeName"
                            && key !== "className"
                            && key !== "tagName"
                            && key !== "textContent"
                            && key !== "innerText"
                            && key !== "namespaceURI"
                            && key !== "innerHTML";
                    }
                    function stylify(styles){
                     if(typeof styles === "string") return styles;
                     var attr = "";
                     Object.keys(styles).forEach
                      (function(key){
                        var value = styles[key];
                        key =
                         key.replace
                          (/[A-Z]/g, function(c){return "-" + c.toLowerCase();});
                        attr += key + ":" + value + ";";
                       });
                     return attr;
                    }
                    function datasetify(elem){
                     var ds = elem.dataset, props = [];
                     for(var key in ds)
                      props.push({name: "data-" + key, value: ds[key]});
                     return props.length ? stringify(props) : "";
                    }
                    function stringify(list){
                     var attributes = [];
                     list.forEach
                      (function(tuple){
                        var name = tuple.name, value = tuple.value;
                        if(name === "style") value = stylify(value);
                        attributes.push
                         (name + "=" + '"' + escapeAttributeValue(value) + '"');
                       });
                     return attributes.length ? " " + attributes.join(" ") : "";
                    }
                    function properties(elem){
                     var props = [];
                     for(var key in elem)
                      if(isProperty(elem, key))
                       props.push({name: key, value: elem[key]});
                     for(var ns in elem._attributes)
                      for(var attribute in elem._attributes[ns]){
                       var
                        prop = elem._attributes[ns][attribute],
                        name = (prop.prefix ? prop.prefix + ":" : "") + attribute;
                       props.push({name: name, value: prop.value});
                      }
                     if(elem.className)
                      props.push({name: "class", value: elem.className});
                     return props.length ? stringify(props) : "";
                    }
                    function escapeText(s){
                     var str = "";
                     if(typeof s === "string")
                      str = s;
                     else if(s) str = s.toString();
                     return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace
                             (/>/g, "&gt;");
                    }
                    function escapeAttributeValue(str){
                     return escapeText(str).replace(/"/g, "&quot;");
                    }
                   },
                   {}],
                  20:
                  [function(require, module, exports){
                    "use strict";
                    module.exports =
                     function(x){return typeof x === "object" && x !== null;};
                   },
                   {}],
                  21:
                  [function(require, module, exports){
                    var
                     nativeIsArray = Array.isArray,
                     toString = Object.prototype.toString;
                    module.exports = nativeIsArray || isArray;
                    function isArray(obj){
                     return toString.call(obj) === "[object Array]";
                    }
                   },
                   {}],
                  22:
                  [function(require, module, exports){
                    var patch = require("./vdom/patch.js");
                    module.exports = patch;
                   },
                   {"./vdom/patch.js": 27}],
                  23:
                  [function(require, module, exports){
                    var
                     isObject = require("is-object"),
                     isHook = require("../vnode/is-vhook.js");
                    module.exports = applyProperties;
                    function applyProperties(node, props, previous){
                     for(var propName in props){
                      var propValue = props[propName];
                      if(propValue === undefined)
                       removeProperty(node, propName, propValue, previous);
                      else if(isHook(propValue)){
                       removeProperty(node, propName, propValue, previous);
                       if(propValue.hook)
                        propValue.hook
                         (node, propName, previous ? previous[propName] : undefined);
                      }
                      else if(isObject(propValue))
                       patchObject(node, props, previous, propName, propValue);
                      else
                       node[propName] = propValue;
                     }
                    }
                    function removeProperty(node, propName, propValue, previous){
                     if(previous){
                      var previousValue = previous[propName];
                      if(! isHook(previousValue))
                       if(propName === "attributes")
                        for(var attrName in previousValue)
                         node.removeAttribute(attrName);
                       else if(propName === "style")
                        for(var i in previousValue) node.style[i] = "";
                       else if(typeof previousValue === "string")
                        node[propName] = "";
                       else
                        node[propName] = null;
                      else if(previousValue.unhook)
                       previousValue.unhook(node, propName, propValue);
                     }
                    }
                    function patchObject
                    (node, props, previous, propName, propValue){
                     var
                      previousValue = previous ? previous[propName] : undefined;
                     if(propName === "attributes"){
                      for(var attrName in propValue){
                       var attrValue = propValue[attrName];
                       if(attrValue === undefined)
                        node.removeAttribute(attrName);
                       else
                        node.setAttribute(attrName, attrValue);
                      }
                      return;
                     }
                     if
                      (previousValue && isObject(previousValue)
                       && getPrototype(previousValue) !== getPrototype(propValue)){node[propName] = propValue; return;}
                     if(! isObject(node[propName])) node[propName] = {};
                     var replacer = propName === "style" ? "" : undefined;
                     for(var k in propValue){
                      var value = propValue[k];
                      node[propName][k] = value === undefined ? replacer : value;
                     }
                    }
                    function getPrototype(value){
                     if(Object.getPrototypeOf)
                      return Object.getPrototypeOf(value);
                     else if(value.__proto__)
                      return value.__proto__;
                     else if(value.constructor)
                      return value.constructor.prototype;
                    }
                   },
                   {"../vnode/is-vhook.js": 38, "is-object": 20}],
                  24:
                  [function(require, module, exports){
                    var
                     document = require("global/document"),
                     applyProperties = require("./apply-properties"),
                     isVNode = require("../vnode/is-vnode.js"),
                     isVText = require("../vnode/is-vtext.js"),
                     isWidget = require("../vnode/is-widget.js"),
                     handleThunk = require("../vnode/handle-thunk.js");
                    module.exports = createElement;
                    function createElement(vnode, opts){
                     var
                      doc = opts ? opts.document || document : document,
                      warn = opts ? opts.warn : null;
                     vnode = handleThunk(vnode).a;
                     if(isWidget(vnode))
                      return vnode.init();
                     else if(isVText(vnode))
                      return doc.createTextNode(vnode.text);
                     else if(! isVNode(vnode)){
                      if(warn)
                       warn("Item is not a valid virtual dom node", vnode);
                      return null;
                     }
                     var
                      node =
                        vnode.namespace === null
                         ? doc.createElement(vnode.tagName)
                         : doc.createElementNS(vnode.namespace, vnode.tagName),
                      props = vnode.properties;
                     applyProperties(node, props);
                     var children = vnode.children;
                     for(var i = 0; i < children.length; i++){
                      var childNode = createElement(children[i], opts);
                      if(childNode) node.appendChild(childNode);
                     }
                     return node;
                    }
                   },
                   {"../vnode/handle-thunk.js": 36,
                    "../vnode/is-vnode.js": 39,
                    "../vnode/is-vtext.js": 40,
                    "../vnode/is-widget.js": 41,
                    "./apply-properties": 23,
                    "global/document": 7}],
                  25:
                  [function(require, module, exports){
                    var noChild = {};
                    module.exports = domIndex;
                    function domIndex(rootNode, tree, indices, nodes){
                     if(! indices || indices.length === 0)
                      return {};
                     else{
                      indices.sort(ascending);
                      return recurse(rootNode, tree, indices, nodes, 0);
                     }
                    }
                    function recurse(rootNode, tree, indices, nodes, rootIndex){
                     nodes = nodes || {};
                     if(rootNode){
                      if(indexInRange(indices, rootIndex, rootIndex))
                       nodes[rootIndex] = rootNode;
                      var vChildren = tree.children;
                      if(vChildren){
                       var childNodes = rootNode.childNodes;
                       for(var i = 0; i < tree.children.length; i++){
                        rootIndex += 1;
                        var
                         vChild = vChildren[i] || noChild,
                         nextIndex = rootIndex + (vChild.count || 0);
                        if(indexInRange(indices, rootIndex, nextIndex))
                         recurse(childNodes[i], vChild, indices, nodes, rootIndex);
                        rootIndex = nextIndex;
                       }
                      }
                     }
                     return nodes;
                    }
                    function indexInRange(indices, left, right){
                     if(indices.length === 0) return false;
                     var
                      minIndex = 0,
                      maxIndex = indices.length - 1,
                      currentIndex,
                      currentItem;
                     while(minIndex <= maxIndex){
                      currentIndex = (maxIndex + minIndex) / 2 >> 0;
                      currentItem = indices[currentIndex];
                      if(minIndex === maxIndex)
                       return currentItem >= left && currentItem <= right;
                      else if(currentItem < left)
                       minIndex = currentIndex + 1;
                      else if(currentItem > right)
                       maxIndex = currentIndex - 1;
                      else
                       return true;
                     }
                     return false;
                    }
                    function ascending(a, b){return a > b ? 1 : - 1;}
                   },
                   {}],
                  26:
                  [function(require, module, exports){
                    var
                     applyProperties = require("./apply-properties"),
                     isWidget = require("../vnode/is-widget.js"),
                     VPatch = require("../vnode/vpatch.js"),
                     updateWidget = require("./update-widget");
                    module.exports = applyPatch;
                    function applyPatch(vpatch, domNode, renderOptions){
                     var
                      type = vpatch.type,
                      vNode = vpatch.vNode,
                      patch = vpatch.patch;
                     switch(type){
                       case VPatch.REMOVE:
                        return removeNode(domNode, vNode);
                       case VPatch.INSERT:
                        return insertNode(domNode, patch, renderOptions);
                       case VPatch.VTEXT:
                        return stringPatch(domNode, vNode, patch, renderOptions);
                       case VPatch.WIDGET:
                        return widgetPatch(domNode, vNode, patch, renderOptions);
                       case VPatch.VNODE:
                        return vNodePatch(domNode, vNode, patch, renderOptions);
                       case VPatch.ORDER:
                        reorderChildren(domNode, patch); return domNode;
                       case VPatch.PROPS:
                        applyProperties(domNode, patch, vNode.properties);
                        return domNode;
                       case VPatch.THUNK:
                        return replaceRoot
                                (domNode,
                                 renderOptions.patch(domNode, patch, renderOptions));
                       default: return domNode;
                     }
                    }
                    function removeNode(domNode, vNode){
                     var parentNode = domNode.parentNode;
                     if(parentNode) parentNode.removeChild(domNode);
                     destroyWidget(domNode, vNode);
                     return null;
                    }
                    function insertNode(parentNode, vNode, renderOptions){
                     var newNode = renderOptions.render(vNode, renderOptions);
                     if(parentNode) parentNode.appendChild(newNode);
                     return parentNode;
                    }
                    function stringPatch
                    (domNode, leftVNode, vText, renderOptions){
                     var newNode;
                     if(domNode.nodeType === 3){
                      domNode.replaceData(0, domNode.length, vText.text);
                      newNode = domNode;
                     }
                     else{
                      var parentNode = domNode.parentNode;
                      newNode = renderOptions.render(vText, renderOptions);
                      if(parentNode && newNode !== domNode)
                       parentNode.replaceChild(newNode, domNode);
                     }
                     return newNode;
                    }
                    function widgetPatch
                    (domNode, leftVNode, widget, renderOptions){
                     var updating = updateWidget(leftVNode, widget), newNode;
                     if(updating)
                      newNode = widget.update(leftVNode, domNode) || domNode;
                     else
                      newNode = renderOptions.render(widget, renderOptions);
                     var parentNode = domNode.parentNode;
                     if(parentNode && newNode !== domNode)
                      parentNode.replaceChild(newNode, domNode);
                     if(! updating) destroyWidget(domNode, leftVNode);
                     return newNode;
                    }
                    function vNodePatch
                    (domNode, leftVNode, vNode, renderOptions){
                     var
                      parentNode = domNode.parentNode,
                      newNode = renderOptions.render(vNode, renderOptions);
                     if(parentNode && newNode !== domNode)
                      parentNode.replaceChild(newNode, domNode);
                     return newNode;
                    }
                    function destroyWidget(domNode, w){
                     if(typeof w.destroy === "function" && isWidget(w))
                      w.destroy(domNode);
                    }
                    function reorderChildren(domNode, moves){
                     var
                      childNodes = domNode.childNodes,
                      keyMap = {},
                      node,
                      remove,
                      insert;
                     for(var i = 0; i < moves.removes.length; i++){
                      remove = moves.removes[i];
                      node = childNodes[remove.from];
                      if(remove.key) keyMap[remove.key] = node;
                      domNode.removeChild(node);
                     }
                     var length = childNodes.length;
                     for(var j = 0; j < moves.inserts.length; j++){
                      insert = moves.inserts[j];
                      node = keyMap[insert.key];
                      domNode.insertBefore
                       (node, insert.to >= length++ ? null : childNodes[insert.to]);
                     }
                    }
                    function replaceRoot(oldRoot, newRoot){
                     if
                      (oldRoot && newRoot && oldRoot !== newRoot
                       && oldRoot.parentNode)
                      oldRoot.parentNode.replaceChild(newRoot, oldRoot);
                     return newRoot;
                    }
                   },
                   {"../vnode/is-widget.js": 41,
                    "../vnode/vpatch.js": 44,
                    "./apply-properties": 23,
                    "./update-widget": 28}],
                  27:
                  [function(require, module, exports){
                    var
                     document = require("global/document"),
                     isArray = require("x-is-array"),
                     render = require("./create-element"),
                     domIndex = require("./dom-index"),
                     patchOp = require("./patch-op");
                    module.exports = patch;
                    function patch(rootNode, patches, renderOptions){
                     renderOptions = renderOptions || {};
                     renderOptions.patch =
                      renderOptions.patch && renderOptions.patch !== patch
                       ? renderOptions.patch
                       : patchRecursive;
                     renderOptions.render = renderOptions.render || render;
                     return renderOptions.patch(rootNode, patches, renderOptions);
                    }
                    function patchRecursive(rootNode, patches, renderOptions){
                     var indices = patchIndices(patches);
                     if(indices.length === 0) return rootNode;
                     var
                      index = domIndex(rootNode, patches.a, indices),
                      ownerDocument = rootNode.ownerDocument;
                     if(! renderOptions.document && ownerDocument !== document)
                      renderOptions.document = ownerDocument;
                     for(var i = 0; i < indices.length; i++){
                      var nodeIndex = indices[i];
                      rootNode =
                       applyPatch
                        (rootNode,
                         index[nodeIndex],
                         patches[nodeIndex],
                         renderOptions);
                     }
                     return rootNode;
                    }
                    function applyPatch
                    (rootNode, domNode, patchList, renderOptions){
                     if(! domNode) return rootNode;
                     var newNode;
                     if(isArray(patchList))
                      for(var i = 0; i < patchList.length; i++){
                       newNode = patchOp(patchList[i], domNode, renderOptions);
                       if(domNode === rootNode) rootNode = newNode;
                      }
                     else{
                      newNode = patchOp(patchList, domNode, renderOptions);
                      if(domNode === rootNode) rootNode = newNode;
                     }
                     return rootNode;
                    }
                    function patchIndices(patches){
                     var indices = [];
                     for(var key in patches)
                      if(key !== "a") indices.push(Number(key));
                     return indices;
                    }
                   },
                   {"./create-element": 24,
                    "./dom-index": 25,
                    "./patch-op": 26,
                    "global/document": 7,
                    "x-is-array": 21}],
                  28:
                  [function(require, module, exports){
                    var isWidget = require("../vnode/is-widget.js");
                    module.exports = updateWidget;
                    function updateWidget(a, b){
                     if(isWidget(a) && isWidget(b))
                      return "name" in a && "name" in b
                              ? a.id === b.id
                              : a.init === b.init;
                     return false;
                    }
                   },
                   {"../vnode/is-widget.js": 41}],
                  29:
                  [function(require, module, exports){
                    "use strict";
                    module.exports = AttributeHook;
                    function AttributeHook(namespace, value){
                     if(! (this instanceof AttributeHook))
                      return new AttributeHook(namespace, value);
                     this.namespace = namespace;
                     this.value = value;
                    }
                    AttributeHook.prototype.hook =
                     function(node, prop, prev){
                      if
                       (prev && prev.type === "AttributeHook"
                        && prev.value === this.value
                        && prev.namespace === this.namespace)
                       return;
                      node.setAttributeNS(this.namespace, prop, this.value);
                     };
                    AttributeHook.prototype.unhook =
                     function(node, prop, next){
                      if
                       (next && next.type === "AttributeHook"
                        && next.namespace === this.namespace)
                       return;
                      var
                       colonPosition = prop.indexOf(":"),
                       localName =
                         colonPosition > - 1 ? prop.substr(colonPosition + 1) : prop;
                      node.removeAttributeNS(this.namespace, localName);
                     };
                    AttributeHook.prototype.type = "AttributeHook";
                   },
                   {}],
                  30:
                  [function(require, module, exports){
                    "use strict";
                    var EvStore = require("ev-store");
                    module.exports = EvHook;
                    function EvHook(value){
                     if(! (this instanceof EvHook)) return new EvHook(value);
                     this.value = value;
                    }
                    EvHook.prototype.hook =
                     function(node, propertyName){
                      var es = EvStore(node), propName = propertyName.substr(3);
                      es[propName] = this.value;
                     };
                    EvHook.prototype.unhook =
                     function(node, propertyName){
                      var es = EvStore(node), propName = propertyName.substr(3);
                      es[propName] = undefined;
                     };
                   },
                   {"ev-store": 4}],
                  31:
                  [function(require, module, exports){
                    "use strict";
                    module.exports = SoftSetHook;
                    function SoftSetHook(value){
                     if(! (this instanceof SoftSetHook))
                      return new SoftSetHook(value);
                     this.value = value;
                    }
                    SoftSetHook.prototype.hook =
                     function(node, propertyName){
                      if(node[propertyName] !== this.value)
                       node[propertyName] = this.value;
                     };
                   },
                   {}],
                  32:
                  [function(require, module, exports){
                    "use strict";
                    var
                     isArray = require("x-is-array"),
                     VNode = require("../vnode/vnode.js"),
                     VText = require("../vnode/vtext.js"),
                     isVNode = require("../vnode/is-vnode"),
                     isVText = require("../vnode/is-vtext"),
                     isWidget = require("../vnode/is-widget"),
                     isHook = require("../vnode/is-vhook"),
                     isVThunk = require("../vnode/is-thunk"),
                     parseTag = require("./parse-tag.js"),
                     softSetHook = require("./hooks/soft-set-hook.js"),
                     evHook = require("./hooks/ev-hook.js");
                    module.exports = h;
                    function h(tagName, properties, children){
                     var childNodes = [], tag, props, key, namespace;
                     if(! children && isChildren(properties)){children = properties; props = {};}
                     props = props || properties || {};
                     tag = parseTag(tagName, props);
                     if(props.hasOwnProperty("key")){
                      key = props.key;
                      props.key = undefined;
                     }
                     if(props.hasOwnProperty("namespace")){
                      namespace = props.namespace;
                      props.namespace = undefined;
                     }
                     if
                      (tag === "INPUT" && ! namespace
                       && props.hasOwnProperty("value")
                       && props.value !== undefined
                       && ! isHook(props.value))
                      props.value = softSetHook(props.value);
                     transformProperties(props);
                     if(children !== undefined && children !== null)
                      addChild(children, childNodes, tag, props);
                     return new VNode(tag, props, childNodes, key, namespace);
                    }
                    function addChild(c, childNodes, tag, props){
                     if(typeof c === "string")
                      childNodes.push(new VText(c));
                     else if(typeof c === "number")
                      childNodes.push(new VText(String(c)));
                     else if(isChild(c))
                      childNodes.push(c);
                     else if(isArray(c))
                      for(var i = 0; i < c.length; i++)
                       addChild(c[i], childNodes, tag, props);
                     else if(c === null || c === undefined)
                      return;
                     else
                      throw UnexpectedVirtualElement
                             ({foreignObject: c,
                               parentVnode: {tagName: tag, properties: props}});
                    }
                    function transformProperties(props){
                     for(var propName in props)
                      if(props.hasOwnProperty(propName)){
                       var value = props[propName];
                       if(isHook(value)) continue;
                       if(propName.substr(0, 3) === "ev-")
                        props[propName] = evHook(value);
                      }
                    }
                    function isChild(x){
                     return isVNode(x) || isVText(x) || isWidget(x)
                            || isVThunk(x);
                    }
                    function isChildren(x){
                     return typeof x === "string" || isArray(x) || isChild(x);
                    }
                    function UnexpectedVirtualElement(data){
                     var err = new Error();
                     err.type = "virtual-hyperscript.unexpected.virtual-element";
                     err.message =
                      "Unexpected virtual child passed to h().\n"
                      + "Expected a VNode / Vthunk / VWidget / string but:\n"
                      + "got:\n"
                      + errorString(data.foreignObject)
                      + ".\n"
                      + "The parent vnode is:\n"
                      + errorString(data.parentVnode);
                     "\n"
                     + "Suggested fix: change your `h(..., [ ... ])` callsite.";
                     err.foreignObject = data.foreignObject;
                     err.parentVnode = data.parentVnode;
                     return err;
                    }
                    function errorString(obj){
                     try{return JSON.stringify(obj, null, "    ");}
                     catch(e){return String(obj);}
                    }
                   },
                   {"../vnode/is-thunk": 37,
                    "../vnode/is-vhook": 38,
                    "../vnode/is-vnode": 39,
                    "../vnode/is-vtext": 40,
                    "../vnode/is-widget": 41,
                    "../vnode/vnode.js": 43,
                    "../vnode/vtext.js": 45,
                    "./hooks/ev-hook.js": 30,
                    "./hooks/soft-set-hook.js": 31,
                    "./parse-tag.js": 33,
                    "x-is-array": 21}],
                  33:
                  [function(require, module, exports){
                    "use strict";
                    var
                     split = require("browser-split"),
                     classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,
                     notClassId = /^\.|#/;
                    module.exports = parseTag;
                    function parseTag(tag, props){
                     if(! tag) return "DIV";
                     var
                      noId = ! props.hasOwnProperty("id"),
                      tagParts = split(tag, classIdSplit),
                      tagName = null;
                     if(notClassId.test(tagParts[1])) tagName = "DIV";
                     var classes, part, type, i;
                     for(i = 0; i < tagParts.length; i++){
                      part = tagParts[i];
                      if(! part) continue;
                      type = part.charAt(0);
                      if(! tagName)
                       tagName = part;
                      else if(type === "."){
                       classes = classes || [];
                       classes.push(part.substring(1, part.length));
                      }
                      else if(type === "#" && noId)
                       props.id = part.substring(1, part.length);
                     }
                     if(classes){
                      if(props.className) classes.push(props.className);
                      props.className = classes.join(" ");
                     }
                     return props.namespace ? tagName : tagName.toUpperCase();
                    }
                   },
                   {"browser-split": 3}],
                  34:
                  [function(require, module, exports){
                    "use strict";
                    var
                     DEFAULT_NAMESPACE = null,
                     EV_NAMESPACE = "http://www.w3.org/2001/xml-events",
                     XLINK_NAMESPACE = "http://www.w3.org/1999/xlink",
                     XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace",
                     SVG_PROPERTIES =
                       {"about": DEFAULT_NAMESPACE,
                        "accent-height": DEFAULT_NAMESPACE,
                        "accumulate": DEFAULT_NAMESPACE,
                        "additive": DEFAULT_NAMESPACE,
                        "alignment-baseline": DEFAULT_NAMESPACE,
                        "alphabetic": DEFAULT_NAMESPACE,
                        "amplitude": DEFAULT_NAMESPACE,
                        "arabic-form": DEFAULT_NAMESPACE,
                        "ascent": DEFAULT_NAMESPACE,
                        "attributeName": DEFAULT_NAMESPACE,
                        "attributeType": DEFAULT_NAMESPACE,
                        "azimuth": DEFAULT_NAMESPACE,
                        "bandwidth": DEFAULT_NAMESPACE,
                        "baseFrequency": DEFAULT_NAMESPACE,
                        "baseProfile": DEFAULT_NAMESPACE,
                        "baseline-shift": DEFAULT_NAMESPACE,
                        "bbox": DEFAULT_NAMESPACE,
                        "begin": DEFAULT_NAMESPACE,
                        "bias": DEFAULT_NAMESPACE,
                        "by": DEFAULT_NAMESPACE,
                        "calcMode": DEFAULT_NAMESPACE,
                        "cap-height": DEFAULT_NAMESPACE,
                        "class": DEFAULT_NAMESPACE,
                        "clip": DEFAULT_NAMESPACE,
                        "clip-path": DEFAULT_NAMESPACE,
                        "clip-rule": DEFAULT_NAMESPACE,
                        "clipPathUnits": DEFAULT_NAMESPACE,
                        "color": DEFAULT_NAMESPACE,
                        "color-interpolation": DEFAULT_NAMESPACE,
                        "color-interpolation-filters": DEFAULT_NAMESPACE,
                        "color-profile": DEFAULT_NAMESPACE,
                        "color-rendering": DEFAULT_NAMESPACE,
                        "content": DEFAULT_NAMESPACE,
                        "contentScriptType": DEFAULT_NAMESPACE,
                        "contentStyleType": DEFAULT_NAMESPACE,
                        "cursor": DEFAULT_NAMESPACE,
                        "cx": DEFAULT_NAMESPACE,
                        "cy": DEFAULT_NAMESPACE,
                        "d": DEFAULT_NAMESPACE,
                        "datatype": DEFAULT_NAMESPACE,
                        "defaultAction": DEFAULT_NAMESPACE,
                        "descent": DEFAULT_NAMESPACE,
                        "diffuseConstant": DEFAULT_NAMESPACE,
                        "direction": DEFAULT_NAMESPACE,
                        "display": DEFAULT_NAMESPACE,
                        "divisor": DEFAULT_NAMESPACE,
                        "dominant-baseline": DEFAULT_NAMESPACE,
                        "dur": DEFAULT_NAMESPACE,
                        "dx": DEFAULT_NAMESPACE,
                        "dy": DEFAULT_NAMESPACE,
                        "edgeMode": DEFAULT_NAMESPACE,
                        "editable": DEFAULT_NAMESPACE,
                        "elevation": DEFAULT_NAMESPACE,
                        "enable-background": DEFAULT_NAMESPACE,
                        "end": DEFAULT_NAMESPACE,
                        "ev:event": EV_NAMESPACE,
                        "event": DEFAULT_NAMESPACE,
                        "exponent": DEFAULT_NAMESPACE,
                        "externalResourcesRequired": DEFAULT_NAMESPACE,
                        "fill": DEFAULT_NAMESPACE,
                        "fill-opacity": DEFAULT_NAMESPACE,
                        "fill-rule": DEFAULT_NAMESPACE,
                        "filter": DEFAULT_NAMESPACE,
                        "filterRes": DEFAULT_NAMESPACE,
                        "filterUnits": DEFAULT_NAMESPACE,
                        "flood-color": DEFAULT_NAMESPACE,
                        "flood-opacity": DEFAULT_NAMESPACE,
                        "focusHighlight": DEFAULT_NAMESPACE,
                        "focusable": DEFAULT_NAMESPACE,
                        "font-family": DEFAULT_NAMESPACE,
                        "font-size": DEFAULT_NAMESPACE,
                        "font-size-adjust": DEFAULT_NAMESPACE,
                        "font-stretch": DEFAULT_NAMESPACE,
                        "font-style": DEFAULT_NAMESPACE,
                        "font-variant": DEFAULT_NAMESPACE,
                        "font-weight": DEFAULT_NAMESPACE,
                        "format": DEFAULT_NAMESPACE,
                        "from": DEFAULT_NAMESPACE,
                        "fx": DEFAULT_NAMESPACE,
                        "fy": DEFAULT_NAMESPACE,
                        "g1": DEFAULT_NAMESPACE,
                        "g2": DEFAULT_NAMESPACE,
                        "glyph-name": DEFAULT_NAMESPACE,
                        "glyph-orientation-horizontal": DEFAULT_NAMESPACE,
                        "glyph-orientation-vertical": DEFAULT_NAMESPACE,
                        "glyphRef": DEFAULT_NAMESPACE,
                        "gradientTransform": DEFAULT_NAMESPACE,
                        "gradientUnits": DEFAULT_NAMESPACE,
                        "handler": DEFAULT_NAMESPACE,
                        "hanging": DEFAULT_NAMESPACE,
                        "height": DEFAULT_NAMESPACE,
                        "horiz-adv-x": DEFAULT_NAMESPACE,
                        "horiz-origin-x": DEFAULT_NAMESPACE,
                        "horiz-origin-y": DEFAULT_NAMESPACE,
                        "id": DEFAULT_NAMESPACE,
                        "ideographic": DEFAULT_NAMESPACE,
                        "image-rendering": DEFAULT_NAMESPACE,
                        "in": DEFAULT_NAMESPACE,
                        "in2": DEFAULT_NAMESPACE,
                        "initialVisibility": DEFAULT_NAMESPACE,
                        "intercept": DEFAULT_NAMESPACE,
                        "k": DEFAULT_NAMESPACE,
                        "k1": DEFAULT_NAMESPACE,
                        "k2": DEFAULT_NAMESPACE,
                        "k3": DEFAULT_NAMESPACE,
                        "k4": DEFAULT_NAMESPACE,
                        "kernelMatrix": DEFAULT_NAMESPACE,
                        "kernelUnitLength": DEFAULT_NAMESPACE,
                        "kerning": DEFAULT_NAMESPACE,
                        "keyPoints": DEFAULT_NAMESPACE,
                        "keySplines": DEFAULT_NAMESPACE,
                        "keyTimes": DEFAULT_NAMESPACE,
                        "lang": DEFAULT_NAMESPACE,
                        "lengthAdjust": DEFAULT_NAMESPACE,
                        "letter-spacing": DEFAULT_NAMESPACE,
                        "lighting-color": DEFAULT_NAMESPACE,
                        "limitingConeAngle": DEFAULT_NAMESPACE,
                        "local": DEFAULT_NAMESPACE,
                        "marker-end": DEFAULT_NAMESPACE,
                        "marker-mid": DEFAULT_NAMESPACE,
                        "marker-start": DEFAULT_NAMESPACE,
                        "markerHeight": DEFAULT_NAMESPACE,
                        "markerUnits": DEFAULT_NAMESPACE,
                        "markerWidth": DEFAULT_NAMESPACE,
                        "mask": DEFAULT_NAMESPACE,
                        "maskContentUnits": DEFAULT_NAMESPACE,
                        "maskUnits": DEFAULT_NAMESPACE,
                        "mathematical": DEFAULT_NAMESPACE,
                        "max": DEFAULT_NAMESPACE,
                        "media": DEFAULT_NAMESPACE,
                        "mediaCharacterEncoding": DEFAULT_NAMESPACE,
                        "mediaContentEncodings": DEFAULT_NAMESPACE,
                        "mediaSize": DEFAULT_NAMESPACE,
                        "mediaTime": DEFAULT_NAMESPACE,
                        "method": DEFAULT_NAMESPACE,
                        "min": DEFAULT_NAMESPACE,
                        "mode": DEFAULT_NAMESPACE,
                        "name": DEFAULT_NAMESPACE,
                        "nav-down": DEFAULT_NAMESPACE,
                        "nav-down-left": DEFAULT_NAMESPACE,
                        "nav-down-right": DEFAULT_NAMESPACE,
                        "nav-left": DEFAULT_NAMESPACE,
                        "nav-next": DEFAULT_NAMESPACE,
                        "nav-prev": DEFAULT_NAMESPACE,
                        "nav-right": DEFAULT_NAMESPACE,
                        "nav-up": DEFAULT_NAMESPACE,
                        "nav-up-left": DEFAULT_NAMESPACE,
                        "nav-up-right": DEFAULT_NAMESPACE,
                        "numOctaves": DEFAULT_NAMESPACE,
                        "observer": DEFAULT_NAMESPACE,
                        "offset": DEFAULT_NAMESPACE,
                        "opacity": DEFAULT_NAMESPACE,
                        "operator": DEFAULT_NAMESPACE,
                        "order": DEFAULT_NAMESPACE,
                        "orient": DEFAULT_NAMESPACE,
                        "orientation": DEFAULT_NAMESPACE,
                        "origin": DEFAULT_NAMESPACE,
                        "overflow": DEFAULT_NAMESPACE,
                        "overlay": DEFAULT_NAMESPACE,
                        "overline-position": DEFAULT_NAMESPACE,
                        "overline-thickness": DEFAULT_NAMESPACE,
                        "panose-1": DEFAULT_NAMESPACE,
                        "path": DEFAULT_NAMESPACE,
                        "pathLength": DEFAULT_NAMESPACE,
                        "patternContentUnits": DEFAULT_NAMESPACE,
                        "patternTransform": DEFAULT_NAMESPACE,
                        "patternUnits": DEFAULT_NAMESPACE,
                        "phase": DEFAULT_NAMESPACE,
                        "playbackOrder": DEFAULT_NAMESPACE,
                        "pointer-events": DEFAULT_NAMESPACE,
                        "points": DEFAULT_NAMESPACE,
                        "pointsAtX": DEFAULT_NAMESPACE,
                        "pointsAtY": DEFAULT_NAMESPACE,
                        "pointsAtZ": DEFAULT_NAMESPACE,
                        "preserveAlpha": DEFAULT_NAMESPACE,
                        "preserveAspectRatio": DEFAULT_NAMESPACE,
                        "primitiveUnits": DEFAULT_NAMESPACE,
                        "propagate": DEFAULT_NAMESPACE,
                        "property": DEFAULT_NAMESPACE,
                        "r": DEFAULT_NAMESPACE,
                        "radius": DEFAULT_NAMESPACE,
                        "refX": DEFAULT_NAMESPACE,
                        "refY": DEFAULT_NAMESPACE,
                        "rel": DEFAULT_NAMESPACE,
                        "rendering-intent": DEFAULT_NAMESPACE,
                        "repeatCount": DEFAULT_NAMESPACE,
                        "repeatDur": DEFAULT_NAMESPACE,
                        "requiredExtensions": DEFAULT_NAMESPACE,
                        "requiredFeatures": DEFAULT_NAMESPACE,
                        "requiredFonts": DEFAULT_NAMESPACE,
                        "requiredFormats": DEFAULT_NAMESPACE,
                        "resource": DEFAULT_NAMESPACE,
                        "restart": DEFAULT_NAMESPACE,
                        "result": DEFAULT_NAMESPACE,
                        "rev": DEFAULT_NAMESPACE,
                        "role": DEFAULT_NAMESPACE,
                        "rotate": DEFAULT_NAMESPACE,
                        "rx": DEFAULT_NAMESPACE,
                        "ry": DEFAULT_NAMESPACE,
                        "scale": DEFAULT_NAMESPACE,
                        "seed": DEFAULT_NAMESPACE,
                        "shape-rendering": DEFAULT_NAMESPACE,
                        "slope": DEFAULT_NAMESPACE,
                        "snapshotTime": DEFAULT_NAMESPACE,
                        "spacing": DEFAULT_NAMESPACE,
                        "specularConstant": DEFAULT_NAMESPACE,
                        "specularExponent": DEFAULT_NAMESPACE,
                        "spreadMethod": DEFAULT_NAMESPACE,
                        "startOffset": DEFAULT_NAMESPACE,
                        "stdDeviation": DEFAULT_NAMESPACE,
                        "stemh": DEFAULT_NAMESPACE,
                        "stemv": DEFAULT_NAMESPACE,
                        "stitchTiles": DEFAULT_NAMESPACE,
                        "stop-color": DEFAULT_NAMESPACE,
                        "stop-opacity": DEFAULT_NAMESPACE,
                        "strikethrough-position": DEFAULT_NAMESPACE,
                        "strikethrough-thickness": DEFAULT_NAMESPACE,
                        "string": DEFAULT_NAMESPACE,
                        "stroke": DEFAULT_NAMESPACE,
                        "stroke-dasharray": DEFAULT_NAMESPACE,
                        "stroke-dashoffset": DEFAULT_NAMESPACE,
                        "stroke-linecap": DEFAULT_NAMESPACE,
                        "stroke-linejoin": DEFAULT_NAMESPACE,
                        "stroke-miterlimit": DEFAULT_NAMESPACE,
                        "stroke-opacity": DEFAULT_NAMESPACE,
                        "stroke-width": DEFAULT_NAMESPACE,
                        "surfaceScale": DEFAULT_NAMESPACE,
                        "syncBehavior": DEFAULT_NAMESPACE,
                        "syncBehaviorDefault": DEFAULT_NAMESPACE,
                        "syncMaster": DEFAULT_NAMESPACE,
                        "syncTolerance": DEFAULT_NAMESPACE,
                        "syncToleranceDefault": DEFAULT_NAMESPACE,
                        "systemLanguage": DEFAULT_NAMESPACE,
                        "tableValues": DEFAULT_NAMESPACE,
                        "target": DEFAULT_NAMESPACE,
                        "targetX": DEFAULT_NAMESPACE,
                        "targetY": DEFAULT_NAMESPACE,
                        "text-anchor": DEFAULT_NAMESPACE,
                        "text-decoration": DEFAULT_NAMESPACE,
                        "text-rendering": DEFAULT_NAMESPACE,
                        "textLength": DEFAULT_NAMESPACE,
                        "timelineBegin": DEFAULT_NAMESPACE,
                        "title": DEFAULT_NAMESPACE,
                        "to": DEFAULT_NAMESPACE,
                        "transform": DEFAULT_NAMESPACE,
                        "transformBehavior": DEFAULT_NAMESPACE,
                        "type": DEFAULT_NAMESPACE,
                        "typeof": DEFAULT_NAMESPACE,
                        "u1": DEFAULT_NAMESPACE,
                        "u2": DEFAULT_NAMESPACE,
                        "underline-position": DEFAULT_NAMESPACE,
                        "underline-thickness": DEFAULT_NAMESPACE,
                        "unicode": DEFAULT_NAMESPACE,
                        "unicode-bidi": DEFAULT_NAMESPACE,
                        "unicode-range": DEFAULT_NAMESPACE,
                        "units-per-em": DEFAULT_NAMESPACE,
                        "v-alphabetic": DEFAULT_NAMESPACE,
                        "v-hanging": DEFAULT_NAMESPACE,
                        "v-ideographic": DEFAULT_NAMESPACE,
                        "v-mathematical": DEFAULT_NAMESPACE,
                        "values": DEFAULT_NAMESPACE,
                        "version": DEFAULT_NAMESPACE,
                        "vert-adv-y": DEFAULT_NAMESPACE,
                        "vert-origin-x": DEFAULT_NAMESPACE,
                        "vert-origin-y": DEFAULT_NAMESPACE,
                        "viewBox": DEFAULT_NAMESPACE,
                        "viewTarget": DEFAULT_NAMESPACE,
                        "visibility": DEFAULT_NAMESPACE,
                        "width": DEFAULT_NAMESPACE,
                        "widths": DEFAULT_NAMESPACE,
                        "word-spacing": DEFAULT_NAMESPACE,
                        "writing-mode": DEFAULT_NAMESPACE,
                        "x": DEFAULT_NAMESPACE,
                        "x-height": DEFAULT_NAMESPACE,
                        "x1": DEFAULT_NAMESPACE,
                        "x2": DEFAULT_NAMESPACE,
                        "xChannelSelector": DEFAULT_NAMESPACE,
                        "xlink:actuate": XLINK_NAMESPACE,
                        "xlink:arcrole": XLINK_NAMESPACE,
                        "xlink:href": XLINK_NAMESPACE,
                        "xlink:role": XLINK_NAMESPACE,
                        "xlink:show": XLINK_NAMESPACE,
                        "xlink:title": XLINK_NAMESPACE,
                        "xlink:type": XLINK_NAMESPACE,
                        "xml:base": XML_NAMESPACE,
                        "xml:id": XML_NAMESPACE,
                        "xml:lang": XML_NAMESPACE,
                        "xml:space": XML_NAMESPACE,
                        "y": DEFAULT_NAMESPACE,
                        "y1": DEFAULT_NAMESPACE,
                        "y2": DEFAULT_NAMESPACE,
                        "yChannelSelector": DEFAULT_NAMESPACE,
                        "z": DEFAULT_NAMESPACE,
                        "zoomAndPan": DEFAULT_NAMESPACE};
                    module.exports = SVGAttributeNamespace;
                    function SVGAttributeNamespace(value){
                     if(SVG_PROPERTIES.hasOwnProperty(value))
                      return SVG_PROPERTIES[value];
                    }
                   },
                   {}],
                  35:
                  [function(require, module, exports){
                    "use strict";
                    var
                     isArray = require("x-is-array"),
                     h = require("./index.js"),
                     SVGAttributeNamespace = require("./svg-attribute-namespace"),
                     attributeHook = require("./hooks/attribute-hook"),
                     SVG_NAMESPACE = "http://www.w3.org/2000/svg";
                    module.exports = svg;
                    function svg(tagName, properties, children){
                     if(! children && isChildren(properties)){children = properties; properties = {};
                     }
                     properties = properties || {};
                     properties.namespace = SVG_NAMESPACE;
                     var
                      attributes =
                        properties.attributes || (properties.attributes = {});
                     for(var key in properties){
                      if(! properties.hasOwnProperty(key)) continue;
                      var namespace = SVGAttributeNamespace(key);
                      if(namespace === undefined) continue;
                      var value = properties[key];
                      if
                       (typeof value !== "string" && typeof value !== "number"
                        && typeof value !== "boolean")
                       continue;
                      if(namespace !== null){
                       properties[key] = attributeHook(namespace, value);
                       continue;
                      }
                      attributes[key] = value;
                      properties[key] = undefined;
                     }
                     return h(tagName, properties, children);
                    }
                    function isChildren(x){
                     return typeof x === "string" || isArray(x);
                    }
                   },
                   {"./hooks/attribute-hook": 29,
                    "./index.js": 32,
                    "./svg-attribute-namespace": 34,
                    "x-is-array": 21}],
                  36:
                  [function(require, module, exports){
                    var
                     isVNode = require("./is-vnode"),
                     isVText = require("./is-vtext"),
                     isWidget = require("./is-widget"),
                     isThunk = require("./is-thunk");
                    module.exports = handleThunk;
                    function handleThunk(a, b){
                     var renderedA = a, renderedB = b;
                     if(isThunk(b)) renderedB = renderThunk(b, a);
                     if(isThunk(a)) renderedA = renderThunk(a, null);
                     return {a: renderedA, b: renderedB};
                    }
                    function renderThunk(thunk, previous){
                     var renderedThunk = thunk.vnode;
                     if(! renderedThunk)
                      renderedThunk = thunk.vnode = thunk.render(previous);
                     if
                      (!
                       (isVNode(renderedThunk) || isVText(renderedThunk)
                       || isWidget(renderedThunk)))
                      throw new Error("thunk did not return a valid node");
                     return renderedThunk;
                    }
                   },
                   {"./is-thunk": 37,
                    "./is-vnode": 39,
                    "./is-vtext": 40,
                    "./is-widget": 41}],
                  37:
                  [function(require, module, exports){
                    module.exports = isThunk;
                    function isThunk(t){return t && t.type === "Thunk";}
                   },
                   {}],
                  38:
                  [function(require, module, exports){
                    module.exports = isHook;
                    function isHook(hook){
                     return hook
                            &&
                             (typeof hook.hook === "function"
                             && ! hook.hasOwnProperty("hook")
                             ||
                              typeof hook.unhook === "function"
                              && ! hook.hasOwnProperty("unhook"));
                    }
                   },
                   {}],
                  39:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = isVirtualNode;
                    function isVirtualNode(x){
                     return x && x.type === "VirtualNode"
                            && x.version === version;
                    }
                   },
                   {"./version": 42}],
                  40:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = isVirtualText;
                    function isVirtualText(x){
                     return x && x.type === "VirtualText"
                            && x.version === version;
                    }
                   },
                   {"./version": 42}],
                  41:
                  [function(require, module, exports){
                    module.exports = isWidget;
                    function isWidget(w){return w && w.type === "Widget";}
                   },
                   {}],
                  42:
                  [function(require, module, exports){module.exports = "2";},
                   {}],
                  43:
                  [function(require, module, exports){
                    var
                     version = require("./version"),
                     isVNode = require("./is-vnode"),
                     isWidget = require("./is-widget"),
                     isThunk = require("./is-thunk"),
                     isVHook = require("./is-vhook");
                    module.exports = VirtualNode;
                    var noProperties = {}, noChildren = [];
                    function VirtualNode
                    (tagName, properties, children, key, namespace){
                     this.tagName = tagName;
                     this.properties = properties || noProperties;
                     this.children = children || noChildren;
                     this.key = key != null ? String(key) : undefined;
                     this.namespace =
                      typeof namespace === "string" ? namespace : null;
                     var
                      count = children && children.length || 0,
                      descendants = 0,
                      hasWidgets = false,
                      hasThunks = false,
                      descendantHooks = false,
                      hooks;
                     for(var propName in properties)
                      if(properties.hasOwnProperty(propName)){
                       var property = properties[propName];
                       if(isVHook(property) && property.unhook){
                        if(! hooks) hooks = {};
                        hooks[propName] = property;
                       }
                      }
                     for(var i = 0; i < count; i++){
                      var child = children[i];
                      if(isVNode(child)){
                       descendants += child.count || 0;
                       if(! hasWidgets && child.hasWidgets) hasWidgets = true;
                       if(! hasThunks && child.hasThunks) hasThunks = true;
                       if
                        (! descendantHooks && (child.hooks || child.descendantHooks))
                        descendantHooks = true;
                      }
                      else
                       if(! hasWidgets && isWidget(child)){
                        if(typeof child.destroy === "function") hasWidgets = true;
                       }
                       else if(! hasThunks && isThunk(child)) hasThunks = true;
                     }
                     this.count = count + descendants;
                     this.hasWidgets = hasWidgets;
                     this.hasThunks = hasThunks;
                     this.hooks = hooks;
                     this.descendantHooks = descendantHooks;
                    }
                    VirtualNode.prototype.version = version;
                    VirtualNode.prototype.type = "VirtualNode";
                   },
                   {"./is-thunk": 37,
                    "./is-vhook": 38,
                    "./is-vnode": 39,
                    "./is-widget": 41,
                    "./version": 42}],
                  44:
                  [function(require, module, exports){
                    var version = require("./version");
                    VirtualPatch.NONE = 0;
                    VirtualPatch.VTEXT = 1;
                    VirtualPatch.VNODE = 2;
                    VirtualPatch.WIDGET = 3;
                    VirtualPatch.PROPS = 4;
                    VirtualPatch.ORDER = 5;
                    VirtualPatch.INSERT = 6;
                    VirtualPatch.REMOVE = 7;
                    VirtualPatch.THUNK = 8;
                    module.exports = VirtualPatch;
                    function VirtualPatch(type, vNode, patch){
                     this.type = Number(type);
                     this.vNode = vNode;
                     this.patch = patch;
                    }
                    VirtualPatch.prototype.version = version;
                    VirtualPatch.prototype.type = "VirtualPatch";
                   },
                   {"./version": 42}],
                  45:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = VirtualText;
                    function VirtualText(text){this.text = String(text);}
                    VirtualText.prototype.version = version;
                    VirtualText.prototype.type = "VirtualText";
                   },
                   {"./version": 42}],
                  46:
                  [function(require, module, exports){
                    var
                     isObject = require("is-object"),
                     isHook = require("../vnode/is-vhook");
                    module.exports = diffProps;
                    function diffProps(a, b){
                     var diff;
                     for(var aKey in a){
                      if(! (aKey in b)){
                       diff = diff || {};
                       diff[aKey] = undefined;
                      }
                      var aValue = a[aKey], bValue = b[aKey];
                      if(aValue === bValue)
                       continue;
                      else if(isObject(aValue) && isObject(bValue))
                       if(getPrototype(bValue) !== getPrototype(aValue)){diff = diff || {}; diff[aKey] = bValue;}
                       else if(isHook(bValue)){
                        diff = diff || {};
                        diff[aKey] = bValue;
                       }
                       else{
                        var objectDiff = diffProps(aValue, bValue);
                        if(objectDiff){diff = diff || {}; diff[aKey] = objectDiff;}
                       }
                      else{diff = diff || {}; diff[aKey] = bValue;}
                     }
                     for(var bKey in b)
                      if(! (bKey in a)){diff = diff || {}; diff[bKey] = b[bKey];}
                     return diff;
                    }
                    function getPrototype(value){
                     if(Object.getPrototypeOf)
                      return Object.getPrototypeOf(value);
                     else if(value.__proto__)
                      return value.__proto__;
                     else if(value.constructor)
                      return value.constructor.prototype;
                    }
                   },
                   {"../vnode/is-vhook": 38, "is-object": 20}],
                  47:
                  [function(require, module, exports){
                    var
                     isArray = require("x-is-array"),
                     VPatch = require("../vnode/vpatch"),
                     isVNode = require("../vnode/is-vnode"),
                     isVText = require("../vnode/is-vtext"),
                     isWidget = require("../vnode/is-widget"),
                     isThunk = require("../vnode/is-thunk"),
                     handleThunk = require("../vnode/handle-thunk"),
                     diffProps = require("./diff-props");
                    module.exports = diff;
                    function diff(a, b){
                     var patch = {a: a};
                     walk(a, b, patch, 0);
                     return patch;
                    }
                    function walk(a, b, patch, index){
                     if(a === b) return;
                     var apply = patch[index], applyClear = false;
                     if(isThunk(a) || isThunk(b))
                      thunks(a, b, patch, index);
                     else if(b == null){
                      if(! isWidget(a)){
                       clearState(a, patch, index);
                       apply = patch[index];
                      }
                      apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));
                     }
                     else if(isVNode(b))
                      if(isVNode(a))
                       if
                        (a.tagName === b.tagName && a.namespace === b.namespace
                         && a.key === b.key){
                        var propsPatch = diffProps(a.properties, b.properties);
                        if(propsPatch)
                         apply =
                          appendPatch(apply, new VPatch(VPatch.PROPS, a, propsPatch));
                        apply = diffChildren(a, b, patch, apply, index);
                       }
                       else{
                        apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
                        applyClear = true;
                       }
                      else{
                       apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
                       applyClear = true;
                      }
                     else
                      if(isVText(b)){
                       if(! isVText(a)){
                        apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
                        applyClear = true;
                       }
                       else if(a.text !== b.text)
                        apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
                      }
                      else if(isWidget(b)){
                       if(! isWidget(a)) applyClear = true;
                       apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));
                      }
                     if(apply) patch[index] = apply;
                     if(applyClear) clearState(a, patch, index);
                    }
                    function diffChildren(a, b, patch, apply, index){
                     var
                      aChildren = a.children,
                      orderedSet = reorder(aChildren, b.children),
                      bChildren = orderedSet.children,
                      aLen = aChildren.length,
                      bLen = bChildren.length,
                      len = aLen > bLen ? aLen : bLen;
                     for(var i = 0; i < len; i++){
                      var leftNode = aChildren[i], rightNode = bChildren[i];
                      index += 1;
                      if(! leftNode){
                       if(rightNode)
                        apply =
                         appendPatch
                          (apply, new VPatch(VPatch.INSERT, null, rightNode));
                      }
                      else
                       walk(leftNode, rightNode, patch, index);
                      if(isVNode(leftNode) && leftNode.count)
                       index += leftNode.count;
                     }
                     if(orderedSet.moves)
                      apply =
                       appendPatch
                        (apply, new VPatch(VPatch.ORDER, a, orderedSet.moves));
                     return apply;
                    }
                    function clearState(vNode, patch, index){
                     unhook(vNode, patch, index);
                     destroyWidgets(vNode, patch, index);
                    }
                    function destroyWidgets(vNode, patch, index){
                     if(isWidget(vNode)){
                      if(typeof vNode.destroy === "function")
                       patch[index] =
                        appendPatch
                         (patch[index], new VPatch(VPatch.REMOVE, vNode, null));
                     }
                     else if
                      (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)){
                      var children = vNode.children, len = children.length;
                      for(var i = 0; i < len; i++){
                       var child = children[i];
                       index += 1;
                       destroyWidgets(child, patch, index);
                       if(isVNode(child) && child.count) index += child.count;
                      }
                     }
                     else if(isThunk(vNode)) thunks(vNode, null, patch, index);
                    }
                    function thunks(a, b, patch, index){
                     var
                      nodes = handleThunk(a, b),
                      thunkPatch = diff(nodes.a, nodes.b);
                     if(hasPatches(thunkPatch))
                      patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);
                    }
                    function hasPatches(patch){
                     for(var index in patch) if(index !== "a") return true;
                     return false;
                    }
                    function unhook(vNode, patch, index){
                     if(isVNode(vNode)){
                      if(vNode.hooks)
                       patch[index] =
                        appendPatch
                         (patch[index],
                          new VPatch(VPatch.PROPS, vNode, undefinedKeys(vNode.hooks)));
                      if(vNode.descendantHooks || vNode.hasThunks){
                       var children = vNode.children, len = children.length;
                       for(var i = 0; i < len; i++){
                        var child = children[i];
                        index += 1;
                        unhook(child, patch, index);
                        if(isVNode(child) && child.count) index += child.count;
                       }
                      }
                     }
                     else if(isThunk(vNode)) thunks(vNode, null, patch, index);
                    }
                    function undefinedKeys(obj){
                     var result = {};
                     for(var key in obj) result[key] = undefined;
                     return result;
                    }
                    function reorder(aChildren, bChildren){
                     var
                      bChildIndex = keyIndex(bChildren),
                      bKeys = bChildIndex.keys,
                      bFree = bChildIndex.free;
                     if(bFree.length === bChildren.length)
                      return {children: bChildren, moves: null};
                     var
                      aChildIndex = keyIndex(aChildren),
                      aKeys = aChildIndex.keys,
                      aFree = aChildIndex.free;
                     if(aFree.length === aChildren.length)
                      return {children: bChildren, moves: null};
                     var
                      newChildren = [],
                      freeIndex = 0,
                      freeCount = bFree.length,
                      deletedItems = 0;
                     for(var i = 0; i < aChildren.length; i++){
                      var aItem = aChildren[i], itemIndex;
                      if(aItem.key)
                       if(bKeys.hasOwnProperty(aItem.key)){
                        itemIndex = bKeys[aItem.key];
                        newChildren.push(bChildren[itemIndex]);
                       }
                       else{itemIndex = i - deletedItems++; newChildren.push(null);
                       }
                      else if(freeIndex < freeCount){
                       itemIndex = bFree[freeIndex++];
                       newChildren.push(bChildren[itemIndex]);
                      }
                      else{itemIndex = i - deletedItems++; newChildren.push(null);
                      }
                     }
                     var
                      lastFreeIndex =
                        freeIndex >= bFree.length
                         ? bChildren.length
                         : bFree[freeIndex];
                     for(var j = 0; j < bChildren.length; j++){
                      var newItem = bChildren[j];
                      if(newItem.key){
                       if(! aKeys.hasOwnProperty(newItem.key))
                        newChildren.push(newItem);
                      }
                      else if(j >= lastFreeIndex) newChildren.push(newItem);
                     }
                     var
                      simulate = newChildren.slice(),
                      simulateIndex = 0,
                      removes = [],
                      inserts = [],
                      simulateItem;
                     for(var k = 0; k < bChildren.length;){
                      var wantedItem = bChildren[k];
                      simulateItem = simulate[simulateIndex];
                      while(simulateItem === null && simulate.length){
                       removes.push(remove(simulate, simulateIndex, null));
                       simulateItem = simulate[simulateIndex];
                      }
                      if(! simulateItem || simulateItem.key !== wantedItem.key){
                       if(wantedItem.key){
                        if(simulateItem && simulateItem.key)
                         if(bKeys[simulateItem.key] !== k + 1){
                          removes.push
                           (remove(simulate, simulateIndex, simulateItem.key));
                          simulateItem = simulate[simulateIndex];
                          if(! simulateItem || simulateItem.key !== wantedItem.key)
                           inserts.push({key: wantedItem.key, to: k});
                          else
                           simulateIndex++;
                         }
                         else
                          inserts.push({key: wantedItem.key, to: k});
                        else
                         inserts.push({key: wantedItem.key, to: k});
                        k++;
                       }
                       else if(simulateItem && simulateItem.key)
                        removes.push
                         (remove(simulate, simulateIndex, simulateItem.key));
                      }
                      else{simulateIndex++; k++;}
                     }
                     while(simulateIndex < simulate.length){
                      simulateItem = simulate[simulateIndex];
                      removes.push
                       (remove
                         (simulate, simulateIndex, simulateItem && simulateItem.key));
                     }
                     if(removes.length === deletedItems && ! inserts.length)
                      return {children: newChildren, moves: null};
                     return {children: newChildren,
                             moves: {removes: removes, inserts: inserts}};
                    }
                    function remove(arr, index, key){
                     arr.splice(index, 1);
                     return {from: index, key: key};
                    }
                    function keyIndex(children){
                     var keys = {}, free = [], length = children.length;
                     for(var i = 0; i < length; i++){
                      var child = children[i];
                      if(child.key) keys[child.key] = i; else free.push(i);
                     }
                     return {keys: keys, free: free};
                    }
                    function appendPatch(apply, patch){
                     if(apply){
                      if(isArray(apply))
                       apply.push(patch);
                      else
                       apply = [apply, patch];
                      return apply;
                     }
                     else
                      return patch;
                    }
                   },
                   {"../vnode/handle-thunk": 36,
                    "../vnode/is-thunk": 37,
                    "../vnode/is-vnode": 39,
                    "../vnode/is-vtext": 40,
                    "../vnode/is-widget": 41,
                    "../vnode/vpatch": 44,
                    "./diff-props": 46,
                    "x-is-array": 21}],
                  48:
                  [function(require, module, exports){
                    (function(global){
                       var
                        vdom =
                          {VNode: require("virtual-dom/vnode/vnode"),
                           VText: require("virtual-dom/vnode/vtext"),
                           diff: require("virtual-dom/diff"),
                           patch: require("virtual-dom/patch"),
                           createElement: require("virtual-dom/create-element"),
                           svg: require("virtual-dom/virtual-hyperscript/svg")};
                       global.VirtualDom = vdom;
                       module.exports = vdom;
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {"virtual-dom/create-element": 1,
                    "virtual-dom/diff": 2,
                    "virtual-dom/patch": 22,
                    "virtual-dom/virtual-hyperscript/svg": 35,
                    "virtual-dom/vnode/vnode": 43,
                    "virtual-dom/vnode/vtext": 45}]},
                 {},
                 [48])
               (48);
      }));
  }
  (globalThis));
(function(globalThis){
   var joo_global_object = globalThis;
   joo_global_object.SoftSetHook =
    function(value){
     if(! (this instanceof SoftSetHook)) return new SoftSetHook(value);
     this.value = value;
    };
   joo_global_object.SoftSetHook.prototype.hook =
    function(node, propertyName){
     if(node[propertyName] !== this.value) node[propertyName] = this.value;
    };
   function GenericHook(init, update, destroy, id, extra){
    if(! (this instanceof GenericHook))
     return new GenericHook(init, update, destroy, id, extra);
    this.init = init;
    this.update = update;
    this.destroy = destroy;
    this.id = id;
    this.extra = extra;
   }
   var hook_state_key = "vdom_hook_state_key";
   if(this.Symbol) hook_state_key = Symbol(hook_state_key);
   GenericHook.write_state =
    function(node, propName, state){
     if(! node[hook_state_key]) node[hook_state_key] = {};
     node[hook_state_key][propName] = state;
    };
   GenericHook.read_state =
    function(node, propName){return node[hook_state_key][propName];};
   GenericHook.remove_state =
    function(node, propName){delete node[hook_state_key][propName];};
   GenericHook.canTransition =
    function(from, to){
     return from instanceof this && to instanceof this && from.id === to.id
            && to.update;
    };
   GenericHook.prototype.hook =
    function(node, propName, prev){
     if(GenericHook.canTransition(prev, this)){
      var state = GenericHook.read_state(node, propName);
      state = this.update(state, node);
      GenericHook.write_state(node, propName, state);
     }
     else{
      var state = this.init(node);
      GenericHook.write_state(node, propName, state);
     }
    };
   GenericHook.prototype.unhook =
    function(node, propName, next){
     if(GenericHook.canTransition(this, next))
      ;
     else{
      var state = GenericHook.read_state(node, propName);
      this.destroy(state, node);
      GenericHook.remove_state(node, propName);
     }
    };
   joo_global_object.GenericHook = GenericHook;
  }
  (globalThis));
(function(globalThis){
   "use strict";
   var joo_global_object = globalThis;
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   var caml_global_data = [0];
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_jsbytes_of_string(x){return x;}
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_ml_condition_broadcast(t){return 0;}
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_runtime_events_user_resolve(){return 0;}
   var MlObjectTable;
   if(typeof globalThis.Map === "undefined")
    MlObjectTable =
     function(){
       function NaiveLookup(objs){this.objs = objs;}
       NaiveLookup.prototype.get =
        function(v){
         for(var i = 0; i < this.objs.length; i++)
          if(this.objs[i] === v) return i;
        };
       NaiveLookup.prototype.set = function(){};
       return function(){
        this.objs = [];
        this.lookup = new NaiveLookup(this.objs);};
      }
      ();
   else
    MlObjectTable =
     function(){this.objs = []; this.lookup = new globalThis.Map();};
   MlObjectTable.prototype.store =
    function(v){this.lookup.set(v, this.objs.length); this.objs.push(v);};
   MlObjectTable.prototype.recall =
    function(v){
     var i = this.lookup.get(v);
     return i === undefined ? undefined : this.objs.length - i;
    };
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device != n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_log10_float(x){return Math.log10(x);}
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   var caml_ml_channels = new Array();
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channels[chanid], p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max == chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] != 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_gc_minor(unit){
    if(typeof globalThis.gc == "function") globalThis.gc(true);
    return 0;
   }
   function core_gc_heap_chunks(){return 0;}
   function caml_ml_condition_new(unit){return {condition: 1};}
   function caml_ba_to_typed_array(ba){return ba.data;}
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channels[chanid],
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input_bigarray(chanid, b, i, l){
    var ba = caml_ba_to_typed_array(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function bigstringaf_memcmp_bigstring(ba1, ba1_off, ba2, ba2_off, len){
    for(var i = 0; i < len; i++){
     var
      c =
        caml_int_compare
         (caml_ba_get_1(ba1, ba1_off + i), caml_ba_get_1(ba2, ba2_off + i));
     if(c != 0) return c;
    }
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.slice(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function bigstring_blit_bigstring_bytes_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_pos, dst, dst_pos, len);
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   var Base_internalhash_fold_string = caml_hash_mix_string;
   function caml_get_continuation_callstack(){return [0];}
   var caml_parser_trace = 0;
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--) if(nat.data[ofs + i] != 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [args]);};
   }
   function caml_sys_chdir(dir){
    var root = resolve_fs_device(dir);
    if(root.device.exists(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else
     caml_raise_no_such_file(caml_jsbytes_of_string(dir));
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] == o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return o instanceof Array && o[0] == o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_gc_counters(){return [254, 0, 0, 0];}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function bigstringaf_blit_from_bytes(src, src_off, dst, dst_off, len){
    return caml_bigstring_blit_string_to_ba(src, src_off, dst, dst_off, len);
   }
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "closedir", dir_handle.path));
    }
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "readdir", dir_handle.path));
    }
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_is_continuation_tag(t){return t == 245 ? 1 : 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000FFFF);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xFFFF0000){b += 16; a >>>= 16;}
    if(a & 0xFF00){b += 8; a >>>= 8;}
    if(a & 0xF0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function MlNat(x){
    this.data = new Int32Array(x);
    this.length = this.data.length + 2;
   }
   MlNat.prototype.caml_custom = "_nat";
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x == x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x == x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000FFFF)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow == 1 ? 0 : 1;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow == 1 ? 0 : 1);
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 == 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d == 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] != 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function caml_ba_blit(src, dst){
    if(dst.dims.length != src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] != src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function caml_int64_div(x, y){return x.div(y);}
   function bigstring_find(bs, chr, pos, len){
    while(len > 0){
     if(caml_ba_get_1(bs, pos) == chr) return pos;
     pos++;
     len--;
    }
    return - 1;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     caml_failwith("Invalid entity " + s);
   }
   function caml_string_unsafe_set(s, i, c){
    caml_failwith("caml_string_unsafe_set");
   }
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channels[chanid];
    return caml_int64_of_float(chan.file.length());
   }
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process && process.argv && process.argv.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       (),
    caml_executable_name = caml_argv[1];
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function caml_memprof_set(_control){return 0;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.fd;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts != size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   var expect_test_collector_saved_stderr, expect_test_collector_saved_stdout;
   function expect_test_collector_before_test(voutput, vstdout, vstderr){
    expect_test_collector_saved_stderr = caml_ml_channels[vstderr];
    expect_test_collector_saved_stdout = caml_ml_channels[vstdout];
    var output = caml_ml_channels[voutput];
    caml_ml_channels[vstdout] = output;
    caml_ml_channels[vstderr] = output;
    return 0;
   }
   var caml_oo_last_id = 0;
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_get_global_data(){return caml_global_data;}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function bigstring_is_mmapped_stub(x){return 0;}
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_check_bound_bigstring(bigstring, i){
    if(i >>> 0 >= bigstring.data.length) caml_array_bound_error();
   }
   function bin_prot_blit_buf_float_array_stub
   (src_pos, src, dst_pos, dst, len){
    if(len == 0) return 0;
    caml_check_bound(dst, dst_pos);
    caml_check_bound(dst, dst_pos + len - 1);
    caml_check_bound_bigstring(src, src_pos);
    caml_check_bound_bigstring(src, src_pos + len * 8 - 1);
    var
     view = new joo_global_object.Float64Array(len),
     buffer = new joo_global_object.Uint8Array(view.buffer);
    buffer.set(src.data.subarray(src_pos, src_pos + len * 8));
    for(var i = 0; i < len; i++) dst[dst_pos + i + 1] = view[i];
    return 0;
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_runtime_events_read_poll(cursor, callbacks, num){return 0;}
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_int64_to_float(x){return x.toFloat();}
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_str_initialize(unit){return 0;}
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function caml_obj_add_offset(v, offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_final_release(){return 0;}
   var caml_marshal_header_size = 20;
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_sys_is_regular_file(name){
    var root = resolve_fs_device(name);
    return root.device.isFile(root.rest);
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xFF;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   function caml_string_set16(s, i, i16){caml_failwith("caml_string_set16");}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_gc_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_convert_raw_backtrace_slot(){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c == s2.c ? 1 : 0;
   }
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function Base_int_math_int32_clz(x){
    var n = 32, y;
    y = x >> 16;
    if(y != 0){n = n - 16; x = y;}
    y = x >> 8;
    if(y != 0){n = n - 8; x = y;}
    y = x >> 4;
    if(y != 0){n = n - 4; x = y;}
    y = x >> 2;
    if(y != 0){n = n - 2; x = y;}
    y = x >> 1;
    if(y != 0) return n - 2;
    return n - x;
   }
   function caml_ml_debug_info_status(){return 0;}
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform == "win32"
       ? "Cygwin"
       : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin" ? 1 : 0;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function MlMutex(){this.locked = false;}
   function caml_ml_mutex_new(unit){return new MlMutex();}
   var caml_ephe_key_offset = 3;
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : 1;
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     var pstate = state;
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] == pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c == 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_sys_executable_name(a){return caml_executable_name;}
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channels[chanid];
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function compare_nat_real(nat1, nat2){
    return compare_nat(nat1, 0, nat1.data.length, nat2, 0, nat2.data.length);
   }
   function caml_gc_set(_control){return 0;}
   function caml_js_get(o, f){return o[f];}
   var js_performance = {mark: function(){}, measure: function(){}};
   if(typeof joo_global_object.performance !== "undefined")
    js_performance = joo_global_object.performance;
   else
    try{js_performance = require("perf_hooks").performance;}
    catch(_e){
     joo_global_object.console.warn("couldn't load performance hooks");
    }
   function js_prof_mark(name){
    try{js_performance.mark(caml_jsbytes_of_string(name));}
    catch(e){joo_global_object.console.warn(e);}
    return 0;
   }
   function caml_unix_isatty(fileDescriptor){
    if(fs_node_supported()){
     var tty = require("tty");
     return tty.isatty(fileDescriptor) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channels[chanid].buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function Base_hash_string(s){return caml_hash(1, 1, 0, s);}
   function caml_gc_compaction(){return 0;}
   function bin_prot_blit_float_array_buf_stub
   (src_pos, src, dst_pos, dst, len){
    if(len == 0) return 0;
    caml_check_bound(src, src_pos);
    caml_check_bound(src, src_pos + len - 1);
    caml_check_bound_bigstring(dst, dst_pos);
    caml_check_bound_bigstring(dst, dst_pos + len * 8 - 1);
    src_pos = src_pos + 1;
    var
     float64 =
       new joo_global_object.Float64Array(src.slice(src_pos, src_pos + len)),
     float64_uint8 = new joo_global_object.Uint8Array(float64.buffer),
     view = dst.data.subarray(dst_pos, dst_pos + len * 8);
    view.set(float64_uint8);
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   var caml_sys_fds = new Array(3);
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read == 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read == 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channels[chanid];
    chan.opened = false;
    caml_sys_close(chan.fd);
    return 0;
   }
   function core_md5_fd(fd){
    var ic = caml_ml_open_descriptor_in(fd);
    try{return caml_md5_chan(ic, - 1);}finally{caml_ml_close_channel(ic);}
   }
   function caml_ephe_get_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_key");
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : [0, weak];
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function Base_int_math_int_pow_stub(base, exponent){
    var one = 1, mul = [one, base, one, one], res = one;
    while(! exponent == 0){
     mul[1] = mul[1] * mul[3] | 0;
     mul[2] = mul[1] * mul[1] | 0;
     mul[3] = mul[2] * mul[1] | 0;
     res = res * mul[exponent & 3] | 0;
     exponent = exponent >> 2;
    }
    return res;
   }
   function caml_atomic_exchange(ref, v){
    var r = ref[1];
    ref[1] = v;
    return r;
   }
   function caml_sys_isatty(_chan){return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] == 0) return 1;
    return 0;
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, true);
   }
   function caml_unix_lstat_64(name){
    var r = caml_unix_lstat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_continuation_use_noexc(cont){
    var stack = cont[1];
    cont[1] = 0;
    return stack;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_log2_float(x){return Math.log2(x);}
   function caml_gc_huge_fallback_count(unit){return 0;}
   function caml_runtime_events_resume(){return 0;}
   function bin_prot_blit_bytes_buf_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_spacetime_only_works_for_native_code(){
    caml_failwith("Spacetime profiling only works for native code");
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bin_prot_blit_buf_stub(src_pos, src, dst_pos, dst, len){
    if(src.kind != 12) src = bigstring_of_typed_array(src.data);
    if(dst.kind != 12) dst = bigstring_of_typed_array(dst.data);
    return caml_bigstring_blit_ba_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channels[chanid];
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{chan.offset = pos; chan.buffer_curr = 0; chan.buffer_max = 0;}
    return 0;
   }
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   var caml_domain_id = 0;
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   var caml_domain_latest_idx = 1;
   function caml_domain_spawn(f, mutex){
    var id = caml_domain_latest_idx++, old = caml_domain_id;
    caml_domain_id = id;
    var res = caml_callback(f, [0]);
    caml_domain_id = old;
    caml_ml_mutex_unlock(mutex);
    return id;
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_sys_const_int_size(){return 32;}
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback(f){
    return function(){
     var len = arguments.length, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_is_js(){return 1;}
   var Base_internalhash_fold_float = caml_hash_mix_float;
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   var caml_ephe_data_offset = 2;
   function caml_weak_create(n){
    if(n < 0) caml_invalid_argument("Weak.create");
    var x = [251, "caml_ephe_list_head"];
    x.length = caml_ephe_key_offset + n;
    return x;
   }
   function caml_ephe_create(n){var x = caml_weak_create(n); return x;}
   function bigstring_destroy_stub(v_bstr){
    if(v_bstr.hasOwnProperty("__is_deallocated"))
     caml_invalid_argument
      ("bigstring_destroy: bigstring is already deallocated");
    v_bstr.__is_deallocated = true;
    v_bstr.data = new v_bstr.data.__proto__.constructor(0);
    v_bstr.dims = [0];
    return 0;
   }
   function bigstring_realloc(bigstring, size){
    if(bigstring.hasOwnProperty("__is_deallocated"))
     caml_invalid_argument
      ("bigstring_realloc: bigstring is already deallocated");
    var new_data = new bigstring.data.__proto__.constructor(size);
    new_data.set(bigstring.data.slice(0, size));
    var
     new_bigstring =
       caml_ba_create_unsafe
        (bigstring.kind, bigstring.layout, [size], new_data);
    bigstring_destroy_stub(bigstring);
    return new_bigstring;
   }
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_maybe_print_stats(unit){return 0;}
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   var caml_custom_event_index = 0;
   function caml_runtime_events_user_register
   (event_name, event_tag, event_type){
    caml_custom_event_index += 1;
    return [0, caml_custom_event_index, event_name, event_type, event_tag];
   }
   function caml_unix_has_symlink(unit){return fs_node_supported() ? 1 : 0;}
   function caml_ephe_set_key(x, i, v){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if(v instanceof Object && globalThis.WeakRef){
     if(x[1].register) x[1].register(v, undefined, v);
     x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);
    }
    else
     x[caml_ephe_key_offset + i] = v;
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if
     (globalThis.WeakRef
      && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
      && x[1].unregister){
     var old = x[caml_ephe_key_offset + i].deref();
     if(old !== undefined){
      var count = 0;
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key === old) count++;
       }
      }
      if(count == 1) x[1].unregister(old);
     }
    }
    x[caml_ephe_key_offset + i] = undefined;
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v == 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name), ok = root.device.unlink(root.rest);
    if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));
    return 0;
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_unix_inet_addr_of_string(){return 0;}
   function Base_am_testing(x){return 0;}
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function bigstringaf_blit_to_bytes(src, src_off, dst, dst_off, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_off, dst, dst_off, len);
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gc_quick_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channels[chanid];
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var chan = caml_ml_channels[chanid], res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_obj_reachable_words(o){return 0;}
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsbytes(caml_current_dir);
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i != caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int64_or(x, y){return x.or(y);}
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
     daba = caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   var
    caml_output_val =
      function(){
        function Writer(){this.chunk = [];}
        Writer.prototype =
         {chunk_idx: 20,
          block_len: 0,
          obj_counter: 0,
          size_32: 0,
          size_64: 0,
          write:
          function(size, value){
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_at:
          function(pos, size, value){
           var pos = pos;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[pos++] = value >> i & 0xFF;
          },
          write_code:
          function(size, code, value){
           this.chunk[this.chunk_idx++] = code;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_shared:
          function(offset){
           if(offset < 1 << 8)
            this.write_code(8, 0x04, offset);
           else if(offset < 1 << 16)
            this.write_code(16, 0x05, offset);
           else
            this.write_code(32, 0x06, offset);
          },
          pos: function(){return this.chunk_idx;},
          finalize:
          function(){
           this.block_len = this.chunk_idx - 20;
           this.chunk_idx = 0;
           this.write(32, 0x8495A6BE);
           this.write(32, this.block_len);
           this.write(32, this.obj_counter);
           this.write(32, this.size_32);
           this.write(32, this.size_64);
           return this.chunk;
          }};
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length == undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var old_pos = writer.pos();
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length != writer.pos() - old_pos)
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(v instanceof Array && v[0] === (v[0] | 0)){
           if(v[0] == 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v != (v | 0)){
           var type_of_v = typeof v;
           caml_failwith("output_value: abstract value (" + type_of_v + ")");
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0X40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return writer.chunk;};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_array(caml_output_val(v, flags));
   }
   function caml_raise_not_a_dir(name){
    caml_raise_sys_error(name + ": Not a directory");
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require != "undefined"){
     var child_process = require("child_process");
     if(child_process && child_process.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_unix_getuid(unit){
    if(globalThis.process && globalThis.process.getuid)
     return globalThis.process.getuid();
    caml_raise_not_found();
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function initialize_nat(){
    caml_custom_ops["_nat"] =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function caml_bytes_of_utf16_jsstring(s){
    var tag = 9;
    if(! jsoo_is_ascii(s)) tag = 8, s = caml_utf8_of_utf16(s);
    return new MlBytes(tag, s, s.length);
   }
   function bigstring_memcmp_stub(v_s1, v_s1_pos, v_s2, v_s2_pos, v_len){
    for(var i = 0; i < v_len; i++){
     var
      a = caml_ba_get_1(v_s1, v_s1_pos + i),
      b = caml_ba_get_1(v_s2, v_s2_pos + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_gr_open_subwindow(a, b, c, d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function UInt8ArrayReader(s, i){this.s = s; this.i = i;}
   UInt8ArrayReader.prototype =
    {read8u: function(){return this.s[this.i++];},
     read8s: function(){return this.s[this.i++] << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 8 | s[i + 1];
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 24 >> 16 | s[i + 1];
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_array(this.s.subarray(i, i + len));
     },
     readuint8array:
     function(len){
      var i = this.i;
      this.i = i + len;
      return this.s.subarray(i, i + len);
     }};
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495A6BE:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495A6BD:
       var
        header_len = r.read8u() & 0x3F,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function MlStringReader(s, i){
    this.s = caml_jsbytes_of_string(s);
    this.i = i;
   }
   MlStringReader.prototype =
    {read8u: function(){return this.s.charCodeAt(this.i++);},
     read8s: function(){return this.s.charCodeAt(this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3);
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_jsbytes(this.s.substring(i, i + len));
     },
     readuint8array:
     function(len){
      var b = new Uint8Array(len), s = this.s, i = this.i;
      for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
      this.i = i + len;
      return b;
     }};
   var caml_decompress_input = null;
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_input_value_from_reader(reader, ofs){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    var magic = reader.read32u();
    switch(magic){
      case 0x8495A6BE:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495A6BD:
       var
        header_len = reader.read8u() & 0x3F,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    var
     stack = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xF, size = code >> 4 & 0x7, v = [tag];
       if(size == 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3F;
     else if(code >= 0x20){
      var len = code & 0x1F, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xFF,
          size = header >> 10,
          v = [tag];
         if(size == 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0A:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0C:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0B:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0E:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0D:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0F:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) != 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var
          old_pos = reader.i,
          size = [0],
          v = ops.deserialize(reader, size);
         if(expected_size != undefined)
          if(expected_size != size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    if(typeof ofs != "number") ofs[0] = reader.i;
    return res;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     reader =
       new
        MlStringReader
        (caml_string_of_bytes(s), typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channels[chanid],
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r == 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var
     offset = [0],
     res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);
    chan.offset = chan.offset + offset[0];
    return res;
   }
   function caml_input_value_to_outside_heap(c){return caml_input_value(c);}
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_copysign_float(x, y){
    if(y == 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ml_condition_wait(t, mutext){return 0;}
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_nextafter_float(x, y){
    if(isNaN(x) || isNaN(y)) return NaN;
    if(x == y) return y;
    if(x == 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y == x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function core_gc_minor_collections(){return 0;}
   function caml_pos_in(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid);}
   function caml_int64_and(x, y){return x.and(y);}
   function Base_int_math_int64_pow_stub(base, exponent){
    var
     one = caml_int64_create_lo_hi(1, 0),
     mul = [one, base, one, one],
     res = one;
    while(! caml_int64_is_zero(exponent)){
     mul[1] = caml_int64_mul(mul[1], mul[3]);
     mul[2] = caml_int64_mul(mul[1], mul[1]);
     mul[3] = caml_int64_mul(mul[2], mul[1]);
     res = caml_int64_mul(res, mul[caml_int64_lo32(exponent) & 3]);
     exponent = caml_int64_shift_right_unsigned(exponent, 2);
    }
    return res;
   }
   function caml_sys_const_word_size(){return 32;}
   function caml_runtime_events_pause(){return 0;}
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    return root.device.unlink(root.rest, true);
   }
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function bigstring_alloc(_, size){return caml_ba_create(12, 0, [0, size]);}
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          startchars = re[6] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] != 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] != 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos == 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] != s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    while(pos >= 0){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos--;
    }
    return [0];
   }
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout == 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function core_gc_compactions(){return 0;}
   function caml_gc_full_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xFF & i32 >> 24,
     b3 = 0xFF & i32 >> 16,
     b2 = 0xFF & i32 >> 8,
     b1 = 0xFF & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_gr_sigio_signal(){return 0;}
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_sys_const_ostype_unix(){return os_type == "Unix" ? 1 : 0;}
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_signbit_float(x){if(x == 0) x = 1 / x; return x < 0 ? 1 : 0;}
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_js_typeof(o){return typeof o;}
   function caml_string_hash(h, v){
    var h = caml_hash_mix_string(h, v), h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_restore_raw_backtrace(exn, bt){return 0;}
   function Base_int_math_int32_ctz(x){
    if(x === 0) return 32;
    var n = 1;
    if((x & 0x0000FFFF) === 0){n = n + 16; x = x >> 16;}
    if((x & 0x000000FF) === 0){n = n + 8; x = x >> 8;}
    if((x & 0x0000000F) === 0){n = n + 4; x = x >> 4;}
    if((x & 0x00000003) === 0){n = n + 2; x = x >> 2;}
    return n - (x & 1);
   }
   function Base_int_math_nativeint_ctz(x){return Base_int_math_int32_ctz(x);}
   function expect_test_collector_after_test(vstdout, vstderr){
    caml_ml_channels[vstdout] = expect_test_collector_saved_stdout;
    caml_ml_channels[vstderr] = expect_test_collector_saved_stderr;
    return 0;
   }
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f) - 1, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_ephe_check_data(x){
    return x[caml_ephe_data_offset] === undefined ? 0 : 1;
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_js_from_bool(x){return ! ! x;}
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channels[chanid];
    chan.name = name;
    return 0;
   }
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function bigstring_memcmp_bytes_stub(v_s1, v_s1_pos, v_s2, v_s2_pos, v_len){
    for(var i = 0; i < v_len; i++){
     var
      a = caml_ba_get_1(v_s1, v_s1_pos + i),
      b = caml_bytes_get(v_s2, v_s2_pos + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   var Base_internalhash_fold_int = caml_hash_mix_int;
   function caml_ml_domain_cpu_relax(unit){return 0;}
   function caml_create_string(len){caml_invalid_argument("String.create");}
   function Base_int_math_nativeint_clz(x){return Base_int_math_int32_clz(x);}
   function bigstring_memset_stub(bigstring, v_pos, v_len, v_char){
    for(var i = 0; i < v_len; i++)
     caml_ba_set_1(bigstring, v_pos + i, v_char);
   }
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_ml_condition_signal(t){return 0;}
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_domain_id(unit){return caml_domain_id;}
   function caml_ephe_get_data(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, x[caml_ephe_data_offset]];
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest;}catch(e){}
    if(typeof globalThis.activeXObject !== "undefined"){
     try{return new globalThis.activeXObject("Msxml2.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Msxml3.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Microsoft.XMLHTTP");}catch(e){}
    }
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channels[chanid].buffered ? 1 : 0;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   var internalhash_fold_bigstring = caml_hash_mix_bigstring;
   function Base_int_math_int64_clz(x){
    var n = 64, y;
    y = caml_int64_shift_right_unsigned(x, 32);
    if(! caml_int64_is_zero(y)){n = n - 32; x = y;}
    y = caml_int64_shift_right_unsigned(x, 16);
    if(! caml_int64_is_zero(y)){n = n - 16; x = y;}
    y = caml_int64_shift_right_unsigned(x, 8);
    if(! caml_int64_is_zero(y)){n = n - 8; x = y;}
    y = caml_int64_shift_right_unsigned(x, 4);
    if(! caml_int64_is_zero(y)){n = n - 4; x = y;}
    y = caml_int64_shift_right_unsigned(x, 2);
    if(! caml_int64_is_zero(y)){n = n - 2; x = y;}
    y = caml_int64_shift_right_unsigned(x, 1);
    if(! caml_int64_is_zero(y)) return n - 2;
    return n - caml_int64_to_int32(x);
   }
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channels[chanid].refill = f;
    return 0;
   }
   function js_prof_clear_marks(){
    try{js_performance.clearMarks();}
    catch(e){joo_global_object.console.warn(e);}
    return 0;
   }
   function caml_runtime_events_create_cursor(target){return {};}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function caml_ojs_iterate_properties(o, f){
    var name;
    for(name in o) if(o.hasOwnProperty(name)) f(name);
   }
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function core_gc_run_memprof_callbacks(){return 0;}
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_array(caml_output_val(v, flags));
   }
   function caml_eventlog_resume(unit){return 0;}
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_jsoo_flags_use_js_string(unit){return 1;}
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(t, 0, s, ofs, t.length);
    return 0;
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur != "\\")
      res += cur;
     else{
      if(n == len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start == - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   function core_gc_top_heap_words(){return 0;}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, true);
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];
     globalThis.caml_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function caml_unix_stat_64(name){
    var r = caml_unix_stat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s)){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos++;
    }
    return [0];
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++) l[i + 1] = caml_string_of_jsbytes(a[i]);
    return l;
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_sys_const_ostype_win32(){return os_type == "Win32" ? 1 : 0;}
   function caml_obj_is_block(x){return + (x instanceof Array);}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_ephe_unset_data(x){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(x[1] instanceof globalThis.FinalizationRegistry)
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].unregister(key);
       }
      }
    x[caml_ephe_data_offset] = undefined;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(! (x[1] instanceof globalThis.FinalizationRegistry)){
      x[1] =
       new
        globalThis.FinalizationRegistry
        (function(){caml_ephe_unset_data(x);});
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].register(key, undefined, key);
       }
      }
     }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var n = src[caml_ephe_data_offset];
    if(n === undefined)
     caml_ephe_unset_data(dst);
    else
     caml_ephe_set_data(dst, n);
    return 0;
   }
   function length_nat(x){return x.data.length;}
   var Base_internalhash_fold_int64 = caml_hash_mix_int64;
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0A,
       CODE_DOUBLE_BIG: 0x0B,
       CODE_DOUBLE_LITTLE: 0x0C,
       CODE_DOUBLE_ARRAY8_BIG: 0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0E,
       CODE_DOUBLE_ARRAY32_BIG: 0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_obj_compare_and_swap(x, i, old, n){
    if(x[i + 1] == old){x[i + 1] = n; return 1;}
    return 0;
   }
   function bigstring_to_typed_array(bs){return bs.data;}
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j == 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev != xPos || yPos_prev != yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout == 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_ba_kind(ba){return ba.kind;}
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_out_channel_pos_fd(chan){
    var info = caml_ml_channels[chan];
    return info.offset;
   }
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_gc_major_slice(work){return 0;}
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   var core_array_unsafe_int_blit = caml_array_blit;
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_memprof_discard(t){return 0;}
   function caml_record_backtrace(b){
    caml_record_backtrace_flag = b;
    return 0;
   }
   function caml_unix_cleanup(){}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function core_heap_block_is_heap_block(x){return + (x instanceof Array);}
   function caml_obj_is_shared(x){return 1;}
   function core_gc_promoted_words(){return 0;}
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_pos_out(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.offset + chan.buffer_curr;
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_ba_init(){return 0;}
   function caml_unix_filedescr_of_fd(x){return x;}
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function BigStringReader(bs, i){this.s = bs; this.i = i;}
   BigStringReader.prototype =
    {read8u: function(){return caml_ba_get_1(this.s, this.i++);},
     read8s: function(){return caml_ba_get_1(this.s, this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 8 | caml_ba_get_1(s, i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 24 >> 16 | caml_ba_get_1(s, i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3);
     },
     readstr:
     function(len){
      var i = this.i, arr = new Array(len);
      for(var j = 0; j < len; j++) arr[j] = caml_ba_get_1(this.s, i + j);
      this.i = i + len;
      return caml_string_of_array(arr);
     },
     readuint8array:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return this.s.data.subarray(offset, offset + len);
     }};
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_unix_startup(){}
   function caml_get_exception_backtrace(){return 0;}
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function Base_int_math_int_clz(x){return Base_int_math_int32_clz(x);}
   function js_prof_clear_measures(){
    try{js_performance.clearMeasures();}
    catch(e){joo_global_object.console.warn(e);}
    return 0;
   }
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_div(x, y){
    if(y == 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   function caml_obj_dup(x){
    var l = x.length, a = new Array(l);
    for(var i = 0; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ephe_get_data_copy(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, caml_obj_dup(x[caml_ephe_data_offset])];
   }
   function caml_memprof_start(rate, stack_size, tracker){return 0;}
   function caml_sys_get_argv(a){return [0, caml_argv[1], caml_argv];}
   function caml_ml_domain_set_name(_name){return 0;}
   function caml_js_to_bool(x){return + x;}
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_ephe_get_key_copy(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_copy");
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(z instanceof Array) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_raw_backtrace_next_slot(){return 0;}
   function bigstringaf_memcmp_string(ba, ba_off, str, str_off, len){
    for(var i = 0; i < len; i++){
     var
      c =
        caml_int_compare
         (caml_ba_get_1(ba, ba_off + i),
          caml_string_unsafe_get(str, str_off + i));
     if(c != 0) return c;
    }
    return 0;
   }
   function caml_build_symbols(toc){
    var symb;
    while(toc)
     if(caml_jsstring_of_string(toc[1][1]) == "SYJS"){symb = toc[1][2]; break;}
     else
      toc = toc[2];
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.toc){
      if(! caml_global_data.symbols)
       caml_global_data.symbols = caml_build_symbols(caml_global_data.toc);
      var nid = caml_global_data.symbols[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function core_md5_digest_subbigstring(buf, ofs, len, res){
    var bytes = caml_create_bytes(len);
    bigstring_blit_bigstring_bytes_stub(buf, ofs, bytes, 0, len);
    var res2 = caml_md5_string(caml_string_of_bytes(bytes), 0, len);
    caml_blit_string(res2, 0, res, 0, 16);
    return 0;
   }
   function caml_js_from_float(x){return x;}
   function caml_floatarray_create(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_gc_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_get_major_credit(n){return 0;}
   function bigstringaf_memchr(ba, ba_off, chr, len){
    for(var i = 0; i < len; i++)
     if(caml_ba_get_1(ba, ba_off + i) == chr) return ba_off + i;
    return - 1;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   var caml_method_cache = [];
   function caml_get_public_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(ofs === undefined)
     for(var i = caml_method_cache.length; i < cacheid; i++)
      caml_method_cache[i] = 0;
    else if(meths[ofs] === tag) return meths[ofs - 1];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li + 1;
    return tag == meths[li + 1] ? meths[li] : 0;
   }
   function bin_prot_blit_buf_bytes_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_pos, dst, dst_pos, len);
   }
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function js_prof_measure(name, start, end){
    try{
     js_performance.measure
      (caml_jsbytes_of_string(name),
       caml_jsbytes_of_string(start),
       caml_jsbytes_of_string(end));
    }
    catch(e){joo_global_object.console.warn(e);}
    return 0;
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c;
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F;
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_lazy_read_result(o){
    return caml_obj_tag(o) == 250 ? o[1] : o;
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /\"/g, all: /[&<\"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_js_wrap_meth_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [this, args]);};
   }
   function caml_sinh_float(x){return Math.sinh(x);}
   function core_gc_major_plus_minor_words(){return 0;}
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_gc_minor_words(unit){return 0;}
   function caml_get_current_callstack(){return [0];}
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_obj_set_tag(x, tag){x[0] = tag; return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000FF) << 24 | (x & 0x0000FF00) << 8
           | (x & 0x00FF0000) >>> 8
           | (x & 0xFF000000) >>> 24;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_get_major_bucket(n){return 0;}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function caml_string_set64(s, i, i64){caml_failwith("caml_string_set64");}
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_ba_map_file(vfd, kind, layout, shared, dims, pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) == 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   function caml_tanh_float(x){return Math.tanh(x);}
   function Base_int_math_int_ctz(x){return Base_int_math_int32_ctz(x);}
   function bigstring_blit_string_bigstring_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_runtime_events_start(){return 0;}
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path == name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_input_value_from_string(s, ofs){
    var reader = new MlStringReader(s, typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_register_channel_for_spacetime(_channel){return 0;}
   function caml_string_set(s, i, c){caml_failwith("caml_string_set");}
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function caml_unix_symlink(to_dir, src, dst){
    var src_root = resolve_fs_device(src), dst_root = resolve_fs_device(dst);
    if(src_root.device != dst_root.device)
     caml_failwith
      ("caml_unix_symlink: cannot symlink between two filesystems");
    if(! src_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, true);
   }
   function Base_int_math_int64_ctz(x){
    if(caml_int64_is_zero(x)) return 64;
    var n = 1;
    function is_zero(x){return caml_int64_is_zero(x);}
    function land(x, y){return caml_int64_and(x, y);}
    function small_int64(x){return caml_int64_create_lo_mi_hi(x, 0, 0);}
    if
     (is_zero(land(x, caml_int64_create_lo_mi_hi(0xFFFFFF, 0x0000FF, 0x0000)))){n = n + 32; x = caml_int64_shift_right_unsigned(x, 32);}
    if(is_zero(land(x, small_int64(0x00FFFF)))){
     n = n + 16;
     x = caml_int64_shift_right_unsigned(x, 16);
    }
    if(is_zero(land(x, small_int64(0x0000FF)))){
     n = n + 8;
     x = caml_int64_shift_right_unsigned(x, 8);
    }
    if(is_zero(land(x, small_int64(0x00000F)))){
     n = n + 4;
     x = caml_int64_shift_right_unsigned(x, 4);
    }
    if(is_zero(land(x, small_int64(0x000003)))){
     n = n + 2;
     x = caml_int64_shift_right_unsigned(x, 2);
    }
    return n - caml_int64_to_int32(caml_int64_and(x, small_int64(0x000001)));
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid);}
   var core_array_unsafe_float_blit = caml_array_blit;
   function Base_caml_exn_is_most_recent_exn(x){return 1;}
   function caml_spacetime_enabled(_unit){return 0;}
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function Base_internalhash_get_hash_value(seed){
    var h = caml_hash_mix_final(seed);
    return h & 0x3FFFFFFF;
   }
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if
     (x === 0 || x !== x || x === + (1 / 0) || x === - (1 / 0) || y === 0
      || y !== y
      || y === + (1 / 0)
      || y === - (1 / 0))
     return x * y + z;
    if(z === 0) return x * y;
    if(z !== z || z === + (1 / 0) || z === - (1 / 0)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_recommended_domain_count(unit){return 1;}
   function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;}
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channels[chanid];
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_final_register(){return 0;}
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function core_gc_major_collections(){return 0;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_ml_output_bigarray(chanid, buffer, offset, len){
    var buffer = caml_ba_to_typed_array(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    return 0;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(b){return caml_sys_time();}
   function Base_clear_caml_backtrace_pos(x){return 0;}
   function caml_unix_getpwuid(unit){caml_raise_not_found();}
   function caml_domain_dls_get(unit){return caml_domain_dls;}
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_frexp_float(x){
    if(x == 0 || ! isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, jsoo_floor_log2(x) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function bigstring_blit_bytes_bigstring_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_bytes_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function core_time_ns_format(time, format){
    var
     d = new Date(time * 1000),
     formatjs = caml_jsbytes_of_string(format),
     jstring = joo_global_object.strftime(formatjs, d);
    return caml_string_of_jsbytes(jstring);
   }
   function caml_ojs_wrap_fun_arguments(f){
    return function(){return caml_js_wrap_callback(f)(arguments);};
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_gr_close_subwindow(a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_floatarray_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_get_minor_free(unit){return 0;}
   function caml_set_static_env(k, v){
    if(! globalThis.jsoo_static_env) globalThis.jsoo_static_env = {};
    globalThis.jsoo_static_env[k] = v;
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout == layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function Base_hash_double(d){return caml_hash(1, 1, 0, d);}
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   function core_gc_heap_words(){return 0;}
   function jsoo_effect_not_supported(){
    caml_failwith("Effect handlers are not supported");
   }
   var caml_ml_domain_unique_token_ = [0];
   function caml_ml_domain_unique_token(unit){return caml_ml_domain_unique_token_;
   }
   function caml_continuation_use_and_update_handler_noexc
   (cont, hval, hexn, heff){
    var stack = caml_continuation_use_noexc(cont);
    stack[3] = [0, hval, hexn, heff];
    return stack;
   }
   function caml_obj_truncate(x, s){
    if(s <= 0 || s + 1 > x.length) caml_invalid_argument("Obj.truncate");
    if(x.length != s + 1) x.length = s + 1;
    return 0;
   }
   function core_gc_minor_words(){return 0;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info == "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_make_float_vect(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_cbrt_float(x){return Math.cbrt(x);}
   function caml_eventlog_pause(unit){return 0;}
   function caml_memprof_stop(unit){return 0;}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_log1p_float(x){return Math.log1p(x);}
   function bigstringaf_blit_to_bigstring(src, src_off, dst, dst_off, len){return caml_bigstring_blit_ba_to_ba(src, src_off, dst, dst_off, len);
   }
   var ms_to_nano = caml_int64_of_int32(1000 * 1000);
   function time_now_nanoseconds_since_unix_epoch_or_zero(){
    var ms = Date.now(), ms_i63 = caml_int64_of_float(ms * 2);
    return caml_int64_mul(ms_i63, ms_to_nano);
   }
   function caml_runtime_events_free_cursor(cursor){return 0;}
   function caml_lazy_make_forward(v){return [250, v];}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_window_id(a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_atomic_make_contended(a){return [0, a];}
   function caml_js_on_ie(){
    var
     ua =
       globalThis.navigator && globalThis.navigator.userAgent
        ? globalThis.navigator.userAgent
        : "";
    return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0;
   }
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_alloc_stack(hv, hx, hf){return 0;}
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xFF & i16 >> 8, b1 = 0xFF & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_ml_output_int(chanid, i){
    var
     arr = [i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF],
     s = caml_string_of_array(arr);
    caml_ml_output(chanid, s, 0, 4);
    return 0;
   }
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.file.length();
   }
   function bin_prot_blit_string_buf_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_raw_backtrace_slot(){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_runtime_events_user_write(event, event_content){return 0;}
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(){
     var args = new Array(arity + 1), len = Math.min(arguments.length, arity);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_flag ? 1 : 0;
   }
   function caml_install_signal_handler(){return 0;}
   function caml_sys_argv(a){return caml_argv;}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_modf_float(x){
    if(isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(isNaN(x)) return [0, NaN, NaN];
    return [0, 1 / x, x];
   }
   function caml_gc_get(){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(x === x) return 1;
    if(y === y) return - 1;
    return 0;
   }
   function caml_string_set32(s, i, i32){caml_failwith("caml_string_set32");}
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(2, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] == "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(tok instanceof Array){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] == "number")
       kind = "" + tok[1];
      else if(typeof tok[1] == "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    exit:
    for(;;)
     next:
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n != 0){cmd = reduce; break;}
        if(env[env_curr_char] >= 0){cmd = testshift; break;}
        res = READ_TOKEN;
        break exit;
       case 1:
        if(arg instanceof Array){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){cmd = shift; break;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         break;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break exit;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] == ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           break next;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] == 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         break;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break exit;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        break;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break exit;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break exit;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        break;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_jsoo_flags_effects(unit){return 0;}
   function core_gc_major_words(){return 0;}
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function bigstring_blit_stub(s1, i1, s2, i2, len){
    return caml_bigstring_blit_ba_to_ba(s1, i1, s2, i2, len);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c == - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0Xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function Base_int_math_int_popcount(v){
    v = v - (v >>> 1 & 0x55555555);
    v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
    return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channels[chanid];
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_read_file_content(name){
    var
     name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(0, buf, 0, len);
     return caml_string_of_array(buf);
    }
    caml_raise_no_such_file(caml_jsbytes_of_string(name));
   }
   function caml_js_to_float(x){return x;}
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {js_prof_clear_measures: js_prof_clear_measures,
     js_prof_clear_marks: js_prof_clear_marks,
     js_prof_measure: js_prof_measure,
     js_prof_mark: js_prof_mark,
     js_performance: js_performance,
     bigstringaf_memchr: bigstringaf_memchr,
     bigstringaf_memcmp_string: bigstringaf_memcmp_string,
     bigstringaf_memcmp_bigstring: bigstringaf_memcmp_bigstring,
     bigstringaf_blit_from_bytes: bigstringaf_blit_from_bytes,
     bigstringaf_blit_to_bigstring: bigstringaf_blit_to_bigstring,
     bigstringaf_blit_to_bytes: bigstringaf_blit_to_bytes,
     caml_ojs_iterate_properties: caml_ojs_iterate_properties,
     caml_ojs_wrap_fun_arguments: caml_ojs_wrap_fun_arguments,
     bigstring_realloc: bigstring_realloc,
     bigstring_destroy_stub: bigstring_destroy_stub,
     core_md5_digest_subbigstring: core_md5_digest_subbigstring,
     core_md5_fd: core_md5_fd,
     core_heap_block_is_heap_block: core_heap_block_is_heap_block,
     core_gc_run_memprof_callbacks: core_gc_run_memprof_callbacks,
     core_gc_top_heap_words: core_gc_top_heap_words,
     core_gc_promoted_words: core_gc_promoted_words,
     core_gc_minor_words: core_gc_minor_words,
     core_gc_minor_collections: core_gc_minor_collections,
     core_gc_major_words: core_gc_major_words,
     core_gc_major_plus_minor_words: core_gc_major_plus_minor_words,
     core_gc_major_collections: core_gc_major_collections,
     core_gc_heap_words: core_gc_heap_words,
     core_gc_heap_chunks: core_gc_heap_chunks,
     core_gc_compactions: core_gc_compactions,
     core_time_ns_format: core_time_ns_format,
     core_array_unsafe_float_blit: core_array_unsafe_float_blit,
     core_array_unsafe_int_blit: core_array_unsafe_int_blit,
     bigstring_find: bigstring_find,
     internalhash_fold_bigstring: internalhash_fold_bigstring,
     bigstring_memcmp_bytes_stub: bigstring_memcmp_bytes_stub,
     bigstring_memcmp_stub: bigstring_memcmp_stub,
     bigstring_memset_stub: bigstring_memset_stub,
     bigstring_blit_string_bigstring_stub:
     bigstring_blit_string_bigstring_stub,
     bigstring_blit_bigstring_bytes_stub: bigstring_blit_bigstring_bytes_stub,
     bigstring_blit_bytes_bigstring_stub: bigstring_blit_bytes_bigstring_stub,
     bigstring_blit_stub: bigstring_blit_stub,
     bigstring_is_mmapped_stub: bigstring_is_mmapped_stub,
     bigstring_alloc: bigstring_alloc,
     caml_out_channel_pos_fd: caml_out_channel_pos_fd,
     expect_test_collector_after_test: expect_test_collector_after_test,
     expect_test_collector_before_test: expect_test_collector_before_test,
     expect_test_collector_saved_stderr: expect_test_collector_saved_stderr,
     expect_test_collector_saved_stdout: expect_test_collector_saved_stdout,
     bin_prot_blit_buf_stub: bin_prot_blit_buf_stub,
     bin_prot_blit_bytes_buf_stub: bin_prot_blit_bytes_buf_stub,
     bin_prot_blit_string_buf_stub: bin_prot_blit_string_buf_stub,
     bin_prot_blit_float_array_buf_stub: bin_prot_blit_float_array_buf_stub,
     bin_prot_blit_buf_bytes_stub: bin_prot_blit_buf_bytes_stub,
     bin_prot_blit_buf_float_array_stub: bin_prot_blit_buf_float_array_stub,
     caml_check_bound_bigstring: caml_check_bound_bigstring,
     time_now_nanoseconds_since_unix_epoch_or_zero:
     time_now_nanoseconds_since_unix_epoch_or_zero,
     Base_am_testing: Base_am_testing,
     Base_hash_double: Base_hash_double,
     Base_hash_string: Base_hash_string,
     Base_int_math_int64_pow_stub: Base_int_math_int64_pow_stub,
     Base_int_math_int_pow_stub: Base_int_math_int_pow_stub,
     Base_int_math_int64_ctz: Base_int_math_int64_ctz,
     Base_int_math_nativeint_ctz: Base_int_math_nativeint_ctz,
     Base_int_math_int_ctz: Base_int_math_int_ctz,
     Base_int_math_int32_ctz: Base_int_math_int32_ctz,
     Base_int_math_int64_clz: Base_int_math_int64_clz,
     Base_int_math_nativeint_clz: Base_int_math_nativeint_clz,
     Base_int_math_int_clz: Base_int_math_int_clz,
     Base_int_math_int32_clz: Base_int_math_int32_clz,
     Base_caml_exn_is_most_recent_exn: Base_caml_exn_is_most_recent_exn,
     Base_clear_caml_backtrace_pos: Base_clear_caml_backtrace_pos,
     Base_int_math_int_popcount: Base_int_math_int_popcount,
     Base_internalhash_get_hash_value: Base_internalhash_get_hash_value,
     Base_internalhash_fold_string: Base_internalhash_fold_string,
     Base_internalhash_fold_float: Base_internalhash_fold_float,
     Base_internalhash_fold_int: Base_internalhash_fold_int,
     Base_internalhash_fold_int64: Base_internalhash_fold_int64,
     caml_runtime_events_read_poll: caml_runtime_events_read_poll,
     caml_runtime_events_free_cursor: caml_runtime_events_free_cursor,
     caml_runtime_events_create_cursor: caml_runtime_events_create_cursor,
     caml_runtime_events_resume: caml_runtime_events_resume,
     caml_runtime_events_pause: caml_runtime_events_pause,
     caml_runtime_events_start: caml_runtime_events_start,
     caml_runtime_events_user_resolve: caml_runtime_events_user_resolve,
     caml_runtime_events_user_write: caml_runtime_events_user_write,
     caml_runtime_events_user_register: caml_runtime_events_user_register,
     caml_custom_event_index: caml_custom_event_index,
     caml_decompress_input: caml_decompress_input,
     jsoo_effect_not_supported: jsoo_effect_not_supported,
     caml_ml_condition_signal: caml_ml_condition_signal,
     caml_ml_condition_broadcast: caml_ml_condition_broadcast,
     caml_ml_condition_wait: caml_ml_condition_wait,
     caml_ml_condition_new: caml_ml_condition_new,
     caml_get_continuation_callstack: caml_get_continuation_callstack,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_continuation_use_noexc: caml_continuation_use_noexc,
     caml_alloc_stack: caml_alloc_stack,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_lxm_next: caml_lxm_next,
     caml_ml_domain_cpu_relax: caml_ml_domain_cpu_relax,
     caml_ml_domain_id: caml_ml_domain_id,
     caml_domain_spawn: caml_domain_spawn,
     caml_domain_id: caml_domain_id,
     caml_recommended_domain_count: caml_recommended_domain_count,
     caml_ml_domain_set_name: caml_ml_domain_set_name,
     caml_ml_domain_unique_token: caml_ml_domain_unique_token,
     caml_atomic_make_contended: caml_atomic_make_contended,
     caml_atomic_exchange: caml_atomic_exchange,
     caml_atomic_fetch_add: caml_atomic_fetch_add,
     caml_atomic_cas: caml_atomic_cas,
     caml_atomic_load: caml_atomic_load,
     caml_domain_dls_get: caml_domain_dls_get,
     caml_domain_dls_set: caml_domain_dls_set,
     caml_domain_dls: caml_domain_dls,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwuid: caml_unix_getpwuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     make_unix_err_args: make_unix_err_args,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     caml_str_initialize: caml_str_initialize,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_sys_is_regular_file: caml_sys_is_regular_file,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime: caml_register_channel_for_spacetime,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_spacetime_enabled: caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_lazy_read_result: caml_lazy_read_result,
     caml_lazy_reset_to_lazy: caml_lazy_reset_to_lazy,
     caml_lazy_update_to_forward: caml_lazy_update_to_forward,
     caml_lazy_update_to_forcing: caml_lazy_update_to_forcing,
     caml_obj_update_tag: caml_obj_update_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_is_shared: caml_obj_is_shared,
     caml_obj_compare_and_swap: caml_obj_compare_and_swap,
     caml_obj_make_forward: caml_obj_make_forward,
     caml_obj_truncate: caml_obj_truncate,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_set_tag: caml_obj_set_tag,
     caml_obj_tag: caml_obj_tag,
     caml_obj_is_block: caml_obj_is_block,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat_real: compare_nat_real,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_new_string: caml_new_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_set: caml_string_unsafe_set,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     caml_bytes_set: caml_bytes_set,
     caml_string_set64: caml_string_set64,
     caml_bytes_set64: caml_bytes_set64,
     caml_string_set32: caml_string_set32,
     caml_bytes_set32: caml_bytes_set32,
     caml_string_set16: caml_string_set16,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_utf16_of_utf8: caml_utf16_of_utf8,
     caml_utf8_of_utf16: caml_utf8_of_utf16,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_input_value_from_string: caml_input_value_from_string,
     caml_float_of_bytes: caml_float_of_bytes,
     BigStringReader: BigStringReader,
     MlStringReader: MlStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_on_ie: caml_js_on_ie,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bigarray: caml_ml_output_bigarray,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value_to_outside_heap: caml_input_value_to_outside_heap,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input_bigarray: caml_ml_input_bigarray,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_floor_log2: jsoo_floor_log2,
     caml_string_hash: caml_string_hash,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_major_credit: caml_get_major_credit,
     caml_get_major_bucket: caml_get_major_bucket,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_gc_huge_fallback_count: caml_gc_huge_fallback_count,
     caml_eventlog_pause: caml_eventlog_pause,
     caml_eventlog_resume: caml_eventlog_resume,
     caml_memprof_discard: caml_memprof_discard,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_memprof_set: caml_memprof_set,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_not_a_dir: caml_raise_not_a_dir,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_flag: caml_record_backtrace_flag,
     caml_floatarray_create: caml_floatarray_create,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_check_bound: caml_check_bound,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_array_append: caml_array_append,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
