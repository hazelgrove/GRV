// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lang
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__Format, Stdlib__Int
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_S = "%S",
    cst_a = "%a",
    cst$23 = ")",
    cst$20 = "->",
    cst$18 = ":",
    cst$19 = "::",
    cst_2 = "<2>",
    cst$21 = "@ ",
    cst$22 = "@])",
    cst_Exp_app = "Exp_app",
    cst_Exp_app_arg = "Exp_app_arg",
    cst_Exp_app_fun = "Exp_app_fun",
    cst_Exp_case = "Exp_case",
    cst_Exp_case_cons_body = "Exp_case_cons_body",
    cst_Exp_case_head_pat = "Exp_case_head_pat",
    cst_Exp_case_nil_body = "Exp_case_nil_body",
    cst_Exp_case_scrut = "Exp_case_scrut",
    cst_Exp_case_tail_pat = "Exp_case_tail_pat",
    cst_Exp_case_type = "Exp_case_type",
    cst_Exp_cons = "Exp_cons",
    cst_Exp_cons_head = "Exp_cons_head",
    cst_Exp_cons_tail = "Exp_cons_tail",
    cst_Exp_lam = "Exp_lam",
    cst_Exp_lam_body = "Exp_lam_body",
    cst_Exp_lam_param = "Exp_lam_param",
    cst_Exp_lam_param_type = "Exp_lam_param_type",
    cst_Exp_nil = "Exp_nil",
    cst_Exp_num = "Exp_num",
    cst_Exp_plus = "Exp_plus",
    cst_Exp_plus_left = "Exp_plus_left",
    cst_Exp_plus_right = "Exp_plus_right",
    cst_Exp_times = "Exp_times",
    cst_Exp_times_left = "Exp_times_left",
    cst_Exp_times_right = "Exp_times_right",
    cst_Exp_var = "Exp_var",
    cst_Pat_var = "Pat_var",
    cst_Root_root = "Root_root",
    cst_Root_root_root = "Root_root_root",
    cst_Typ_arrow = "Typ_arrow",
    cst_Typ_arrow_arg = "Typ_arrow_arg",
    cst_Typ_arrow_result = "Typ_arrow_result",
    cst_Typ_list = "Typ_list",
    cst_Typ_list_content = "Typ_list_content",
    cst_Typ_num = "Typ_num",
    cst_arg$1 = "arg",
    cst_case$1 = "case",
    cst_exp_app = "exp_app",
    cst_exp_app_arg = "exp_app_arg",
    cst_exp_app_fun = "exp_app_fun",
    cst_exp_case = "exp_case",
    cst_exp_case_cons_body = "exp_case_cons_body",
    cst_exp_case_head_pat = "exp_case_head_pat",
    cst_exp_case_nil_body = "exp_case_nil_body",
    cst_exp_case_scrut = "exp_case_scrut",
    cst_exp_case_tail_pat = "exp_case_tail_pat",
    cst_exp_case_type = "exp_case_type",
    cst_exp_cons = "exp_cons",
    cst_exp_cons_head = "exp_cons_head",
    cst_exp_cons_tail = "exp_cons_tail",
    cst_exp_lam = "exp_lam",
    cst_exp_lam_body = "exp_lam_body",
    cst_exp_lam_param = "exp_lam_param",
    cst_exp_lam_param_type = "exp_lam_param_type",
    cst_exp_nil = "exp_nil",
    cst_exp_num = "exp_num",
    cst_exp_plus = "exp_plus",
    cst_exp_plus_left = "exp_plus_left",
    cst_exp_plus_right = "exp_plus_right",
    cst_exp_times = "exp_times",
    cst_exp_times_left = "exp_times_left",
    cst_exp_times_right = "exp_times_right",
    cst_exp_var = "exp_var",
    cst_grvcore$0 = "grvcore",
    cst_left$1 = "left",
    cst_list$1 = "list",
    cst_nil$1 = "nil",
    cst_pat_var = "pat_var",
    cst_right$1 = "right",
    cst_root$1 = "root",
    cst_root_root = "root_root",
    cst_root_root_root = "root_root_root",
    cst_typ_arrow = "typ_arrow",
    cst_typ_arrow_arg = "typ_arrow_arg",
    cst_typ_arrow_result = "typ_arrow_result",
    cst_typ_list = "typ_list",
    cst_typ_list_content = "typ_list_content",
    cst_typ_num = "typ_num",
    cst_var$1 = "var(",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = ".",
    cst$4 = cst$18,
    cst$5 = "\xce\xbb",
    cst$6 = " ",
    cst$7 = " + ",
    cst$8 = " * ",
    cst$9 = cst$19,
    cst$10 = cst$18,
    cst$11 = cst$20,
    cst$12 = cst$19,
    cst$13 = "|",
    cst$14 = cst$20,
    cst$15 = "\xe2\x86\x92",
    cst$16 = "]",
    cst$17 = "[",
    cst$0 = cst$23,
    cst$1 = cst$23,
    cst$2 = cst$23,
    cst = "",
    error_source_003 = "src/grvcore/Lang.ml.Constructor.t",
    error_source_028 = "src/grvcore/Lang.ml.Position.t",
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Format = global_data.Stdlib__Format,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    cst_Int = "Int",
    cst_end = "end",
    cst_nil$0 = cst_nil$1,
    cst_of = "of",
    cst_case$0 = cst_case$1,
    cst_Num = "Num",
    cst_list$0 = cst_list$1,
    cst_Lang_Gadt_Root_root = "Lang.Gadt.Root_root",
    _aW_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_var = "Lang.Gadt.Exp_var",
    _aY_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_lam = "Lang.Gadt.Exp_lam",
    _a0_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_app = "Lang.Gadt.Exp_app",
    _a2_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_num = "Lang.Gadt.Exp_num",
    _a4_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_plus = "Lang.Gadt.Exp_plus",
    _a6_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_times = "Lang.Gadt.Exp_times",
    _a8_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_nil = "Lang.Gadt.Exp_nil",
    _a__ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_cons = "Lang.Gadt.Exp_cons",
    _ba_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Exp_case = "Lang.Gadt.Exp_case",
    _bc_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Pat_var = "Lang.Gadt.Pat_var",
    _be_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Typ_num = "Lang.Gadt.Typ_num",
    _bg_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Typ_arrow = "Lang.Gadt.Typ_arrow",
    _bi_ = [0, [15, 0], cst_a],
    cst_Lang_Gadt_Typ_list = "Lang.Gadt.Typ_list",
    _bk_ = [0, [15, 0], cst_a],
    _bl_ = [0, cst_Typ_list],
    _bj_ = [0, cst_Typ_arrow],
    _bh_ = [0, cst_Typ_num],
    _bf_ = [0, cst_Pat_var],
    _bd_ = [0, cst_Exp_case],
    _bb_ = [0, cst_Exp_cons],
    _a$_ = [0, cst_Exp_nil],
    _a9_ = [0, cst_Exp_times],
    _a7_ = [0, cst_Exp_plus],
    _a5_ = [0, cst_Exp_num],
    _a3_ = [0, cst_Exp_app],
    _a1_ = [0, cst_Exp_lam],
    _aZ_ = [0, cst_Exp_var],
    _aX_ = [0, cst_Root_root],
    cst_Lang_Position_Root_root_ro = "Lang.Position.Root_root_root",
    cst_Lang_Position_Exp_lam_para = "Lang.Position.Exp_lam_param",
    cst_Lang_Position_Exp_lam_para$0 = "Lang.Position.Exp_lam_param_type",
    cst_Lang_Position_Exp_lam_body = "Lang.Position.Exp_lam_body",
    cst_Lang_Position_Exp_app_fun = "Lang.Position.Exp_app_fun",
    cst_Lang_Position_Exp_app_arg = "Lang.Position.Exp_app_arg",
    cst_Lang_Position_Exp_plus_lef = "Lang.Position.Exp_plus_left",
    cst_Lang_Position_Exp_plus_rig = "Lang.Position.Exp_plus_right",
    cst_Lang_Position_Exp_times_le = "Lang.Position.Exp_times_left",
    cst_Lang_Position_Exp_times_ri = "Lang.Position.Exp_times_right",
    cst_Lang_Position_Exp_cons_hea = "Lang.Position.Exp_cons_head",
    cst_Lang_Position_Exp_cons_tai = "Lang.Position.Exp_cons_tail",
    cst_Lang_Position_Exp_case_scr = "Lang.Position.Exp_case_scrut",
    cst_Lang_Position_Exp_case_nil = "Lang.Position.Exp_case_nil_body",
    cst_Lang_Position_Exp_case_hea = "Lang.Position.Exp_case_head_pat",
    cst_Lang_Position_Exp_case_tai = "Lang.Position.Exp_case_tail_pat",
    cst_Lang_Position_Exp_case_con = "Lang.Position.Exp_case_cons_body",
    cst_Lang_Position_Exp_case_typ = "Lang.Position.Exp_case_type",
    cst_Lang_Position_Typ_arrow_ar = "Lang.Position.Typ_arrow_arg",
    cst_Lang_Position_Typ_arrow_re = "Lang.Position.Typ_arrow_result",
    cst_Lang_Position_Typ_list_con = "Lang.Position.Typ_list_content",
    _D_ = [0, [15, 0], cst_a],
    _aK_ = [0, 1],
    _aL_ = [0, 2],
    _aM_ = [0, 4],
    _aN_ = [0, 6],
    _aO_ = [0, 8],
    _aP_ = [0, 10],
    _aQ_ = [0, 12],
    _aR_ = [0, 13],
    _aS_ = [0, 14],
    _aT_ = [0, 15],
    _aU_ = [0, 16],
    _aV_ = [0, 18],
    _ay_ = [0, 2],
    _az_ = [0, 3],
    _aA_ = [0, 5],
    _aB_ = [0, 7],
    _aC_ = [0, 9],
    _aD_ = [0, 11],
    _aE_ = [0, 13],
    _aF_ = [0, 14],
    _aG_ = [0, 15],
    _aH_ = [0, 16],
    _aI_ = [0, 17],
    _aJ_ = [0, 19],
    _ap_ = [0, 0],
    _aq_ = [0, 3],
    _ar_ = [0, 4],
    _as_ = [0, 6],
    _at_ = [0, 8],
    _au_ = [0, 10],
    _av_ = [0, 12],
    _aw_ = [0, 18],
    _ax_ = [0, 20],
    _ag_ = [0, 0],
    _ah_ = [0, 1],
    _ai_ = [0, 4],
    _aj_ = [0, 6],
    _ak_ = [0, 8],
    _al_ = [0, 10],
    _am_ = [0, 12],
    _an_ = [0, 18],
    _ao_ = [0, 20],
    _Z_ = [0, 0, 0],
    ___ = [0, 1, [0, 2, [0, 3, 0]]],
    _$_ = [0, 4, [0, 5, 0]],
    _aa_ = [0, 6, [0, 7, 0]],
    _ab_ = [0, 8, [0, 9, 0]],
    _ac_ = [0, 10, [0, 11, 0]],
    _ad_ = [0, 12, [0, 13, [0, 14, [0, 15, [0, 16, [0, 17, 0]]]]]],
    _ae_ = [0, 18, [0, 19, 0]],
    _af_ = [0, 20, 0],
    cst_root$0 = cst_root$1,
    cst_param = "param",
    cst_param_type = "param_type",
    cst_body = "body",
    cst_fun = "fun",
    cst_arg = cst_arg$1,
    cst_left = cst_left$1,
    cst_right = cst_right$1,
    cst_left$0 = cst_left$1,
    cst_right$0 = cst_right$1,
    cst_head = "head",
    cst_tail = "tail",
    cst_scrut = "scrut",
    cst_nil_body = "nil_body",
    cst_head_pat = "head_pat",
    cst_tail_pat = "tail_pat",
    cst_cons_body = "cons_body",
    cst_type = "type",
    cst_arg$0 = cst_arg$1,
    cst_result = "result",
    cst_content = "content",
    _E_ = [0, cst_Root_root_root],
    _F_ = [0, cst_Exp_lam_param],
    _G_ = [0, cst_Exp_lam_param_type],
    _H_ = [0, cst_Exp_lam_body],
    _I_ = [0, cst_Exp_app_fun],
    _J_ = [0, cst_Exp_app_arg],
    _K_ = [0, cst_Exp_plus_left],
    _L_ = [0, cst_Exp_plus_right],
    _M_ = [0, cst_Exp_times_left],
    _N_ = [0, cst_Exp_times_right],
    _O_ = [0, cst_Exp_cons_head],
    _P_ = [0, cst_Exp_cons_tail],
    _Q_ = [0, cst_Exp_case_scrut],
    _R_ = [0, cst_Exp_case_nil_body],
    _S_ = [0, cst_Exp_case_head_pat],
    _T_ = [0, cst_Exp_case_tail_pat],
    _U_ = [0, cst_Exp_case_cons_body],
    _V_ = [0, cst_Exp_case_type],
    _W_ = [0, cst_Typ_arrow_arg],
    _X_ = [0, cst_Typ_arrow_result],
    _Y_ = [0, cst_Typ_list_content],
    cst_Lang_Constructor_Root_root = "Lang.Constructor.Root_root",
    cst_Lang_Constructor_Exp_lam = "Lang.Constructor.Exp_lam",
    cst_Lang_Constructor_Exp_app = "Lang.Constructor.Exp_app",
    cst_Lang_Constructor_Exp_plus = "Lang.Constructor.Exp_plus",
    cst_Lang_Constructor_Exp_times = "Lang.Constructor.Exp_times",
    cst_Lang_Constructor_Exp_nil = "Lang.Constructor.Exp_nil",
    cst_Lang_Constructor_Exp_cons = "Lang.Constructor.Exp_cons",
    cst_Lang_Constructor_Exp_case = "Lang.Constructor.Exp_case",
    cst_Lang_Constructor_Typ_num = "Lang.Constructor.Typ_num",
    cst_Lang_Constructor_Typ_arrow = "Lang.Constructor.Typ_arrow",
    cst_Lang_Constructor_Typ_list = "Lang.Constructor.Typ_list",
    _f_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Constructor.Exp_var", [17, [0, cst$21, 1, 0], 0]]]],
       "(@[<2>Lang.Constructor.Exp_var@ "],
    _g_ = [0, [3, 0, 0], cst_S],
    _h_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _i_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Constructor.Exp_num", [17, [0, cst$21, 1, 0], 0]]]],
       "(@[<2>Lang.Constructor.Exp_num@ "],
    _j_ = [0, [4, 0, 0, 0, 0], "%d"],
    _k_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _l_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Lang.Constructor.Pat_var", [17, [0, cst$21, 1, 0], 0]]]],
       "(@[<2>Lang.Constructor.Pat_var@ "],
    _m_ = [0, [3, 0, 0], cst_S],
    _n_ = [0, [17, 0, [12, 41, 0]], cst$22],
    _o_ = [0, [15, 0], cst_a],
    cst_root = cst_root$1,
    cst_lam = "lam",
    cst_app = "app",
    cst_plus = "plus",
    cst_times = "times",
    cst_nil = cst_nil$1,
    cst_cons = "cons",
    cst_case = cst_case$1,
    cst_num = "num",
    cst_arrow = "arrow",
    cst_list = cst_list$1,
    cst_var = cst_var$1,
    cst_num$0 = "num(",
    cst_var$0 = cst_var$1,
    _p_ = [0, cst_Root_root],
    _q_ = [0, cst_Exp_lam],
    _r_ = [0, cst_Exp_app],
    _s_ = [0, cst_Exp_plus],
    _t_ = [0, cst_Exp_times],
    _u_ = [0, cst_Exp_nil],
    _v_ = [0, cst_Exp_cons],
    _w_ = [0, cst_Exp_case],
    _x_ = [0, cst_Typ_num],
    _y_ = [0, cst_Typ_arrow],
    _z_ = [0, cst_Typ_list],
    _A_ = [0, cst_Exp_var],
    _B_ = [0, cst_Exp_num],
    _C_ = [0, cst_Pat_var],
    cst_Lang_Sort_Root = "Lang.Sort.Root",
    cst_Lang_Sort_Exp = "Lang.Sort.Exp",
    cst_Lang_Sort_Pat = "Lang.Sort.Pat",
    cst_Lang_Sort_Typ = "Lang.Sort.Typ",
    _a_ = [0, [15, 0], cst_a],
    _b_ = [0, "Root"],
    _c_ = [0, "Exp"],
    _d_ = [0, "Pat"],
    _e_ = [0, "Typ"],
    cst_grvcore = cst_grvcore$0;
   function pp(fmt, param){
    switch(param){
      case 0:
       return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Sort_Root);
      case 1:
       return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Sort_Exp);
      case 2:
       return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Sort_Pat);
      default: return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Sort_Typ);
    }
   }
   function show(x){return caml_call3(Stdlib_Format[139], _a_, pp, x);}
   function equal(lhs, rhs){
    switch(lhs){
      case 0:
       if(! rhs) return 1; break;
      case 1:
       if(1 === rhs) return 1; break;
      case 2:
       if(2 === rhs) return 1; break;
      default: if(3 <= rhs) return 1;
    }
    return 0;
   }
   function compare(lhs, rhs){
    switch(lhs){
      case 0:
       if(! rhs) return 0; break;
      case 1:
       if(1 === rhs) return 0; break;
      case 2:
       if(2 === rhs) return 0; break;
      default: if(3 <= rhs) return 0;
    }
    function to_int(param){
     switch(param){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 2;
       default: return 3;
     }
    }
    var _co_ = to_int(rhs);
    return caml_int_compare(to_int(lhs), _co_);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _b_;
      case 1:
       return _c_;
      case 2:
       return _d_;
      default: return _e_;
    }
   }
   var Sort = [0, pp, show, equal, compare, sexp_of_t];
   function pp$0(fmt, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Root_root);
       case 1:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_lam);
       case 2:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_app);
       case 3:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_plus);
       case 4:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_times);
       case 5:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_nil);
       case 6:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_cons);
       case 7:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Exp_case);
       case 8:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Typ_num);
       case 9:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Typ_arrow);
       default:
        return caml_call2
                (Stdlib_Format[13], fmt, cst_Lang_Constructor_Typ_list);
     }
    switch(param[0]){
      case 0:
       var a0 = param[1];
       caml_call2(Stdlib_Format[135], fmt, _f_);
       caml_call1(caml_call2(Stdlib_Format[135], fmt, _g_), a0);
       return caml_call2(Stdlib_Format[135], fmt, _h_);
      case 1:
       var a0$0 = param[1];
       caml_call2(Stdlib_Format[135], fmt, _i_);
       caml_call1(caml_call2(Stdlib_Format[135], fmt, _j_), a0$0);
       return caml_call2(Stdlib_Format[135], fmt, _k_);
      default:
       var a0$1 = param[1];
       caml_call2(Stdlib_Format[135], fmt, _l_);
       caml_call1(caml_call2(Stdlib_Format[135], fmt, _m_), a0$1);
       return caml_call2(Stdlib_Format[135], fmt, _n_);
    }
   }
   function show$0(x){return caml_call3(Stdlib_Format[139], _o_, pp$0, x);}
   function equal$0(lhs, rhs){
    if(typeof lhs === "number")
     switch(lhs){
       case 0:
        if(typeof rhs === "number" && ! rhs) return 1; break;
       case 1:
        if(typeof rhs === "number" && 1 === rhs) return 1; break;
       case 2:
        if(typeof rhs === "number" && 2 === rhs) return 1; break;
       case 3:
        if(typeof rhs === "number" && 3 === rhs) return 1; break;
       case 4:
        if(typeof rhs === "number" && 4 === rhs) return 1; break;
       case 5:
        if(typeof rhs === "number" && 5 === rhs) return 1; break;
       case 6:
        if(typeof rhs === "number" && 6 === rhs) return 1; break;
       case 7:
        if(typeof rhs === "number" && 7 === rhs) return 1; break;
       case 8:
        if(typeof rhs === "number" && 8 === rhs) return 1; break;
       case 9:
        if(typeof rhs === "number" && 9 === rhs) return 1; break;
       default: if(typeof rhs === "number" && 10 <= rhs) return 1;
     }
    else
     switch(lhs[0]){
       case 0:
        if(typeof rhs !== "number" && 0 === rhs[0]){
         var rhs0 = rhs[1], lhs0 = lhs[1];
         return caml_string_equal(lhs0, rhs0);
        }
        break;
       case 1:
        if(typeof rhs !== "number" && 1 === rhs[0]){
         var rhs0$0 = rhs[1], lhs0$0 = lhs[1];
         return lhs0$0 === rhs0$0 ? 1 : 0;
        }
        break;
       default:
        if(typeof rhs !== "number" && 2 === rhs[0]){
         var rhs0$1 = rhs[1], lhs0$1 = lhs[1];
         return caml_string_equal(lhs0$1, rhs0$1);
        }
     }
    return 0;
   }
   var compare$0 = function _cn_(_cl_, _cm_){return _cn_.fun(_cl_, _cm_);};
   runtime.caml_update_dummy
    (compare$0,
     function(lhs, rhs){
      if(typeof lhs === "number")
       switch(lhs){
         case 0:
          if(typeof rhs === "number" && ! rhs) return 0; break;
         case 1:
          if(typeof rhs === "number" && 1 === rhs) return 0; break;
         case 2:
          if(typeof rhs === "number" && 2 === rhs) return 0; break;
         case 3:
          if(typeof rhs === "number" && 3 === rhs) return 0; break;
         case 4:
          if(typeof rhs === "number" && 4 === rhs) return 0; break;
         case 5:
          if(typeof rhs === "number" && 5 === rhs) return 0; break;
         case 6:
          if(typeof rhs === "number" && 6 === rhs) return 0; break;
         case 7:
          if(typeof rhs === "number" && 7 === rhs) return 0; break;
         case 8:
          if(typeof rhs === "number" && 8 === rhs) return 0; break;
         case 9:
          if(typeof rhs === "number" && 9 === rhs) return 0; break;
         default: if(typeof rhs === "number" && 10 <= rhs) return 0;
       }
      else
       switch(lhs[0]){
         case 0:
          if(typeof rhs !== "number" && 0 === rhs[0]){
           var rhs0 = rhs[1], lhs0 = lhs[1];
           return caml_string_compare(lhs0, rhs0);
          }
          break;
         case 1:
          if(typeof rhs !== "number" && 1 === rhs[0]){
           var rhs0$0 = rhs[1], lhs0$0 = lhs[1];
           return caml_int_compare(lhs0$0, rhs0$0);
          }
          break;
         default:
          if(typeof rhs !== "number" && 2 === rhs[0]){
           var rhs0$1 = rhs[1], lhs0$1 = lhs[1];
           return caml_string_compare(lhs0$1, rhs0$1);
          }
       }
      function to_int(param){
       if(typeof param === "number")
        switch(param){
          case 0:
           return 0;
          case 1:
           return 2;
          case 2:
           return 3;
          case 3:
           return 5;
          case 4:
           return 6;
          case 5:
           return 7;
          case 6:
           return 8;
          case 7:
           return 9;
          case 8:
           return 11;
          case 9:
           return 12;
          default: return 13;
        }
       switch(param[0]){case 0: return 1;case 1: return 4;default: return 10;
       }
      }
      var _ck_ = to_int(rhs);
      return caml_int_compare(to_int(lhs), _ck_);
     });
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _cb_ = sexp_005[1], _cc_ = caml_string_compare(_cb_, cst_exp_app);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   if(0 <= _cc_){
                    if(0 >= _cc_) break h;
                    var _cd_ = caml_string_compare(_cb_, cst_exp_times);
                    if(0 > _cd_){
                     if(! caml_string_notequal(_cb_, cst_exp_case)) break g;
                     if(! caml_string_notequal(_cb_, cst_exp_cons)) break f;
                     if(! caml_string_notequal(_cb_, cst_exp_lam)) break e;
                     if(! caml_string_notequal(_cb_, cst_exp_nil)) break d;
                     if(! caml_string_notequal(_cb_, cst_exp_num)) break c;
                     if(caml_string_notequal(_cb_, cst_exp_plus)) break a;
                     break b;
                    }
                    if(0 < _cd_){
                     if(! caml_string_notequal(_cb_, cst_exp_var)) break n;
                     if(! caml_string_notequal(_cb_, cst_pat_var)) break m;
                     if(! caml_string_notequal(_cb_, cst_root_root)) break l;
                     if(! caml_string_notequal(_cb_, cst_typ_arrow)) break k;
                     if(! caml_string_notequal(_cb_, cst_typ_list)) break j;
                     if(caml_string_notequal(_cb_, cst_typ_num)) break a;
                     break i;
                    }
                   }
                   else{
                    var _ce_ = caml_string_compare(_cb_, cst_Exp_times);
                    if(0 > _ce_){
                     if(! caml_string_notequal(_cb_, cst_Exp_app)) break h;
                     if(! caml_string_notequal(_cb_, cst_Exp_case)) break g;
                     if(! caml_string_notequal(_cb_, cst_Exp_cons)) break f;
                     if(! caml_string_notequal(_cb_, cst_Exp_lam)) break e;
                     if(! caml_string_notequal(_cb_, cst_Exp_nil)) break d;
                     if(! caml_string_notequal(_cb_, cst_Exp_num)) break c;
                     if(caml_string_notequal(_cb_, cst_Exp_plus)) break a;
                     break b;
                    }
                    if(0 < _ce_){
                     if(! caml_string_notequal(_cb_, cst_Exp_var)) break n;
                     if(! caml_string_notequal(_cb_, cst_Pat_var)) break m;
                     if(! caml_string_notequal(_cb_, cst_Root_root)) break l;
                     if(! caml_string_notequal(_cb_, cst_Typ_arrow)) break k;
                     if(! caml_string_notequal(_cb_, cst_Typ_list)) break j;
                     if(caml_string_notequal(_cb_, cst_Typ_num)) break a;
                     break i;
                    }
                   }
                   return 4;
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
                }
                return 0;
               }
               return 9;
              }
              return 10;
             }
             return 8;
            }
            return 2;
           }
           return 7;
          }
          return 6;
         }
         return 1;
        }
        return 5;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
      }
      return 3;
     }
     var _cf_ = sexp_005[1];
     if(! _cf_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _cg_ = _cf_[1];
     if(0 !== _cg_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var tag_006 = _cg_[1], _ch_ = caml_string_compare(tag_006, cst_exp_app);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  if(0 <= _ch_){
                   if(0 >= _ch_) break h;
                   var _ci_ = caml_string_compare(tag_006, cst_exp_times);
                   if(0 > _ci_){
                    if(! caml_string_notequal(tag_006, cst_exp_case)) break g;
                    if(! caml_string_notequal(tag_006, cst_exp_cons)) break f;
                    if(! caml_string_notequal(tag_006, cst_exp_lam)) break e;
                    if(! caml_string_notequal(tag_006, cst_exp_nil)) break d;
                    if(! caml_string_notequal(tag_006, cst_exp_num)) break c;
                    if(caml_string_notequal(tag_006, cst_exp_plus)) break a;
                    break b;
                   }
                   if(0 < _ci_){
                    if(! caml_string_notequal(tag_006, cst_exp_var)) break n;
                    if(! caml_string_notequal(tag_006, cst_pat_var)) break m;
                    if(! caml_string_notequal(tag_006, cst_root_root)) break l;
                    if(! caml_string_notequal(tag_006, cst_typ_arrow)) break k;
                    if(! caml_string_notequal(tag_006, cst_typ_list)) break j;
                    if(caml_string_notequal(tag_006, cst_typ_num)) break a;
                    break i;
                   }
                  }
                  else{
                   var _cj_ = caml_string_compare(tag_006, cst_Exp_times);
                   if(0 > _cj_){
                    if(! caml_string_notequal(tag_006, cst_Exp_app)) break h;
                    if(! caml_string_notequal(tag_006, cst_Exp_case)) break g;
                    if(! caml_string_notequal(tag_006, cst_Exp_cons)) break f;
                    if(! caml_string_notequal(tag_006, cst_Exp_lam)) break e;
                    if(! caml_string_notequal(tag_006, cst_Exp_nil)) break d;
                    if(! caml_string_notequal(tag_006, cst_Exp_num)) break c;
                    if(caml_string_notequal(tag_006, cst_Exp_plus)) break a;
                    break b;
                   }
                   if(0 < _cj_){
                    if(! caml_string_notequal(tag_006, cst_Exp_var)) break n;
                    if(! caml_string_notequal(tag_006, cst_Pat_var)) break m;
                    if(! caml_string_notequal(tag_006, cst_Root_root)) break l;
                    if(! caml_string_notequal(tag_006, cst_Typ_arrow)) break k;
                    if(! caml_string_notequal(tag_006, cst_Typ_list)) break j;
                    if(caml_string_notequal(tag_006, cst_Typ_num)) break a;
                    break i;
                   }
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                 }
                 var sexp_args_007 = _cf_[2];
                 if(sexp_args_007 && ! sexp_args_007[2]){
                  var
                   arg0_008 = sexp_args_007[1],
                   res0_009 = caml_call1(Sexplib0_Sexp_conv[31], arg0_008);
                  return [0, res0_009];
                 }
                 return caml_call3
                         (Sexplib0_Sexp_conv_error[4],
                          error_source_003,
                          tag_006,
                          sexp_005);
                }
                var sexp_args_017 = _cf_[2];
                if(sexp_args_017 && ! sexp_args_017[2]){
                 var
                  arg0_018 = sexp_args_017[1],
                  res0_019 = caml_call1(Sexplib0_Sexp_conv[31], arg0_018);
                 return [2, res0_019];
                }
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_003,
                         tag_006,
                         sexp_005);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
      }
      var sexp_args_012 = _cf_[2];
      if(sexp_args_012 && ! sexp_args_012[2]){
       var
        arg0_013 = sexp_args_012[1],
        res0_014 = caml_call1(Sexplib0_Sexp_conv[34], arg0_013);
       return [1, res0_014];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_003,
               tag_006,
               sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _p_;
       case 1:
        return _q_;
       case 2:
        return _r_;
       case 3:
        return _s_;
       case 4:
        return _t_;
       case 5:
        return _u_;
       case 6:
        return _v_;
       case 7:
        return _w_;
       case 8:
        return _x_;
       case 9:
        return _y_;
       default: return _z_;
     }
    switch(param[0]){
      case 0:
       var
        arg0_020 = param[1],
        res0_021 = caml_call1(Sexplib0_Sexp_conv[7], arg0_020);
       return [1, [0, _A_, [0, res0_021, 0]]];
      case 1:
       var
        arg0_022 = param[1],
        res0_023 = caml_call1(Sexplib0_Sexp_conv[10], arg0_022);
       return [1, [0, _B_, [0, res0_023, 0]]];
      default:
       var
        arg0_024 = param[1],
        res0_025 = caml_call1(Sexplib0_Sexp_conv[7], arg0_024);
       return [1, [0, _C_, [0, res0_025, 0]]];
    }
   }
   function sort_of(c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 1;
       case 3:
        return 1;
       case 4:
        return 1;
       case 5:
        return 1;
       case 6:
        return 1;
       case 7:
        return 1;
       case 8:
        return 3;
       case 9:
        return 3;
       default: return 3;
     }
    switch(c[0]){case 0: return 1;case 1: return 1;default: return 2;
    }
   }
   function graphviz_label(c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return cst_root;
       case 1:
        return cst_lam;
       case 2:
        return cst_app;
       case 3:
        return cst_plus;
       case 4:
        return cst_times;
       case 5:
        return cst_nil;
       case 6:
        return cst_cons;
       case 7:
        return cst_case;
       case 8:
        return cst_num;
       case 9:
        return cst_arrow;
       default: return cst_list;
     }
    switch(c[0]){
      case 0:
       var arg0 = c[1], _b9_ = caml_call2(Stdlib[28], arg0, cst$0);
       return caml_call2(Stdlib[28], cst_var, _b9_);
      case 1:
       var
        arg0$0 = c[1],
        _b__ = caml_call1(Stdlib_Int[12], arg0$0),
        _b$_ = caml_call2(Stdlib[28], _b__, cst$1);
       return caml_call2(Stdlib[28], cst_num$0, _b$_);
      default:
       var arg0$1 = c[1], _ca_ = caml_call2(Stdlib[28], arg0$1, cst$2);
       return caml_call2(Stdlib[28], cst_var$0, _ca_);
    }
   }
   var
    Constructor =
      [0,
       pp$0,
       show$0,
       equal$0,
       compare$0,
       t_of_sexp,
       sexp_of_t$0,
       sort_of,
       graphviz_label];
   function pp$1(fmt, param){
    switch(param){
      case 0:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Root_root_ro);
      case 1:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_lam_para);
      case 2:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_lam_para$0);
      case 3:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_lam_body);
      case 4:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_app_fun);
      case 5:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_app_arg);
      case 6:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_plus_lef);
      case 7:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_plus_rig);
      case 8:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_times_le);
      case 9:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_times_ri);
      case 10:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_cons_hea);
      case 11:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_cons_tai);
      case 12:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_scr);
      case 13:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_nil);
      case 14:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_hea);
      case 15:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_tai);
      case 16:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_con);
      case 17:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Exp_case_typ);
      case 18:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Typ_arrow_ar);
      case 19:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Typ_arrow_re);
      default:
       return caml_call2
               (Stdlib_Format[13], fmt, cst_Lang_Position_Typ_list_con);
    }
   }
   function show$1(x){return caml_call3(Stdlib_Format[139], _D_, pp$1, x);}
   function equal$1(lhs, rhs){
    switch(lhs){
      case 0:
       if(! rhs) return 1; break;
      case 1:
       if(1 === rhs) return 1; break;
      case 2:
       if(2 === rhs) return 1; break;
      case 3:
       if(3 === rhs) return 1; break;
      case 4:
       if(4 === rhs) return 1; break;
      case 5:
       if(5 === rhs) return 1; break;
      case 6:
       if(6 === rhs) return 1; break;
      case 7:
       if(7 === rhs) return 1; break;
      case 8:
       if(8 === rhs) return 1; break;
      case 9:
       if(9 === rhs) return 1; break;
      case 10:
       if(10 === rhs) return 1; break;
      case 11:
       if(11 === rhs) return 1; break;
      case 12:
       if(12 === rhs) return 1; break;
      case 13:
       if(13 === rhs) return 1; break;
      case 14:
       if(14 === rhs) return 1; break;
      case 15:
       if(15 === rhs) return 1; break;
      case 16:
       if(16 === rhs) return 1; break;
      case 17:
       if(17 === rhs) return 1; break;
      case 18:
       if(18 === rhs) return 1; break;
      case 19:
       if(19 === rhs) return 1; break;
      default: if(20 <= rhs) return 1;
    }
    return 0;
   }
   function compare$1(lhs, rhs){
    switch(lhs){
      case 0:
       if(! rhs) return 0; break;
      case 1:
       if(1 === rhs) return 0; break;
      case 2:
       if(2 === rhs) return 0; break;
      case 3:
       if(3 === rhs) return 0; break;
      case 4:
       if(4 === rhs) return 0; break;
      case 5:
       if(5 === rhs) return 0; break;
      case 6:
       if(6 === rhs) return 0; break;
      case 7:
       if(7 === rhs) return 0; break;
      case 8:
       if(8 === rhs) return 0; break;
      case 9:
       if(9 === rhs) return 0; break;
      case 10:
       if(10 === rhs) return 0; break;
      case 11:
       if(11 === rhs) return 0; break;
      case 12:
       if(12 === rhs) return 0; break;
      case 13:
       if(13 === rhs) return 0; break;
      case 14:
       if(14 === rhs) return 0; break;
      case 15:
       if(15 === rhs) return 0; break;
      case 16:
       if(16 === rhs) return 0; break;
      case 17:
       if(17 === rhs) return 0; break;
      case 18:
       if(18 === rhs) return 0; break;
      case 19:
       if(19 === rhs) return 0; break;
      default: if(20 <= rhs) return 0;
    }
    function to_int(param){
     switch(param){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 2;
       case 3:
        return 3;
       case 4:
        return 4;
       case 5:
        return 5;
       case 6:
        return 6;
       case 7:
        return 7;
       case 8:
        return 8;
       case 9:
        return 9;
       case 10:
        return 10;
       case 11:
        return 11;
       case 12:
        return 12;
       case 13:
        return 13;
       case 14:
        return 14;
       case 15:
        return 15;
       case 16:
        return 16;
       case 17:
        return 17;
       case 18:
        return 18;
       case 19:
        return 19;
       default: return 20;
     }
    }
    var _b8_ = to_int(rhs);
    return caml_int_compare(to_int(lhs), _b8_);
   }
   function t_of_sexp$0(sexp_029){
    a:
    {
     if(0 === sexp_029[0]){
      var
       _bS_ = sexp_029[1],
       _bT_ = caml_string_compare(_bS_, cst_exp_app_arg);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          if(0 <= _bT_){
                           if(0 >= _bT_) break f;
                           var _bU_ = caml_string_compare(_bS_, cst_exp_lam_param);
                           if(0 <= _bU_){
                            if(0 >= _bU_) break p;
                            if(! caml_string_notequal(_bS_, cst_exp_lam_param_type))
                             break o;
                            if(! caml_string_notequal(_bS_, cst_exp_plus_left)) break n;
                            if(! caml_string_notequal(_bS_, cst_exp_plus_right))
                             break m;
                            if(! caml_string_notequal(_bS_, cst_exp_times_left))
                             break l;
                            if(! caml_string_notequal(_bS_, cst_exp_times_right))
                             break u;
                            if(! caml_string_notequal(_bS_, cst_root_root_root))
                             break t;
                            if(! caml_string_notequal(_bS_, cst_typ_arrow_arg)) break s;
                            if(! caml_string_notequal(_bS_, cst_typ_arrow_result))
                             break r;
                            if(caml_string_notequal(_bS_, cst_typ_list_content))
                             break a;
                            break q;
                           }
                           var _bV_ = caml_string_compare(_bS_, cst_exp_case_tail_pat);
                           if(0 > _bV_){
                            if(! caml_string_notequal(_bS_, cst_exp_app_fun)) break e;
                            if(! caml_string_notequal(_bS_, cst_exp_case_cons_body))
                             break d;
                            if(! caml_string_notequal(_bS_, cst_exp_case_head_pat))
                             break c;
                            if(! caml_string_notequal(_bS_, cst_exp_case_nil_body))
                             break b;
                            if(caml_string_notequal(_bS_, cst_exp_case_scrut)) break a;
                            break k;
                           }
                           if(0 >= _bV_) break j;
                           if(! caml_string_notequal(_bS_, cst_exp_case_type)) break i;
                           if(! caml_string_notequal(_bS_, cst_exp_cons_head)) break h;
                           if(! caml_string_notequal(_bS_, cst_exp_cons_tail)) break g;
                           if(caml_string_notequal(_bS_, cst_exp_lam_body)) break a;
                          }
                          else{
                           var _bW_ = caml_string_compare(_bS_, cst_Exp_lam_body);
                           if(0 > _bW_){
                            var _bY_ = caml_string_compare(_bS_, cst_Exp_case_scrut);
                            if(0 <= _bY_){
                             if(0 >= _bY_) break k;
                             if(! caml_string_notequal(_bS_, cst_Exp_case_tail_pat))
                              break j;
                             if(! caml_string_notequal(_bS_, cst_Exp_case_type)) break i;
                             if(! caml_string_notequal(_bS_, cst_Exp_cons_head)) break h;
                             if(caml_string_notequal(_bS_, cst_Exp_cons_tail)) break a;
                             break g;
                            }
                            if(! caml_string_notequal(_bS_, cst_Exp_app_arg)) break f;
                            if(! caml_string_notequal(_bS_, cst_Exp_app_fun)) break e;
                            if(! caml_string_notequal(_bS_, cst_Exp_case_cons_body))
                             break d;
                            if(! caml_string_notequal(_bS_, cst_Exp_case_head_pat))
                             break c;
                            if(caml_string_notequal(_bS_, cst_Exp_case_nil_body))
                             break a;
                            break b;
                           }
                           if(0 < _bW_){
                            var _bX_ = caml_string_compare(_bS_, cst_Exp_times_right);
                            if(0 <= _bX_){
                             if(0 >= _bX_) break u;
                             if(! caml_string_notequal(_bS_, cst_Root_root_root))
                              break t;
                             if(! caml_string_notequal(_bS_, cst_Typ_arrow_arg)) break s;
                             if(! caml_string_notequal(_bS_, cst_Typ_arrow_result))
                              break r;
                             if(caml_string_notequal(_bS_, cst_Typ_list_content))
                              break a;
                             break q;
                            }
                            if(! caml_string_notequal(_bS_, cst_Exp_lam_param)) break p;
                            if(! caml_string_notequal(_bS_, cst_Exp_lam_param_type))
                             break o;
                            if(! caml_string_notequal(_bS_, cst_Exp_plus_left)) break n;
                            if(! caml_string_notequal(_bS_, cst_Exp_plus_right))
                             break m;
                            if(caml_string_notequal(_bS_, cst_Exp_times_left)) break a;
                            break l;
                           }
                          }
                          return 3;
                         }
                         return 9;
                        }
                        return 0;
                       }
                       return 18;
                      }
                      return 19;
                     }
                     return 20;
                    }
                    return 1;
                   }
                   return 2;
                  }
                  return 6;
                 }
                 return 7;
                }
                return 8;
               }
               return 12;
              }
              return 15;
             }
             return 17;
            }
            return 10;
           }
           return 11;
          }
          return 5;
         }
         return 4;
        }
        return 16;
       }
       return 14;
      }
      return 13;
     }
     var _bZ_ = sexp_029[1];
     if(! _bZ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
     var _b0_ = _bZ_[1];
     if(0 !== _b0_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_028, sexp_029);
     var _b1_ = _b0_[1], _b2_ = caml_string_compare(_b1_, cst_exp_app_arg);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         if(0 <= _b2_){
                          if(0 >= _b2_) break f;
                          var _b3_ = caml_string_compare(_b1_, cst_exp_lam_param);
                          if(0 <= _b3_){
                           if(0 >= _b3_) break p;
                           if(! caml_string_notequal(_b1_, cst_exp_lam_param_type))
                            break o;
                           if(! caml_string_notequal(_b1_, cst_exp_plus_left)) break n;
                           if(! caml_string_notequal(_b1_, cst_exp_plus_right))
                            break m;
                           if(! caml_string_notequal(_b1_, cst_exp_times_left))
                            break l;
                           if(! caml_string_notequal(_b1_, cst_exp_times_right))
                            break u;
                           if(! caml_string_notequal(_b1_, cst_root_root_root))
                            break t;
                           if(! caml_string_notequal(_b1_, cst_typ_arrow_arg)) break s;
                           if(! caml_string_notequal(_b1_, cst_typ_arrow_result))
                            break r;
                           if(caml_string_notequal(_b1_, cst_typ_list_content))
                            break a;
                           break q;
                          }
                          var _b4_ = caml_string_compare(_b1_, cst_exp_case_tail_pat);
                          if(0 > _b4_){
                           if(! caml_string_notequal(_b1_, cst_exp_app_fun)) break e;
                           if(! caml_string_notequal(_b1_, cst_exp_case_cons_body))
                            break d;
                           if(! caml_string_notequal(_b1_, cst_exp_case_head_pat))
                            break c;
                           if(! caml_string_notequal(_b1_, cst_exp_case_nil_body))
                            break b;
                           if(caml_string_notequal(_b1_, cst_exp_case_scrut)) break a;
                           break k;
                          }
                          if(0 >= _b4_) break j;
                          if(! caml_string_notequal(_b1_, cst_exp_case_type)) break i;
                          if(! caml_string_notequal(_b1_, cst_exp_cons_head)) break h;
                          if(! caml_string_notequal(_b1_, cst_exp_cons_tail)) break g;
                          if(caml_string_notequal(_b1_, cst_exp_lam_body)) break a;
                         }
                         else{
                          var _b5_ = caml_string_compare(_b1_, cst_Exp_lam_body);
                          if(0 > _b5_){
                           var _b7_ = caml_string_compare(_b1_, cst_Exp_case_scrut);
                           if(0 <= _b7_){
                            if(0 >= _b7_) break k;
                            if(! caml_string_notequal(_b1_, cst_Exp_case_tail_pat))
                             break j;
                            if(! caml_string_notequal(_b1_, cst_Exp_case_type)) break i;
                            if(! caml_string_notequal(_b1_, cst_Exp_cons_head)) break h;
                            if(caml_string_notequal(_b1_, cst_Exp_cons_tail)) break a;
                            break g;
                           }
                           if(! caml_string_notequal(_b1_, cst_Exp_app_arg)) break f;
                           if(! caml_string_notequal(_b1_, cst_Exp_app_fun)) break e;
                           if(! caml_string_notequal(_b1_, cst_Exp_case_cons_body))
                            break d;
                           if(! caml_string_notequal(_b1_, cst_Exp_case_head_pat))
                            break c;
                           if(caml_string_notequal(_b1_, cst_Exp_case_nil_body))
                            break a;
                           break b;
                          }
                          if(0 < _b5_){
                           var _b6_ = caml_string_compare(_b1_, cst_Exp_times_right);
                           if(0 <= _b6_){
                            if(0 >= _b6_) break u;
                            if(! caml_string_notequal(_b1_, cst_Root_root_root))
                             break t;
                            if(! caml_string_notequal(_b1_, cst_Typ_arrow_arg)) break s;
                            if(! caml_string_notequal(_b1_, cst_Typ_arrow_result))
                             break r;
                            if(caml_string_notequal(_b1_, cst_Typ_list_content))
                             break a;
                            break q;
                           }
                           if(! caml_string_notequal(_b1_, cst_Exp_lam_param)) break p;
                           if(! caml_string_notequal(_b1_, cst_Exp_lam_param_type))
                            break o;
                           if(! caml_string_notequal(_b1_, cst_Exp_plus_left)) break n;
                           if(! caml_string_notequal(_b1_, cst_Exp_plus_right))
                            break m;
                           if(caml_string_notequal(_b1_, cst_Exp_times_left)) break a;
                           break l;
                          }
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_028, sexp_029);
   }
   function sexp_of_t$1(param){
    switch(param){
      case 0:
       return _E_;
      case 1:
       return _F_;
      case 2:
       return _G_;
      case 3:
       return _H_;
      case 4:
       return _I_;
      case 5:
       return _J_;
      case 6:
       return _K_;
      case 7:
       return _L_;
      case 8:
       return _M_;
      case 9:
       return _N_;
      case 10:
       return _O_;
      case 11:
       return _P_;
      case 12:
       return _Q_;
      case 13:
       return _R_;
      case 14:
       return _S_;
      case 15:
       return _T_;
      case 16:
       return _U_;
      case 17:
       return _V_;
      case 18:
       return _W_;
      case 19:
       return _X_;
      default: return _Y_;
    }
   }
   function short_name(i){
    switch(i){
      case 0:
       return cst_root$0;
      case 1:
       return cst_param;
      case 2:
       return cst_param_type;
      case 3:
       return cst_body;
      case 4:
       return cst_fun;
      case 5:
       return cst_arg;
      case 6:
       return cst_left;
      case 7:
       return cst_right;
      case 8:
       return cst_left$0;
      case 9:
       return cst_right$0;
      case 10:
       return cst_head;
      case 11:
       return cst_tail;
      case 12:
       return cst_scrut;
      case 13:
       return cst_nil_body;
      case 14:
       return cst_head_pat;
      case 15:
       return cst_tail_pat;
      case 16:
       return cst_cons_body;
      case 17:
       return cst_type;
      case 18:
       return cst_arg$0;
      case 19:
       return cst_result;
      default: return cst_content;
    }
   }
   function parent_constructor(i){
    switch(i){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 1;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 2;
      case 6:
       return 3;
      case 7:
       return 3;
      case 8:
       return 4;
      case 9:
       return 4;
      case 10:
       return 6;
      case 11:
       return 6;
      case 12:
       return 7;
      case 13:
       return 7;
      case 14:
       return 7;
      case 15:
       return 7;
      case 16:
       return 7;
      case 17:
       return 7;
      case 18:
       return 9;
      case 19:
       return 9;
      default: return 10;
    }
   }
   function child_positions(c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return _Z_;
       case 1:
        return ___;
       case 2:
        return _$_;
       case 3:
        return _aa_;
       case 4:
        return _ab_;
       case 5:
        return 0;
       case 6:
        return _ac_;
       case 7:
        return _ad_;
       case 8:
        return 0;
       case 9:
        return _ae_;
       default: return _af_;
     }
    switch(c[0]){case 0: return 0;case 1: return 0;default: return 0;
    }
   }
   function child_sort(i){
    switch(i){
      case 0:
       return 1;
      case 1:
       return 2;
      case 2:
       return 3;
      case 3:
       return 1;
      case 4:
       return 1;
      case 5:
       return 1;
      case 6:
       return 1;
      case 7:
       return 1;
      case 8:
       return 1;
      case 9:
       return 1;
      case 10:
       return 1;
      case 11:
       return 1;
      case 12:
       return 1;
      case 13:
       return 1;
      case 14:
       return 2;
      case 15:
       return 2;
      case 16:
       return 1;
      case 17:
       return 3;
      case 18:
       return 3;
      case 19:
       return 3;
      default: return 3;
    }
   }
   function default_position(c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return _ag_;
       case 1:
        return _ah_;
       case 2:
        return _ai_;
       case 3:
        return _aj_;
       case 4:
        return _ak_;
       case 5:
        return 0;
       case 6:
        return _al_;
       case 7:
        return _am_;
       case 8:
        return 0;
       case 9:
        return _an_;
       default: return _ao_;
     }
    switch(c[0]){case 0: return 0;case 1: return 0;default: return 0;
    }
   }
   function down(c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return _ap_;
       case 1:
        return _aq_;
       case 2:
        return _ar_;
       case 3:
        return _as_;
       case 4:
        return _at_;
       case 5:
        return 0;
       case 6:
        return _au_;
       case 7:
        return _av_;
       case 8:
        return 0;
       case 9:
        return _aw_;
       default: return _ax_;
     }
    switch(c[0]){case 0: return 0;case 1: return 0;default: return 0;
    }
   }
   function right(i){
    switch(i){
      case 0:
       return 0;
      case 1:
       return _ay_;
      case 2:
       return _az_;
      case 3:
       return 0;
      case 4:
       return _aA_;
      case 5:
       return 0;
      case 6:
       return _aB_;
      case 7:
       return 0;
      case 8:
       return _aC_;
      case 9:
       return 0;
      case 10:
       return _aD_;
      case 11:
       return 0;
      case 12:
       return _aE_;
      case 13:
       return _aF_;
      case 14:
       return _aG_;
      case 15:
       return _aH_;
      case 16:
       return _aI_;
      case 17:
       return 0;
      case 18:
       return _aJ_;
      case 19:
       return 0;
      default: return 0;
    }
   }
   function left(i){
    switch(i){
      case 0:
       return 0;
      case 1:
       return 0;
      case 2:
       return _aK_;
      case 3:
       return _aL_;
      case 4:
       return 0;
      case 5:
       return _aM_;
      case 6:
       return 0;
      case 7:
       return _aN_;
      case 8:
       return 0;
      case 9:
       return _aO_;
      case 10:
       return 0;
      case 11:
       return _aP_;
      case 12:
       return 0;
      case 13:
       return _aQ_;
      case 14:
       return _aR_;
      case 15:
       return _aS_;
      case 16:
       return _aT_;
      case 17:
       return _aU_;
      case 18:
       return 0;
      case 19:
       return _aV_;
      default: return 0;
    }
   }
   var
    Position =
      [0,
       pp$1,
       show$1,
       equal$1,
       compare$1,
       t_of_sexp$0,
       sexp_of_t$1,
       short_name,
       parent_constructor,
       child_positions,
       child_sort,
       default_position,
       down,
       right,
       left];
   function pp_root_root(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Root_root);
   }
   function show_root_root(x){
    return caml_call3(Stdlib_Format[139], _aW_, pp_root_root, x);
   }
   function equal_root_root(lhs, rhs){return 1;}
   function compare_root_root(lhs, rhs){return 0;}
   function sexp_of_root_root(param){return _aX_;}
   function pp_exp_var(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_var);
   }
   function show_exp_var(x){
    return caml_call3(Stdlib_Format[139], _aY_, pp_exp_var, x);
   }
   function equal_exp_var(lhs, rhs){return 1;}
   function compare_exp_var(lhs, rhs){return 0;}
   function sexp_of_exp_var(param){return _aZ_;}
   function pp_exp_lam(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_lam);
   }
   function show_exp_lam(x){
    return caml_call3(Stdlib_Format[139], _a0_, pp_exp_lam, x);
   }
   function equal_exp_lam(lhs, rhs){return 1;}
   function compare_exp_lam(lhs, rhs){return 0;}
   function sexp_of_exp_lam(param){return _a1_;}
   function pp_exp_app(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_app);
   }
   function show_exp_app(x){
    return caml_call3(Stdlib_Format[139], _a2_, pp_exp_app, x);
   }
   function equal_exp_app(lhs, rhs){return 1;}
   function compare_exp_app(lhs, rhs){return 0;}
   function sexp_of_exp_app(param){return _a3_;}
   function pp_exp_num(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_num);
   }
   function show_exp_num(x){
    return caml_call3(Stdlib_Format[139], _a4_, pp_exp_num, x);
   }
   function equal_exp_num(lhs, rhs){return 1;}
   function compare_exp_num(lhs, rhs){return 0;}
   function sexp_of_exp_num(param){return _a5_;}
   function pp_exp_plus(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_plus);
   }
   function show_exp_plus(x){
    return caml_call3(Stdlib_Format[139], _a6_, pp_exp_plus, x);
   }
   function equal_exp_plus(lhs, rhs){return 1;}
   function compare_exp_plus(lhs, rhs){return 0;}
   function sexp_of_exp_plus(param){return _a7_;}
   function pp_exp_times(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_times);
   }
   function show_exp_times(x){
    return caml_call3(Stdlib_Format[139], _a8_, pp_exp_times, x);
   }
   function equal_exp_times(lhs, rhs){return 1;}
   function compare_exp_times(lhs, rhs){return 0;}
   function sexp_of_exp_times(param){return _a9_;}
   function pp_exp_nil(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_nil);
   }
   function show_exp_nil(x){
    return caml_call3(Stdlib_Format[139], _a__, pp_exp_nil, x);
   }
   function equal_exp_nil(lhs, rhs){return 1;}
   function compare_exp_nil(lhs, rhs){return 0;}
   function sexp_of_exp_nil(param){return _a$_;}
   function pp_exp_cons(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_cons);
   }
   function show_exp_cons(x){
    return caml_call3(Stdlib_Format[139], _ba_, pp_exp_cons, x);
   }
   function equal_exp_cons(lhs, rhs){return 1;}
   function compare_exp_cons(lhs, rhs){return 0;}
   function sexp_of_exp_cons(param){return _bb_;}
   function pp_exp_case(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Exp_case);
   }
   function show_exp_case(x){
    return caml_call3(Stdlib_Format[139], _bc_, pp_exp_case, x);
   }
   function equal_exp_case(lhs, rhs){return 1;}
   function compare_exp_case(lhs, rhs){return 0;}
   function sexp_of_exp_case(param){return _bd_;}
   function pp_pat_var(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Pat_var);
   }
   function show_pat_var(x){
    return caml_call3(Stdlib_Format[139], _be_, pp_pat_var, x);
   }
   function equal_pat_var(lhs, rhs){return 1;}
   function compare_pat_var(lhs, rhs){return 0;}
   function sexp_of_pat_var(param){return _bf_;}
   function pp_typ_num(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Typ_num);
   }
   function show_typ_num(x){
    return caml_call3(Stdlib_Format[139], _bg_, pp_typ_num, x);
   }
   function equal_typ_num(lhs, rhs){return 1;}
   function compare_typ_num(lhs, rhs){return 0;}
   function sexp_of_typ_num(param){return _bh_;}
   function pp_typ_arrow(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Typ_arrow);
   }
   function show_typ_arrow(x){
    return caml_call3(Stdlib_Format[139], _bi_, pp_typ_arrow, x);
   }
   function equal_typ_arrow(lhs, rhs){return 1;}
   function compare_typ_arrow(lhs, rhs){return 0;}
   function sexp_of_typ_arrow(param){return _bj_;}
   function pp_typ_list(fmt, param){
    return caml_call2(Stdlib_Format[13], fmt, cst_Lang_Gadt_Typ_list);
   }
   function show_typ_list(x){
    return caml_call3(Stdlib_Format[139], _bk_, pp_typ_list, x);
   }
   function equal_typ_list(lhs, rhs){return 1;}
   function compare_typ_list(lhs, rhs){return 0;}
   function sexp_of_typ_list(param){return _bl_;}
   var
    Gadt =
      [0,
       pp_root_root,
       show_root_root,
       equal_root_root,
       compare_root_root,
       sexp_of_root_root,
       pp_exp_var,
       show_exp_var,
       equal_exp_var,
       compare_exp_var,
       sexp_of_exp_var,
       pp_exp_lam,
       show_exp_lam,
       equal_exp_lam,
       compare_exp_lam,
       sexp_of_exp_lam,
       pp_exp_app,
       show_exp_app,
       equal_exp_app,
       compare_exp_app,
       sexp_of_exp_app,
       pp_exp_num,
       show_exp_num,
       equal_exp_num,
       compare_exp_num,
       sexp_of_exp_num,
       pp_exp_plus,
       show_exp_plus,
       equal_exp_plus,
       compare_exp_plus,
       sexp_of_exp_plus,
       pp_exp_times,
       show_exp_times,
       equal_exp_times,
       compare_exp_times,
       sexp_of_exp_times,
       pp_exp_nil,
       show_exp_nil,
       equal_exp_nil,
       compare_exp_nil,
       sexp_of_exp_nil,
       pp_exp_cons,
       show_exp_cons,
       equal_exp_cons,
       compare_exp_cons,
       sexp_of_exp_cons,
       pp_exp_case,
       show_exp_case,
       equal_exp_case,
       compare_exp_case,
       sexp_of_exp_case,
       pp_pat_var,
       show_pat_var,
       equal_pat_var,
       compare_pat_var,
       sexp_of_pat_var,
       pp_typ_num,
       show_typ_num,
       equal_typ_num,
       compare_typ_num,
       sexp_of_typ_num,
       pp_typ_arrow,
       show_typ_arrow,
       equal_typ_arrow,
       compare_typ_arrow,
       sexp_of_typ_arrow,
       pp_typ_list,
       show_typ_list,
       equal_typ_list,
       compare_typ_list,
       sexp_of_typ_list];
   function show$2(string, arg, position, c){
    if(typeof c === "number")
     switch(c){
       case 0:
        return [0, caml_call1(position, 0), 0];
       case 1:
        var
         _bm_ = [0, caml_call1(position, 3), 0],
         _bn_ = [0, caml_call1(string, cst$3), _bm_],
         _bo_ = [0, caml_call1(position, 2), _bn_],
         _bp_ = [0, caml_call1(string, cst$4), _bo_],
         _bq_ = [0, caml_call1(position, 1), _bp_];
        return [0, caml_call1(string, cst$5), _bq_];
       case 2:
        var
         _br_ = [0, caml_call1(position, 5), 0],
         _bs_ = [0, caml_call1(string, cst$6), _br_];
        return [0, caml_call1(position, 4), _bs_];
       case 3:
        var
         _bt_ = [0, caml_call1(position, 7), 0],
         _bu_ = [0, caml_call1(string, cst$7), _bt_];
        return [0, caml_call1(position, 6), _bu_];
       case 4:
        var
         _bv_ = [0, caml_call1(position, 9), 0],
         _bw_ = [0, caml_call1(string, cst$8), _bv_];
        return [0, caml_call1(position, 8), _bw_];
       case 5:
        return [0, caml_call1(string, cst_Int), 0];
       case 6:
        var
         _bx_ = [0, caml_call1(position, 11), 0],
         _by_ = [0, caml_call1(string, cst$9), _bx_];
        return [0, caml_call1(position, 10), _by_];
       case 7:
        var
         _bz_ = [0, caml_call1(position, 17), 0],
         _bA_ = [0, caml_call1(string, cst$10), _bz_],
         _bB_ = [0, caml_call1(string, cst_end), _bA_],
         _bC_ = [0, caml_call1(position, 16), _bB_],
         _bD_ = [0, caml_call1(string, cst$11), _bC_],
         _bE_ = [0, caml_call1(position, 15), _bD_],
         _bF_ = [0, caml_call1(string, cst$12), _bE_],
         _bG_ = [0, caml_call1(position, 14), _bF_],
         _bH_ = [0, caml_call1(string, cst$13), _bG_],
         _bI_ = [0, caml_call1(position, 13), _bH_],
         _bJ_ = [0, caml_call1(string, cst$14), _bI_],
         _bK_ = [0, caml_call1(string, cst_nil$0), _bJ_],
         _bL_ = [0, caml_call1(string, cst_of), _bK_],
         _bM_ = [0, caml_call1(position, 12), _bL_];
        return [0, caml_call1(string, cst_case$0), _bM_];
       case 8:
        return [0, caml_call1(string, cst_Num), 0];
       case 9:
        var
         _bN_ = [0, caml_call1(position, 19), 0],
         _bO_ = [0, caml_call1(string, cst$15), _bN_];
        return [0, caml_call1(position, 18), _bO_];
       default:
        var
         _bP_ = [0, caml_call1(string, cst$16), 0],
         _bQ_ = [0, caml_call1(position, 20), _bP_],
         _bR_ = [0, caml_call1(string, cst$17), _bQ_];
        return [0, caml_call1(string, cst_list$0), _bR_];
     }
    switch(c[0]){
      case 0:
       var arg0 = c[1]; return [0, caml_call1(arg, arg0), 0];
      case 1:
       var arg0$0 = c[1];
       return [0, caml_call1(arg, caml_call1(Stdlib_Int[12], arg0$0)), 0];
      default: var arg0$1 = c[1]; return [0, caml_call1(arg, arg0$1), 0];
    }
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Lang = [0, Sort, Constructor, Position, Gadt, show$2];
   runtime.caml_register_global(391, Lang, "Lang");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Uuid
//# unitInfo: Requires: Assert_failure, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__Int, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_grvcore$0 = "grvcore",
    cst_id$0 = "id",
    cst_src_grvcore_util_Uuid_ml = "src/grvcore/util/Uuid.ml",
    cst_value$0 = "value",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_017 = "src/grvcore/util/Uuid.ml.wrap",
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    t_of_sexp = Sexplib0_Sexp_conv[34],
    sexp_of_t = Sexplib0_Sexp_conv[10],
    compare = Stdlib_Int[9],
    seed = [0, 0],
    _c_ = [0, cst_value$0],
    _d_ = [0, cst_id$0],
    _b_ = [0, cst_src_grvcore_util_Uuid_ml, 25, 0],
    cst_value = cst_value$0,
    cst_id = cst_id$0,
    _a_ = [0, cst_src_grvcore_util_Uuid_ml, 14, 13],
    cst_grvcore = cst_grvcore$0;
   function next(param){seed[1] = seed[1] + 1 | 0; return seed[1];}
   function well_known(int$0){
    if(0 < int$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return int$0;
   }
   var
    to_string = Stdlib_Int[12],
    of_string = runtime.caml_int_of_string,
    Map = caml_call1(Stdlib_Map[1], [0, compare]),
    Set = caml_call1(Stdlib_Set[1], [0, compare]);
   function wrap_of_sexp(of_a_002, sexp_004){
    if(0 === sexp_004[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_017, sexp_004);
    var
     field_sexps_005 = sexp_004[1],
     id_006 = [0, 0],
     value_008 = [0, 0],
     duplicates_010 = [0, 0],
     extra_011 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_005;
       for(;;){
        if(! param) break;
        var sexp_004$0 = param[1];
        if(1 !== sexp_004$0[0]) break b;
        var _e_ = sexp_004$0[1];
        if(! _e_) break c;
        var _f_ = _e_[1];
        if(0 !== _f_[0]) break e;
        var field_sexps_014 = _e_[2], field_name_012 = _f_[1];
        if(field_sexps_014 && field_sexps_014[2]) break d;
        var
         tail_019 = param[2],
         field_sexp_013$2 =
           function(field_sexps_014){
            function field_sexp_013(param){
             if(! field_sexps_014)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_017, sexp_004);
             if(field_sexps_014[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
             var x_020 = field_sexps_014[1];
             return x_020;
            }
            return field_sexp_013;
           },
         field_sexp_013 = field_sexp_013$2(field_sexps_014);
        if(caml_string_notequal(field_name_012, cst_id$0))
         if(caml_string_notequal(field_name_012, cst_value$0)){
          if(Sexplib0_Sexp_conv[26][1])
           extra_011[1] = [0, field_name_012, extra_011[1]];
         }
         else if(value_008[1])
          duplicates_010[1] = [0, field_name_012, duplicates_010[1]];
         else{
          var
           field_sexp_013$0 = field_sexp_013(0),
           fvalue_015 = caml_call1(of_a_002, field_sexp_013$0);
          value_008[1] = [0, fvalue_015];
         }
        else if(id_006[1])
         duplicates_010[1] = [0, field_name_012, duplicates_010[1]];
        else{
         var
          field_sexp_013$1 = field_sexp_013(0),
          fvalue_016 = caml_call1(t_of_sexp, field_sexp_013$1);
         id_006[1] = [0, fvalue_016];
        }
        var param = tail_019;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_017, sexp_004$0);
    }
    if(duplicates_010[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_017,
              duplicates_010[1],
              sexp_004);
    if(extra_011[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_017,
              extra_011[1],
              sexp_004);
    var _g_ = id_006[1], match = value_008[1];
    if(_g_ && match){
     var value_009 = match[1], id_007 = _g_[1];
     return [0, id_007, value_009];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_017,
             sexp_004,
             [0,
              [0, 0 === id_006[1] ? 1 : 0, cst_id],
              [0, [0, 0 === value_008[1] ? 1 : 0, cst_value], 0]]);
   }
   function sexp_of_wrap(of_a_021, param){
    var
     value_025 = param[2],
     id_023 = param[1],
     arg_026 = caml_call1(of_a_021, value_025),
     bnds_022 = [0, [1, [0, _c_, [0, arg_026, 0]]], 0],
     arg_024 = caml_call1(sexp_of_t, id_023),
     bnds_022$0 = [0, [1, [0, _d_, [0, arg_024, 0]]], bnds_022];
    return [1, bnds_022$0];
   }
   function compare$0(u1, u2){return caml_call2(compare, u1[1], u2[1]);}
   function wrap(a){return [0, next(0), a];}
   function unwrap(u){return u[2];}
   function well_known$0(int$0, a){return [0, well_known(int$0), a];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Uuid =
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        compare,
        next,
        well_known,
        to_string,
        of_string],
       Map,
       Set,
       sexp_of_wrap,
       wrap_of_sexp,
       compare$0,
       wrap,
       unwrap,
       well_known$0];
   runtime.caml_register_global(19, Uuid, "Uuid");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vertex
//# unitInfo: Requires: Inline_test_config, Lang, Ppx_inline_test_lib__Runtime, Stdlib, Stdlib__List, Stdlib__Map, Stdlib__Set, Stdlib__String, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_adding_the_same_element_tw$1 =
      "adding the same element twice produces a singleton set",
    cst_grvcore$0 = "grvcore",
    cst_src_grvcore_graph_Vertex_m$9 = "src/grvcore/graph/Vertex.ml",
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "}",
    cst$1 = ", ",
    cst$2 = "{",
    cst = "",
    Uuid = global_data.Uuid,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Lang = global_data.Lang,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    Inline_test_config = global_data.Inline_test_config;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    cst_src_grvcore_graph_Vertex_m = cst_src_grvcore_graph_Vertex_m$9,
    cst_root_vertex_has_id_0 = "root vertex has id 0",
    cst_src_grvcore_graph_Vertex_m$0 = cst_src_grvcore_graph_Vertex_m$9,
    cst_empty_set_has_cardinality_ = "empty set has cardinality 0",
    cst_src_grvcore_graph_Vertex_m$1 = cst_src_grvcore_graph_Vertex_m$9,
    cst_empty_set_has_no_elements = "empty set has no elements",
    cst_src_grvcore_graph_Vertex_m$2 = cst_src_grvcore_graph_Vertex_m$9,
    cst_singleton_set_has_cardinal = "singleton set has cardinality 1",
    cst_src_grvcore_graph_Vertex_m$3 = cst_src_grvcore_graph_Vertex_m$9,
    cst_singleton_set_has_one_elem = "singleton set has one element",
    cst_src_grvcore_graph_Vertex_m$4 = cst_src_grvcore_graph_Vertex_m$9,
    cst_adding_the_same_element_tw = cst_adding_the_same_element_tw$1,
    cst_src_grvcore_graph_Vertex_m$5 = cst_src_grvcore_graph_Vertex_m$9,
    cst_adding_the_same_element_tw$0 = cst_adding_the_same_element_tw$1,
    cst_src_grvcore_graph_Vertex_m$6 = cst_src_grvcore_graph_Vertex_m$9,
    cst_adding_the_same_element_th =
      "adding the same element thrice produces a singleton set",
    cst_src_grvcore_graph_Vertex_m$7 = cst_src_grvcore_graph_Vertex_m$9,
    cst_adding_and_removing_an_ele =
      "adding and removing an element produces the empty set",
    cst_src_grvcore_graph_Vertex_m$8 = cst_src_grvcore_graph_Vertex_m$9,
    cst_twice_adding_and_once_remo =
      "twice-adding and once-removing an element produces the empty set",
    cst_grvcore = cst_grvcore$0;
   function t_of_sexp(x_002){return caml_call2(Uuid[5], Lang[2][5], x_002);}
   function sexp_of_t(x_003){return caml_call2(Uuid[4], Lang[2][6], x_003);}
   var
    mk = Uuid[7],
    root = caml_call2(Uuid[9], 0, 0),
    compare = Uuid[6],
    OrderedType = [0, compare],
    Map = caml_call1(Stdlib_Map[1], OrderedType),
    Set = caml_call1(Stdlib_Set[1], OrderedType);
   function to_string(vertex){return caml_call1(Uuid[1][6], vertex[1]);}
   function set_to_string(vertexes){
    var _H_ = 0;
    function _I_(vertex, strs){return [0, to_string(vertex), strs];}
    var
     _J_ = caml_call3(Set[16], _I_, vertexes, _H_),
     _K_ = caml_call1(Stdlib_List[9], _J_),
     _L_ = caml_call1(caml_call1(Stdlib_String[6], cst$1), _K_),
     _M_ = caml_call2(Stdlib[28], _L_, cst$0);
    return caml_call2(Stdlib[28], cst$2, _M_);
   }
   function _a_(param){
    return runtime.caml_string_equal(caml_call1(Uuid[1][6], root[1]), "0");
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_root_vertex_has_id_0,
     0,
     cst_src_grvcore_graph_Vertex_m,
     30,
     0,
     65,
     _a_);
   function _b_(param){return 0 === caml_call1(Set[22], Set[1]) ? 1 : 0;}
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_empty_set_has_cardinality_,
     0,
     cst_src_grvcore_graph_Vertex_m$0,
     34,
     0,
     65,
     _b_);
   function _c_(param){return 0 === caml_call1(Set[23], Set[1]) ? 1 : 0;}
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_empty_set_has_no_elements,
     0,
     cst_src_grvcore_graph_Vertex_m$1,
     35,
     0,
     64,
     _c_);
   function _d_(param){
    var
     _E_ = Set[1],
     _F_ = caml_call1(mk, 2),
     _G_ = caml_call1(caml_call1(Set[4], _F_), _E_);
    return 1 === caml_call1(Set[22], _G_) ? 1 : 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_singleton_set_has_cardinal,
     0,
     cst_src_grvcore_graph_Vertex_m$2,
     37,
     0,
     94,
     _d_);
   function _e_(param){
    var
     v = caml_call1(mk, 2),
     _C_ = Set[1],
     _D_ = caml_call1(caml_call1(Set[4], v), _C_);
    return caml_equal(caml_call1(Set[23], _D_), [0, v, 0]);
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_singleton_set_has_one_elem,
     0,
     cst_src_grvcore_graph_Vertex_m$3,
     40,
     0,
     109,
     _e_);
   function _f_(param){
    var
     v = caml_call1(mk, 2),
     _y_ = Set[1],
     _z_ = caml_call1(caml_call1(Set[4], v), _y_),
     vs = caml_call1(caml_call1(Set[4], v), _z_),
     _A_ = 1 === caml_call1(Set[22], vs) ? 1 : 0,
     _B_ = _A_ ? caml_equal(caml_call1(Set[23], vs), [0, v, 0]) : _A_;
    return _B_;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_adding_the_same_element_tw,
     0,
     cst_src_grvcore_graph_Vertex_m$4,
     44,
     0,
     184,
     _f_);
   function _g_(param){
    var
     v = caml_call1(mk, 2),
     _u_ = Set[1],
     _v_ = caml_call1(caml_call1(Set[4], v), _u_),
     vs = caml_call1(caml_call1(Set[4], v), _v_),
     _w_ = 1 === caml_call1(Set[22], vs) ? 1 : 0,
     _x_ = _w_ ? caml_equal(caml_call1(Set[23], vs), [0, v, 0]) : _w_;
    return _x_;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_adding_the_same_element_tw$0,
     0,
     cst_src_grvcore_graph_Vertex_m$5,
     49,
     0,
     184,
     _g_);
   function _h_(param){
    var
     v = caml_call1(mk, 2),
     _p_ = Set[1],
     _q_ = caml_call1(caml_call1(Set[4], v), _p_),
     _r_ = caml_call1(caml_call1(Set[4], v), _q_),
     vs = caml_call1(caml_call1(Set[4], v), _r_),
     _s_ = 1 === caml_call1(Set[22], vs) ? 1 : 0,
     _t_ = _s_ ? caml_equal(caml_call1(Set[23], vs), [0, v, 0]) : _s_;
    return _t_;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_adding_the_same_element_th,
     0,
     cst_src_grvcore_graph_Vertex_m$6,
     54,
     0,
     194,
     _h_);
   function _i_(param){
    var
     v = caml_call1(mk, 2),
     _n_ = Set[1],
     _o_ = caml_call1(caml_call1(Set[4], v), _n_),
     vs = caml_call1(caml_call1(Set[6], v), _o_);
    return caml_call1(Set[2], vs);
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_adding_and_removing_an_ele,
     0,
     cst_src_grvcore_graph_Vertex_m$7,
     59,
     0,
     155,
     _i_);
   function _j_(param){
    var
     v = caml_call1(mk, 2),
     _k_ = Set[1],
     _l_ = caml_call1(caml_call1(Set[4], v), _k_),
     _m_ = caml_call1(caml_call1(Set[4], v), _l_),
     vs = caml_call1(caml_call1(Set[6], v), _m_);
    return caml_call1(Set[2], vs);
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_twice_adding_and_once_remo,
     0,
     cst_src_grvcore_graph_Vertex_m$8,
     64,
     0,
     175,
     _j_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Vertex =
      [0, t_of_sexp, sexp_of_t, mk, root, Map, Set, to_string, set_to_string];
   runtime.caml_register_global(36, Vertex, "Vertex");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Util
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Sexplib0__Sexp, Sexplib__Std, Stdlib, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Option = global_data.Stdlib__Option,
    Sexplib_Std = global_data.Sexplib__Std,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib = global_data.Stdlib,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var cst_grvcore = cst_grvcore$0;
   function intersperse(delim, xs){
    if(xs){
     var x = xs[1];
     if(xs[2]){
      var xs$0 = xs[2];
      return [0, x, [0, delim, intersperse(delim, xs$0)]];
     }
    }
    return xs;
   }
   var List = [0, intersperse];
   function print(sexp){
    var _c_ = caml_call2(Sexplib0_Sexp[13], 0, sexp);
    return caml_call1(Stdlib[46], _c_);
   }
   function of_map(bindings, sexp_of_key, sexp_of_value){
    function _a_(param){
     var
      v = param[2],
      k = param[1],
      _b_ = [0, caml_call1(sexp_of_value, v), 0];
     return [1, [0, caml_call1(sexp_of_key, k), _b_]];
    }
    return caml_call2(Sexplib_Std[39], _a_, bindings);
   }
   var Sexp = [0, print, of_map];
   function return$0(o){return [0, o];}
   function map(f, o){return caml_call2(Stdlib_Option[7], f, o);}
   function bind(o, f){return caml_call2(Stdlib_Option[5], o, f);}
   var
    Let_syntax = [0, return$0, map, bind],
    Let_syntax$0 = [0, Let_syntax],
    Option = [0, Let_syntax$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Util = [0, List, Sexp, Option];
   runtime.caml_register_global(8, Util, "Util");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cursor
//# unitInfo: Requires: Assert_failure, Inline_test_config, Lang, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__Format, Uuid, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_grvcore$0 = "grvcore",
    cst_position$0 = "position",
    cst_src_grvcore_graph_Cursor_m$2 = "src/grvcore/graph/Cursor.ml",
    cst_vertex$0 = "vertex",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_015 = "src/grvcore/graph/Cursor.ml.t",
    Lang = global_data.Lang,
    Uuid = global_data.Uuid,
    Stdlib_Format = global_data.Stdlib__Format,
    Vertex = global_data.Vertex,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Inline_test_config = global_data.Inline_test_config;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _d_ = [0, [2, 0, [12, 46, [2, 0, 0]]], "%s.%s"],
    _b_ = [0, cst_position$0],
    _c_ = [0, cst_vertex$0],
    _a_ = [0, cst_src_grvcore_graph_Cursor_m$2, 1, 0],
    cst_position = cst_position$0,
    cst_vertex = cst_vertex$0,
    cst_src_grvcore_graph_Cursor_m = cst_src_grvcore_graph_Cursor_m$2,
    cst_root_cursor_has_UUID_0 = "root cursor has UUID 0",
    cst_src_grvcore_graph_Cursor_m$0 = cst_src_grvcore_graph_Cursor_m$2,
    cst_root_cursor_has_position_R = "root cursor has position Root_root_root",
    cst_src_grvcore_graph_Cursor_m$1 = cst_src_grvcore_graph_Cursor_m$2,
    cst_cursor_representation = "cursor representation",
    cst_grvcore = cst_grvcore$0;
   function t_of_sexp(sexp_002){
    if(0 === sexp_002[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_015, sexp_002);
    var
     field_sexps_003 = sexp_002[1],
     vertex_004 = [0, 0],
     position_006 = [0, 0],
     duplicates_008 = [0, 0],
     extra_009 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_003;
       for(;;){
        if(! param) break;
        var sexp_002$0 = param[1];
        if(1 !== sexp_002$0[0]) break b;
        var _j_ = sexp_002$0[1];
        if(! _j_) break c;
        var _k_ = _j_[1];
        if(0 !== _k_[0]) break e;
        var field_sexps_012 = _j_[2], field_name_010 = _k_[1];
        if(field_sexps_012 && field_sexps_012[2]) break d;
        var
         tail_017 = param[2],
         field_sexp_011$2 =
           function(field_sexps_012){
            function field_sexp_011(param){
             if(! field_sexps_012)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002);
             if(field_sexps_012[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
             var x_018 = field_sexps_012[1];
             return x_018;
            }
            return field_sexp_011;
           },
         field_sexp_011 = field_sexp_011$2(field_sexps_012);
        if(caml_string_notequal(field_name_010, cst_position$0))
         if(caml_string_notequal(field_name_010, cst_vertex$0)){
          if(Sexplib0_Sexp_conv[26][1])
           extra_009[1] = [0, field_name_010, extra_009[1]];
         }
         else if(vertex_004[1])
          duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
         else{
          var
           field_sexp_011$0 = field_sexp_011(0),
           fvalue_014 = caml_call1(Vertex[1], field_sexp_011$0);
          vertex_004[1] = [0, fvalue_014];
         }
        else if(position_006[1])
         duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
        else{
         var
          field_sexp_011$1 = field_sexp_011(0),
          fvalue_013 = caml_call1(Lang[3][5], field_sexp_011$1);
         position_006[1] = [0, fvalue_013];
        }
        var param = tail_017;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002$0);
    }
    if(duplicates_008[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_015,
              duplicates_008[1],
              sexp_002);
    if(extra_009[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_015,
              extra_009[1],
              sexp_002);
    var _l_ = vertex_004[1], match = position_006[1];
    if(_l_ && match){
     var position_007 = match[1], vertex_005 = _l_[1];
     return [0, vertex_005, position_007];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_015,
             sexp_002,
             [0,
              [0, 0 === vertex_004[1] ? 1 : 0, cst_vertex],
              [0, [0, 0 === position_006[1] ? 1 : 0, cst_position], 0]]);
   }
   function sexp_of_t(param){
    var
     position_022 = param[2],
     vertex_020 = param[1],
     arg_023 = caml_call1(Lang[3][6], position_022),
     bnds_019 = [0, [1, [0, _b_, [0, arg_023, 0]]], 0],
     arg_021 = caml_call1(Vertex[2], vertex_020),
     bnds_019$0 = [0, [1, [0, _c_, [0, arg_021, 0]]], bnds_019];
    return [1, bnds_019$0];
   }
   function to_string(cursor){
    var
     _h_ = caml_call1(Lang[3][7], cursor[2]),
     _i_ = caml_call1(Uuid[1][6], cursor[1][1]);
    return caml_call3(Stdlib_Format[138], _d_, _i_, _h_);
   }
   var root = [0, Vertex[4], 0];
   function _e_(param){
    return caml_string_equal(caml_call1(Uuid[1][6], root[1][1]), "0");
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_root_cursor_has_UUID_0,
     0,
     cst_src_grvcore_graph_Cursor_m,
     11,
     0,
     74,
     _e_);
   function _f_(param){return caml_call2(Lang[3][3], root[2], 0);}
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_root_cursor_has_position_R,
     0,
     cst_src_grvcore_graph_Cursor_m$0,
     13,
     0,
     103,
     _f_);
   function _g_(param){return caml_string_equal(to_string(root), "0.root");}
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     cst_cursor_representation,
     0,
     cst_src_grvcore_graph_Cursor_m$1,
     16,
     0,
     60,
     _g_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Cursor = [0, t_of_sexp, sexp_of_t, to_string, root];
   runtime.caml_register_global(29, Cursor, "Cursor");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Edge
//# unitInfo: Requires: Assert_failure, Cursor, Lang, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__List, Stdlib__Map, Stdlib__Set, Stdlib__String, Uuid, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_grvcore$0 = "grvcore",
    cst_source$0 = "source",
    cst_target$0 = "target",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = "}",
    cst$3 = ", ",
    cst$4 = "{",
    cst$0 = " -> ",
    cst$1 = ":",
    cst = "",
    error_source_015 = "src/grvcore/graph/Edge.ml.t'",
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Vertex = global_data.Vertex,
    Lang = global_data.Lang,
    Uuid = global_data.Uuid,
    Cursor = global_data.Cursor,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _b_ = [0, cst_target$0],
    _c_ = [0, cst_source$0],
    _a_ = [0, "src/grvcore/graph/Edge.ml", 1, 0],
    cst_target = cst_target$0,
    cst_source = cst_source$0,
    cst_grvcore = cst_grvcore$0;
   function t_of_sexp(sexp_002){
    if(0 === sexp_002[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_015, sexp_002);
    var
     field_sexps_003 = sexp_002[1],
     source_004 = [0, 0],
     target_006 = [0, 0],
     duplicates_008 = [0, 0],
     extra_009 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_003;
       for(;;){
        if(! param) break;
        var sexp_002$0 = param[1];
        if(1 !== sexp_002$0[0]) break b;
        var _s_ = sexp_002$0[1];
        if(! _s_) break c;
        var _t_ = _s_[1];
        if(0 !== _t_[0]) break e;
        var field_sexps_012 = _s_[2], field_name_010 = _t_[1];
        if(field_sexps_012 && field_sexps_012[2]) break d;
        var
         tail_017 = param[2],
         field_sexp_011$2 =
           function(field_sexps_012){
            function field_sexp_011(param){
             if(! field_sexps_012)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002);
             if(field_sexps_012[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
             var x_018 = field_sexps_012[1];
             return x_018;
            }
            return field_sexp_011;
           },
         field_sexp_011 = field_sexp_011$2(field_sexps_012);
        if(caml_string_notequal(field_name_010, cst_source$0))
         if(caml_string_notequal(field_name_010, cst_target$0)){
          if(Sexplib0_Sexp_conv[26][1])
           extra_009[1] = [0, field_name_010, extra_009[1]];
         }
         else if(target_006[1])
          duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
         else{
          var
           field_sexp_011$0 = field_sexp_011(0),
           fvalue_013 = caml_call1(Vertex[1], field_sexp_011$0);
          target_006[1] = [0, fvalue_013];
         }
        else if(source_004[1])
         duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
        else{
         var
          field_sexp_011$1 = field_sexp_011(0),
          fvalue_014 = caml_call1(Cursor[1], field_sexp_011$1);
         source_004[1] = [0, fvalue_014];
        }
        var param = tail_017;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002$0);
    }
    if(duplicates_008[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_015,
              duplicates_008[1],
              sexp_002);
    if(extra_009[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_015,
              extra_009[1],
              sexp_002);
    var _u_ = source_004[1], match = target_006[1];
    if(_u_ && match){
     var target_007 = match[1], source_005 = _u_[1];
     return [0, source_005, target_007];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_015,
             sexp_002,
             [0,
              [0, 0 === source_004[1] ? 1 : 0, cst_source],
              [0, [0, 0 === target_006[1] ? 1 : 0, cst_target], 0]]);
   }
   function sexp_of_t(param){
    var
     target_022 = param[2],
     source_020 = param[1],
     arg_023 = caml_call1(Vertex[2], target_022),
     bnds_019 = [0, [1, [0, _b_, [0, arg_023, 0]]], 0],
     arg_021 = caml_call1(Cursor[2], source_020),
     bnds_019$0 = [0, [1, [0, _c_, [0, arg_021, 0]]], bnds_019];
    return [1, bnds_019$0];
   }
   function t_of_sexp$0(x_025){return caml_call2(Uuid[5], t_of_sexp, x_025);}
   function sexp_of_t$0(x_026){return caml_call2(Uuid[4], sexp_of_t, x_026);}
   function mk(source, target){
    return caml_call1(Uuid[7], [0, source, target]);
   }
   var
    compare = Uuid[6],
    OrderedType = [0, compare],
    Map = caml_call1(Stdlib_Map[1], OrderedType),
    Set = caml_call1(Stdlib_Set[1], OrderedType);
   function partition_set(edges, pivot){
    function _r_(edge){return runtime.caml_equal(edge[2][1][1], pivot);}
    return caml_call2(Set[21], _r_, edges);
   }
   function union_sets(sets){
    var
     _p_ = caml_call2(Stdlib_List[19], Set[23], sets),
     _q_ = caml_call1(Stdlib_List[13], _p_);
    return caml_call1(Set[37], _q_);
   }
   function to_string(edge){
    var
     _j_ = caml_call1(Vertex[7], edge[2][2]),
     _k_ = caml_call2(Stdlib[28], cst$0, _j_),
     _l_ = caml_call1(Lang[3][7], edge[2][1][2]),
     _m_ = caml_call2(Stdlib[28], _l_, _k_),
     _n_ = caml_call2(Stdlib[28], cst$1, _m_),
     _o_ = caml_call1(Vertex[7], edge[2][1][1]);
    return caml_call2(Stdlib[28], _o_, _n_);
   }
   function set_to_string(edges){
    var _d_ = 0;
    function _e_(edge, strs){return [0, to_string(edge), strs];}
    var
     _f_ = caml_call3(Set[16], _e_, edges, _d_),
     _g_ = caml_call1(Stdlib_List[9], _f_),
     _h_ = caml_call1(caml_call1(Stdlib_String[6], cst$3), _g_),
     _i_ = caml_call2(Stdlib[28], _h_, cst$2);
    return caml_call2(Stdlib[28], cst$4, _i_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Edge =
      [0,
       sexp_of_t,
       t_of_sexp,
       t_of_sexp$0,
       sexp_of_t$0,
       mk,
       Map,
       Set,
       partition_set,
       union_sets,
       to_string,
       set_to_string];
   runtime.caml_register_global(29, Edge, "Edge");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Edge_state
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Created = "Created",
    cst_Deleted = "Deleted",
    cst_created = "created",
    cst_deleted = "deleted",
    cst_grvcore$0 = "grvcore",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "-",
    cst$1 = "+",
    cst = "",
    error_source_003 = "src/grvcore/graph/Edge_state.ml.t",
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _a_ = [0, cst_Deleted],
    _b_ = [0, cst_Created],
    cst_grvcore = cst_grvcore$0;
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _c_ = sexp_004[1];
      b:
      if(caml_string_notequal(_c_, cst_Created)){
       if(caml_string_notequal(_c_, cst_Deleted)){
        if(! caml_string_notequal(_c_, cst_created)) break b;
        if(caml_string_notequal(_c_, cst_deleted)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _d_ = sexp_004[1];
     if(! _d_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     var _e_ = _d_[1];
     if(0 !== _e_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_004);
     var _f_ = _e_[1];
     b:
     if(caml_string_notequal(_f_, cst_Created)){
      if(caml_string_notequal(_f_, cst_Deleted)){
       if(! caml_string_notequal(_f_, cst_created)) break b;
       if(caml_string_notequal(_f_, cst_deleted)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_004);
   }
   function sexp_of_t(param){return param ? _a_ : _b_;}
   function to_string(param){return param ? cst$0 : cst$1;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Edge_state = [0, t_of_sexp, sexp_of_t, to_string];
   runtime.caml_register_global(18, Edge_state, "Edge_state");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Env
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Stdlib__Map, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Map = global_data.Stdlib__Map;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore, cst);
   var
    compare = Stdlib_String[9],
    Map = caml_call1(Stdlib_Map[1], [0, compare]),
    empty = Map[1],
    is_empty = Map[2],
    mem = Map[3],
    add = Map[4],
    update = Map[5],
    singleton = Map[6],
    remove = Map[7],
    merge = Map[8],
    union = Map[9],
    compare$0 = Map[10],
    equal = Map[11],
    iter = Map[12],
    fold = Map[13],
    for_all = Map[14],
    exists = Map[15],
    filter = Map[16],
    filter_map = Map[17],
    partition = Map[18],
    cardinal = Map[19],
    bindings = Map[20],
    min_binding = Map[21],
    min_binding_opt = Map[22],
    max_binding = Map[23],
    max_binding_opt = Map[24],
    choose = Map[25],
    choose_opt = Map[26],
    split = Map[27],
    find = Map[28],
    find_opt = Map[29],
    find_first = Map[30],
    find_first_opt = Map[31],
    find_last = Map[32],
    find_last_opt = Map[33],
    map = Map[34],
    mapi = Map[35],
    to_seq = Map[36],
    to_rev_seq = Map[37],
    to_seq_from = Map[38],
    add_seq = Map[39],
    of_seq = Map[40];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Env =
      [0,
       Map,
       empty,
       is_empty,
       mem,
       add,
       update,
       singleton,
       remove,
       merge,
       union,
       compare$0,
       equal,
       iter,
       fold,
       for_all,
       exists,
       filter,
       filter_map,
       partition,
       cardinal,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose,
       choose_opt,
       split,
       find,
       find_opt,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       map,
       mapi,
       to_seq,
       to_rev_seq,
       to_seq_from,
       add_seq,
       of_seq];
   runtime.caml_register_global(6, Env, "Env");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Error
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var cst_grvcore = cst_grvcore$0;
   function error(origin, vertex){
    function _c_(message){return [1, [0, [0, origin, vertex, message], 0]];}
    return caml_call1(Stdlib_Printf[10], _c_);
   }
   function bind(o, f){
    if(0 === o[0]){var a = o[1]; return caml_call1(f, a);}
    var es = o[1];
    return [1, es];
   }
   function return$0(o){return [0, o];}
   function map(f, o){
    if(0 !== o[0]) return o;
    var a = o[1];
    return [0, caml_call1(f, a)];
   }
   function both(o1, o2){
    if(0 !== o1[0]){
     var es1 = o1[1];
     if(0 === o2[0]) return [1, es1];
     var es2$0 = o2[1];
     return [1, caml_call2(Stdlib[37], es1, es2$0)];
    }
    var o1$0 = o1[1];
    if(0 === o2[0]){var o2$0 = o2[1]; return [0, [0, o1$0, o2$0]];}
    var es2 = o2[1];
    return [1, es2];
   }
   var
    Let_syntax = [0, bind, return$0, map, both],
    bind$0 = Let_syntax[1],
    return$1 = Let_syntax[2],
    map$0 = Let_syntax[3],
    both$0 = Let_syntax[4];
   function sequence(xs){
    if(! xs) return caml_call1(return$1, 0);
    var xs$0 = xs[2], x = xs[1], let_syntax_002 = sequence(xs$0);
    function _a_(param){
     var xs = param[2], x = param[1];
     return caml_call1(return$1, [0, x, xs]);
    }
    var _b_ = caml_call2(Let_syntax[4], x, let_syntax_002);
    return caml_call2(Let_syntax[1], _b_, _a_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Error = [0, error, Let_syntax, bind$0, return$1, map$0, both$0, sequence];
   runtime.caml_register_global(6, Error, "Error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graph_action
//# unitInfo: Requires: Assert_failure, Cursor, Edge, Edge_state, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__Format, Stdlib__Map, Stdlib__Set, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_edge$0 = "edge",
    cst_grvcore$0 = "grvcore",
    cst_state$0 = "state",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_015 = "src/grvcore/graph/Graph_action.ml.t",
    Uuid = global_data.Uuid,
    Cursor = global_data.Cursor,
    Edge_state = global_data.Edge_state,
    Stdlib_Format = global_data.Stdlib__Format,
    Edge = global_data.Edge,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _d_ =
      [0,
       [2, 0, [12, 32, [2, 0, [11, " \xe2\x86\x92 ", [2, 0, 0]]]]],
       "%s %s \xe2\x86\x92 %s"],
    _b_ = [0, cst_state$0],
    _c_ = [0, cst_edge$0],
    _a_ = [0, "src/grvcore/graph/Graph_action.ml", 1, 0],
    cst_state = cst_state$0,
    cst_edge = cst_edge$0,
    cst_grvcore = cst_grvcore$0;
   function t_of_sexp(sexp_002){
    if(0 === sexp_002[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_015, sexp_002);
    var
     field_sexps_003 = sexp_002[1],
     edge_004 = [0, 0],
     state_006 = [0, 0],
     duplicates_008 = [0, 0],
     extra_009 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_003;
       for(;;){
        if(! param) break;
        var sexp_002$0 = param[1];
        if(1 !== sexp_002$0[0]) break b;
        var _h_ = sexp_002$0[1];
        if(! _h_) break c;
        var _i_ = _h_[1];
        if(0 !== _i_[0]) break e;
        var field_sexps_012 = _h_[2], field_name_010 = _i_[1];
        if(field_sexps_012 && field_sexps_012[2]) break d;
        var
         tail_017 = param[2],
         field_sexp_011$2 =
           function(field_sexps_012){
            function field_sexp_011(param){
             if(! field_sexps_012)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002);
             if(field_sexps_012[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
             var x_018 = field_sexps_012[1];
             return x_018;
            }
            return field_sexp_011;
           },
         field_sexp_011 = field_sexp_011$2(field_sexps_012);
        if(caml_string_notequal(field_name_010, cst_edge$0))
         if(caml_string_notequal(field_name_010, cst_state$0)){
          if(Sexplib0_Sexp_conv[26][1])
           extra_009[1] = [0, field_name_010, extra_009[1]];
         }
         else if(state_006[1])
          duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
         else{
          var
           field_sexp_011$0 = field_sexp_011(0),
           fvalue_013 = caml_call1(Edge_state[1], field_sexp_011$0);
          state_006[1] = [0, fvalue_013];
         }
        else if(edge_004[1])
         duplicates_008[1] = [0, field_name_010, duplicates_008[1]];
        else{
         var
          field_sexp_011$1 = field_sexp_011(0),
          fvalue_014 = caml_call1(Edge[3], field_sexp_011$1);
         edge_004[1] = [0, fvalue_014];
        }
        var param = tail_017;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_015, sexp_002$0);
    }
    if(duplicates_008[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_015,
              duplicates_008[1],
              sexp_002);
    if(extra_009[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_015,
              extra_009[1],
              sexp_002);
    var _j_ = edge_004[1], match = state_006[1];
    if(_j_ && match){
     var state_007 = match[1], edge_005 = _j_[1];
     return [0, edge_005, state_007];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_015,
             sexp_002,
             [0,
              [0, 0 === edge_004[1] ? 1 : 0, cst_edge],
              [0, [0, 0 === state_006[1] ? 1 : 0, cst_state], 0]]);
   }
   function sexp_of_t(param){
    var
     state_022 = param[2],
     edge_020 = param[1],
     arg_023 = caml_call1(Edge_state[2], state_022),
     bnds_019 = [0, [1, [0, _b_, [0, arg_023, 0]]], 0],
     arg_021 = caml_call1(Edge[4], edge_020),
     bnds_019$0 = [0, [1, [0, _c_, [0, arg_021, 0]]], bnds_019];
    return [1, bnds_019$0];
   }
   function to_string(edge_action){
    var
     _e_ = caml_call1(Uuid[1][6], edge_action[1][2][2][1]),
     _f_ = caml_call1(Cursor[3], edge_action[1][2][1]),
     _g_ = caml_call1(Edge_state[3], edge_action[2]);
    return caml_call4(Stdlib_Format[138], _d_, _g_, _f_, _e_);
   }
   var
    compare = runtime.caml_compare,
    OrderedType = [0, compare],
    Map = caml_call1(Stdlib_Map[1], OrderedType),
    Set = caml_call1(Stdlib_Set[1], OrderedType);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Graph_action = [0, t_of_sexp, sexp_of_t, Map, Set, to_string];
   runtime.caml_register_global(23, Graph_action, "Graph_action");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graph
//# unitInfo: Requires: Edge, Edge_state, Ppx_inline_test_lib__Runtime, Sexplib__Std, Stdlib, Stdlib__List, Util, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_grvcore$0 = "grvcore",
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Edge_state = global_data.Edge_state,
    Edge = global_data.Edge,
    Stdlib = global_data.Stdlib,
    Sexplib_Std = global_data.Sexplib__Std,
    Stdlib_List = global_data.Stdlib__List,
    Util = global_data.Util,
    Vertex = global_data.Vertex,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    empty = Edge[6][1],
    add = Edge[6][4],
    cst_File_src_grvcore_graph_Gra =
      'File "src/grvcore/graph/Graph.ml", line 97, characters 23-30',
    _a_ = [0, 2],
    _b_ = [0, 1],
    cst_grvcore = cst_grvcore$0;
   function apply_action(graph, action){
    var
     old_state = caml_call2(Edge[6][29], action[1], graph),
     new_state = action[2];
    if(old_state){
     if(old_state[1]) return graph;
     if(! new_state) return graph;
    }
    else if(! new_state) return caml_call3(add, action[1], 0, graph);
    return caml_call3(add, action[1], 1, graph);
   }
   function edges(graph){
    var _V_ = caml_call1(Edge[6][20], graph);
    function _W_(_Y_){return _Y_[1];}
    var _X_ = caml_call1(caml_call1(Stdlib_List[19], _W_), _V_);
    return caml_call1(Edge[7][37], _X_);
   }
   function live_edges(graph){
    var _P_ = caml_call1(Edge[6][20], graph);
    function _Q_(param){return param[2] ? 0 : 1;}
    var _R_ = caml_call1(caml_call1(Stdlib_List[41], _Q_), _P_);
    function _S_(_U_){return _U_[1];}
    var _T_ = caml_call1(caml_call1(Stdlib_List[19], _S_), _R_);
    return caml_call1(Edge[7][37], _T_);
   }
   function parent_edges(graph, vertex){
    var _N_ = live_edges(graph);
    function _O_(edge){return caml_equal(edge[2][2], vertex);}
    return caml_call1(caml_call1(Edge[7][19], _O_), _N_);
   }
   function child_edges(graph, vertex, position){
    var _L_ = live_edges(graph);
    function _M_(edge){return caml_equal(edge[2][1], [0, vertex, position]);}
    return caml_call1(caml_call1(Edge[7][19], _M_), _L_);
   }
   function impl(edge_source, graph){
    var _H_ = Vertex[6][1], _I_ = caml_call1(edge_source, graph);
    function _J_(edge, vertexes){
     var _K_ = caml_call1(caml_call1(Vertex[6][4], edge[2][1][1]), vertexes);
     return caml_call1(caml_call1(Vertex[6][4], edge[2][2]), _K_);
    }
    return caml_call1(caml_call2(Edge[7][16], _J_, _I_), _H_);
   }
   function live_vertexes(_G_){return impl(live_edges, _G_);}
   function vertexes(_F_){return impl(edges, _F_);}
   function parent_vertexes(graph, vertex){
    var _C_ = Vertex[6][1], _D_ = parent_edges(graph, vertex);
    function _E_(e){return caml_call1(Vertex[6][4], e[2][1][1]);}
    return caml_call1(caml_call2(Edge[7][16], _E_, _D_), _C_);
   }
   function deleted(graph){
    var _y_ = vertexes(graph), _z_ = live_edges(graph);
    function _A_(edge){return caml_call1(Vertex[6][6], edge[2][2]);}
    var _B_ = caml_call1(caml_call2(Edge[7][16], _A_, _z_), _y_);
    return caml_call1(caml_call1(Vertex[6][6], Vertex[4]), _B_);
   }
   function multiparented(graph){
    var _n_ = Vertex[5][1], _o_ = live_edges(graph);
    function _p_(edge){
     function _x_(param){return param ? _a_ : _b_;}
     return caml_call2(Vertex[5][5], edge[2][2], _x_);
    }
    var _q_ = caml_call1(caml_call2(Edge[7][16], _p_, _o_), _n_);
    function _r_(param, count){return 2 === count ? 1 : 0;}
    var
     _s_ = caml_call1(caml_call1(Vertex[5][16], _r_), _q_),
     _t_ = caml_call1(Vertex[5][20], _s_);
    function _u_(_w_){return _w_[1];}
    var _v_ = caml_call1(caml_call1(Stdlib_List[19], _u_), _t_);
    return caml_call1(Vertex[6][37], _v_);
   }
   function vertex(graph, vertex_id){
    var _l_ = vertexes(graph);
    function _m_(vertex){return caml_equal(vertex[1], vertex_id);}
    return caml_call1(caml_call1(Vertex[6][34], _m_), _l_);
   }
   function sexp_of_t(graph){
    var
     _i_ = Edge_state[2],
     _j_ = Edge[4],
     _k_ = caml_call1(Edge[6][20], graph);
    return caml_call3(Util[2][2], _k_, _j_, _i_);
   }
   function t_of_sexp(sexp){
    function _c_(param){
     if(1 === param[0]){
      var _f_ = param[1];
      if(_f_){
       var _g_ = _f_[2];
       if(_g_ && ! _g_[2]){
        var
         value_sexp = _g_[1],
         key_sexp = _f_[1],
         _h_ = caml_call1(Edge_state[1], value_sexp);
        return [0, caml_call1(Edge[3], key_sexp), _h_];
       }
      }
     }
     return caml_call1(Stdlib[2], cst_File_src_grvcore_graph_Gra);
    }
    var
     _d_ = caml_call1(caml_call1(Sexplib_Std[40], _c_), sexp),
     _e_ = caml_call1(Stdlib_List[61], _d_);
    return caml_call1(Edge[6][40], _e_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Graph =
      [0,
       empty,
       add,
       apply_action,
       edges,
       live_edges,
       parent_edges,
       child_edges,
       vertexes,
       live_vertexes,
       parent_vertexes,
       deleted,
       multiparented,
       vertex,
       sexp_of_t,
       t_of_sexp];
   runtime.caml_register_global(14, Graph, "Graph");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Type
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_2 = "<2>",
    cst$1 = "@ ",
    cst$0 = "@,",
    cst_grvcore$0 = "grvcore",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Format = global_data.Stdlib__Format,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    pp = function _k_(_i_, _j_){return _k_.fun(_i_, _j_);},
    show = function _h_(_g_){return _h_.fun(_g_);},
    _f_ = [0, [15, 0], "%a"],
    cst_Type_Unknown = "Type.Unknown",
    cst_Type_Num = "Type.Num",
    _a_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Type.Arrow (", [17, [0, cst$0, 0, 0], 0]]]],
       "(@[<2>Type.Arrow (@,"],
    _b_ = [0, [12, 44, [17, [0, cst$1, 1, 0], 0]], ",@ "],
    _c_ = [0, [17, [0, cst$0, 0, 0], [11, "))", [17, 0, 0]]], "@,))@]"],
    _d_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Type.List", [17, [0, cst$1, 1, 0], 0]]]],
       "(@[<2>Type.List@ "],
    _e_ = [0, [17, 0, [12, 41, 0]], "@])"],
    cst_grvcore = cst_grvcore$0;
   caml_update_dummy
    (pp,
     function(fmt, param){
      if(typeof param === "number")
       return 0 === param
               ? caml_call2(Stdlib_Format[13], fmt, cst_Type_Unknown)
               : caml_call2(Stdlib_Format[13], fmt, cst_Type_Num);
      if(0 === param[0]){
       var a1 = param[2], a0 = param[1];
       caml_call2(Stdlib_Format[135], fmt, _a_);
       caml_call1(caml_call1(pp, fmt), a0);
       caml_call2(Stdlib_Format[135], fmt, _b_);
       caml_call1(caml_call1(pp, fmt), a1);
       return caml_call2(Stdlib_Format[135], fmt, _c_);
      }
      var a0$0 = param[1];
      caml_call2(Stdlib_Format[135], fmt, _d_);
      caml_call1(caml_call1(pp, fmt), a0$0);
      return caml_call2(Stdlib_Format[135], fmt, _e_);
     });
   caml_update_dummy
    (show, function(x){return caml_call3(Stdlib_Format[139], _f_, pp, x);});
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Type = [0, pp, show];
   runtime.caml_register_global(13, Type, "Type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Type_check
//# unitInfo: Requires: Edge, Env, Error, Graph, Lang, Ppx_inline_test_lib__Runtime, Stdlib, Stdlib__List, Stdlib__Printf, Type, Uuid
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Error = global_data.Error,
    Graph = global_data.Graph,
    Edge = global_data.Edge,
    Stdlib_List = global_data.Stdlib__List,
    Env = global_data.Env,
    Type = global_data.Type,
    Lang = global_data.Lang,
    Uuid = global_data.Uuid,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    error = Error[1],
    return$0 = Error[4],
    cst_File_src_grvcore_type_Type =
      'File "src/grvcore/type/Type_check.ml", line 60, characters 20-27',
    cst_File_src_grvcore_type_Type$0 =
      'File "src/grvcore/type/Type_check.ml", line 83, characters 20-27',
    _d_ = [0, 0, 0],
    _e_ =
      [0,
       [11, "expected a function type; actual type ", [2, 0, 0]],
       "expected a function type; actual type %s"],
    cst_File_src_grvcore_type_Type$2 =
      'File "src/grvcore/type/Type_check.ml", line 131, characters 18-25',
    _f_ = [0, [11, "unbound variable: ", [2, 0, 0]], "unbound variable: %s"],
    cst_File_src_grvcore_type_Type$3 =
      'File "src/grvcore/type/Type_check.ml", line 109, characters 22-29',
    cst_File_src_grvcore_type_Type$1 =
      'File "src/grvcore/type/Type_check.ml", line 150, characters 20-27',
    cst_File_src_grvcore_type_Type$5 =
      'File "src/grvcore/type/Type_check.ml", line 174, characters 17-24',
    _g_ =
      [0,
       [11, "expected a list type; actual type ", [2, 0, 0]],
       "expected a list type; actual type %s"],
    cst_File_src_grvcore_type_Type$4 =
      'File "src/grvcore/type/Type_check.ml", line 161, characters 18-25',
    cst_File_src_grvcore_type_Type$6 =
      'File "src/grvcore/type/Type_check.ml", line 205, characters 20-27',
    _b_ =
      [0,
       [2, 0, [11, ": Missing case for ", [2, 0, [11, " in ", [2, 0, 0]]]]],
       "%s: Missing case for %s in %s"],
    _c_ =
      [0,
       [2, 0, [11, ": Non-Typ vertex ", [2, 0, 0]]],
       "%s: Non-Typ vertex %s"],
    _a_ =
      [0,
       [11, "expected type ", [2, 0, [11, "; actual type ", [2, 0, 0]]]],
       "expected type %s; actual type %s"],
    cst_grvcore = cst_grvcore$0;
   function consistent(origin, vertex, expected, actual){
    function go(expected, actual){
     a:
     {
      b:
      if(typeof expected === "number"){
       if(0 === expected) return caml_call1(return$0, 0);
       if(typeof actual !== "number") break a;
       if(actual) return caml_call1(return$0, 0);
      }
      else if(0 === expected[0]){
       var expected2 = expected[2], expected1 = expected[1];
       if(typeof actual === "number"){if(0 === actual) break b;}
       else if(1 !== actual[0]){
        var
         actual2 = actual[2],
         actual1 = actual[1],
         let_syntax_001 = go(expected1, actual1),
         let_syntax_002 = go(expected2, actual2),
         _ah_ = function(param){return caml_call1(return$0, 0);},
         _ai_ = caml_call2(Error[2][4], let_syntax_001, let_syntax_002);
        return caml_call2(Error[2][1], _ai_, _ah_);
       }
       break a;
      }
      if(typeof actual === "number" && ! actual)
       return caml_call1(return$0, 0);
     }
     var _ag_ = caml_call1(Type[2], actual);
     return caml_call5
             (error, origin, vertex, _a_, caml_call1(Type[2], expected), _ag_);
    }
    return go(actual, expected);
   }
   function maybe_unknown(ts){
    if(ts && ! ts[2]){var t = ts[1]; return t;}
    return 0;
   }
   function match_fail(loc, sort, vertex){
    if(caml_call1(Lang[2][7], vertex[2]) === sort){
     var
      _ab_ = caml_call1(Uuid[1][6], vertex[1]),
      _ac_ = caml_call1(Lang[2][2], vertex[2]),
      _ad_ = caml_call4(Stdlib_Printf[4], _b_, loc, _ac_, _ab_);
     return caml_call1(Stdlib[2], _ad_);
    }
    var
     _ae_ = caml_call1(Lang[2][2], vertex[2]),
     _af_ = caml_call3(Stdlib_Printf[4], _c_, loc, _ae_);
    return caml_call1(Stdlib[2], _af_);
   }
   function eval_typ_vertex(graph, vertex){
    var ___ = vertex[2];
    if(typeof ___ === "number" && 8 <= ___)
     switch(___ - 8 | 0){
       case 0:
        return caml_call1(return$0, 1);
       case 1:
        var
         let_syntax_004 = eval_typ_cursor(graph, [0, vertex, 18]),
         let_syntax_005 = eval_typ_cursor(graph, [0, vertex, 19]),
         _$_ =
           function(param){
            var t_result = param[2], t_arg = param[1];
            return caml_call1(return$0, [0, t_arg, t_result]);
           },
         _aa_ = caml_call2(Error[2][4], let_syntax_004, let_syntax_005);
        return caml_call2(Error[2][1], _aa_, _$_);
     }
    return match_fail(cst_File_src_grvcore_type_Type, 3, vertex);
   }
   function eval_typ_cursor(graph, cursor){
    var
     _W_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]),
     edges = caml_call1(Edge[7][23], _W_);
    function go(edge){return eval_typ_vertex(graph, edge[2][2]);}
    function _X_(ts){return caml_call1(return$0, maybe_unknown(ts));}
    var
     _Y_ = caml_call2(Stdlib_List[19], go, edges),
     _Z_ = caml_call1(Error[7], _Y_);
    return caml_call2(Error[2][1], _Z_, _X_);
   }
   function ana_pat_vertex(graph, env, vertex, typ){
    var match = vertex[2];
    if(typeof match !== "number" && 2 === match[0]){
     var string = match[1];
     return caml_call1(return$0, caml_call3(Env[5], string, typ, env));
    }
    return match_fail(cst_File_src_grvcore_type_Type$0, 2, vertex);
   }
   function ana_pat_cursor(graph, env, cursor, typ){
    var
     _S_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]),
     edges = caml_call1(Edge[7][23], _S_),
     _T_ = caml_call1(return$0, env);
    function _U_(env, edge){
     function _V_(env){return ana_pat_vertex(graph, env, edge[2][2], typ);}
     return caml_call2(Error[2][1], env, _V_);
    }
    return caml_call3(Stdlib_List[25], _U_, _T_, edges);
   }
   function syn_exp_vertex(graph, env, vertex){
    var match = vertex[2];
    if(typeof match === "number")
     switch(match){
       case 1:
        var
         _E_ =
           function(typ){
            function _O_(env){
             function _Q_(body){return caml_call1(return$0, [0, typ, body]);}
             var _R_ = syn_exp_cursor(graph, env, [0, vertex, 3]);
             return caml_call2(Error[2][1], _R_, _Q_);
            }
            var _P_ = ana_pat_cursor(graph, env, [0, vertex, 1], typ);
            return caml_call2(Error[2][1], _P_, _O_);
           },
         _F_ = eval_typ_cursor(graph, [0, vertex, 2]);
        return caml_call2(Error[2][1], _F_, _E_);
       case 2:
        var
         _G_ =
           function(func){
            a:
            {
             var
              _K_ =
                function(param){
                 var result_type = param[2], param_type = param[1];
                 function _M_(param){
                  return caml_call1(return$0, result_type);
                 }
                 var
                  _N_ = ana_exp_cursor(graph, env, [0, vertex, 5], param_type);
                 return caml_call2(Error[2][1], _N_, _M_);
                };
             if(typeof func === "number"){
              if(0 === func){var _L_ = caml_call1(return$0, _d_); break a;}
             }
             else if(0 === func[0]){
              var
               result_type = func[2],
               param_type = func[1],
               _L_ = caml_call1(return$0, [0, param_type, result_type]);
              break a;
             }
             var
              _L_ =
                caml_call4
                 (error,
                  cst_File_src_grvcore_type_Type$2,
                  vertex,
                  _e_,
                  caml_call1(Type[2], func));
            }
            return caml_call2(Error[2][1], _L_, _K_);
           },
         _H_ = syn_exp_cursor(graph, env, [0, vertex, 4]);
        return caml_call2(Error[2][1], _H_, _G_);
       case 3:
        var
         let_syntax_015 = ana_exp_cursor(graph, env, [0, vertex, 6], 1),
         let_syntax_016 = ana_exp_cursor(graph, env, [0, vertex, 7], 1),
         _I_ = function(param){return caml_call1(return$0, 1);},
         _J_ = caml_call2(Error[2][4], let_syntax_015, let_syntax_016);
        return caml_call2(Error[2][1], _J_, _I_);
     }
    else
     switch(match[0]){
       case 0:
        var string = match[1], match$0 = caml_call2(Env[30], string, env);
        if(! match$0)
         return caml_call4
                 (error,
                  cst_File_src_grvcore_type_Type$3,
                  vertex,
                  _f_,
                  string);
        var t = match$0[1];
        return caml_call1(return$0, t);
       case 1:
        return caml_call1(return$0, 1);
     }
    return match_fail(cst_File_src_grvcore_type_Type$1, 1, vertex);
   }
   function ana_exp_vertex(graph, env, vertex, typ){
    var _x_ = vertex[2];
    if(typeof _x_ === "number" && 6 === _x_){
     a:
     {
      var
       _y_ =
         function(content){
          function _C_(param){return caml_call1(return$0, 0);}
          var _D_ = ana_exp_cursor(graph, env, [0, vertex, 10], content);
          return caml_call2(Error[2][1], _D_, _C_);
         };
      if(typeof typ === "number"){
       if(0 === typ){var _z_ = caml_call1(return$0, 0); break a;}
      }
      else if(1 === typ[0]){
       var t = typ[1], _z_ = caml_call1(return$0, t);
       break a;
      }
      var
       _z_ =
         caml_call4
          (error,
           cst_File_src_grvcore_type_Type$4,
           vertex,
           _g_,
           caml_call1(Type[2], typ));
     }
     return caml_call2(Error[2][1], _z_, _y_);
    }
    function _A_(typ$0){
     return consistent(cst_File_src_grvcore_type_Type$5, vertex, typ, typ$0);
    }
    var _B_ = syn_exp_vertex(graph, env, vertex);
    return caml_call2(Error[2][1], _B_, _A_);
   }
   function syn_exp_cursor(graph, env, cursor){
    var
     _t_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]),
     edges = caml_call1(Edge[7][23], _t_);
    function go(edge){return syn_exp_vertex(graph, env, edge[2][2]);}
    function _u_(ts){return caml_call1(return$0, maybe_unknown(ts));}
    var
     _v_ = caml_call2(Stdlib_List[19], go, edges),
     _w_ = caml_call1(Error[7], _v_);
    return caml_call2(Error[2][1], _w_, _u_);
   }
   function ana_exp_cursor(graph, env, cursor, typ){
    var
     _m_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]),
     edges = caml_call1(Edge[7][23], _m_);
    function _n_(param){return caml_call1(return$0, 0);}
    var _o_ = caml_call1(return$0, 0);
    function _p_(previous_result, edge){
     var let_syntax_024 = ana_exp_vertex(graph, env, edge[2][2], typ);
     function _r_(param){return caml_call1(return$0, 0);}
     var _s_ = caml_call2(Error[2][4], previous_result, let_syntax_024);
     return caml_call2(Error[2][1], _s_, _r_);
    }
    var _q_ = caml_call3(Stdlib_List[25], _p_, _o_, edges);
    return caml_call2(Error[2][1], _q_, _n_);
   }
   function syn_root_vertex(graph, env, vertex){
    var _l_ = vertex[2];
    if(typeof _l_ === "number" && ! _l_)
     return syn_exp_cursor(graph, env, [0, vertex, 0]);
    return match_fail(cst_File_src_grvcore_type_Type$6, 0, vertex);
   }
   function syn_root_cursor(graph, env, cursor){
    var
     _h_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]),
     edges = caml_call1(Edge[7][23], _h_);
    function go(edge){return syn_root_vertex(graph, env, edge[2][2]);}
    function _i_(ts){return caml_call1(return$0, maybe_unknown(ts));}
    var
     _j_ = caml_call2(Stdlib_List[19], go, edges),
     _k_ = caml_call1(Error[7], _j_);
    return caml_call2(Error[2][1], _k_, _i_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Type_check =
      [0,
       error,
       return$0,
       consistent,
       maybe_unknown,
       match_fail,
       eval_typ_vertex,
       eval_typ_cursor,
       ana_pat_vertex,
       ana_pat_cursor,
       syn_exp_vertex,
       ana_exp_vertex,
       syn_exp_cursor,
       ana_exp_cursor,
       syn_root_vertex,
       syn_root_cursor];
   runtime.caml_register_global(29, Type_check, "Type_check");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Position_map
//# unitInfo: Requires: Lang, Ppx_inline_test_lib__Runtime, Stdlib__Map, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Option = global_data.Stdlib__Option,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Lang = global_data.Lang,
    Stdlib_Map = global_data.Stdlib__Map;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    compare = Lang[3][4],
    OrderedType = [0, compare],
    include = caml_call1(Stdlib_Map[1], OrderedType),
    empty = include[1],
    is_empty = include[2],
    mem = include[3],
    add = include[4],
    update = include[5],
    singleton = include[6],
    remove = include[7],
    merge = include[8],
    union = include[9],
    compare$0 = include[10],
    equal = include[11],
    iter = include[12],
    fold = include[13],
    for_all = include[14],
    exists = include[15],
    filter = include[16],
    filter_map = include[17],
    partition = include[18],
    cardinal = include[19],
    bindings = include[20],
    min_binding = include[21],
    min_binding_opt = include[22],
    max_binding = include[23],
    max_binding_opt = include[24],
    choose = include[25],
    choose_opt = include[26],
    split = include[27],
    find = include[28],
    find_opt = include[29],
    find_first = include[30],
    find_first_opt = include[31],
    find_last = include[32],
    find_last_opt = include[33],
    map = include[34],
    mapi = include[35],
    to_seq = include[36],
    to_rev_seq = include[37],
    to_seq_from = include[38],
    add_seq = include[39],
    of_seq = include[40],
    cst_grvcore = cst_grvcore$0;
   function get(opt, position){
    if(opt) var sth = opt[1], default$0 = sth; else var default$0 = 0;
    return function(map){
     var _b_ = caml_call2(find_opt, position, map);
     return caml_call2(Stdlib_Option[3], _b_, default$0);};
   }
   function push(position, x, map){
    var xs = get(0, position)(map), _a_ = caml_call2(remove, position, map);
    return caml_call1(caml_call2(add, position, [0, x, xs]), _a_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Position_map =
      [0,
       empty,
       is_empty,
       mem,
       add,
       update,
       singleton,
       remove,
       merge,
       union,
       compare$0,
       equal,
       iter,
       fold,
       for_all,
       exists,
       filter,
       filter_map,
       partition,
       cardinal,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose,
       choose_opt,
       split,
       find,
       find_opt,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       map,
       mapi,
       to_seq,
       to_rev_seq,
       to_seq_from,
       add_seq,
       of_seq,
       get,
       push];
   runtime.caml_register_global(7, Position_map, "Position_map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tree
//# unitInfo: Requires: Lang, Position_map, Ppx_inline_test_lib__Runtime, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__String, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst_Vertex = "Vertex(",
    cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "}",
    cst$2 = " | ",
    cst$3 = "{",
    cst$0 = "\xe2\x96\xa1",
    cst$4 = "; ",
    cst$5 = "#",
    cst = cst$6,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Lang = global_data.Lang,
    Stdlib_Format = global_data.Stdlib__Format,
    Position_map = global_data.Position_map,
    Uuid = global_data.Uuid,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _c_ = [0, [2, 0, [11, " -> ", [2, 0, 0]]], "%s -> %s"],
    _e_ = [0, [11, cst_Vertex, [2, 0, [12, 41, 0]]], "Vertex(%s)"],
    _d_ =
      [0,
       [11, cst_Vertex, [2, 0, [11, ", ", [2, 0, [12, 41, 0]]]]],
       "Vertex(%s, %s)"],
    cst_grvcore = cst_grvcore$0;
   function child(edge_id, tree){return [0, edge_id, tree];}
   var _a_ = Position_map[1];
   function _b_(children, param){
    var child_specs = param[2], position = param[1];
    function _p_(children, param){
     var tree = param[2], edge_id = param[1];
     return caml_call3
             (Position_map[42], position, [0, edge_id, tree], children);
    }
    return caml_call3(Stdlib_List[25], _p_, children, child_specs);
   }
   var child_map = caml_call2(Stdlib_List[25], _b_, _a_);
   function vertex(vertex, children){
    return [0, vertex, caml_call1(child_map, children)];
   }
   function to_string(param){
    if(0 === param[0]){
     var
      map = param[2],
      vertex = param[1],
      _f_ = caml_call1(Position_map[20], map),
      _g_ =
        function(param){
         var
          tree_children = param[2],
          position = param[1],
          match = caml_call1(Stdlib_List[1], tree_children);
         if(0 === match)
          var _j_ = cst$0;
         else if(1 === match)
          var
           child = caml_call1(Stdlib_List[5], tree_children),
           _j_ = to_string(child[2]);
         else
          var
           _l_ = function(param){var tree = param[2]; return tree;},
           childs = caml_call2(Stdlib_List[19], _l_, tree_children),
           _m_ = caml_call2(Stdlib_List[19], to_string, childs),
           _n_ = caml_call1(caml_call1(Stdlib_String[6], cst$2), _m_),
           _o_ = caml_call2(Stdlib[28], _n_, cst$1),
           _j_ = caml_call2(Stdlib[28], cst$3, _o_);
         var _k_ = caml_call1(Lang[3][7], position);
         return caml_call3(Stdlib_Format[138], _c_, _k_, _j_);
        },
      _h_ = caml_call1(caml_call1(Stdlib_List[19], _g_), _f_),
      children = caml_call1(caml_call1(Stdlib_String[6], cst$4), _h_),
      id = caml_call1(Uuid[1][6], vertex[1]);
     return runtime.caml_string_notequal(children, cst$6)
             ? caml_call3(Stdlib_Format[138], _d_, id, children)
             : caml_call2(Stdlib_Format[138], _e_, id);
    }
    var vertex$0 = param[1], _i_ = caml_call1(Uuid[1][6], vertex$0[1]);
    return caml_call2(Stdlib[28], cst$5, _i_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Tree = [0, child, child_map, vertex, to_string];
   runtime.caml_register_global(21, Tree, "Tree");
   return;
  }
  (globalThis));

//# unitInfo: Provides: State
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var State = [0];
   runtime.caml_register_global(4, State, "State");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Editor
//# unitInfo: Requires: Cursor, Graph, Graph_action, Ppx_inline_test_lib__Runtime, Sexplib__Std, Stdlib, Stdlib__List, Uuid
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Graph_action = global_data.Graph_action,
    Cursor = global_data.Cursor,
    Graph = global_data.Graph,
    Uuid = global_data.Uuid,
    Stdlib = global_data.Stdlib,
    Sexplib_Std = global_data.Sexplib__Std,
    Stdlib_List = global_data.Stdlib__List,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    cst_File_src_grvcore_app_Edito$0 =
      'File "src/grvcore/app/Editor.ml", line 58, characters 23-30',
    cst_File_src_grvcore_app_Edito =
      'File "src/grvcore/app/Editor.ml", line 46, characters 18-25',
    cst_grvcore = cst_grvcore$0;
   function sexp_of_t(editor){
    var
     _v_ = [0, caml_call1(Sexplib_Std[6], editor[6]), 0],
     _w_ = caml_call1(Graph_action[4][23], editor[5]),
     _x_ = [0, caml_call2(Sexplib_Std[39], Graph_action[2], _w_), _v_],
     _y_ = caml_call1(Graph_action[4][23], editor[4]),
     _z_ = [0, caml_call2(Sexplib_Std[39], Graph_action[2], _y_), _x_],
     _A_ = [0, caml_call1(Cursor[2], editor[3]), _z_],
     _B_ = [0, caml_call1(Graph[14], editor[2]), _A_];
    return [1, [0, caml_call1(Uuid[1][2], editor[1]), _B_]];
   }
   function t_of_sexp(param){
    if(1 === param[0]){
     var _n_ = param[1];
     if(_n_){
      var _o_ = _n_[2];
      if(_o_){
       var _p_ = _o_[2];
       if(_p_){
        var _q_ = _p_[2];
        if(_q_){
         var _r_ = _q_[2];
         if(_r_){
          var _s_ = _r_[2];
          if(_s_ && ! _s_[2]){
           var
            show_ids_sexp = _s_[1],
            known_actions_sexp = _r_[1],
            actions_sexp = _q_[1],
            cursor_sexp = _p_[1],
            graph_sexp = _o_[1],
            id_sexp = _n_[1],
            id = caml_call1(Uuid[1][1], id_sexp),
            graph = caml_call1(Graph[15], graph_sexp),
            cursor = caml_call1(Cursor[1], cursor_sexp),
            _t_ = caml_call2(Sexplib_Std[40], Graph_action[1], actions_sexp),
            actions = caml_call1(Graph_action[4][37], _t_),
            _u_ =
              caml_call2(Sexplib_Std[40], Graph_action[1], known_actions_sexp),
            known_actions = caml_call1(Graph_action[4][37], _u_),
            show_ids = caml_call1(Sexplib_Std[7], show_ids_sexp);
           return [0, id, graph, cursor, actions, known_actions, show_ids];
          }
         }
        }
       }
      }
     }
    }
    return caml_call1(Stdlib[2], cst_File_src_grvcore_app_Edito);
   }
   function sexp_of_map(editors){
    var _k_ = caml_call1(Uuid[2][20], editors);
    function _l_(param){
     var editor = param[2], id = param[1], _m_ = [0, sexp_of_t(editor), 0];
     return [1, [0, caml_call1(Uuid[1][2], id), _m_]];
    }
    return caml_call1(caml_call1(Sexplib_Std[39], _l_), _k_);
   }
   function map_of_sexp(sexp){
    function _e_(param){
     if(1 === param[0]){
      var _h_ = param[1];
      if(_h_){
       var _i_ = _h_[2];
       if(_i_ && ! _i_[2]){
        var
         editor_sexp = _i_[1],
         id_sexp = _h_[1],
         _j_ = t_of_sexp(editor_sexp);
        return [0, caml_call1(Uuid[1][1], id_sexp), _j_];
       }
      }
     }
     return caml_call1(Stdlib[2], cst_File_src_grvcore_app_Edito$0);
    }
    var
     _f_ = caml_call1(caml_call1(Sexplib_Std[40], _e_), sexp),
     _g_ = caml_call1(Stdlib_List[61], _f_);
    return caml_call1(Uuid[2][40], _g_);
   }
   function mk(param){
    var
     _a_ = Graph_action[4][1],
     _b_ = Graph_action[4][1],
     _c_ = Cursor[4],
     _d_ = Graph[1];
    return [0, caml_call1(Uuid[1][4], 0), _d_, _c_, _b_, _a_, 0];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Editor = [0, sexp_of_t, t_of_sexp, sexp_of_map, map_of_sexp, mk];
   runtime.caml_register_global(13, Editor, "Editor");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Model
//# unitInfo: Requires: Editor, Graph_action, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib__Std, Stdlib, Stdlib__List, Uuid
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_007 = "src/grvcore/app/Model.ml.graph_action_sequence",
    Uuid = global_data.Uuid,
    Stdlib_List = global_data.Stdlib__List,
    Graph_action = global_data.Graph_action,
    Editor = global_data.Editor,
    Sexplib_Std = global_data.Sexplib__Std,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _a_ = [0, 0],
    cst_File_src_grvcore_app_Model =
      'File "src/grvcore/app/Model.ml", line 25, characters 18-25',
    cst_grvcore = cst_grvcore$0;
   function graph_action_sequence_of_sexp(x_008){
    function _s_(sexp_006){
     if(1 === sexp_006[0]){
      var _t_ = sexp_006[1];
      if(_t_){
       var _u_ = _t_[2];
       if(_u_ && ! _u_[2]){
        var
         arg1_003 = _u_[1],
         arg0_002 = _t_[1],
         res0_004 = caml_call1(Uuid[1][1], arg0_002),
         res1_005 = caml_call1(Graph_action[1], arg1_003);
        return [0, res0_004, res1_005];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_007, 2, sexp_006);
    }
    return caml_call2(Sexplib0_Sexp_conv[44], _s_, x_008);
   }
   function sexp_of_graph_action_sequence(x_013){
    function _r_(param){
     var
      arg1_010 = param[2],
      arg0_009 = param[1],
      res0_011 = caml_call1(Uuid[1][2], arg0_009),
      res1_012 = caml_call1(Graph_action[2], arg1_010);
     return [1, [0, res0_011, [0, res1_012, 0]]];
    }
    return caml_call2(Sexplib0_Sexp_conv[20], _r_, x_013);
   }
   function sexp_of_t(model){
    var
     _q_ =
       [0,
        caml_call2
         (Sexplib0_Sexp_conv[17], sexp_of_graph_action_sequence, model[2]),
        0];
    return [1, [0, caml_call1(Editor[3], model[1]), _q_]];
   }
   function t_of_sexp(param){
    if(1 === param[0]){
     var _o_ = param[1];
     if(_o_){
      var _p_ = _o_[2];
      if(_p_ && ! _p_[2]){
       var
        actions_sexp = _p_[1],
        editors_sexp = _o_[1],
        editors = caml_call1(Editor[4], editors_sexp),
        actions =
          caml_call2
           (Sexplib_Std[37], graph_action_sequence_of_sexp, actions_sexp);
       return [0, editors, actions];
      }
     }
    }
    return caml_call1(Stdlib[2], cst_File_src_grvcore_app_Model);
   }
   function mk(param){
    var
     editor1 = caml_call1(Editor[5], 0),
     editor2 = caml_call1(Editor[5], 0),
     _m_ = Uuid[2][1],
     _n_ = caml_call1(caml_call2(Uuid[2][4], editor1[1], editor1), _m_),
     editors = caml_call1(caml_call2(Uuid[2][4], editor2[1], editor2), _n_);
    return [0, editors, _a_];
   }
   function cutoff(m1, m2){return m1 === m2 ? 1 : 0;}
   function filter_editor_actions(globally_known, editor){
    var _k_ = editor[4];
    function _l_(a){
     return 1 - caml_call2(Graph_action[4][3], a, globally_known);
    }
    var actions = caml_call1(caml_call1(Graph_action[4][19], _l_), _k_);
    return [0, editor[1], editor[2], editor[3], actions, editor[5], editor[6]];
   }
   function globally_known_actions(model){
    var _e_ = caml_call1(Uuid[2][20], model[1]);
    function _f_(_j_){return _j_[2];}
    var _g_ = caml_call1(caml_call1(Stdlib_List[19], _f_), _e_);
    function _h_(param){var known_actions = param[5]; return known_actions;}
    var
     knowns = caml_call1(caml_call1(Stdlib_List[19], _h_), _g_),
     _i_ = caml_call1(Stdlib_List[5], knowns);
    return caml_call3(Stdlib_List[25], Graph_action[4][8], _i_, knowns);
   }
   function remove_known_actions(model){
    var known_actions = globally_known_actions(model), _b_ = model[1];
    function _c_(_d_){return filter_editor_actions(known_actions, _d_);}
    var editors = caml_call2(Uuid[2][34], _c_, _b_);
    return [0, editors, model[2]];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Model =
      [0,
       graph_action_sequence_of_sexp,
       sexp_of_graph_action_sequence,
       sexp_of_t,
       t_of_sexp,
       mk,
       cutoff,
       filter_editor_actions,
       globally_known_actions,
       remove_known_actions];
   runtime.caml_register_global(15, Model, "Model");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Grove
//# unitInfo: Requires: Assert_failure, Edge, Graph, Inline_test_config, Position_map, Ppx_inline_test_lib__Runtime, Stdlib, Stdlib__List, Stdlib__Option, Tree, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "\n",
    cst_D$1 = "D",
    cst_MP$1 = "MP",
    cst_R$1 = "R",
    cst_SC$1 = "SC",
    cst_grvcore$0 = "grvcore",
    cst_src_grvcore_graph_Grove_ml$10 = "src/grvcore/graph/Grove.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = "\n  ",
    cst$2 = ":",
    cst$3 = cst$5,
    cst$0 = ": ",
    cst$1 = cst$5,
    cst = "",
    Vertex = global_data.Vertex,
    Stdlib_Option = global_data.Stdlib__Option,
    Edge = global_data.Edge,
    Tree = global_data.Tree,
    Position_map = global_data.Position_map,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Graph = global_data.Graph,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib = global_data.Stdlib;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _c_ = [0, cst_src_grvcore_graph_Grove_ml$10, 118, 8],
    _d_ = [0, cst_src_grvcore_graph_Grove_ml$10, 116, 14],
    cst_src_grvcore_graph_Grove_ml$3 = cst_src_grvcore_graph_Grove_ml$10,
    cst_multiparented = "multiparented",
    cst_src_grvcore_graph_Grove_ml$4 = cst_src_grvcore_graph_Grove_ml$10,
    cst_deleted_e01 = "deleted e01",
    cst_src_grvcore_graph_Grove_ml$5 = cst_src_grvcore_graph_Grove_ml$10,
    cst_reachable_e01_deleted_e12 = "reachable e01 deleted e12",
    cst_src_grvcore_graph_Grove_ml$6 = cst_src_grvcore_graph_Grove_ml$10,
    cst_reachable_e01_e12 = "reachable e01 e12",
    cst_src_grvcore_graph_Grove_ml$7 = cst_src_grvcore_graph_Grove_ml$10,
    cst_wreaths = "wreaths",
    cst_src_grvcore_graph_Grove_ml$0 = cst_src_grvcore_graph_Grove_ml$10,
    cst_deleted = "deleted",
    cst_src_grvcore_graph_Grove_ml$1 = cst_src_grvcore_graph_Grove_ml$10,
    cst_reachable = "reachable",
    cst_GOT = "\n\n--\nGOT:",
    cst_MP = cst_MP$1,
    cst_D = cst_D$1,
    cst_R = cst_R$1,
    cst_SC = cst_SC$1,
    cst_WANT = "\n\nWANT:",
    cst_MP$0 = cst_MP$1,
    cst_D$0 = cst_D$1,
    cst_R$0 = cst_R$1,
    cst_SC$0 = cst_SC$1,
    cst_src_grvcore_graph_Grove_ml = cst_src_grvcore_graph_Grove_ml$10,
    cst_empty_graph = "empty graph",
    cst_src_grvcore_graph_Grove_ml$2 = cst_src_grvcore_graph_Grove_ml$10,
    cst_one_vertex = "one vertex",
    cst_src_grvcore_graph_Grove_ml$8 = cst_src_grvcore_graph_Grove_ml$10,
    cst_two_vertexes = "two vertexes",
    _a_ = [0, 1],
    _b_ = [0, 0],
    cst_src_grvcore_graph_Grove_ml$9 = cst_src_grvcore_graph_Grove_ml$10,
    cst_Graph_decompose = "Graph.decompose",
    cst_grvcore = cst_grvcore$0;
   function push_edge(vertex, edge){
    function _at_(param){
     if(! param) return [0, caml_call1(Edge[7][5], edge)];
     var edges = param[1];
     return [0, caml_call2(Edge[7][4], edge, edges)];
    }
    return caml_call2(Vertex[5][5], vertex, _at_);
   }
   function push_vertex(vertex, param, in_degrees){
    var
     av = param[3],
     univ = param[2],
     multiv = param[1],
     match = caml_call2(Vertex[5][29], vertex, in_degrees);
    return match
            ? match
               [1]
              ? [0, caml_call2(Vertex[6][4], vertex, multiv), univ, av]
              : [0, multiv, caml_call2(Vertex[6][4], vertex, univ), av]
            : [0, multiv, univ, caml_call2(Vertex[6][4], vertex, av)];
   }
   function traverse_vertex(opt, _an_, vertex){
    if(opt) var sth = opt[1], seen = sth; else var seen = Vertex[6][1];
    if(_an_)
     var sth$0 = _an_[1], remaining = sth$0;
    else
     var remaining = Vertex[6][1];
    return function(children){
     if(caml_call2(Vertex[6][3], vertex, seen))
      return [0, [1, vertex], seen, remaining];
     var
      seen$0 = caml_call2(Vertex[6][4], vertex, seen),
      remaining$0 = caml_call2(Vertex[6][6], vertex, remaining),
      _ao_ = caml_call2(Vertex[5][29], vertex, children),
      edges = caml_call2(Stdlib_Option[3], _ao_, Edge[7][1]),
      _ap_ = caml_call1(Edge[7][23], edges),
      _aq_ = [0, Position_map[1], seen$0, remaining$0];
     function _ar_(param, edge){
      var
       remaining = param[3],
       seen = param[2],
       tree_children = param[1],
       match =
         traverse_vertex([0, seen], [0, remaining], edge[2][2])(children),
       remaining$0 = match[3],
       seen$0 = match[2],
       tree = match[1],
       _as_ = caml_call2(Tree[1], edge[1], tree),
       tree_children$0 =
         caml_call3(Position_map[42], edge[2][1][2], _as_, tree_children);
      return [0, tree_children$0, seen$0, remaining$0];
     }
     var
      match = caml_call1(caml_call2(Stdlib_List[25], _ar_, _aq_), _ap_),
      remaining$1 = match[3],
      seen$1 = match[2],
      children$0 = match[1];
     return [0, [0, vertex, children$0], seen$1, remaining$1];};
   }
   function traverse_vertexes(seen, remaining, vertexes, children){
    var match = caml_call1(Vertex[6][29], vertexes);
    if(! match) return [0, 0, seen, remaining];
    var
     vertex = match[1],
     match$0 = traverse_vertex([0, seen], [0, remaining], vertex)(children),
     remaining$0 = match$0[3],
     seen$0 = match$0[2],
     tree = match$0[1],
     roots = caml_call2(Vertex[6][6], vertex, vertexes),
     match$1 = traverse_vertexes(seen$0, remaining$0, roots, children),
     remaining$1 = match$1[3],
     seen$1 = match$1[2],
     trees = match$1[1];
    return [0, [0, tree, trees], seen$1, remaining$1];
   }
   function wreath_traverse(seen$1, remaining, parents, children){
    if(caml_call1(Vertex[6][2], remaining)) return 0;
    var
     vertex$1 = caml_call1(Vertex[6][24], remaining),
     seen = remaining,
     vertex = vertex$1;
    for(;;){
     if(caml_call2(Vertex[6][3], vertex, seen)){
      var
       match$0 =
         traverse_vertex([0, seen$1], [0, remaining], vertex)(children),
       remaining$0 = match$0[3],
       seen$2 = match$0[2],
       tree = match$0[1];
      return [0,
              tree,
              wreath_traverse(seen$2, remaining$0, parents, children)];
     }
     var match = caml_call2(Vertex[5][29], vertex, parents);
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     var edges = match[1];
     if(1 !== caml_call1(Edge[7][22], edges))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var
      edge = caml_call1(Edge[7][24], edges),
      seen$0 = caml_call2(Vertex[6][4], vertex, seen),
      vertex$0 = edge[2][1][1],
      seen = seen$0,
      vertex = vertex$0;
    }
   }
   function decompose(graph){
    var
     all_edges = caml_call1(Graph[4], graph),
     live_edges = caml_call1(Graph[5], graph),
     _af_ = [0, Vertex[5][1], Vertex[5][1]];
    function _ag_(edge, param){
     var
      children = param[2],
      parents = param[1],
      _am_ = caml_call1(push_edge(edge[2][1][1], edge), children);
     return [0, caml_call1(push_edge(edge[2][2], edge), parents), _am_];
    }
    var
     match = caml_call1(caml_call2(Edge[7][16], _ag_, live_edges), _af_),
     children = match[2],
     parents = match[1],
     _ah_ = Vertex[5][1];
    function _ai_(edge, map){
     function _al_(param){return param ? _a_ : _b_;}
     return caml_call1(caml_call2(Vertex[5][5], edge[2][2], _al_), map);
    }
    var
     in_degrees = caml_call1(caml_call2(Edge[7][16], _ai_, live_edges), _ah_),
     _aj_ = [0, Vertex[6][1], Vertex[6][1], Vertex[6][1]];
    function _ak_(edge, param){
     var
      av = param[3],
      univ = param[2],
      multiv = param[1],
      match = push_vertex(edge[2][2], [0, multiv, univ, av], in_degrees),
      av$0 = match[3],
      univ$0 = match[2],
      multiv$0 = match[1];
     return push_vertex
             (edge[2][1][1], [0, multiv$0, univ$0, av$0], in_degrees);
    }
    var
     match$0 = caml_call1(caml_call2(Edge[7][16], _ak_, all_edges), _aj_),
     av = match$0[3],
     univ = match$0[2],
     multiv = match$0[1],
     av$0 = caml_call2(Vertex[6][6], Vertex[4], av),
     match$1 = traverse_vertexes(Vertex[6][1], univ, multiv, children),
     remaining = match$1[3],
     seen = match$1[2],
     multiparented = match$1[1],
     match$2 = traverse_vertexes(seen, remaining, av$0, children),
     remaining$0 = match$2[3],
     seen$0 = match$2[2],
     deleted = match$2[1],
     match$3 =
       traverse_vertex([0, seen$0], [0, remaining$0], Vertex[4])(children),
     remaining$1 = match$3[3],
     seen$1 = match$3[2],
     reachable = match$3[1],
     wreaths = wreath_traverse(seen$1, remaining$1, parents, children);
    return [0, [0, multiparented, deleted, reachable, wreaths], children];
   }
   function _e_(param){
    function report_tree(prefix, tree){
     var
      _ab_ = caml_call1(Tree[4], tree),
      _ac_ = caml_call2(Stdlib[28], cst$0, _ab_),
      _ad_ = caml_call2(Stdlib[28], prefix, _ac_),
      _ae_ = caml_call2(Stdlib[28], cst$1, _ad_);
     return caml_call1(Stdlib[42], _ae_);
    }
    function report_trees(prefix, trees){
     var
      _Y_ = caml_call2(Stdlib[28], prefix, cst$2),
      _Z_ = caml_call2(Stdlib[28], cst$3, _Y_);
     caml_call1(Stdlib[42], _Z_);
     function ___(tree){
      var
       _$_ = caml_call1(Tree[4], tree),
       _aa_ = caml_call2(Stdlib[28], cst$4, _$_);
      return caml_call1(Stdlib[42], _aa_);
     }
     return caml_call2(Stdlib_List[17], ___, trees);
    }
    function check_decompose(opt, _V_, _U_, _T_, graph){
     if(opt)
      var sth = opt[1], multiparented = sth;
     else
      var multiparented = 0;
     if(_V_) var sth$0 = _V_[1], deleted = sth$0; else var deleted = 0;
     if(_U_)
      var sth$1 = _U_[1], reachable = sth$1;
     else
      var reachable = [0, Vertex[4], Position_map[1]];
     if(_T_) var sth$2 = _T_[1], wreaths = sth$2; else var wreaths = 0;
     var
      got = decompose(graph)[1],
      want = [0, multiparented, deleted, reachable, wreaths],
      _W_ = runtime.caml_equal(got, want),
      _X_ =
        _W_
        ||
         (caml_call1(Stdlib[42], cst_GOT),
          report_trees(cst_MP, got[1]),
          report_trees(cst_D, got[2]),
          report_tree(cst_R, got[3]),
          report_trees(cst_SC, got[4]),
          caml_call1(Stdlib[42], cst_WANT),
          report_trees(cst_MP$0, multiparented),
          report_trees(cst_D$0, deleted),
          report_tree(cst_R$0, reachable),
          report_trees(cst_SC$0, wreaths),
          0);
     return _X_;
    }
    var
     v0 = Vertex[4],
     v1 = caml_call1(Vertex[3], 3),
     v2 = caml_call1(Vertex[3], 4),
     e01 = caml_call2(Edge[5], [0, v0, 0], v1),
     e12 = caml_call2(Edge[5], [0, v1, 6], v2),
     e12$0 = caml_call2(Edge[5], [0, v1, 7], v2),
     e21 = caml_call2(Edge[5], [0, v2, 8], v1);
    function _f_(param){return check_decompose(0, 0, 0, 0, Graph[1]);}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_empty_graph,
      0,
      cst_src_grvcore_graph_Grove_ml,
      196,
      4,
      56,
      _f_);
    function _g_(param){
     function _M_(param){
      var _R_ = Graph[1], _S_ = caml_call1(caml_call2(Graph[2], e01, 1), _R_);
      return check_decompose
              (0, [0, [0, caml_call2(Tree[3], v1, 0), 0]], 0, 0, _S_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_deleted,
       0,
       cst_src_grvcore_graph_Grove_ml$0,
       202,
       8,
       142,
       _M_);
     function _N_(param){
      var
       _O_ = Graph[1],
       _P_ = caml_call1(caml_call2(Graph[2], e01, 0), _O_),
       _Q_ = caml_call2(Tree[3], v1, 0);
      return check_decompose
              (0,
               0,
               [0,
                caml_call2
                 (Tree[3], v0, [0, [0, 0, [0, [0, e01[1], _Q_], 0]], 0])],
               0,
               _P_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_reachable,
       0,
       cst_src_grvcore_graph_Grove_ml$1,
       207,
       8,
       227,
       _N_);
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_one_vertex,
      0,
      cst_src_grvcore_graph_Grove_ml$2,
      198,
      4,
      505,
      _g_);
    function _h_(param){
     function _i_(param){
      var
       _G_ = Graph[1],
       _H_ = caml_call1(caml_call2(Graph[2], e01, 0), _G_),
       _I_ = caml_call1(caml_call2(Graph[2], e12, 0), _H_),
       _J_ = caml_call1(caml_call2(Graph[2], e12$0, 0), _I_),
       _K_ =
         caml_call2
          (Tree[3],
           v1,
           [0,
            [0, 6, [0, [0, e12[1], [1, v2]], 0]],
            [0, [0, 7, [0, [0, e12$0[1], [1, v2]], 0]], 0]]),
       _L_ =
         [0,
          caml_call2(Tree[3], v0, [0, [0, 0, [0, [0, e01[1], _K_], 0]], 0])];
      return check_decompose
              ([0, [0, caml_call2(Tree[3], v2, 0), 0]], 0, _L_, 0, _J_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_multiparented,
       0,
       cst_src_grvcore_graph_Grove_ml$3,
       217,
       8,
       659,
       _i_);
     function _j_(param){
      var
       _C_ = Graph[1],
       _D_ = caml_call1(caml_call2(Graph[2], e01, 1), _C_),
       _E_ = caml_call1(caml_call2(Graph[2], e12, 0), _D_),
       _F_ = caml_call2(Tree[3], v2, 0);
      return check_decompose
              (0,
               [0,
                [0,
                 caml_call2
                  (Tree[3], v1, [0, [0, 6, [0, [0, e12[1], _F_], 0]], 0]),
                 0]],
               0,
               0,
               _E_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_deleted_e01,
       0,
       cst_src_grvcore_graph_Grove_ml$4,
       236,
       8,
       279,
       _j_);
     function _k_(param){
      var
       _x_ = Graph[1],
       _y_ = caml_call1(caml_call2(Graph[2], e01, 0), _x_),
       _z_ = caml_call1(caml_call2(Graph[2], e12, 1), _y_),
       _A_ = caml_call2(Tree[3], v1, 0),
       _B_ =
         [0,
          caml_call2(Tree[3], v0, [0, [0, 0, [0, [0, e01[1], _A_], 0]], 0])];
      return check_decompose
              (0, [0, [0, caml_call2(Tree[3], v2, 0), 0]], _B_, 0, _z_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_reachable_e01_deleted_e12,
       0,
       cst_src_grvcore_graph_Grove_ml$5,
       245,
       8,
       305,
       _k_);
     function _l_(param){
      var
       _s_ = Graph[1],
       _t_ = caml_call1(caml_call2(Graph[2], e01, 0), _s_),
       _u_ = caml_call1(caml_call2(Graph[2], e12, 0), _t_),
       _v_ = caml_call2(Tree[3], v2, 0),
       _w_ = caml_call2(Tree[3], v1, [0, [0, 6, [0, [0, e12[1], _v_], 0]], 0]);
      return check_decompose
              (0,
               0,
               [0,
                caml_call2
                 (Tree[3], v0, [0, [0, 0, [0, [0, e01[1], _w_], 0]], 0])],
               0,
               _u_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_reachable_e01_e12,
       0,
       cst_src_grvcore_graph_Grove_ml$6,
       253,
       8,
       486,
       _l_);
     function _m_(param){
      var
       _n_ = Graph[1],
       _o_ = caml_call1(caml_call2(Graph[2], e01, 1), _n_),
       _p_ = caml_call1(caml_call2(Graph[2], e12, 0), _o_),
       _q_ = caml_call1(caml_call2(Graph[2], e21, 0), _p_),
       _r_ =
         caml_call2(Tree[3], v2, [0, [0, 8, [0, [0, e21[1], [1, v1]], 0]], 0]);
      return check_decompose
              (0,
               0,
               0,
               [0,
                [0,
                 caml_call2
                  (Tree[3], v1, [0, [0, 6, [0, [0, e12[1], _r_], 0]], 0]),
                 0]],
               _q_);
     }
     caml_call8
      (Ppx_inline_test_lib_Runtime[4],
       Inline_test_config,
       cst_wreaths,
       0,
       cst_src_grvcore_graph_Grove_ml$7,
       268,
       8,
       515,
       _m_);
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_two_vertexes,
      0,
      cst_src_grvcore_graph_Grove_ml$8,
      215,
      4,
      2320,
      _h_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[6],
     Inline_test_config,
     cst_Graph_decompose,
     0,
     cst_src_grvcore_graph_Grove_ml$9,
     157,
     0,
     4488,
     _e_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var Grove = [0, traverse_vertex, decompose];
   runtime.caml_register_global(55, Grove, "Grove");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Formalism
//# unitInfo: Requires: Ppx_inline_test_lib__Runtime, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_grvcore$0 = "grvcore",
    caml_compare = runtime.caml_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Set = global_data.Stdlib__Set,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Map = global_data.Stdlib__Map;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    Sort = [0],
    _f_ = [0, 0],
    _g_ = [0, [0, [0, 0]]],
    _h_ = [0, [0, [1, 0]]],
    _i_ = [0, [0, [2, 0]]],
    _j_ = [0, [0, [3, 0]]],
    _k_ = [0, [1, [0, 0]]],
    _a_ = [0, [0, [0, 0]], [0, [0, [0, 1]], [0, [0, [0, 2]], 0]]],
    _b_ = [0, [0, [1, 0]], [0, [0, [1, 1]], 0]],
    _c_ = [0, [0, [2, 0]], [0, [0, [2, 1]], 0]],
    _d_ = [0, [0, [3, 0]], [0, [0, [3, 1]], 0]],
    _e_ = [0, [1, [0, 0]], [0, [1, [0, 1]], 0]],
    cst_grvcore = cst_grvcore$0;
   function sort(param){
    if(typeof param !== "number" && 1 === param[0]) return 2;
    return 0;
   }
   var
    Position = [0, sort],
    compare = caml_compare,
    Arity = caml_call1(Stdlib_Set[1], [0, compare]);
   function sort$0(param){
    if(typeof param !== "number")
     switch(param[0]){case 1: return 1;case 2: return 2;}
    return 0;
   }
   function arity(param){
    if(typeof param === "number") return caml_call1(Arity[5], 0);
    switch(param[0]){
      case 0:
       var _m_ = param[1];
       if(typeof _m_ === "number")
        switch(_m_){
          case 0:
           return caml_call1(Arity[37], _a_);
          case 1:
           return caml_call1(Arity[37], _b_);
          case 2:
           return caml_call1(Arity[37], _c_);
          default: return caml_call1(Arity[37], _d_);
        }
       return 0 === _m_[0] ? Arity[1] : Arity[1];
      case 1:
       return Arity[1];
      default: return param[1] ? Arity[1] : caml_call1(Arity[37], _e_);
    }
   }
   function default_position(param){
    if(typeof param === "number") return _f_;
    switch(param[0]){
      case 0:
       var _l_ = param[1];
       if(typeof _l_ === "number")
        switch(_l_){
          case 0:
           return _g_;
          case 1:
           return _h_;
          case 2:
           return _i_;
          default: return _j_;
        }
       return 0 === _l_[0] ? 0 : 0;
      case 1:
       return 0;
      default: return param[1] ? 0 : _k_;
    }
   }
   var
    Constructor = [0, sort$0, arity, default_position],
    Id = [0],
    Vertex = [0],
    Edge_state = [0],
    compare$0 = caml_compare,
    Map = caml_call1(Stdlib_Map[1], [0, compare$0]),
    Edge = [0, Map],
    Graph = [0];
   function Conflict(T){
    var
     compare = T[1],
     include = caml_call1(Stdlib_Set[1], [0, compare]),
     empty = include[1],
     is_empty = include[2],
     mem = include[3],
     add = include[4],
     singleton = include[5],
     remove = include[6],
     union = include[7],
     inter = include[8],
     disjoint = include[9],
     diff = include[10],
     compare$0 = include[11],
     equal = include[12],
     subset = include[13],
     iter = include[14],
     map = include[15],
     fold = include[16],
     for_all = include[17],
     exists = include[18],
     filter = include[19],
     filter_map = include[20],
     partition = include[21],
     cardinal = include[22],
     elements = include[23],
     min_elt = include[24],
     min_elt_opt = include[25],
     max_elt = include[26],
     max_elt_opt = include[27],
     choose = include[28],
     choose_opt = include[29],
     split = include[30],
     find = include[31],
     find_opt = include[32],
     find_first = include[33],
     find_first_opt = include[34],
     find_last = include[35],
     find_last_opt = include[36],
     of_list = include[37],
     to_seq_from = include[38],
     to_seq = include[39],
     to_rev_seq = include[40],
     add_seq = include[41],
     of_seq = include[42];
    return [0,
            empty,
            is_empty,
            mem,
            add,
            singleton,
            remove,
            union,
            inter,
            disjoint,
            diff,
            compare$0,
            equal,
            subset,
            iter,
            map,
            fold,
            for_all,
            exists,
            filter,
            filter_map,
            partition,
            cardinal,
            elements,
            min_elt,
            min_elt_opt,
            max_elt,
            max_elt_opt,
            choose,
            choose_opt,
            split,
            find,
            find_opt,
            find_first,
            find_first_opt,
            find_last,
            find_last_opt,
            of_list,
            to_seq_from,
            to_seq,
            to_rev_seq,
            add_seq,
            of_seq];
   }
   var
    compare$1 = caml_compare,
    T = [0, compare$1],
    Conflict$0 = Conflict(T),
    Pat = [0, T, Conflict$0],
    compare$2 = caml_compare,
    T$0 = [0, compare$2],
    Conflict$1 = Conflict(T$0),
    Typ = [0, T$0, Conflict$1],
    compare$3 = caml_compare,
    T$1 = [0, compare$3],
    Conflict$2 = Conflict(T$1),
    Exp = [0, T$1, Conflict$2];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Formalism =
      [0,
       Sort,
       Position,
       Arity,
       Constructor,
       Id,
       Vertex,
       Edge_state,
       Edge,
       Graph,
       Conflict,
       Pat,
       Typ,
       Exp];
   runtime.caml_register_global(17, Formalism, "Formalism");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Action
//# unitInfo: Requires: Cursor, Edge, Graph, Graph_action, Lang, Model, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib__Sexp, Stdlib, Stdlib__List, Stdlib__Option, Stdlib__Printf, Util, Uuid, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_already_recording = "(already recording)\n",
    cst_already_stopped = "(already stopped)\n",
    cst_Recording = "Recording...\n",
    cst_Stopped = "Stopped!\n",
    cst_grvcore$0 = "grvcore";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Option = global_data.Stdlib__Option,
    Uuid = global_data.Uuid,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Util = global_data.Util,
    Model = global_data.Model,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Stdlib_List = global_data.Stdlib__List,
    Edge = global_data.Edge,
    Graph = global_data.Graph,
    Lang = global_data.Lang,
    Vertex = global_data.Vertex,
    Stdlib = global_data.Stdlib,
    Graph_action = global_data.Graph_action,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Cursor = global_data.Cursor,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_grvcore$0, cst);
   var
    _A_ = [0, [11, cst_already_recording, 0], cst_already_recording],
    _B_ = [0, [11, cst_Recording, 0], cst_Recording],
    _C_ = [0, 0],
    _D_ = [0, [11, cst_Stopped, 0], cst_Stopped],
    _E_ = [0, [11, cst_already_stopped, 0], cst_already_stopped],
    _z_ = [0, 0],
    _x_ = [0, "action"],
    _y_ = [0, "editor_id"],
    _t_ = [0, "Move"],
    _u_ = [0, "Edit"],
    _v_ = [0, "Comm"],
    _w_ = [0, "Env"],
    _k_ = [0, "Record"],
    _l_ = [0, "Report"],
    _m_ = [0, "Stop"],
    _n_ = [0, "Dump"],
    _o_ = [0, "Replay"],
    _p_ = [0, "Load"],
    _q_ = [0, "Clone"],
    _r_ = [0, "Drop"],
    _s_ = [0, "ToggleIds"],
    _j_ = [0, "Send"],
    _f_ = [0, "Destroy"],
    _g_ = [0, "Create"],
    _h_ = [0, "Restore"],
    _i_ = [0, "DropEdge"],
    _a_ = [0, "Left"],
    _b_ = [0, "Right"],
    _c_ = [0, "Up"],
    _d_ = [0, "Down"],
    _e_ = [0, "Select"],
    cst_grvcore = cst_grvcore$0;
   function sexp_of_move(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _a_;
       case 1:
        return _b_;
       case 2:
        return _c_;
       default: return _d_;
     }
    var arg0_001 = param[1], res0_002 = caml_call1(Cursor[2], arg0_001);
    return [1, [0, _e_, [0, res0_002, 0]]];
   }
   function sexp_of_edit(param){
    if(typeof param === "number") return _f_;
    switch(param[0]){
      case 0:
       var arg0_003 = param[1], res0_004 = caml_call1(Lang[2][6], arg0_003);
       return [1, [0, _g_, [0, res0_004, 0]]];
      case 1:
       var arg0_005 = param[1], res0_006 = caml_call1(Vertex[2], arg0_005);
       return [1, [0, _h_, [0, res0_006, 0]]];
      default:
       var arg0_007 = param[1], res0_008 = caml_call1(Uuid[1][2], arg0_007);
       return [1, [0, _i_, [0, res0_008, 0]]];
    }
   }
   function sexp_of_comm(param){
    var
     arg1_010 = param[2],
     arg0_009 = param[1],
     res0_011 = caml_call2(Sexplib0_Sexp_conv[20], Graph_action[2], arg0_009),
     res1_012 = caml_call2(Sexplib0_Sexp_conv[20], Uuid[1][2], arg1_010);
    return [1, [0, _j_, [0, res0_011, [0, res1_012, 0]]]];
   }
   function sexp_of_env(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _k_;
       case 1:
        return _l_;
       case 2:
        return _m_;
       default: return _n_;
     }
    switch(param[0]){
      case 0:
       var
        arg0_013 = param[1],
        res0_014 = caml_call1(Sexplib0_Sexp_conv[7], arg0_013);
       return [1, [0, _o_, [0, res0_014, 0]]];
      case 1:
       var
        arg0_015 = param[1],
        res0_016 = caml_call1(Sexplib0_Sexp_conv[7], arg0_015);
       return [1, [0, _p_, [0, res0_016, 0]]];
      case 2:
       var arg0_017 = param[1], res0_018 = caml_call1(Uuid[1][2], arg0_017);
       return [1, [0, _q_, [0, res0_018, 0]]];
      case 3:
       var arg0_019 = param[1], res0_020 = caml_call1(Uuid[1][2], arg0_019);
       return [1, [0, _r_, [0, res0_020, 0]]];
      default:
       var arg0_021 = param[1], res0_022 = caml_call1(Uuid[1][2], arg0_021);
       return [1, [0, _s_, [0, res0_022, 0]]];
    }
   }
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_023 = param[1], res0_024 = sexp_of_move(arg0_023);
       return [1, [0, _t_, [0, res0_024, 0]]];
      case 1:
       var arg0_025 = param[1], res0_026 = sexp_of_edit(arg0_025);
       return [1, [0, _u_, [0, res0_026, 0]]];
      case 2:
       var arg0_027 = param[1], res0_028 = sexp_of_comm(arg0_027);
       return [1, [0, _v_, [0, res0_028, 0]]];
      default:
       var arg0_029 = param[1], res0_030 = sexp_of_env(arg0_029);
       return [1, [0, _w_, [0, res0_030, 0]]];
    }
   }
   function sexp_of_t$0(param){
    var
     action_034 = param[2],
     editor_id_032 = param[1],
     arg_035 = sexp_of_t(action_034),
     bnds_031 = [0, [1, [0, _x_, [0, arg_035, 0]]], 0],
     arg_033 = caml_call1(Uuid[1][2], editor_id_032),
     bnds_031$0 = [0, [1, [0, _y_, [0, arg_033, 0]]], bnds_031];
    return [1, bnds_031$0];
   }
   function apply_graph_action(graph_action, editor){
    var
     graph = caml_call2(Graph[3], editor[2], graph_action),
     known_actions = caml_call2(Graph_action[4][4], graph_action, editor[5]),
     actions = caml_call2(Graph_action[4][4], graph_action, editor[4]);
    return [0, editor[1], graph, editor[3], actions, known_actions, editor[6]];
   }
   function record_actions(model, editor_id, graph_actions){
    var _aB_ = model[2];
    function _aC_(actions){
     function _aD_(x){return [0, editor_id, x];}
     var new_actions = caml_call2(Stdlib_List[19], _aD_, graph_actions);
     return caml_call2(Stdlib[37], new_actions, actions);
    }
    return caml_call2(Util[3][1][1][2], _aC_, _aB_);
   }
   function report_actions(actions){
    var _aA_ = caml_call1(Model[2], actions);
    return caml_call1(Util[2][1], _aA_);
   }
   function replay_actions(model, actions){
    var _av_ = [0, model];
    function _aw_(model, param){
     var graph_action = param[2], editor_id = param[1];
     function _ax_(model){
      function _ay_(editor){
       var
        editor$0 = apply_graph_action(graph_action, editor),
        editors = caml_call3(Uuid[2][4], editor_id, editor$0, model[1]),
        actions = record_actions(model, editor_id, [0, graph_action, 0]);
       return [0, [0, editors, actions]];
      }
      var _az_ = caml_call2(Uuid[2][29], editor_id, model[1]);
      return caml_call2(Util[3][1][1][3], _az_, _ay_);
     }
     return caml_call2(Util[3][1][1][3], model, _ax_);
    }
    return caml_call3(Stdlib_List[25], _aw_, _av_, actions);
   }
   function apply_move(model, editor_id, move_action){
    function _ai_(editor){
     var cursor = editor[3];
     if(typeof move_action === "number")
      switch(move_action){
        case 0:
         var
          _ak_ = caml_call1(Lang[3][14], editor[3][2]),
          _al_ = function(position){return [0, cursor[1], position];},
          cursor$0 = caml_call2(Util[3][1][1][2], _al_, _ak_);
         break;
        case 1:
         var
          _an_ = caml_call1(Lang[3][13], editor[3][2]),
          _ao_ = function(position){return [0, cursor[1], position];},
          cursor$0 = caml_call2(Util[3][1][1][2], _ao_, _an_);
         break;
        case 2:
         var
          _ap_ = caml_call2(Graph[6], editor[2], editor[3][1]),
          match = caml_call1(Edge[7][23], _ap_);
         a:
         {
          if(match && ! match[2]){
           var edge = match[1], _aq_ = [0, edge[2][1]];
           break a;
          }
          var _aq_ = 0;
         }
         var cursor$0 = _aq_;
         break;
        default:
         var
          _ar_ = caml_call3(Graph[7], editor[2], cursor[1], cursor[2]),
          match$0 = caml_call1(Edge[7][23], _ar_);
         a:
         {
          if(match$0 && ! match$0[2]){
           var
            edge$0 = match$0[1],
            vertex = edge$0[2][2],
            _at_ = caml_call1(Lang[3][12], vertex[2]),
            _au_ = function(position){return [0, vertex, position];},
            _as_ = caml_call2(Util[3][1][1][2], _au_, _at_);
           break a;
          }
          var _as_ = 0;
         }
         var cursor$0 = _as_;
      }
     else
      var cursor$1 = move_action[1], cursor$0 = [0, cursor$1];
     function _am_(cursor){
      var
       editors =
         caml_call3
          (Uuid[2][4],
           editor_id,
           [0, editor[1], editor[2], cursor, editor[4], editor[5], editor[6]],
           model[1]);
      return [0, editors, model[2]];
     }
     return caml_call2(Util[3][1][1][2], _am_, cursor$0);
    }
    var _aj_ = caml_call2(Uuid[2][29], editor_id, model[1]);
    return caml_call2(Util[3][1][1][3], _aj_, _ai_);
   }
   function apply_edit(model, editor_id, edit_action){
    function _X_(editor){
     var
      children = caml_call3(Graph[7], editor[2], editor[3][1], editor[3][2]);
     if(typeof edit_action === "number")
      var
       _Z_ = caml_call3(Graph[7], editor[2], editor[3][1], editor[3][2]),
       ___ = caml_call1(Edge[7][23], _Z_),
       _$_ = function(edge){return [0, edge, 1];},
       graph_actions = caml_call1(caml_call1(Stdlib_List[19], _$_), ___),
       move_in = 0;
     else
      switch(edit_action[0]){
        case 0:
         var
          constructor = edit_action[1],
          _aa_ = caml_call1(Lang[2][7], constructor);
         if(caml_call1(Lang[3][10], editor[3][2]) === _aa_){
          var
           vertex = caml_call1(Vertex[3], constructor),
           create_parent_edge =
             [0, [0, caml_call2(Edge[5], editor[3], vertex), 0], 0],
           match = caml_call1(Lang[3][11], constructor);
          if(match)
           var
            position = match[1],
            _ab_ = caml_call1(Edge[7][23], children),
            _ac_ =
              function(edge){
               var
                source = [0, vertex, position],
                edge$0 = caml_call2(Edge[5], source, edge[2][2]);
               return [0, edge$0, 0];
              },
            create_new_children_edges =
              caml_call1(caml_call1(Stdlib_List[19], _ac_), _ab_),
            _ad_ = caml_call1(Edge[7][23], children),
            _ae_ = function(edge){return [0, edge, 1];},
            destroy_old_children_edges =
              caml_call1(caml_call1(Stdlib_List[19], _ae_), _ad_),
            _af_ =
              caml_call2
               (Stdlib[37],
                create_new_children_edges,
                destroy_old_children_edges),
            graph_actions = caml_call2(Stdlib[37], create_parent_edge, _af_),
            move_in = 1;
          else
           var graph_actions = create_parent_edge, move_in = 0;
         }
         else
          var graph_actions = 0, move_in = 0;
         break;
        case 1:
         var
          vertex$0 = edit_action[1],
          edge = caml_call2(Edge[5], editor[3], vertex$0),
          graph_actions = [0, [0, edge, 0], 0],
          move_in = 0;
         break;
        default:
         var
          edge_id = edit_action[1],
          _ag_ = caml_call1(Graph[4], editor[2]),
          _ah_ = function(edge){return runtime.caml_equal(edge[1], edge_id);},
          match$0 = caml_call1(caml_call1(Edge[7][34], _ah_), _ag_);
         if(match$0)
          var edge$0 = match$0[1], graph_actions$0 = [0, [0, edge$0, 1], 0];
         else
          var graph_actions$0 = 0;
         var graph_actions = graph_actions$0, move_in = 0;
      }
     var
      editor$0 =
        caml_call3(Stdlib_List[26], apply_graph_action, graph_actions, editor),
      editors = caml_call3(Uuid[2][4], editor_id, editor$0, model[1]),
      actions = record_actions(model, editor$0[1], graph_actions),
      model$0 = [0, editors, actions];
     return move_in ? apply_move(model$0, editor_id, 3) : [0, model$0];
    }
    var _Y_ = caml_call2(Uuid[2][29], editor_id, model[1]);
    return caml_call2(Util[3][1][1][3], _Y_, _X_);
   }
   function apply_comm(model, editor_id, comm_action){
    var editor_ids = comm_action[2], edit_actions = comm_action[1];
    function _P_(editors_opt, editor_id){
     function _U_(editors){
      var _V_ = caml_call2(Uuid[2][29], editor_id, model[1]);
      function _W_(editor){return [0, editor, editors];}
      return caml_call2(Util[3][1][1][2], _W_, _V_);
     }
     return caml_call2(Util[3][1][1][3], editors_opt, _U_);
    }
    var _Q_ = caml_call3(Stdlib_List[25], _P_, _z_, editor_ids);
    function _R_(editors){
     function _S_(model, editor){
      var
       editor$0 =
         caml_call3(Stdlib_List[26], apply_graph_action, edit_actions, editor),
       _T_ = caml_call2(Uuid[2][7], editor$0[1], model[1]),
       editors =
         caml_call1(caml_call2(Uuid[2][4], editor$0[1], editor$0), _T_),
       model$0 = [0, editors, model[2]],
       actions = record_actions(model$0, editor_id, edit_actions);
      return [0, model$0[1], actions];
     }
     var model$0 = caml_call3(Stdlib_List[25], _S_, model, editors);
     return caml_call1(Model[9], model$0);
    }
    return caml_call2(Util[3][1][1][2], _R_, _Q_);
   }
   function apply_env(model, env_action){
    if(typeof env_action !== "number")
     switch(env_action[0]){
       case 0:
        var str = env_action[1], _I_ = caml_call1(Sexplib_Sexp[43], str);
        return replay_actions(model, caml_call1(Model[1], _I_));
       case 1:
        var str$0 = env_action[1], _J_ = caml_call1(Sexplib_Sexp[43], str$0);
        return [0, caml_call1(Model[4], _J_)];
       case 2:
        var
         editor_id = env_action[1],
         _K_ = caml_call2(Uuid[2][29], editor_id, model[1]),
         _L_ =
           function(editor){
            var
             id = caml_call1(Uuid[1][4], 0),
             editor$0 =
               [0, id, editor[2], editor[3], editor[4], editor[5], editor[6]],
             editors = caml_call3(Uuid[2][4], id, editor$0, model[1]);
            return [0, editors, model[2]];
           };
        return caml_call2(Util[3][1][1][2], _L_, _K_);
       case 3:
        var
         editor_id$0 = env_action[1],
         editors = caml_call2(Uuid[2][7], editor_id$0, model[1]);
        return [0, [0, editors, model[2]]];
       default:
        var
         editor_id$1 = env_action[1],
         _M_ = model[1],
         _N_ =
           function(editor){
            return [0,
                    editor[1],
                    editor[2],
                    editor[3],
                    editor[4],
                    editor[5],
                    1 - editor[6]];
           },
         _O_ = caml_call1(Stdlib_Option[7], _N_),
         editors$0 = caml_call1(caml_call2(Uuid[2][5], editor_id$1, _O_), _M_);
        return [0, [0, editors$0, model[2]]];
     }
    switch(env_action){
      case 0:
       return model[2]
               ? (caml_call1(Stdlib_Printf[2], _A_), 0)
               : (caml_call1(Stdlib_Printf[2], _B_), [0, [0, model[1], _C_]]);
      case 1:
       var _G_ = function(actions){report_actions(actions); return 0;};
       return caml_call2(Util[3][1][1][3], model[2], _G_);
      case 2:
       var match = model[2];
       if(match){
        var actions = match[1];
        report_actions(actions);
        caml_call1(Stdlib_Printf[2], _D_);
        return [0, [0, model[1], 0]];
       }
       caml_call1(Stdlib_Printf[2], _E_);
       return 0;
      default:
       var _H_ = caml_call1(Model[3], model);
       caml_call1(Util[2][1], _H_);
       return 0;
    }
   }
   function apply(model, action, state, param){
    var match = action[2];
    switch(match[0]){
      case 0:
       var
        move_action = match[1],
        _F_ = apply_move(model, action[1], move_action);
       break;
      case 1:
       var
        edit_action = match[1],
        _F_ = apply_edit(model, action[1], edit_action);
       break;
      case 2:
       var
        comm_action = match[1],
        _F_ = apply_comm(model, action[1], comm_action);
       break;
      default: var env_action = match[1], _F_ = apply_env(model, env_action);
    }
    return caml_call2(Stdlib_Option[3], _F_, model);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_grvcore);
   var
    Action =
      [0,
       sexp_of_move,
       sexp_of_edit,
       sexp_of_comm,
       sexp_of_env,
       sexp_of_t,
       sexp_of_t$0,
       apply_graph_action,
       record_actions,
       report_actions,
       replay_actions,
       apply_move,
       apply_edit,
       apply_comm,
       apply_env,
       apply];
   runtime.caml_register_global(50, Action, "Action");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
