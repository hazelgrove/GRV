// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Css_gen__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Css_gen = [0];
   runtime.caml_register_global(0, Css_gen, "Css_gen__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen__Css_tokenizer
//# unitInfo: Requires: Assert_failure, Core, Core__Char, Core__Int, Core__List, Core__Sexp, Core__String, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$12 = "",
    cst_Atkeyword = "Atkeyword",
    cst_Colon = "Colon",
    cst_Comma = "Comma",
    cst_Comment = "Comment",
    cst_Css_gen_Css_tokenizer$0 = "Css_gen__Css_tokenizer",
    cst_Delim = "Delim",
    cst_Dimension = "Dimension",
    cst_Eof = "Eof",
    cst_Error = "Error",
    cst_Function = "Function",
    cst_Hash = "Hash",
    cst_Ident = "Ident",
    cst_Lbracket = "Lbracket",
    cst_Lcurly = "Lcurly",
    cst_Lparen = "Lparen",
    cst_Number = "Number",
    cst_Percentage = "Percentage",
    cst_Rbracket = "Rbracket",
    cst_Rcurly = "Rcurly",
    cst_Rparen = "Rparen",
    cst_Semi_colon = "Semi_colon",
    cst_String = "String",
    cst_Uri = "Uri",
    cst_White_space = "White_space",
    cst_atkeyword = "atkeyword",
    cst_b2813aff1a52f8875e7ce14896$11 = "b2813aff1a52f8875e7ce1489676cec3",
    cst_colon = "colon",
    cst_color_rgb_255_0_0$1 = "color: rgb(255,0,0)",
    cst_comma = "comma",
    cst_comment = "comment",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_tokenizer_$60 = "css_gen/src/css_tokenizer.ml",
    cst_delim = "delim",
    cst_dimension = "dimension",
    cst_eof = "eof",
    cst_error = "error",
    cst_function = "function",
    cst_hash = "hash",
    cst_ident = "ident",
    cst_lbracket = "lbracket",
    cst_lcurly = "lcurly",
    cst_lparen = "lparen",
    cst_number = "number",
    cst_percentage = "percentage",
    cst_rbracket = "rbracket",
    cst_rcurly = "rcurly",
    cst_rparen = "rparen",
    cst_semi_colon = "semi_colon",
    cst_string = "string",
    cst_uri = "uri",
    cst_white_space = "white_space",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$11 =
      '"\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6"',
    cst$9 = "'",
    cst$10 = "'\\'",
    cst$8 = "  ",
    cst$7 = ")({}[];:",
    cst$6 = cst$12,
    cst$5 = cst$12,
    cst$4 = "@",
    cst$3 = cst$12,
    cst$2 = "*/",
    cst$1 = "/*",
    cst$0 = cst$12,
    cst = cst$12,
    error_source_003 = "css_gen/src/css_tokenizer.ml.Token.t",
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Assert_failure = global_data.Assert_failure,
    Core_Char = global_data.Core__Char,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen_Css_tokenizer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Expect_test_collector[5][1], cst_css_gen_src_css_tokenizer_$60);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_css_gen$0, cst);
   var
    cst_test_19abf2_2 = '"test\\19abf2\\2"',
    cst_010_xFFa_o123_n_u_12345_aa =
      '"\\010\\xFFa\\o123\\n\\\\\\u{12345}aa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa\xf0\x9f\x90\xaa"',
    cst_css_gen_src_css_tokenizer_$54 = cst_css_gen_src_css_tokenizer_$60,
    cst_url_http_wwww_google_com = 'url( "http://wwww.google.com")',
    cst_url_http_wwww_google_com$0 = "url('http://wwww.google.com')",
    cst_url_http_wwww_google_com$1 = "url('http://wwww.google.com' )",
    cst_url_http_wwww_google_com$2 = "url(  http://wwww.google.com )",
    cst_url_http_wwww_google_com$3 = 'url(  http://wwww.google."com )',
    cst_css_gen_src_css_tokenizer_$49 = cst_css_gen_src_css_tokenizer_$60,
    cst_red = "red-->",
    cst_css_gen_src_css_tokenizer_$44 = cst_css_gen_src_css_tokenizer_$60,
    cst_import_foo_bar = '@import "foo.bar";',
    cst_css_gen_src_css_tokenizer_$39 = cst_css_gen_src_css_tokenizer_$60,
    cst_color_f00 = "color: #f00",
    cst_color_rgb_255_0_0 = cst_color_rgb_255_0_0$1,
    cst_color_rgb_255_0_0$0 = cst_color_rgb_255_0_0$1,
    cst_css_gen_src_css_tokenizer_$34 = cst_css_gen_src_css_tokenizer_$60,
    cst_Foo_Bar = "'Foo '\"Bar\"';' '\\'' \"\\\"\"",
    cst_css_gen_src_css_tokenizer_$29 = cst_css_gen_src_css_tokenizer_$60,
    cst_foo_bar$3 = "'foo bar",
    cst_css_gen_src_css_tokenizer_$24 = cst_css_gen_src_css_tokenizer_$60,
    cst_margin_0_5en = "margin: 0.5en",
    cst_margin_0_5em = "margin: 0.5em",
    cst_margin_0_5in = "margin: 0.5in",
    cst_line_height_3cm = "line-height: 3cm",
    cst_line_height_120 = "line-height: 120%",
    cst_grid_0_1_foo = "grid: 0 1 foo",
    cst_margin_0_5_in = "margin: 0.5-in",
    cst_margin_02e_20 = "margin: .02e+20",
    cst_margin_02e_20$0 = "margin: .02e-20",
    cst_margin_02E_20 = "margin: .02E+20",
    cst_margin_02E_20$0 = "margin: .02E-20",
    cst_margin_02E20 = "margin: .02E20",
    cst_margin_02e20 = "margin: .02e20",
    cst_css_gen_src_css_tokenizer_$19 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$14 = cst_css_gen_src_css_tokenizer_$60,
    cst_foo_bar_baz = "-foo-bar: baz",
    cst_foo_bar = "-foo-bar(",
    cst_foo_bar$0 = "@foo-bar",
    cst_foo_bar$1 = "@-foo-bar",
    cst_foo_bar$2 = "@--foo-bar",
    cst_var = "--var",
    cst_RGBA = "RGBA",
    cst_css_gen_src_css_tokenizer_$9 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$4 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_ = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$0 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$1 = cst_css_gen_src_css_tokenizer_$60,
    _K_ = [1, "((Eof 0 0))"],
    _L_ = [0, cst$12],
    _M_ = [0, cst_eof],
    cst_css_gen_src_css_tokenizer_$2 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$3 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$5 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$6 = cst_css_gen_src_css_tokenizer_$60,
    _N_ =
      [1,
       " ((Rparen 0 1)(Lparen 1 1)(Lcurly 2 1)(Rcurly 3 1)(Lbracket 4 1)(Rbracket 5 1)(Semi_colon 6 1)(Colon 7 1)(Eof 8 0)) "],
    _O_ = [0, cst$12],
    _P_ = [0, "simple_tokens"],
    cst_css_gen_src_css_tokenizer_$7 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$8 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$0 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$10 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$11 = cst_css_gen_src_css_tokenizer_$60,
    _Q_ =
      [1,
       "\n    ((Ident 0 8)(Colon 8 1)(White_space 9 1)(Ident 10 3)(Eof 13 0))\n    ((Function 0 9)(Eof 9 0))\n    ((Atkeyword 0 8)(Eof 8 0))\n    ((Atkeyword 0 9)(Eof 9 0))\n    ((Atkeyword 0 10)(Eof 10 0))\n    ((Ident 0 5)(Eof 5 0))\n    ((Ident 0 4)(Eof 4 0)) "],
    _R_ = [0, cst$12],
    _S_ = [0, cst_ident],
    cst_css_gen_src_css_tokenizer_$12 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$13 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$1 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$15 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$16 = cst_css_gen_src_css_tokenizer_$60,
    _T_ = [1, "((White_space 0 2)(Eof 2 0))"],
    _U_ = [0, cst$12],
    _V_ = [0, "whitespace"],
    cst_css_gen_src_css_tokenizer_$17 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$18 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$2 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$20 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$21 = cst_css_gen_src_css_tokenizer_$60,
    _W_ =
      [1,
       "\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 5)(Eof 13 0))\n    ((Ident 0 11)(Colon 11 1)(White_space 12 1)(Dimension 13 3)(Eof 16 0))\n    ((Ident 0 11)(Colon 11 1)(White_space 12 1)(Percentage 13 4)(Eof 17 0))\n    ((Ident 0 4)(Colon 4 1)(White_space 5 1)(Number 6 1)(White_space 7 1)(Number 8 1)(White_space 9 1)(Ident 10 3)(Eof 13 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Dimension 8 6)(Eof 14 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 7)(Eof 15 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 6)(Eof 14 0))\n    ((Ident 0 6)(Colon 6 1)(White_space 7 1)(Number 8 6)(Eof 14 0)) "],
    _X_ = [0, cst$12],
    _Y_ = [0, "numbers"],
    cst_css_gen_src_css_tokenizer_$22 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$23 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$3 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$25 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$26 = cst_css_gen_src_css_tokenizer_$60,
    _Z_ = [1, "\n    ((Error 0 8))\n    ((Error 0 1))\n    ((Error 0 3)) "],
    ___ = [0, cst$12],
    _$_ = [0, "badly_quoted"],
    cst_css_gen_src_css_tokenizer_$27 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$28 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$4 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$30 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$31 = cst_css_gen_src_css_tokenizer_$60,
    _aa_ =
      [1,
       " ((String 0 6)(String 6 5)(String 11 3)(White_space 14 1)(String 15 4)(White_space 19 1)(String 20 4)(Eof 24 0)) "],
    _ab_ = [0, cst$12],
    _ac_ = [0, "quoted"],
    cst_css_gen_src_css_tokenizer_$32 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$33 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$5 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$35 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$36 = cst_css_gen_src_css_tokenizer_$60,
    _ad_ =
      [1,
       "\n    ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Hash 7 4)(Eof 11 0))\n    ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Function 7 4)(Number 11 3)(Comma 14 1)(Number 15 1)(Comma 16 1)(Number 17 1)(Rparen 18 1)(Eof 19 0))\n    ((Ident 0 5)(Colon 5 1)(White_space 6 1)(Function 7 4)(Number 11 3)(Comma 14 1)(Number 15 1)(Comma 16 1)(Number 17 1)(Rparen 18 1)(Eof 19 0)) "],
    _ae_ = [0, cst$12],
    _af_ = [0, "colors"],
    cst_css_gen_src_css_tokenizer_$37 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$38 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$6 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$40 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$41 = cst_css_gen_src_css_tokenizer_$60,
    _ag_ =
      [1,
       " ((Atkeyword 0 7)(White_space 7 1)(String 8 9)(Semi_colon 17 1)(Eof 18 0)) "],
    _ah_ = [0, cst$12],
    _ai_ = [0, "import"],
    cst_css_gen_src_css_tokenizer_$42 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$43 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$7 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$45 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$46 = cst_css_gen_src_css_tokenizer_$60,
    _aj_ = [1, " ((Ident 0 5)(Delim 5 1)(Eof 6 0)) "],
    _ak_ = [0, cst$12],
    _al_ = [0, "red example"],
    cst_css_gen_src_css_tokenizer_$47 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$48 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$8 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$50 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$51 = cst_css_gen_src_css_tokenizer_$60,
    _am_ =
      [1,
       "\n    ((Function 0 4)(White_space 4 1)(String 5 24)(Rparen 29 1)(Eof 30 0))\n    ((Function 0 4)(String 4 24)(Rparen 28 1)(Eof 29 0))\n    ((Function 0 4)(String 4 24)(White_space 28 1)(Rparen 29 1)(Eof 30 0))\n    ((Uri 0 30)(Eof 30 0))\n    ((Error 0 25)) "],
    _an_ = [0, cst$12],
    _ao_ = [0, "url"],
    cst_css_gen_src_css_tokenizer_$52 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$53 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$9 = cst_b2813aff1a52f8875e7ce14896$11,
    cst_css_gen_src_css_tokenizer_$55 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$56 = cst_css_gen_src_css_tokenizer_$60,
    _ap_ =
      [1,
       "\n    ((String 0 15)(Eof 15 0))\n    ((String 0 51)(Eof 51 0))\n    ((String 0 49)(Eof 49 0)) "],
    _aq_ = [0, cst$12],
    _ar_ = [0, "escape"],
    cst_css_gen_src_css_tokenizer_$57 = cst_css_gen_src_css_tokenizer_$60,
    cst_css_gen_src_css_tokenizer_$58 = cst_css_gen_src_css_tokenizer_$60,
    cst_b2813aff1a52f8875e7ce14896$10 = cst_b2813aff1a52f8875e7ce14896$11,
    _H_ = [0, cst_css_gen_src_css_tokenizer_$60, 293, 2],
    _G_ = [0, cst_css_gen_src_css_tokenizer_$60, 270, 2],
    _F_ = [0, cst_css_gen_src_css_tokenizer_$60, 271, 2],
    cst_url = "url(",
    _E_ = [0, cst_css_gen_src_css_tokenizer_$60, 262, 2],
    _D_ = [0, cst_css_gen_src_css_tokenizer_$60, 263, 2],
    _C_ = [0, cst_css_gen_src_css_tokenizer_$60, 251, 2],
    _B_ = [0, cst_css_gen_src_css_tokenizer_$60, 252, 2],
    _A_ = [0, cst_css_gen_src_css_tokenizer_$60, 239, 2],
    _z_ = [0, cst_css_gen_src_css_tokenizer_$60, 202, 2],
    _y_ = [0, cst_css_gen_src_css_tokenizer_$60, 145, 2],
    _x_ = [0, cst_css_gen_src_css_tokenizer_$60, 55, 2],
    _a_ = [0, cst_Ident],
    _b_ = [0, cst_Function],
    _c_ = [0, cst_Atkeyword],
    _d_ = [0, cst_Hash],
    _e_ = [0, cst_String],
    _f_ = [0, cst_Uri],
    _g_ = [0, cst_Delim],
    _h_ = [0, cst_Number],
    _i_ = [0, cst_Percentage],
    _j_ = [0, cst_Dimension],
    _k_ = [0, cst_White_space],
    _l_ = [0, cst_Colon],
    _m_ = [0, cst_Semi_colon],
    _n_ = [0, cst_Comma],
    _o_ = [0, cst_Lbracket],
    _p_ = [0, cst_Rbracket],
    _q_ = [0, cst_Lparen],
    _r_ = [0, cst_Rparen],
    _s_ = [0, cst_Lcurly],
    _t_ = [0, cst_Rcurly],
    _u_ = [0, cst_Comment],
    _v_ = [0, cst_Eof],
    _w_ = [0, cst_Error],
    cst_Css_gen_Css_tokenizer_Erro = "Css_gen__Css_tokenizer.Error_happened",
    cst_css_gen_src_css_tokenizer_$59 = cst_css_gen_src_css_tokenizer_$60,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen_Css_tokenizer = cst_Css_gen_Css_tokenizer$0;
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _bW_ = sexp_004[1], _bX_ = caml_string_compare(_bW_, cst_atkeyword);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            if(0 <= _bX_){
                             if(0 >= _bX_) break f;
                             var _bY_ = caml_string_compare(_bW_, cst_lcurly);
                             if(0 <= _bY_){
                              if(0 >= _bY_) break q;
                              var _bZ_ = caml_string_compare(_bW_, cst_rparen);
                              if(0 <= _bZ_){
                               if(0 >= _bZ_) break v;
                               if(! caml_string_notequal(_bW_, cst_semi_colon)) break u;
                               if(! caml_string_notequal(_bW_, cst_string)) break t;
                               if(! caml_string_notequal(_bW_, cst_uri)) break s;
                               if(caml_string_notequal(_bW_, cst_white_space)) break a;
                               break r;
                              }
                              if(! caml_string_notequal(_bW_, cst_lparen)) break p;
                              if(! caml_string_notequal(_bW_, cst_number)) break o;
                              if(! caml_string_notequal(_bW_, cst_percentage)) break n;
                              if(! caml_string_notequal(_bW_, cst_rbracket)) break m;
                              if(caml_string_notequal(_bW_, cst_rcurly)) break a;
                              break w;
                             }
                             var _b0_ = caml_string_compare(_bW_, cst_eof);
                             if(0 > _b0_){
                              if(! caml_string_notequal(_bW_, cst_colon)) break e;
                              if(! caml_string_notequal(_bW_, cst_comma)) break d;
                              if(! caml_string_notequal(_bW_, cst_comment)) break c;
                              if(! caml_string_notequal(_bW_, cst_delim)) break b;
                              if(caml_string_notequal(_bW_, cst_dimension)) break a;
                              break l;
                             }
                             if(0 >= _b0_) break k;
                             if(! caml_string_notequal(_bW_, cst_error)) break j;
                             if(! caml_string_notequal(_bW_, cst_function)) break i;
                             if(! caml_string_notequal(_bW_, cst_hash)) break h;
                             if(! caml_string_notequal(_bW_, cst_ident)) break g;
                             if(caml_string_notequal(_bW_, cst_lbracket)) break a;
                            }
                            else{
                             var _b1_ = caml_string_compare(_bW_, cst_Lbracket);
                             if(0 > _b1_){
                              var _b3_ = caml_string_compare(_bW_, cst_Dimension);
                              if(0 <= _b3_){
                               if(0 >= _b3_) break l;
                               if(! caml_string_notequal(_bW_, cst_Eof)) break k;
                               if(! caml_string_notequal(_bW_, cst_Error)) break j;
                               if(! caml_string_notequal(_bW_, cst_Function)) break i;
                               if(! caml_string_notequal(_bW_, cst_Hash)) break h;
                               if(caml_string_notequal(_bW_, cst_Ident)) break a;
                               break g;
                              }
                              if(! caml_string_notequal(_bW_, cst_Atkeyword)) break f;
                              if(! caml_string_notequal(_bW_, cst_Colon)) break e;
                              if(! caml_string_notequal(_bW_, cst_Comma)) break d;
                              if(! caml_string_notequal(_bW_, cst_Comment)) break c;
                              if(caml_string_notequal(_bW_, cst_Delim)) break a;
                              break b;
                             }
                             if(0 < _b1_){
                              var _b2_ = caml_string_compare(_bW_, cst_Rcurly);
                              if(0 <= _b2_){
                               if(0 >= _b2_) break w;
                               if(! caml_string_notequal(_bW_, cst_Rparen)) break v;
                               if(! caml_string_notequal(_bW_, cst_Semi_colon)) break u;
                               if(! caml_string_notequal(_bW_, cst_String)) break t;
                               if(! caml_string_notequal(_bW_, cst_Uri)) break s;
                               if(caml_string_notequal(_bW_, cst_White_space)) break a;
                               break r;
                              }
                              if(! caml_string_notequal(_bW_, cst_Lcurly)) break q;
                              if(! caml_string_notequal(_bW_, cst_Lparen)) break p;
                              if(! caml_string_notequal(_bW_, cst_Number)) break o;
                              if(! caml_string_notequal(_bW_, cst_Percentage)) break n;
                              if(caml_string_notequal(_bW_, cst_Rbracket)) break a;
                              break m;
                             }
                            }
                            return 14;
                           }
                           return 19;
                          }
                          return 17;
                         }
                         return 12;
                        }
                        return 4;
                       }
                       return 5;
                      }
                      return 10;
                     }
                     return 18;
                    }
                    return 16;
                   }
                   return 7;
                  }
                  return 8;
                 }
                 return 15;
                }
                return 9;
               }
               return 21;
              }
              return 22;
             }
             return 1;
            }
            return 3;
           }
           return 0;
          }
          return 2;
         }
         return 11;
        }
        return 13;
       }
       return 20;
      }
      return 6;
     }
     var _b4_ = sexp_004[1];
     if(! _b4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     var _b5_ = _b4_[1];
     if(0 !== _b5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_004);
     var _b6_ = _b5_[1], _b7_ = caml_string_compare(_b6_, cst_atkeyword);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           if(0 <= _b7_){
                            if(0 >= _b7_) break f;
                            var _b8_ = caml_string_compare(_b6_, cst_lcurly);
                            if(0 <= _b8_){
                             if(0 >= _b8_) break q;
                             var _b9_ = caml_string_compare(_b6_, cst_rparen);
                             if(0 <= _b9_){
                              if(0 >= _b9_) break v;
                              if(! caml_string_notequal(_b6_, cst_semi_colon)) break u;
                              if(! caml_string_notequal(_b6_, cst_string)) break t;
                              if(! caml_string_notequal(_b6_, cst_uri)) break s;
                              if(caml_string_notequal(_b6_, cst_white_space)) break a;
                              break r;
                             }
                             if(! caml_string_notequal(_b6_, cst_lparen)) break p;
                             if(! caml_string_notequal(_b6_, cst_number)) break o;
                             if(! caml_string_notequal(_b6_, cst_percentage)) break n;
                             if(! caml_string_notequal(_b6_, cst_rbracket)) break m;
                             if(caml_string_notequal(_b6_, cst_rcurly)) break a;
                             break w;
                            }
                            var _b__ = caml_string_compare(_b6_, cst_eof);
                            if(0 > _b__){
                             if(! caml_string_notequal(_b6_, cst_colon)) break e;
                             if(! caml_string_notequal(_b6_, cst_comma)) break d;
                             if(! caml_string_notequal(_b6_, cst_comment)) break c;
                             if(! caml_string_notequal(_b6_, cst_delim)) break b;
                             if(caml_string_notequal(_b6_, cst_dimension)) break a;
                             break l;
                            }
                            if(0 >= _b__) break k;
                            if(! caml_string_notequal(_b6_, cst_error)) break j;
                            if(! caml_string_notequal(_b6_, cst_function)) break i;
                            if(! caml_string_notequal(_b6_, cst_hash)) break h;
                            if(! caml_string_notequal(_b6_, cst_ident)) break g;
                            if(caml_string_notequal(_b6_, cst_lbracket)) break a;
                           }
                           else{
                            var _b$_ = caml_string_compare(_b6_, cst_Lbracket);
                            if(0 > _b$_){
                             var _cb_ = caml_string_compare(_b6_, cst_Dimension);
                             if(0 <= _cb_){
                              if(0 >= _cb_) break l;
                              if(! caml_string_notequal(_b6_, cst_Eof)) break k;
                              if(! caml_string_notequal(_b6_, cst_Error)) break j;
                              if(! caml_string_notequal(_b6_, cst_Function)) break i;
                              if(! caml_string_notequal(_b6_, cst_Hash)) break h;
                              if(caml_string_notequal(_b6_, cst_Ident)) break a;
                              break g;
                             }
                             if(! caml_string_notequal(_b6_, cst_Atkeyword)) break f;
                             if(! caml_string_notequal(_b6_, cst_Colon)) break e;
                             if(! caml_string_notequal(_b6_, cst_Comma)) break d;
                             if(! caml_string_notequal(_b6_, cst_Comment)) break c;
                             if(caml_string_notequal(_b6_, cst_Delim)) break a;
                             break b;
                            }
                            if(0 < _b$_){
                             var _ca_ = caml_string_compare(_b6_, cst_Rcurly);
                             if(0 <= _ca_){
                              if(0 >= _ca_) break w;
                              if(! caml_string_notequal(_b6_, cst_Rparen)) break v;
                              if(! caml_string_notequal(_b6_, cst_Semi_colon)) break u;
                              if(! caml_string_notequal(_b6_, cst_String)) break t;
                              if(! caml_string_notequal(_b6_, cst_Uri)) break s;
                              if(caml_string_notequal(_b6_, cst_White_space)) break a;
                              break r;
                             }
                             if(! caml_string_notequal(_b6_, cst_Lcurly)) break q;
                             if(! caml_string_notequal(_b6_, cst_Lparen)) break p;
                             if(! caml_string_notequal(_b6_, cst_Number)) break o;
                             if(! caml_string_notequal(_b6_, cst_Percentage)) break n;
                             if(caml_string_notequal(_b6_, cst_Rbracket)) break a;
                             break m;
                            }
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      case 13:
       return _n_;
      case 14:
       return _o_;
      case 15:
       return _p_;
      case 16:
       return _q_;
      case 17:
       return _r_;
      case 18:
       return _s_;
      case 19:
       return _t_;
      case 20:
       return _u_;
      case 21:
       return _v_;
      default: return _w_;
    }
   }
   function equal(x_007, x_008){
    return 0 === runtime.caml_int_compare(x_007, x_008) ? 1 : 0;
   }
   function source(t){return t[1];}
   function next_pos(t){return t[2] + t[3] | 0;}
   function is_next_eof(t){
    var _bU_ = caml_ml_string_length(t[1]), _bV_ = next_pos(t);
    return caml_call2(Core_Int[99][1], _bV_, _bU_);
   }
   function next_char(t){
    var _bT_ = next_pos(t);
    return runtime.caml_string_get(t[1], _bT_);
   }
   function reset(t, param){t[3] = param; return;}
   function consume_1(t){t[3] = t[3] + 1 | 0; return;}
   function one_char_token(t, tok){
    if(! caml_call2(Core_Int[99][3], t[3], 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
    consume_1(t);
    t[4] = tok;
    return 0;
   }
   var
    Error_happened =
      [248, cst_Css_gen_Css_tokenizer_Erro, runtime.caml_fresh_oo_id(0)];
   function error(t){
    t[4] = 22;
    throw caml_maybe_attach_backtrace(Error_happened, 0);
   }
   function accept(t, f){
    if(! is_next_eof(t) && caml_call1(f, next_char(t))){consume_1(t); return 1;}
    return 0;
   }
   function accept_char(t, ch){
    return accept(t, caml_call1(Core_Char[49], ch));
   }
   function accept_string(t, str){
    if(caml_call2(Core_Int[99][3], caml_ml_string_length(str), 0)) return 1;
    var pos = next_pos(t), str_len = caml_ml_string_length(str);
    return caml_call2
             (Core_Int[99][4], pos + str_len | 0, caml_ml_string_length(t[1]))
            ? 0
            : caml_call3
               (Core_String[53], t[1], pos, str)
              ? (t[3] = t[3] + str_len | 0, 1)
              : 0;
   }
   function expect(t, f){if(accept(t, f)) return; return error(t);}
   function expect_char(t, ch){
    return expect(t, caml_call1(Core_Char[49], ch));
   }
   function many(t, f){
    for(;;){
     if(! is_next_eof(t) && caml_call1(f, next_char(t))){consume_1(t); continue;}
     return;
    }
   }
   function many1(t, f){expect(t, f); return many(t, f);}
   function plus_or_minus(param){
    if(43 !== param && 45 !== param) return 0;
    return 1;
   }
   function nmstart(param){
    var _bS_ = param - 91 | 0;
    a:
    {
     if(5 < _bS_ >>> 0){
      if(57 < _bS_ + 26 >>> 0) break a;
     }
     else if(4 !== _bS_) break a;
     return 1;
    }
    return 0;
   }
   function nmchar(param){
    a:
    {
     if(65 <= param){
      var _bR_ = param - 91 | 0;
      if(5 < _bR_ >>> 0){if(32 <= _bR_) break a;} else if(4 !== _bR_) break a;
     }
     else
      if(48 <= param){if(58 <= param) break a;} else if(45 !== param) break a;
     return 1;
    }
    return 0;
   }
   function ident(t){
    return accept_char(t, 45)
            ? accept_char
               (t, 45)
              ? many(t, nmchar)
              : (expect(t, nmstart), many(t, nmchar))
            : (expect(t, nmstart), many(t, nmchar));
   }
   function ident_or_function(t){
    ident(t);
    return accept_char(t, 40) ? (t[4] = 1, 0) : (t[4] = 0, 0);
   }
   function is_whitespace(param){
    var _bQ_ = param - 9 | 0;
    a:
    {
     if(4 < _bQ_ >>> 0){if(23 !== _bQ_) break a;} else if(2 === _bQ_) break a;
     return 1;
    }
    return 0;
   }
   function start_ident(prefix, t){
    var cur = t[3], _bO_ = accept_string(t, prefix);
    if(_bO_)
     if(accept_char(t, 45))
      var _bP_ = accept_char(t, 45), b = _bP_ || accept(t, nmstart);
     else
      var b = accept(t, nmstart);
    else
     var b = _bO_;
    reset(t, cur);
    return b;
   }
   function _I_(t){
    var new_off = next_pos(t);
    t[2] = new_off;
    t[3] = 0;
    if(is_next_eof(t)){t[4] = 21; return 0;}
    var quote = next_char(t);
    if(is_whitespace(quote)){many(t, is_whitespace); t[4] = 10; return 0;}
    if(94 <= quote){
     var switcher = quote - 117 | 0;
     if(8 >= switcher >>> 0)
      switch(switcher){
        case 0:
         if(! caml_call2(Core_Int[99][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
         var _bJ_ = next_char(t);
         if(! caml_call2(Core_Char[49], _bJ_, 117))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
         if(! accept_string(t, cst_url)) return ident_or_function(t);
         var m = t[3];
         many(t, is_whitespace);
         var _bK_ = next_char(t);
         if(! caml_call2(Core_Char[49], _bK_, 34)){
          var _bL_ = next_char(t);
          if(! caml_call2(Core_Char[49], _bL_, 39)){
           many
            (t,
             function(c){
              var _bM_ = c - 32 | 0;
              if(9 >= _bM_ >>> 0)
               switch(_bM_){
                 case 0:
                 case 9:
                  return 0;
                 case 2:
                 case 7:
                 case 8:
                  return error(t);
               }
              return caml_call1(Core_Char[18], c) ? 1 : error(t);
             });
           many(t, is_whitespace);
           expect_char(t, 41);
           t[4] = 5;
           return 0;
          }
         }
         reset(t, m);
         t[4] = 1;
         return 0;
        case 6:
         return one_char_token(t, 18);
        case 8:
         return one_char_token(t, 19);
      }
    }
    else if(34 <= quote)
     switch(quote - 34 | 0){
       case 1:
        if(! caml_call2(Core_Int[99][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
        var _bH_ = next_char(t);
        if(! caml_call2(Core_Char[49], _bH_, 35))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
        consume_1(t);
        return accept(t, nmchar)
                ? (many1(t, nmchar), t[4] = 3, 0)
                : (t[4] = 6, 0);
       case 6:
        return one_char_token(t, 16);
       case 7:
        return one_char_token(t, 17);
       case 10:
        return one_char_token(t, 13);
       case 13:
        if(! caml_call2(Core_Int[99][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
        if(! accept_string(t, cst$1)){expect_char(t, 47); t[4] = 6; return 0;}
        for(;;){
         many(t, function(param){return 42 === param ? 0 : 1;});
         if(accept_string(t, cst$2)){t[4] = 20; return 0;}
         if(! accept_char(t, 42)) return error(t);
        }
        break;
       case 24:
        return one_char_token(t, 11);
       case 25:
        return one_char_token(t, 12);
       case 30:
        if(start_ident(cst$4, t)){
         if(! caml_call2(Core_Int[99][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
         var _bI_ = next_char(t);
         if(! caml_call2(Core_Char[49], _bI_, 64))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
         consume_1(t);
         ident(t);
         t[4] = 2;
         return 0;
        }
        break;
       case 57:
        return one_char_token(t, 14);
       case 59:
        return one_char_token(t, 15);
       case 0:
       case 5:
        if(! caml_call2(Core_Int[99][3], t[3], 0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
        var _bG_ = next_char(t);
        if(! caml_call2(Core_Char[49], _bG_, quote))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
        consume_1(t);
        for(;;){
         many
          (t,
           function(c){
            var _bN_ = c - 10 | 0;
            a:
            {
             if(3 < _bN_ >>> 0){
              if(82 !== _bN_) break a;
             }
             else if(1 === _bN_) break a;
             return 0;
            }
            return caml_call2(Core_Char[49], c, quote) ? 0 : 1;
           });
         if(! accept_char(t, 92)){expect_char(t, quote); t[4] = 4; return 0;}
         if(! accept_char(t, quote)){
          var c = next_char(t);
          a:
          {
           if(11 <= c){
            if(14 <= c) break a;
            switch(c - 11 | 0){
              case 0:
               break a;
              case 1: break;
              default: consume_1(t); accept_char(t, 10); continue;
            }
           }
           else if(10 > c) break a;
           consume_1(t);
           continue;
          }
          consume_1(t);
         }
        }
        break;
       case 9:
       case 11:
       case 12:
       case 14:
       case 15:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 23:
        var cur = t[3];
        accept(t, plus_or_minus);
        accept_char(t, 46);
        var b = accept(t, Core_Char[13]);
        reset(t, cur);
        if(b){
         if(! caml_call2(Core_Int[99][3], t[3], 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
         accept(t, plus_or_minus);
         if(accept_char(t, 46))
          many1(t, Core_Char[13]);
         else{
          many1(t, Core_Char[13]);
          if(accept_char(t, 46)) many1(t, Core_Char[13]);
         }
         var mark = t[3];
         if
          (accept
            (t,
             function(param){
              if(69 !== param && 101 !== param) return 0;
              return 1;
             }))
          if(accept(t, plus_or_minus))
           many1(t, Core_Char[13]);
          else if(accept(t, Core_Char[13]))
           many(t, Core_Char[13]);
          else
           reset(t, mark);
         return accept_char(t, 37)
                 ? (t[4] = 8, 0)
                 : start_ident
                    (cst$0, t)
                   ? (ident(t), t[4] = 9, 0)
                   : (t[4] = 7, 0);
        }
        break;
     }
    return start_ident(cst$3, t)
            ? ident_or_function(t)
            : (consume_1(t), t[4] = 6, 0);
   }
   function next(t){
    if(equal(t[4], 22)) return 0;
    try{var _bE_ = _I_(t); return _bE_;}
    catch(_bF_){
     var _bD_ = caml_wrap_exception(_bF_);
     if(_bD_ === Error_happened) return 0;
     throw caml_maybe_attach_backtrace(_bD_, 0);
    }
   }
   function create(s){var t = [0, s, 0, 0, 10]; next(t); return t;}
   function slice(t){return [0, t[2], t[3]];}
   function current(t){return t[4];}
   function current_text(t){
    if(equal(t[4], 21)) return cst$5;
    var match = slice(t), len = match[2], pos = match[1];
    return caml_call3(Core_String[2], t[1], pos, len);
   }
   function _J_(param){
    function test(s){
     var t = create(s), acc = 0;
     for(;;){
      var
       match = slice(t),
       len = match[2],
       start = match[1],
       acc$0 = [0, [0, t[4], start, len], acc];
      if(! equal(t[4], 21) && ! equal(t[4], 22)){next(t); var acc = acc$0; continue;}
      var
       x_017 = caml_call1(Core_List[34], acc$0),
       _bA_ =
         function(param){
          var
           arg2_013 = param[3],
           arg1_012 = param[2],
           arg0_011 = param[1],
           res0_014 = sexp_of_t(arg0_011),
           res1_015 = caml_call1(Core[356], arg1_012),
           res2_016 = caml_call1(Core[356], arg2_013);
          return [1, [0, res0_014, [0, res1_015, [0, res2_016, 0]]]];
         },
       _bB_ = caml_call2(Core[421], _bA_, x_017),
       _bC_ = caml_call1(Core_Sexp[82], _bB_);
      return caml_call1(Core[32], _bC_);
     }
    }
    var
     Expect_test_collector$0 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _as_(param){
     test(cst$6);
     var
      _bz_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_),
         398,
         8436,
         8444,
         8450];
     return caml_call1(Expect_test_collector$0[1], _bz_);
    }
    var
     _at_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$0),
        398,
        8436,
        8451,
        8466],
     _au_ =
       [0,
        [0,
         _L_,
         _K_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$1),
          398,
          8436,
          8444,
          8450],
         _at_],
        0],
     _av_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$3),
        396,
        8393,
        8397,
        8467],
     _aw_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896);
    caml_call9
     (Expect_test_collector$0[3],
      _aw_,
      _av_,
      cst_css_gen_src_css_tokenizer_$2,
      _M_,
      0,
      _au_,
      0,
      Inline_test_config,
      _as_);
    var
     Expect_test_collector$1 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _ax_(param){
     test(cst$7);
     var
      _by_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$4),
         403,
         8537,
         8545,
         8551];
     return caml_call1(Expect_test_collector$1[1], _by_);
    }
    var
     _ay_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$5),
        404,
        8552,
        8560,
        8680],
     _az_ =
       [0,
        [0,
         _O_,
         _N_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$6),
          403,
          8537,
          8545,
          8551],
         _ay_],
        0],
     _aA_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$8),
        401,
        8476,
        8480,
        8681],
     _aB_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$0);
    caml_call9
     (Expect_test_collector$1[3],
      _aB_,
      _aA_,
      cst_css_gen_src_css_tokenizer_$7,
      _P_,
      0,
      _az_,
      0,
      Inline_test_config,
      _ax_);
    var
     Expect_test_collector$2 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _aC_(param){
     test(cst_foo_bar_baz);
     test(cst_foo_bar);
     test(cst_foo_bar$0);
     test(cst_foo_bar$1);
     test(cst_foo_bar$2);
     test(cst_var);
     test(cst_RGBA);
     var
      _bx_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$9),
         415,
         8883,
         8891,
         8897];
     return caml_call1(Expect_test_collector$2[1], _bx_);
    }
    var
     _aD_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$10),
        416,
        8898,
        8906,
        9158],
     _aE_ =
       [0,
        [0,
         _R_,
         _Q_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$11),
          415,
          8883,
          8891,
          8897],
         _aD_],
        0],
     _aF_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$13),
        407,
        8690,
        8694,
        9159],
     _aG_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$1);
    caml_call9
     (Expect_test_collector$2[3],
      _aG_,
      _aF_,
      cst_css_gen_src_css_tokenizer_$12,
      _S_,
      0,
      _aE_,
      0,
      Inline_test_config,
      _aC_);
    var
     Expect_test_collector$3 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _aH_(param){
     test(cst$8);
     var
      _bw_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$14),
         428,
         9220,
         9228,
         9234];
     return caml_call1(Expect_test_collector$3[1], _bw_);
    }
    var
     _aI_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$15),
        428,
        9220,
        9235,
        9267],
     _aJ_ =
       [0,
        [0,
         _U_,
         _T_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$16),
          428,
          9220,
          9228,
          9234],
         _aI_],
        0],
     _aK_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$18),
        426,
        9168,
        9172,
        9268],
     _aL_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$2);
    caml_call9
     (Expect_test_collector$3[3],
      _aL_,
      _aK_,
      cst_css_gen_src_css_tokenizer_$17,
      _V_,
      0,
      _aJ_,
      0,
      Inline_test_config,
      _aH_);
    var
     Expect_test_collector$4 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _aM_(param){
     test(cst_margin_0_5en);
     test(cst_margin_0_5em);
     test(cst_margin_0_5in);
     test(cst_line_height_3cm);
     test(cst_line_height_120);
     test(cst_grid_0_1_foo);
     test(cst_margin_0_5_in);
     test(cst_margin_02e_20);
     test(cst_margin_02e_20$0);
     test(cst_margin_02E_20);
     test(cst_margin_02E_20$0);
     test(cst_margin_02E20);
     test(cst_margin_02e20);
     var
      _bv_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$19),
         445,
         9691,
         9699,
         9705];
     return caml_call1(Expect_test_collector$4[1], _bv_);
    }
    var
     _aN_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$20),
        446,
        9706,
        9714,
        10688],
     _aO_ =
       [0,
        [0,
         _X_,
         _W_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$21),
          445,
          9691,
          9699,
          9705],
         _aN_],
        0],
     _aP_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$23),
        431,
        9277,
        9281,
        10689],
     _aQ_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$3);
    caml_call9
     (Expect_test_collector$4[3],
      _aQ_,
      _aP_,
      cst_css_gen_src_css_tokenizer_$22,
      _Y_,
      0,
      _aO_,
      0,
      Inline_test_config,
      _aM_);
    var
     Expect_test_collector$5 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _aR_(param){
     test(cst_foo_bar$3);
     test(cst$9);
     test(cst$10);
     var
      _bu_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$24),
         466,
         10793,
         10801,
         10807];
     return caml_call1(Expect_test_collector$5[1], _bu_);
    }
    var
     _aS_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$25),
        466,
        10793,
        10808,
        10867],
     _aT_ =
       [0,
        [0,
         ___,
         _Z_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$26),
          466,
          10793,
          10801,
          10807],
         _aS_],
        0],
     _aU_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$28),
        462,
        10698,
        10702,
        10868],
     _aV_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$4);
    caml_call9
     (Expect_test_collector$5[3],
      _aV_,
      _aU_,
      cst_css_gen_src_css_tokenizer_$27,
      _$_,
      0,
      _aT_,
      0,
      Inline_test_config,
      _aR_);
    var
     Expect_test_collector$6 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _aW_(param){
     test(cst_Foo_Bar);
     var
      _bt_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$29),
         474,
         10949,
         10957,
         10963];
     return caml_call1(Expect_test_collector$6[1], _bt_);
    }
    var
     _aX_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$30),
        475,
        10964,
        10972,
        11089],
     _aY_ =
       [0,
        [0,
         _ab_,
         _aa_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$31),
          474,
          10949,
          10957,
          10963],
         _aX_],
        0],
     _aZ_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$33),
        472,
        10877,
        10881,
        11090],
     _a0_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$5);
    caml_call9
     (Expect_test_collector$6[3],
      _a0_,
      _aZ_,
      cst_css_gen_src_css_tokenizer_$32,
      _ac_,
      0,
      _aY_,
      0,
      Inline_test_config,
      _aW_);
    var
     Expect_test_collector$7 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _a1_(param){
     test(cst_color_f00);
     test(cst_color_rgb_255_0_0);
     test(cst_color_rgb_255_0_0$0);
     var
      _bs_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$34),
         482,
         11230,
         11238,
         11244];
     return caml_call1(Expect_test_collector$7[1], _bs_);
    }
    var
     _a2_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$35),
        483,
        11245,
        11253,
        11616],
     _a3_ =
       [0,
        [0,
         _ae_,
         _ad_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$36),
          482,
          11230,
          11238,
          11244],
         _a2_],
        0],
     _a4_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$38),
        478,
        11099,
        11103,
        11617],
     _a5_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$6);
    caml_call9
     (Expect_test_collector$7[3],
      _a5_,
      _a4_,
      cst_css_gen_src_css_tokenizer_$37,
      _af_,
      0,
      _a3_,
      0,
      Inline_test_config,
      _a1_);
    var
     Expect_test_collector$8 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _a6_(param){
     test(cst_import_foo_bar);
     var
      _br_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$39),
         491,
         11692,
         11700,
         11706];
     return caml_call1(Expect_test_collector$8[1], _br_);
    }
    var
     _a7_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$40),
        492,
        11707,
        11715,
        11794],
     _a8_ =
       [0,
        [0,
         _ah_,
         _ag_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$41),
          491,
          11692,
          11700,
          11706],
         _a7_],
        0],
     _a9_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$43),
        489,
        11626,
        11630,
        11795],
     _a__ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$7);
    caml_call9
     (Expect_test_collector$8[3],
      _a__,
      _a9_,
      cst_css_gen_src_css_tokenizer_$42,
      _ai_,
      0,
      _a8_,
      0,
      Inline_test_config,
      _a6_);
    var
     Expect_test_collector$9 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _a$_(param){
     test(cst_red);
     var
      _bq_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$44),
         497,
         11861,
         11869,
         11875];
     return caml_call1(Expect_test_collector$9[1], _bq_);
    }
    var
     _ba_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$45),
        497,
        11861,
        11876,
        11915],
     _bb_ =
       [0,
        [0,
         _ak_,
         _aj_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$46),
          497,
          11861,
          11869,
          11875],
         _ba_],
        0],
     _bc_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$48),
        495,
        11804,
        11808,
        11916],
     _bd_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$8);
    caml_call9
     (Expect_test_collector$9[3],
      _bd_,
      _bc_,
      cst_css_gen_src_css_tokenizer_$47,
      _al_,
      0,
      _bb_,
      0,
      Inline_test_config,
      _a$_);
    var
     Expect_test_collector$10 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _be_(param){
     test(cst_url_http_wwww_google_com);
     test(cst_url_http_wwww_google_com$0);
     test(cst_url_http_wwww_google_com$1);
     test(cst_url_http_wwww_google_com$2);
     test(cst_url_http_wwww_google_com$3);
     var
      _bp_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$49),
         506,
         12188,
         12196,
         12202];
     return caml_call1(Expect_test_collector$10[1], _bp_);
    }
    var
     _bf_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$50),
        507,
        12203,
        12211,
        12468],
     _bg_ =
       [0,
        [0,
         _an_,
         _am_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$51),
          506,
          12188,
          12196,
          12202],
         _bf_],
        0],
     _bh_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$53),
        500,
        11925,
        11929,
        12469],
     _bi_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$9);
    caml_call9
     (Expect_test_collector$10[3],
      _bi_,
      _bh_,
      cst_css_gen_src_css_tokenizer_$52,
      _ao_,
      0,
      _bg_,
      0,
      Inline_test_config,
      _be_);
    var
     Expect_test_collector$11 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _bj_(param){
     test(cst_test_19abf2_2);
     test(cst_010_xFFa_o123_n_u_12345_aa);
     test(cst$11);
     var
      _bo_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$54),
         519,
         12675,
         12683,
         12689];
     return caml_call1(Expect_test_collector$11[1], _bo_);
    }
    var
     _bk_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$55),
        520,
        12690,
        12698,
        12793],
     _bl_ =
       [0,
        [0,
         _aq_,
         _ap_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$56),
          519,
          12675,
          12683,
          12689],
         _bk_],
        0],
     _bm_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_tokenizer_$58),
        515,
        12478,
        12482,
        12794],
     _bn_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b2813aff1a52f8875e7ce14896$10);
    caml_call9
     (Expect_test_collector$11[3],
      _bn_,
      _bm_,
      cst_css_gen_src_css_tokenizer_$57,
      _ar_,
      0,
      _bl_,
      0,
      Inline_test_config,
      _bj_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[6],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_tokenizer_$59,
     389,
     0,
     4585,
     _J_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_css_gen);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen_Css_tokenizer);
   var
    Css_gen_Css_tokenizer =
      [0,
       create,
       [0, t_of_sexp, sexp_of_t, equal],
       current,
       slice,
       current_text,
       source,
       next];
   runtime.caml_register_global
    (307, Css_gen_Css_tokenizer, cst_Css_gen_Css_tokenizer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen__Css_parser
//# unitInfo: Requires: Core, Core__List, Core__Or_error, Core__Sexp, Core__String, Core__Unit, Css_gen__Css_tokenizer, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Css_gen_Css_parser$0 = "Css_gen__Css_parser",
    cst_b7a9b3a8ca078e6eda4e6e123f$4 = "b7a9b3a8ca078e6eda4e6e123fe26992",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_parser_ml$28 = "css_gen/src/css_parser.ml",
    cst_flex_1_0_auto$2 = "flex: 1 0 auto";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = ";;;;;",
    value =
      "0 4px 8px 0 RGBA(var(--js-text-color-rgb), 0.12), 0 2px 4px 0 RGBA(var(--js-text-color-rgb), 0.08)",
    cst$0 = " --> ",
    cst = cst$2,
    Css_gen_Css_tokenizer = global_data.Css_gen__Css_tokenizer,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Sexp = global_data.Core__Sexp,
    Core_Unit = global_data.Core__Unit,
    Core_Or_error = global_data.Core__Or_error,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen_Css_parser$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Expect_test_collector[5][1], cst_css_gen_src_css_parser_ml$28);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_css_gen$0, cst);
   var
    cst_Expected_any = "Expected <any>",
    cst_Expected_value = "Expected <value>",
    cst_flex_1_0_auto$0 = cst_flex_1_0_auto$2,
    cst_flex_1_0_auto$1 = "flex: 1 0 auto;",
    cst_background_5d9ab2_url_img_ =
      'background: #5d9ab2 url("img_tree.png") no-repeat top left;margin-left: 200px',
    cst_flex_1_0_auto_other_sa = "flex: 1 0 auto ;; other : sa ",
    cst_css_gen_src_css_parser_ml$22 = cst_css_gen_src_css_parser_ml$28,
    cst_content =
      "content: '\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6'",
    _r_ =
      [0,
       "\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6"],
    cst_css_gen_src_css_parser_ml$17 = cst_css_gen_src_css_parser_ml$28,
    cst_flex_1_0_auto = cst_flex_1_0_auto$2,
    cst_content_Hello_World = "content: 'Hello World'",
    cst_content_foo = "content: foo;",
    cst_content_bar = "content: bar ",
    cst_css_gen_src_css_parser_ml$12 = cst_css_gen_src_css_parser_ml$28,
    cst_x = "x",
    cst_3 = "3",
    cst_3in = "3in",
    cst_3$0 = "3%",
    cst_fff = "#fff",
    cst_1_0_auto = "1 0 auto",
    cst_Hello_World = "'Hello World'",
    cst_rgb_0_0_0 = "rgb(0,0,0)",
    cst_css_gen_src_css_parser_ml$7 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml = cst_css_gen_src_css_parser_ml$28,
    _f_ = [0, "validate_value value"],
    cst_css_gen_src_css_parser_ml$0 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$1 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$2 = cst_css_gen_src_css_parser_ml$28,
    _g_ =
      [1,
       "\n    Number\n    White_space\n    Dimension\n    White_space\n    Dimension\n    White_space\n    Number\n    White_space\n    Function\n    Function\n    Ident\n    Rparen\n    Comma\n    White_space\n    Number\n    Rparen\n    Comma\n    White_space\n    Number\n    White_space\n    Dimension\n    White_space\n    Dimension\n    White_space\n    Number\n    White_space\n    Function\n    Function\n    Ident\n    Rparen\n    Comma\n    White_space\n    Number\n    Rparen "],
    _h_ = [0, cst$2],
    cst_css_gen_src_css_parser_ml$3 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$4 = cst_css_gen_src_css_parser_ml$28,
    _i_ = [1, '\n    ("validate_value value" (Ok ())) '],
    _j_ = [0, cst$2],
    _k_ = [0, cst$2],
    cst_css_gen_src_css_parser_ml$5 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$6 = cst_css_gen_src_css_parser_ml$28,
    cst_b7a9b3a8ca078e6eda4e6e123f = cst_b7a9b3a8ca078e6eda4e6e123f$4,
    cst_css_gen_src_css_parser_ml$8 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$9 = cst_css_gen_src_css_parser_ml$28,
    _l_ =
      [1,
       "\n      x --> (Ok ())\n      3 --> (Ok ())\n      3in --> (Ok ())\n      3% --> (Ok ())\n      #fff --> (Ok ())\n      1 0 auto --> (Ok ())\n      'Hello World' --> (Ok ())\n      rgb(0,0,0) --> (Ok ()) "],
    _m_ = [0, cst$2],
    _n_ = [0, "values"],
    cst_css_gen_src_css_parser_ml$10 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$11 = cst_css_gen_src_css_parser_ml$28,
    cst_b7a9b3a8ca078e6eda4e6e123f$0 = cst_b7a9b3a8ca078e6eda4e6e123f$4,
    cst_css_gen_src_css_parser_ml$13 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$14 = cst_css_gen_src_css_parser_ml$28,
    _o_ =
      [1,
       '\n      flex: 1 0 auto --> (Ok (flex "1 0 auto"))\n      content: \'Hello World\' --> (Ok (content "\'Hello World\'"))\n      content: foo; --> (Error ("Unexpected token" (expected Eof) (got Semi_colon)))\n      content: bar  --> (Ok (content bar)) '],
    _p_ = [0, cst$2],
    _q_ = [0, "declaration"],
    cst_css_gen_src_css_parser_ml$15 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$16 = cst_css_gen_src_css_parser_ml$28,
    cst_b7a9b3a8ca078e6eda4e6e123f$1 = cst_b7a9b3a8ca078e6eda4e6e123f$4,
    cst_css_gen_src_css_parser_ml$18 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$19 = cst_css_gen_src_css_parser_ml$28,
    _s_ =
      [1,
       "\n    content: '\xe2\x86\x90 \xe2\x86\x91 \xe2\x86\x92 \xe2\x86\x93 \xe2\x86\x94 \xe2\x86\x95 \xe2\x87\xaa \xe2\x86\xb9 \xe2\xac\x88 \xe2\x86\x98 \xe2\x9f\xbe \xe2\x86\xb6' --> (Ok\n     (content\n      \"'\\226\\134\\144 \\226\\134\\145 \\226\\134\\146 \\226\\134\\147 \\226\\134\\148 \\226\\134\\149 \\226\\135\\170 \\226\\134\\185 \\226\\172\\136 \\226\\134\\152 \\226\\159\\190 \\226\\134\\182'\"))\n    \"\\226\\134\\144 \\226\\134\\145 \\226\\134\\146 \\226\\134\\147 \\226\\134\\148 \\226\\134\\149 \\226\\135\\170 \\226\\134\\185 \\226\\172\\136 \\226\\134\\152 \\226\\159\\190 \\226\\134\\182\" "],
    _t_ = [0, cst$2],
    _u_ = [0, "unicode"],
    cst_css_gen_src_css_parser_ml$20 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$21 = cst_css_gen_src_css_parser_ml$28,
    cst_b7a9b3a8ca078e6eda4e6e123f$2 = cst_b7a9b3a8ca078e6eda4e6e123f$4,
    cst_css_gen_src_css_parser_ml$23 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$24 = cst_css_gen_src_css_parser_ml$28,
    _v_ =
      [1,
       '\n    flex: 1 0 auto --> (Ok ((flex "1 0 auto")))\n    flex: 1 0 auto; --> (Ok ((flex "1 0 auto")))\n    background: #5d9ab2 url("img_tree.png") no-repeat top left;margin-left: 200px --> (Ok\n     ((background "#5d9ab2 url(\\"img_tree.png\\") no-repeat top left")\n      (margin-left 200px)))\n    ;;;;; --> (Ok ())\n    flex: 1 0 auto ;; other : sa  --> (Ok ((flex "1 0 auto") (other sa))) '],
    _w_ = [0, cst$2],
    _x_ = [0, "declaration list"],
    cst_css_gen_src_css_parser_ml$25 = cst_css_gen_src_css_parser_ml$28,
    cst_css_gen_src_css_parser_ml$26 = cst_css_gen_src_css_parser_ml$28,
    cst_b7a9b3a8ca078e6eda4e6e123f$3 = cst_b7a9b3a8ca078e6eda4e6e123f$4,
    cst_s_sexp_arg_Or_error_t = "%s --> %{sexp:arg Or_error.t}\n",
    _c_ = [12, 10, 0],
    _d_ = [0, 0],
    cst_Expected_declaration = "Expected <declaration>",
    _a_ = [0, "got"],
    _b_ = [0, "expected"],
    cst_Unexpected_token = "Unexpected token",
    cst_css_gen_src_css_parser_ml$27 = cst_css_gen_src_css_parser_ml$28,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen_Css_parser = cst_Css_gen_Css_parser$0;
   function next(ct){
    for(;;){
     caml_call1(Css_gen_Css_tokenizer[7], ct);
     var _aJ_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _aJ_, 20)) return;
    }
   }
   function skip_white_space(ct){
    for(;;){
     var _aI_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _aI_, 10)) return;
     next(ct);
    }
   }
   function accept(ct, expected){
    var got = caml_call1(Css_gen_Css_tokenizer[3], ct);
    return caml_call2(Css_gen_Css_tokenizer[2][3], got, expected)
            ? (next(ct), 1)
            : 0;
   }
   function expect(ct, expected){
    var got = caml_call1(Css_gen_Css_tokenizer[3], ct);
    if(caml_call2(Css_gen_Css_tokenizer[2][3], got, expected))
     return next(ct);
    var
     _aF_ =
       [0,
        [1, [0, _a_, [0, caml_call1(Css_gen_Css_tokenizer[2][2], got), 0]]],
        0],
     _aG_ =
       [0,
        [1,
         [0, _b_, [0, caml_call1(Css_gen_Css_tokenizer[2][2], expected), 0]]],
        _aF_],
     _aH_ =
       [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unexpected_token), _aG_]];
    return caml_call1(Core[253], _aH_);
   }
   function many(ct, f){for(;;) if(! caml_call1(f, ct)) return;}
   function any(ct){
    switch(caml_call1(Css_gen_Css_tokenizer[3], ct)){
      case 1:
       next(ct);
       skip_white_space(ct);
       many(ct, any);
       expect(ct, 17);
       var res = 1;
       break;
      case 14:
       next(ct);
       skip_white_space(ct);
       expect_any(ct);
       expect(ct, 15);
       var res = 1;
       break;
      case 16:
       next(ct);
       skip_white_space(ct);
       expect_any(ct);
       expect(ct, 17);
       var res = 1;
       break;
      case 18:
       var res = 0; break;
      case 15:
      case 17:
      case 19:
       var res = 0; break;
      case 2:
      case 11:
      case 12:
       var res = 0; break;
      case 10:
      case 20:
      case 21:
      case 22:
       var res = 0; break;
      default: next(ct); var res = 1;
    }
    if(res) skip_white_space(ct);
    return res;
   }
   function expect_any(ct){
    if(any(ct)) return;
    var _aE_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_any);
    return caml_call1(Core[253], _aE_);
   }
   function value0(ct){
    var _az_ = any(ct);
    if(_az_)
     var _aA_ = _az_;
    else{
     var
      _aB_ =
        accept(ct, 18)
         ? (skip_white_space
            (ct),
           many
            (ct,
             function(ct){
              var _aC_ = value0(ct);
              if(_aC_)
               var _aD_ = _aC_;
              else{
               if(accept(ct, 12)){skip_white_space(ct); return 1;}
               var _aD_ = 0;
              }
              return _aD_;
             }),
           expect(ct, 19),
           skip_white_space(ct),
           1)
         : 0;
     if(_aB_)
      var _aA_ = _aB_;
     else{if(accept(ct, 2)){skip_white_space(ct); return 1;} var _aA_ = 0;}
    }
    return _aA_;
   }
   function expect_value(ct){
    var _ax_ = value0(ct) ? (many(ct, value0), 1) : 0;
    if(_ax_) return 0;
    var _ay_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_value);
    return caml_call1(Core[253], _ay_);
   }
   function declaration(ct){
    var
     match = caml_call1(Css_gen_Css_tokenizer[4], ct),
     ident_len = match[2],
     ident_start = match[1];
    if(! accept(ct, 0)) return 0;
    skip_white_space(ct);
    expect(ct, 11);
    skip_white_space(ct);
    var value_start = caml_call1(Css_gen_Css_tokenizer[4], ct)[1];
    expect_value(ct);
    var
     next_token_start = caml_call1(Css_gen_Css_tokenizer[4], ct)[1],
     source = caml_call1(Css_gen_Css_tokenizer[6], ct),
     _av_ =
       caml_call3
        (Core_String[2],
         source,
         value_start,
         next_token_start - value_start | 0),
     _aw_ = caml_call2(Core_String[68], 0, _av_);
    return [0,
            [0,
             caml_call3(Core_String[2], source, ident_start, ident_len),
             _aw_]];
   }
   function expect_declaration(ct){
    var match = declaration(ct);
    if(match){
     var match$0 = match[1], value = match$0[2], field = match$0[1];
     return [0, field, value];
    }
    var _au_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Expected_declaration);
    return caml_call1(Core[253], _au_);
   }
   function expect_declaration_list(ct){
    var res = [0, 0];
    function add(kv){
     if(! kv) return;
     var match = kv[1], v = match[2], k = match[1];
     res[1] = [0, [0, k, v], res[1]];
     return;
    }
    skip_white_space(ct);
    add(declaration(ct));
    many
     (ct,
      function(ct){
       return accept(ct, 12)
               ? (skip_white_space(ct), add(declaration(ct)), 1)
               : 0;
      });
    return caml_call1(Core_List[34], res[1]);
   }
   function parse(parser_f, s){
    var ct = caml_call1(Css_gen_Css_tokenizer[1], s);
    for(;;){
     var _as_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
     if(! caml_call2(Css_gen_Css_tokenizer[2][3], _as_, 20)){
      var
       _at_ =
         function(param){
          var res = caml_call1(parser_f, ct);
          expect(ct, 21);
          return res;
         };
      return caml_call2(Core_Or_error[33], 0, _at_);
     }
     caml_call1(Css_gen_Css_tokenizer[7], ct);
    }
   }
   function validate_value(_ar_){return parse(expect_value, _ar_);}
   function parse_declaration_list(s){
    return parse(expect_declaration_list, s);
   }
   function test_parser(p, sexp_of_arg, s){
    var
     r = parse(p, s),
     _ap_ =
       [0,
        [2,
         0,
         [11,
          cst$0,
          [24,
           _d_,
           function(param, custom_printf_002){
            var
             _aq_ =
               caml_call2(Core_Or_error[13], sexp_of_arg, custom_printf_002);
            return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _aq_);
           },
           _c_]]],
        cst_s_sexp_arg_Or_error_t];
    return caml_call3(Core[250], _ap_, s, r);
   }
   function _e_(param){
    var
     Expect_test_collector$0 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _y_(param){
     var ct = caml_call1(Css_gen_Css_tokenizer[1], value);
     for(;;){
      var _aj_ = caml_call1(Css_gen_Css_tokenizer[3], ct);
      if(caml_call2(Css_gen_Css_tokenizer[2][3], _aj_, 21)) break;
      var
       _ak_ = caml_call1(Css_gen_Css_tokenizer[3], ct),
       _al_ = caml_call1(Css_gen_Css_tokenizer[2][2], _ak_);
      caml_call2(Core[248], 0, _al_);
      caml_call1(Css_gen_Css_tokenizer[7], ct);
     }
     var
      _am_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml),
         208,
         5043,
         5051,
         5057];
     caml_call1(Expect_test_collector$0[1], _am_);
     var
      x_003 = validate_value(value),
      _an_ =
        [1, [0, _f_, [0, caml_call2(Core_Or_error[13], Core[518], x_003), 0]]];
     caml_call2(Core[248], 0, _an_);
     var
      _ao_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$0),
         245,
         5585,
         5593,
         5599];
     return caml_call1(Expect_test_collector$0[1], _ao_);
    }
    var
     _z_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$1),
        209,
        5058,
        5066,
        5515],
     _A_ =
       [0,
        [0,
         _h_,
         _g_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$2),
          208,
          5043,
          5051,
          5057],
         _z_],
        0],
     _B_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$3),
        245,
        5585,
        5600,
        5642],
     _C_ =
       [0,
        [0,
         _j_,
         _i_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$4),
          245,
          5585,
          5593,
          5599],
         _B_],
        _A_],
     _D_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$6),
        202,
        4845,
        4849,
        5643],
     _E_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b7a9b3a8ca078e6eda4e6e123f);
    caml_call9
     (Expect_test_collector$0[3],
      _E_,
      _D_,
      cst_css_gen_src_css_parser_ml$5,
      _k_,
      0,
      _C_,
      0,
      Inline_test_config,
      _y_);
    var
     Expect_test_collector$1 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _F_(param){
     var _ag_ = Core_Unit[15];
     function test(_ai_){return test_parser(expect_value, _ag_, _ai_);}
     test(cst_x);
     test(cst_3);
     test(cst_3in);
     test(cst_3$0);
     test(cst_fff);
     test(cst_1_0_auto);
     test(cst_Hello_World);
     test(cst_rgb_0_0_0);
     var
      _ah_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$7),
         259,
         5905,
         5913,
         5919];
     return caml_call1(Expect_test_collector$1[1], _ah_);
    }
    var
     _G_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$8),
        260,
        5920,
        5928,
        6127],
     _H_ =
       [0,
        [0,
         _m_,
         _l_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$9),
          259,
          5905,
          5913,
          5919],
         _G_],
        0],
     _I_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$11),
        249,
        5652,
        5656,
        6128],
     _J_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b7a9b3a8ca078e6eda4e6e123f$0);
    caml_call9
     (Expect_test_collector$1[3],
      _J_,
      _I_,
      cst_css_gen_src_css_parser_ml$10,
      _n_,
      0,
      _H_,
      0,
      Inline_test_config,
      _F_);
    var
     Expect_test_collector$2 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _K_(param){
     function _ad_(param){
      var
       arg1_005 = param[2],
       arg0_004 = param[1],
       res0_006 = caml_call1(Core[471], arg0_004),
       res1_007 = caml_call1(Core[471], arg1_005);
      return [1, [0, res0_006, [0, res1_007, 0]]];
     }
     function test(_af_){return test_parser(expect_declaration, _ad_, _af_);}
     test(cst_flex_1_0_auto);
     test(cst_content_Hello_World);
     test(cst_content_foo);
     test(cst_content_bar);
     var
      _ae_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$12),
         279,
         6491,
         6499,
         6505];
     return caml_call1(Expect_test_collector$2[1], _ae_);
    }
    var
     _L_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$13),
        280,
        6506,
        6514,
        6759],
     _M_ =
       [0,
        [0,
         _p_,
         _o_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$14),
          279,
          6491,
          6499,
          6505],
         _L_],
        0],
     _N_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$16),
        271,
        6137,
        6141,
        6760],
     _O_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b7a9b3a8ca078e6eda4e6e123f$1);
    caml_call9
     (Expect_test_collector$2[3],
      _O_,
      _N_,
      cst_css_gen_src_css_parser_ml$15,
      _q_,
      0,
      _M_,
      0,
      Inline_test_config,
      _K_);
    var
     Expect_test_collector$3 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _P_(param){
     test_parser
      (expect_declaration,
       function(param){
        var
         arg1_009 = param[2],
         arg0_008 = param[1],
         res0_010 = caml_call1(Core[471], arg0_008),
         res1_011 = caml_call1(Core[471], arg1_009);
        return [1, [0, res0_010, [0, res1_011, 0]]];
       },
       cst_content);
     var _ab_ = caml_call1(Core_Sexp[83], _r_);
     caml_call1(Core[32], _ab_);
     var
      _ac_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$17),
         291,
         7053,
         7061,
         7067];
     return caml_call1(Expect_test_collector$3[1], _ac_);
    }
    var
     _Q_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$18),
        292,
        7068,
        7076,
        7496],
     _R_ =
       [0,
        [0,
         _t_,
         _s_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$19),
          291,
          7053,
          7061,
          7067],
         _Q_],
        0],
     _S_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$21),
        287,
        6769,
        6773,
        7497],
     _T_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b7a9b3a8ca078e6eda4e6e123f$2);
    caml_call9
     (Expect_test_collector$3[3],
      _T_,
      _S_,
      cst_css_gen_src_css_parser_ml$20,
      _u_,
      0,
      _R_,
      0,
      Inline_test_config,
      _P_);
    var
     Expect_test_collector$4 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _U_(param){
     function _Z_(x_016){
      function _aa_(param){
       var
        arg1_013 = param[2],
        arg0_012 = param[1],
        res0_014 = caml_call1(Core[471], arg0_012),
        res1_015 = caml_call1(Core[471], arg1_013);
       return [1, [0, res0_014, [0, res1_015, 0]]];
      }
      return caml_call2(Core[421], _aa_, x_016);
     }
     function test(_$_){
      return test_parser(expect_declaration_list, _Z_, _$_);
     }
     test(cst_flex_1_0_auto$0);
     test(cst_flex_1_0_auto$1);
     test(cst_background_5d9ab2_url_img_);
     test(cst$1);
     test(cst_flex_1_0_auto_other_sa);
     var
      ___ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$22),
         307,
         7863,
         7871,
         7877];
     return caml_call1(Expect_test_collector$4[1], ___);
    }
    var
     _V_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$23),
        308,
        7878,
        7886,
        8272],
     _W_ =
       [0,
        [0,
         _w_,
         _v_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$24),
          307,
          7863,
          7871,
          7877],
         _V_],
        0],
     _X_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_parser_ml$26),
        299,
        7506,
        7510,
        8273],
     _Y_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_b7a9b3a8ca078e6eda4e6e123f$3);
    caml_call9
     (Expect_test_collector$4[3],
      _Y_,
      _X_,
      cst_css_gen_src_css_parser_ml$25,
      _x_,
      0,
      _W_,
      0,
      Inline_test_config,
      _U_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[6],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_parser_ml$27,
     200,
     0,
     3484,
     _e_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_css_gen);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen_Css_parser);
   var Css_gen_Css_parser = [0, validate_value, parse_declaration_list];
   runtime.caml_register_global
    (106, Css_gen_Css_parser, cst_Css_gen_Css_parser$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Css_gen
//# unitInfo: Requires: Assert_failure, Base__Field, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Core, Core__Int, Core__List, Core__Option, Core__Or_error, Core__Percent, Core__Sexpable, Core__Stable, Core__String, Core__Time_ns, Css_gen__Css_parser, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$40 = "",
    cst$41 = " ",
    cst$43 = "%",
    cst$45 = "%,",
    cst$42 = ")",
    cst$44 = ",",
    cst_137ca25006cdd4c0890902a6ef$1 = "137ca25006cdd4c0890902a6ef98fe65",
    cst_Auto$0 = "Auto",
    cst_Ch$0 = "Ch",
    cst_Css_gen$0 = "Css_gen",
    cst_Em$0 = "Em",
    cst_Em_float$0 = "Em_float",
    cst_HSLA$0 = "HSLA",
    cst_Hex$0 = "Hex",
    cst_Inherit$0 = "Inherit",
    cst_Initial$0 = "Initial",
    cst_Name$0 = "Name",
    cst_Percent$0 = "Percent",
    cst_Pt$0 = "Pt",
    cst_Px$0 = "Px",
    cst_Px_float$0 = "Px_float",
    cst_RGBA$0 = "RGBA",
    cst_Raw$0 = "Raw",
    cst_Rem$0 = "Rem",
    cst_Var$0 = "Var",
    cst_Vh$0 = "Vh",
    cst_Vw$0 = "Vw",
    cst_a$3 = "a",
    cst_auto$3 = "auto",
    cst_b$1 = "b",
    cst_black$1 = "black",
    cst_both$1 = "both",
    cst_bottom$1 = "bottom",
    cst_center$2 = "center",
    cst_collapse$1 = "collapse",
    cst_css_gen$0 = "css_gen",
    cst_css_gen_src_css_gen_ml$13 = "css_gen/src/css_gen.ml",
    cst_css_gen_src_css_gen_ml_Aut = "css_gen/src/css_gen.ml.Auto_or_length.t",
    cst_css_gen_src_css_gen_ml_Col$2 = "css_gen/src/css_gen.ml.Color.T.HSLA.t",
    cst_css_gen_src_css_gen_ml_Col$3 = "css_gen/src/css_gen.ml.Color.T.RGBA.t",
    cst_css_gen_src_css_gen_ml_Col$1 = "css_gen/src/css_gen.ml.Color.T.t",
    cst_css_gen_src_css_gen_ml_Len = "css_gen/src/css_gen.ml.Length.t",
    cst_css_gen_src_css_gen_ml_css =
      "css_gen/src/css_gen.ml.css_global_values",
    cst_css_global_values$1 = "css_global_values",
    cst_dashed$1 = "dashed",
    cst_dotted$1 = "dotted",
    cst_double$1 = "double",
    cst_em = "em",
    cst_flex$1 = "flex",
    cst_flex_end$1 = "flex-end",
    cst_flex_start$1 = "flex-start",
    cst_g$1 = "g",
    cst_h$1 = "h",
    cst_hidden$2 = "hidden",
    cst_inherit$18 = "inherit",
    cst_initial$18 = "initial",
    cst_l$1 = "l",
    cst_left$2 = "left",
    cst_none$6 = "none",
    cst_normal$4 = "normal",
    cst_nowrap$1 = "nowrap",
    cst_px = "px",
    cst_r$1 = "r",
    cst_red$1 = "red",
    cst_right$2 = "right",
    cst_s$1 = "s",
    cst_solid$1 = "solid",
    cst_t$13 = "t",
    cst_top$1 = "top",
    cst_visible$1 = "visible",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$39 = '";"',
    cst$38 = cst$40,
    cst$35 = cst$41,
    cst$36 = cst$41,
    cst$37 = cst$40,
    cst$34 = cst$40,
    cst$33 = cst$41,
    cst$31 = cst$40,
    cst$32 = cst$40,
    cst$30 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$40,
    cst$26 = ": ",
    cst$27 = cst$40,
    cst$25 = cst$40,
    cst$15 = cst$40,
    cst$16 = cst$40,
    cst$17 = cst$40,
    cst$18 = cst$40,
    cst$19 = cst$40,
    cst$21 = cst$40,
    cst$22 = cst$40,
    cst$23 = cst$40,
    cst$24 = cst$40,
    cst$20 = cst$40,
    cst$1 = cst$44,
    cst$2 = cst$44,
    cst$3 = cst$44,
    cst$4 = cst$40,
    cst$5 = cst$44,
    cst$6 = cst$44,
    cst$7 = cst$40,
    cst$8 = cst$45,
    cst$9 = cst$45,
    cst$10 = cst$44,
    cst$11 = cst$40,
    cst$12 = cst$45,
    cst$13 = cst$44,
    cst$14 = cst$40,
    cst$0 = cst$40,
    err = [2, cst_css_gen_src_css_gen_ml_Col$1],
    cst = cst$40,
    error_source_007 = "css_gen/src/css_gen.ml.Stable.V1.t",
    error_source_027 = cst_css_gen_src_css_gen_ml_css,
    error_source_029 = cst_css_gen_src_css_gen_ml_css,
    error_source_052 = cst_css_gen_src_css_gen_ml_Col$3,
    error_source_089 = cst_css_gen_src_css_gen_ml_Col$2,
    error_source_114 = cst_css_gen_src_css_gen_ml_Col$1,
    error_source_128 = cst_css_gen_src_css_gen_ml_Col$1,
    error_source_161 = cst_css_gen_src_css_gen_ml_Len,
    error_source_193 = cst_css_gen_src_css_gen_ml_Len,
    error_source_241 = cst_css_gen_src_css_gen_ml_Aut,
    error_source_243 = cst_css_gen_src_css_gen_ml_Aut,
    Core = global_data.Core,
    Core_Percent = global_data.Core__Percent,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Core_Int = global_data.Core__Int,
    Core_Time_ns = global_data.Core__Time_ns,
    Stdlib_String = global_data.Stdlib__String,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Css_gen_Css_parser = global_data.Css_gen__Css_parser,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write;
   global_data.Base__Field;
   var
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Stable = global_data.Core__Stable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Sexpable = global_data.Core__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Css_gen$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_css_gen$0);
   caml_call1(Expect_test_collector[5][1], cst_css_gen_src_css_gen_ml$13);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_css_gen$0, cst);
   var
    cst_red = cst_red$1,
    cst_ff0000 = "#ff0000",
    cst_black = cst_black$1,
    _bw_ = [0, 3404198, 90],
    cst_css_gen_src_css_gen_ml$4 = cst_css_gen_src_css_gen_ml$13,
    cst_red$0 = cst_red$1,
    cst_black$0 = cst_black$1,
    cst_css_gen_src_css_gen_ml$5 = cst_css_gen_src_css_gen_ml$13,
    _br_ = [0, -81804554],
    _bs_ = [0, 1],
    cst_content = "content",
    cst_css_gen_src_css_gen_ml = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$0 = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$1 = cst_css_gen_src_css_gen_ml$13,
    _bt_ =
      [1,
       '\n    flex: 1.000000 1.000000 auto;overflow: scroll\n    flex: 1.000000 1.000000 auto;overflow: scroll\n    display: inline-flex;flex-direction: column;flex-wrap: nowrap;border: dashed\n    display: inline-flex;flex-direction: column;flex-wrap: nowrap;border: dashed\n    color: rgb(100,100,100)\n    color: rgb(100,100,100)\n    color: hsl(100,75%,60%)\n    color: hsl(100,75%,60%)\n    content: ";"\n    content: ";" '],
    _bu_ = [0, cst$40],
    _bv_ = [0, "to_string_css -> of_string_css_exn -> to_string_css"],
    cst_css_gen_src_css_gen_ml$2 = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$3 = cst_css_gen_src_css_gen_ml$13,
    cst_137ca25006cdd4c0890902a6ef = cst_137ca25006cdd4c0890902a6ef$1,
    cst_css_gen_src_css_gen_ml$6 = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$7 = cst_css_gen_src_css_gen_ml$13,
    _bx_ =
      [1,
       " background-image: linear-gradient(90deg, black 0.000000%, #ff0000 20.000000%, red 40.000000%, rgba(100,50,30,0.75) 100.000000%) "],
    _by_ = [0, cst$40],
    cst_css_gen_src_css_gen_ml$8 = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$9 = cst_css_gen_src_css_gen_ml$13,
    _bz_ =
      [1,
       " background-image: radial-gradient(black 0.000000%, red 100.000000%) "],
    _bA_ = [0, cst$40],
    _bB_ = [0, "gradients"],
    cst_css_gen_src_css_gen_ml$10 = cst_css_gen_src_css_gen_ml$13,
    cst_css_gen_src_css_gen_ml$11 = cst_css_gen_src_css_gen_ml$13,
    cst_137ca25006cdd4c0890902a6ef$0 = cst_137ca25006cdd4c0890902a6ef$1,
    cst_user_select = "user-select",
    cst_text = "text",
    cst_none$5 = cst_none$6,
    cst_auto$2 = cst_auto$3,
    cst_all = "all",
    cst_animation_delay = "animation-delay",
    cst_animation_iteration_count = "animation-iteration-count",
    cst_animation_timing_function = "animation-timing-function",
    cst_none$4 = cst_none$6,
    cst_backwards = "backwards",
    cst_both$0 = cst_both$1,
    cst_initial$17 = cst_initial$18,
    cst_forwards = "forwards",
    cst_inherit$17 = cst_inherit$18,
    cst_animation_fill_mode = "animation-fill-mode",
    cst_initial$16 = cst_initial$18,
    cst_inherit$16 = cst_inherit$18,
    cst_alternate_reverse = "alternate-reverse",
    cst_reverse = "reverse",
    cst_normal$3 = cst_normal$4,
    cst_alternate = "alternate",
    cst_animation_direction = "animation-direction",
    _bp_ = [0, cst_s$1, 0],
    cst_animation_duration = "animation-duration",
    cst_animation_name = "animation-name",
    cst_none$3 = cst_none$6,
    cst_both = cst_both$1,
    cst_initial$15 = cst_initial$18,
    cst_horizontal = "horizontal",
    cst_inherit$15 = cst_inherit$18,
    cst_vertical = "vertical",
    cst_resize = "resize",
    cst_align_self = "align-self",
    cst_order = "order",
    cst_flex$0 = cst_flex$1,
    cst_column_reverse = "column-reverse",
    cst_row_reverse = "row-reverse",
    cst_row = "row",
    cst_column = "column",
    cst_wrap = "wrap",
    cst_nowrap$0 = cst_nowrap$1,
    cst_wrap_reverse = "wrap-reverse",
    cst_align_items = "align-items",
    cst_justify_content = "justify-content",
    cst_flex_wrap = "flex-wrap",
    cst_flex_direction = "flex-direction",
    cst_center$1 = cst_center$2,
    cst_space_evenly = "space-evenly",
    cst_flex_start$0 = cst_flex_start$1,
    cst_space_between = "space-between",
    cst_flex_end$0 = cst_flex_end$1,
    cst_space_around = "space-around",
    cst_center$0 = cst_center$2,
    cst_auto$1 = cst_auto$3,
    cst_flex_start = cst_flex_start$1,
    cst_baseline = "baseline",
    cst_flex_end = cst_flex_end$1,
    cst_stretch = "stretch",
    cst_none$2 = cst_none$6,
    cst_underline = "underline",
    cst_overline = "overline",
    cst_initial$13 = cst_initial$18,
    cst_inherit$13 = cst_inherit$18,
    cst_line_through = "line-through",
    _bo_ = [0, cst$41],
    cst_wavy = "wavy",
    cst_initial$14 = cst_initial$18,
    cst_solid$0 = cst_solid$1,
    cst_inherit$14 = cst_inherit$18,
    cst_double$0 = cst_double$1,
    cst_dashed$0 = cst_dashed$1,
    cst_dotted$0 = cst_dotted$1,
    cst_text_decoration = "text-decoration",
    cst_border_radius = "border-radius",
    cst_collapse$0 = cst_collapse$1,
    cst_initial$12 = cst_initial$18,
    cst_inherit$12 = cst_inherit$18,
    cst_separate = "separate",
    cst_border_collapse = "border-collapse",
    cst_outline = "outline",
    _bn_ = [0, -57574468],
    _bm_ = [0, 847852583],
    _bl_ = [0, 437082891],
    _bk_ = [0, 4202101],
    cst_border_left = "border-left",
    cst_border_bottom = "border-bottom",
    cst_border_top = "border-top",
    cst_border_right = "border-right",
    cst_border = "border",
    cst_none$1 = cst_none$6,
    cst_initial$11 = cst_initial$18,
    cst_solid = cst_solid$1,
    cst_hidden$1 = cst_hidden$2,
    cst_ridge = "ridge",
    cst_inherit$11 = cst_inherit$18,
    cst_double = cst_double$1,
    cst_dotted = cst_dotted$1,
    cst_dashed = cst_dashed$1,
    cst_inset = "inset",
    cst_groove = "groove",
    cst_outset = "outset",
    cst_none$0 = cst_none$6,
    cst_left$1 = cst_left$2,
    cst_initial$10 = cst_initial$18,
    cst_inherit$10 = cst_inherit$18,
    cst_right$1 = cst_right$2,
    cst_float = "float",
    _bi_ = [0, cst$42, 0],
    cst_radial_gradient = "radial-gradient(",
    _bj_ = [0, cst$42, 0],
    cst_deg = "deg, ",
    cst_linear_gradient = "linear-gradient(",
    _bh_ = [0, cst$42, 0],
    cst_url = "url(",
    cst_background_image = "background-image",
    _bf_ = [0, cst$43, 0],
    _bg_ = [0, ", "],
    cst_fill = "fill",
    cst_background_color = "background-color",
    cst_color = "color",
    cst_initial$9 = cst_initial$18,
    cst_small_caps = "small-caps",
    cst_inherit$9 = cst_inherit$18,
    cst_normal$2 = cst_normal$4,
    cst_font_variant = "font-variant",
    cst_bold = "bold",
    cst_initial$8 = cst_initial$18,
    cst_bolder = "bolder",
    cst_inherit$8 = cst_inherit$18,
    cst_lighter = "lighter",
    cst_normal$1 = cst_normal$4,
    cst_font_weight = "font-weight",
    cst_italic = "italic",
    cst_initial$7 = cst_initial$18,
    cst_inherit$7 = cst_inherit$18,
    cst_normal$0 = cst_normal$4,
    cst_oblique = "oblique",
    cst_font_style = "font-style",
    _be_ = [0, cst$44],
    cst_font_family = "font-family",
    cst_initial$6 = cst_initial$18,
    cst_pre = "pre",
    cst_inherit$6 = cst_inherit$18,
    cst_nowrap = cst_nowrap$1,
    cst_normal = cst_normal$4,
    cst_pre_line = "pre-line",
    cst_pre_wrap = "pre-wrap",
    cst_white_space = "white-space",
    cst_opacity = "opacity",
    cst_z_index = "z-index",
    cst_auto$0 = cst_auto$3,
    cst_initial$5 = cst_initial$18,
    cst_hidden$0 = cst_hidden$2,
    cst_scroll = "scroll",
    cst_inherit$5 = cst_inherit$18,
    cst_visible$0 = cst_visible$1,
    cst_collapse = cst_collapse$1,
    cst_initial$4 = cst_initial$18,
    cst_hidden = cst_hidden$2,
    cst_visible = cst_visible$1,
    cst_inherit$4 = cst_inherit$18,
    cst_visibility = "visibility",
    cst_none = cst_none$6,
    cst_flex = cst_flex$1,
    cst_table = "table",
    cst_list_item = "list-item",
    cst_initial$3 = cst_initial$18,
    cst_inline_grid = "inline-grid",
    cst_inline_flex = "inline-flex",
    cst_inherit$3 = cst_inherit$18,
    cst_inline_block = "inline-block",
    cst_inline = "inline",
    cst_block = "block",
    cst_inline_table = "inline-table",
    cst_display = "display",
    cst_initial$2 = cst_initial$18,
    cst_content_box = "content-box",
    cst_border_box = "border-box",
    cst_inherit$2 = cst_inherit$18,
    cst_box_sizing = "box-sizing",
    cst_sticky = "sticky",
    cst_static = "static",
    cst_absolute = "absolute",
    cst_relative = "relative",
    cst_fixed = "fixed",
    cst_position = "position",
    _bd_ = [0, ";"],
    cst_auto = cst_auto$3,
    _bc_ = [0, cst_Auto$0],
    cst_initial$1 = cst_initial$18,
    cst_inherit$1 = cst_inherit$18,
    _aW_ = [0, cst_em, 0],
    _aX_ = [0, "rem", 0],
    _aY_ = [0, "vw", 0],
    _aZ_ = [0, "vh", 0],
    _a0_ = [0, cst_px, 0],
    _a2_ = [0, "pt", 0],
    _a3_ = [0, cst_em, 0],
    _a4_ = [0, "ch", 0],
    _a5_ = [0, cst$43, 0],
    _a1_ = [0, cst_px, 0],
    _at_ = [0, cst_Em_float$0],
    _au_ = [0, cst_Rem$0],
    _av_ = [0, cst_Raw$0],
    _aw_ = [0, cst_Vw$0],
    _ax_ = [0, cst_Vh$0],
    _ay_ = [0, cst_Px$0],
    _aA_ = [0, cst_Pt$0],
    _aB_ = [0, cst_Em$0],
    _aC_ = [0, cst_Ch$0],
    _aD_ = [0, cst_Percent$0],
    _az_ = [0, cst_Px_float$0],
    cst_center = cst_center$2,
    cst_left = cst_left$2,
    cst_bottom = cst_bottom$1,
    cst_initial$0 = cst_initial$18,
    cst_super = "super",
    cst_middle = "middle",
    cst_top = cst_top$1,
    cst_sub = "sub",
    cst_right = cst_right$2,
    cst_justify = "justify",
    cst_inherit$0 = cst_inherit$18,
    cst_initial = cst_initial$18,
    cst_inherit = cst_inherit$18,
    _$_ = [0, cst$42, 0],
    cst_rgba = "rgba(",
    _aa_ = [0, cst$42, 0],
    cst_rgb = "rgb(",
    _ab_ = [0, cst$42, 0],
    cst_hsla = "hsla(",
    _ac_ = [0, "%)", 0],
    cst_hsl = "hsl(",
    ___ = [0, cst$42, 0],
    cst_var = "var(",
    _K_ = [0, cst_RGBA$0],
    _L_ = [0, cst_Name$0],
    _M_ = [0, cst_HSLA$0],
    _N_ = [0, cst_Hex$0],
    _J_ = [0, cst_Var$0],
    cst_css_gen_src_css_gen_ml_Col$0 = cst_css_gen_src_css_gen_ml_Col$2,
    _A_ = [0, cst_a$3],
    _B_ = [0, cst_l$1],
    _C_ = [0, cst_s$1],
    _D_ = [0, cst_h$1],
    _z_ = [0, cst_css_gen_src_css_gen_ml$13, 41, 6],
    cst_a$1 = cst_a$3,
    cst_l = cst_l$1,
    cst_s = cst_s$1,
    cst_h = cst_h$1,
    cst_css_gen_src_css_gen_ml_Col = cst_css_gen_src_css_gen_ml_Col$3,
    _q_ = [0, cst_a$3],
    _r_ = [0, cst_b$1],
    _s_ = [0, cst_g$1],
    _t_ = [0, cst_r$1],
    _p_ = [0, cst_css_gen_src_css_gen_ml$13, 29, 6],
    cst_a = cst_a$3,
    cst_b = cst_b$1,
    cst_g = cst_g$1,
    cst_r = cst_r$1,
    _o_ = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
    _f_ = [0, cst_Initial$0],
    _g_ = [0, cst_Inherit$0],
    cst_t = cst_t$13,
    cst_css_gen_src_css_gen_ml_7_4 = "css_gen/src/css_gen.ml:7:4",
    cst_t$0 = cst_t$13,
    cst_Initial = cst_Initial$0,
    cst_Inherit = cst_Inherit$0,
    cst_css_gen_src_css_gen_ml_15_ = "css_gen/src/css_gen.ml:15:2",
    cst_css_global_values = cst_css_global_values$1,
    cst_css_gen_src_css_gen_ml_14_ = "css_gen/src/css_gen.ml:14:0",
    cst_css_global_values$0 = cst_css_global_values$1,
    cst_a$0 = cst_a$3,
    cst_b$0 = cst_b$1,
    cst_g$0 = cst_g$1,
    cst_r$0 = cst_r$1,
    cst_t$1 = cst_t$13,
    cst_css_gen_src_css_gen_ml_29_ = "css_gen/src/css_gen.ml:29:6",
    cst_t$2 = cst_t$13,
    cst_a$2 = cst_a$3,
    cst_l$0 = cst_l$1,
    cst_s$0 = cst_s$1,
    cst_h$0 = cst_h$1,
    cst_t$3 = cst_t$13,
    cst_css_gen_src_css_gen_ml_41_ = "css_gen/src/css_gen.ml:41:6",
    cst_t$4 = cst_t$13,
    cst_css_gen_src_css_gen_ml_58_ = "css_gen/src/css_gen.ml:58:8",
    cst_Var = cst_Var$0,
    cst_Hex = cst_Hex$0,
    cst_Name = cst_Name$0,
    cst_HSLA = cst_HSLA$0,
    cst_RGBA = cst_RGBA$0,
    cst_css_gen_src_css_gen_ml_53_ = "css_gen/src/css_gen.ml:53:6",
    cst_t$5 = cst_t$13,
    cst_css_gen_src_css_gen_ml_52_ = "css_gen/src/css_gen.ml:52:4",
    cst_t$6 = cst_t$13,
    cst_css_gen_src_css_gen_ml_101 = "css_gen/src/css_gen.ml:101:6",
    cst_Sub = "Sub",
    cst_Super = "Super",
    cst_Justify = "Justify",
    cst_Middle = "Middle",
    cst_Bottom = "Bottom",
    cst_Top = "Top",
    cst_Center = "Center",
    cst_Right = "Right",
    cst_Left = "Left",
    cst_css_gen_src_css_gen_ml_92_ = "css_gen/src/css_gen.ml:92:4",
    cst_t$7 = cst_t$13,
    cst_css_gen_src_css_gen_ml_91_ = "css_gen/src/css_gen.ml:91:2",
    cst_t$8 = cst_t$13,
    cst_css_gen_src_css_gen_ml_133 = "css_gen/src/css_gen.ml:133:6",
    cst_Vw = cst_Vw$0,
    cst_Vh = cst_Vh$0,
    cst_Px_float = cst_Px_float$0,
    cst_Px = cst_Px$0,
    cst_Pt = cst_Pt$0,
    cst_Percent = cst_Percent$0,
    cst_Em_float = cst_Em_float$0,
    cst_Em = cst_Em$0,
    cst_Rem = cst_Rem$0,
    cst_Ch = cst_Ch$0,
    cst_Raw = cst_Raw$0,
    cst_css_gen_src_css_gen_ml_122 = "css_gen/src/css_gen.ml:122:4",
    cst_t$9 = cst_t$13,
    cst_css_gen_src_css_gen_ml_121 = "css_gen/src/css_gen.ml:121:2",
    cst_t$10 = cst_t$13,
    cst_css_gen_src_css_gen_ml_159 = "css_gen/src/css_gen.ml:159:6",
    cst_Auto = cst_Auto$0,
    cst_css_gen_src_css_gen_ml_158 = "css_gen/src/css_gen.ml:158:4",
    cst_t$11 = cst_t$13,
    cst_css_gen_src_css_gen_ml_157 = "css_gen/src/css_gen.ml:157:2",
    cst_t$12 = cst_t$13,
    cst_left$0 = cst_left$2,
    cst_top$0 = cst_top$1,
    cst_bottom$0 = cst_bottom$1,
    cst_right$0 = cst_right$2,
    cst_overflow = "overflow",
    cst_overflow_x = "overflow-x",
    cst_overflow_y = "overflow-y",
    cst_font_size = "font-size",
    cst_text_align = "text-align",
    cst_horizontal_align = "horizontal-align",
    cst_vertical_align = "vertical-align",
    cst_width = "width",
    cst_min_width = "min-width",
    cst_max_width = "max-width",
    cst_height = "height",
    cst_min_height = "min-height",
    cst_max_height = "max-height",
    cst_padding_top = "padding-top",
    cst_padding_bottom = "padding-bottom",
    cst_padding_left = "padding-left",
    cst_padding_right = "padding-right",
    cst_margin_top = "margin-top",
    cst_margin_bottom = "margin-bottom",
    cst_margin_left = "margin-left",
    cst_margin_right = "margin-right",
    cst_border_spacing = "border-spacing",
    cst_css_gen_src_css_gen_ml$12 = cst_css_gen_src_css_gen_ml$13,
    cst_tests = "tests",
    cst_css_gen = cst_css_gen$0,
    cst_Css_gen = cst_Css_gen$0;
   function t_of_sexp(x_008){
    function _eY_(sexp_006){
     if(1 === sexp_006[0]){
      var _eZ_ = sexp_006[1];
      if(_eZ_){
       var _e0_ = _eZ_[2];
       if(_e0_ && ! _e0_[2]){
        var
         arg1_003 = _e0_[1],
         arg0_002 = _eZ_[1],
         res0_004 = caml_call1(Core_Stable[284], arg0_002),
         res1_005 = caml_call1(Core_Stable[284], arg1_003);
        return [0, res0_004, res1_005];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_007, 2, sexp_006);
    }
    return caml_call2(Core_Stable[272], _eY_, x_008);
   }
   function sexp_of_t(x_013){
    function _eX_(param){
     var
      arg1_010 = param[2],
      arg0_009 = param[1],
      res0_011 = caml_call1(Core_Stable[283], arg0_009),
      res1_012 = caml_call1(Core_Stable[283], arg1_010);
     return [1, [0, res0_011, [0, res1_012, 0]]];
    }
    return caml_call2(Core_Stable[271], _eX_, x_013);
   }
   function compare(a_014, b_015){
    function _eW_(a_016, b_017){
     var
      t_019 = a_016[2],
      t_018 = a_016[1],
      t_021 = b_017[2],
      t_020 = b_017[1],
      n = caml_call2(Core_Stable[356], t_018, t_020);
     return 0 === n ? caml_call2(Core_Stable[356], t_019, t_021) : n;
    }
    return caml_call3(Core_Stable[359], _eW_, a_014, b_015);
   }
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[7], [0, Core_Stable[60], [0, Core_Stable[60], 0]]),
    _b_ = caml_call1(Core_Stable[157], _a_),
    _c_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t), 0, _b_], 0],
    _d_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_7_4),
    group = caml_call2(Bin_prot_Shape[6], _d_, _c_),
    _e_ = caml_call1(Bin_prot_Shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[14], group, _e_), 0);
   function bin_size_t(v){
    function _eT_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _eU_ = caml_call1(Core_Stable[3], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _eU_),
      _eV_ = caml_call1(Core_Stable[3], v2);
     return caml_call2(Bin_prot_Common[23], size, _eV_);
    }
    return caml_call2(Core_Stable[18], _eT_, v);
   }
   function bin_write_t(buf, pos, v){
    function _eS_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Core_Stable[62], buf, pos, v1);
     return caml_call3(Core_Stable[62], buf, pos$0, v2);
    }
    return caml_call3(caml_call1(Core_Stable[159], _eS_), buf, pos, v);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    function _eR_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[64], buf, pos_ref),
      v2 = caml_call2(Core_Stable[64], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call3(caml_call1(Core_Stable[162], _eR_), buf, pos_ref, vint);
   }
   function bin_read_t$0(buf, pos_ref){
    function _eQ_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[64], buf, pos_ref),
      v2 = caml_call2(Core_Stable[64], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call2(caml_call1(Core_Stable[161], _eQ_), buf, pos_ref);
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function css_global_values_of_sexp(sexp_025){
    if(0 === sexp_025[0]){
     var atom_023 = sexp_025[1];
     return caml_string_notequal(atom_023, cst_Inherit$0)
             ? caml_string_notequal
                (atom_023, cst_Initial$0)
               ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
               : 418396260
             : -72987685;
    }
    var _eP_ = sexp_025[1];
    if(! _eP_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_027, sexp_025);
    var match = _eP_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_027, sexp_025);
    var atom_023$0 = match[1];
    return caml_string_notequal(atom_023$0, cst_Inherit$0)
            ? caml_string_notequal
               (atom_023$0, cst_Initial$0)
              ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_027, sexp_025)
            : caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_027, sexp_025);
   }
   function css_global_values_of_sexp$0(sexp_028){
    try{var _eN_ = css_global_values_of_sexp(sexp_028); return _eN_;}
    catch(_eO_){
     var _eM_ = caml_wrap_exception(_eO_);
     if(_eM_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_029, sexp_028);
     throw caml_maybe_attach_backtrace(_eM_, 0);
    }
   }
   function sexp_of_css_global_values(param){return 418396260 <= param ? _f_ : _g_;
   }
   var
    _h_ = [0, caml_call2(Bin_prot_Shape[10], cst_Initial, 0), 0],
    _i_ = [0, caml_call2(Bin_prot_Shape[10], cst_Inherit, 0), _h_],
    _j_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_15_),
    _k_ = caml_call2(Bin_prot_Shape[12], _j_, _i_),
    _l_ =
      [0,
       [0, caml_call1(Bin_prot_Shape[2][1], cst_css_global_values), 0, _k_],
       0],
    _m_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_14_),
    group$0 = caml_call2(Bin_prot_Shape[6], _m_, _l_),
    _n_ = caml_call1(Bin_prot_Shape[2][1], cst_css_global_values$0),
    bin_shape_css_global_values =
      caml_call1(caml_call2(Bin_prot_Shape[14], group$0, _n_), 0);
   function compare_css_global_values(a_030, b_031){
    if(caml_call2(Ppx_compare_lib[1], a_030, b_031)) return 0;
    if(418396260 <= a_030){
     if(typeof b_031 === "number" && 418396260 === b_031) return 0;
    }
    else if(typeof b_031 === "number" && -72987685 === b_031) return 0;
    return runtime.caml_int_compare(a_030, b_031);
   }
   var
    float_to_string_with_fixed =
      [0, function(digits, f){return caml_call3(Core[257], _o_, digits, f);}],
    Private = [0, float_to_string_with_fixed];
   function f2s(digits, f){return caml_call2(Private[1][1], digits, f);}
   function t_of_sexp$0(sexp_033){
    if(0 === sexp_033[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_052, sexp_033);
    var
     field_sexps_034 = sexp_033[1],
     r_035 = [0, 0],
     g_037 = [0, 0],
     b_039 = [0, 0],
     a_041 = [0, 0],
     duplicates_043 = [0, 0],
     extra_044 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_034;
       for(;;){
        if(! param) break;
        var sexp_033$0 = param[1];
        if(1 !== sexp_033$0[0]) break b;
        var _eH_ = sexp_033$0[1];
        if(! _eH_) break c;
        var _eI_ = _eH_[1];
        if(0 !== _eI_[0]) break e;
        var field_sexps_047 = _eH_[2], field_name_045 = _eI_[1];
        if(field_sexps_047 && field_sexps_047[2]) break d;
        var
         tail_054 = param[2],
         field_sexp_046$4 =
           function(field_sexps_047){
            function field_sexp_046(param){
             if(! field_sexps_047)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_052, sexp_033);
             if(field_sexps_047[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
             var x_055 = field_sexps_047[1];
             return x_055;
            }
            return field_sexp_046;
           },
         field_sexp_046 = field_sexp_046$4(field_sexps_047);
        if(caml_string_notequal(field_name_045, cst_a$3))
         if(caml_string_notequal(field_name_045, cst_b$1))
          if(caml_string_notequal(field_name_045, cst_g$1))
           if(caml_string_notequal(field_name_045, cst_r$1)){
            if(Sexplib0_Sexp_conv[26][1])
             extra_044[1] = [0, field_name_045, extra_044[1]];
           }
           else if(r_035[1])
            duplicates_043[1] = [0, field_name_045, duplicates_043[1]];
           else{
            var
             field_sexp_046$0 = field_sexp_046(0),
             fvalue_051 = caml_call1(Core[357], field_sexp_046$0);
            r_035[1] = [0, fvalue_051];
           }
          else if(g_037[1])
           duplicates_043[1] = [0, field_name_045, duplicates_043[1]];
          else{
           var
            field_sexp_046$1 = field_sexp_046(0),
            fvalue_050 = caml_call1(Core[357], field_sexp_046$1);
           g_037[1] = [0, fvalue_050];
          }
         else if(b_039[1])
          duplicates_043[1] = [0, field_name_045, duplicates_043[1]];
         else{
          var
           field_sexp_046$2 = field_sexp_046(0),
           fvalue_049 = caml_call1(Core[357], field_sexp_046$2);
          b_039[1] = [0, fvalue_049];
         }
        else if(a_041[1])
         duplicates_043[1] = [0, field_name_045, duplicates_043[1]];
        else{
         var
          field_sexp_046$3 = field_sexp_046(0),
          fvalue_048 =
            caml_call2(Core[455], Core_Percent[7], field_sexp_046$3);
         a_041[1] = [0, fvalue_048];
        }
        var param = tail_054;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_052, sexp_033$0);
    }
    if(duplicates_043[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_052,
              duplicates_043[1],
              sexp_033);
    if(extra_044[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_052,
              extra_044[1],
              sexp_033);
    var _eJ_ = r_035[1], _eK_ = g_037[1], _eL_ = b_039[1], match = a_041[1];
    if(_eJ_ && _eK_ && _eL_ && match){
     var a_042 = match[1], b_040 = _eL_[1], g_038 = _eK_[1], r_036 = _eJ_[1];
     return [0, r_036, g_038, b_040, a_042];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_052,
             sexp_033,
             [0,
              [0, 0 === r_035[1] ? 1 : 0, cst_r],
              [0,
               [0, 0 === g_037[1] ? 1 : 0, cst_g],
               [0,
                [0, 0 === b_039[1] ? 1 : 0, cst_b],
                [0, [0, 0 === a_041[1] ? 1 : 0, cst_a], 0]]]]);
   }
   function sexp_of_t$0(param){
    var
     a_063 = param[4],
     b_061 = param[3],
     g_059 = param[2],
     r_057 = param[1],
     arg_064 = caml_call2(Core[454], Core_Percent[8], a_063),
     bnds_056 = [0, [1, [0, _q_, [0, arg_064, 0]]], 0],
     arg_062 = caml_call1(Core[356], b_061),
     bnds_056$0 = [0, [1, [0, _r_, [0, arg_062, 0]]], bnds_056],
     arg_060 = caml_call1(Core[356], g_059),
     bnds_056$1 = [0, [1, [0, _s_, [0, arg_060, 0]]], bnds_056$0],
     arg_058 = caml_call1(Core[356], r_057),
     bnds_056$2 = [0, [1, [0, _t_, [0, arg_058, 0]]], bnds_056$1];
    return [1, bnds_056$2];
   }
   var
    _u_ = [0, [0, cst_a$0, caml_call1(Core[443], Core_Percent[13])], 0],
    _v_ =
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0, cst_r$0, Core[344]],
         [0, [0, cst_g$0, Core[344]], [0, [0, cst_b$0, Core[344]], _u_]]]),
    _w_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$1), 0, _v_], 0],
    _x_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_29_),
    group$1 = caml_call2(Bin_prot_Shape[6], _x_, _w_),
    _y_ = caml_call1(Bin_prot_Shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[14], group$1, _y_), 0);
   function bin_size_t$0(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _eD_ = caml_call1(Core[345], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _eD_),
     _eE_ = caml_call1(Core[345], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _eE_),
     _eF_ = caml_call1(Core[345], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _eF_),
     _eG_ = caml_call2(Core[444], Core_Percent[9], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _eG_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[346], buf, pos, v1),
     pos$1 = caml_call3(Core[346], buf, pos$0, v2),
     pos$2 = caml_call3(Core[346], buf, pos$1, v3);
    return caml_call3(caml_call1(Core[445], Core_Percent[10]), buf, pos$2, v4);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_css_gen_src_css_gen_ml_Col, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_r = caml_call2(Core[348], buf, pos_ref),
     v_g = caml_call2(Core[348], buf, pos_ref),
     v_b = caml_call2(Core[348], buf, pos_ref),
     v_a = caml_call2(caml_call1(Core[447], Core_Percent[11]), buf, pos_ref);
    return [0, v_r, v_g, v_b, v_a];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function compare$0(a_065, b_066){
    if(caml_call2(Ppx_compare_lib[1], a_065, b_066)) return 0;
    var n = caml_call2(Core[352], a_065[1], b_066[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core[352], a_065[2], b_066[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core[352], a_065[3], b_066[3]);
    if(0 !== n$1) return n$1;
    var _eA_ = b_066[4], _eB_ = a_065[4];
    function _eC_(a_067, b_068){
     return caml_call2(Core_Percent[24], a_067, b_068);
    }
    return caml_call3(Core[451], _eC_, _eB_, _eA_);
   }
   function create(r, g, b, a, param){return [0, r, g, b, a];}
   function t_of_sexp$1(sexp_070){
    if(0 === sexp_070[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_089, sexp_070);
    var
     field_sexps_071 = sexp_070[1],
     h_072 = [0, 0],
     s_074 = [0, 0],
     l_076 = [0, 0],
     a_078 = [0, 0],
     duplicates_080 = [0, 0],
     extra_081 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_071;
       for(;;){
        if(! param) break;
        var sexp_070$0 = param[1];
        if(1 !== sexp_070$0[0]) break b;
        var _ev_ = sexp_070$0[1];
        if(! _ev_) break c;
        var _ew_ = _ev_[1];
        if(0 !== _ew_[0]) break e;
        var field_sexps_084 = _ev_[2], field_name_082 = _ew_[1];
        if(field_sexps_084 && field_sexps_084[2]) break d;
        var
         tail_091 = param[2],
         field_sexp_083$4 =
           function(field_sexps_084){
            function field_sexp_083(param){
             if(! field_sexps_084)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_089, sexp_070);
             if(field_sexps_084[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
             var x_092 = field_sexps_084[1];
             return x_092;
            }
            return field_sexp_083;
           },
         field_sexp_083 = field_sexp_083$4(field_sexps_084);
        if(caml_string_notequal(field_name_082, cst_a$3))
         if(caml_string_notequal(field_name_082, cst_h$1))
          if(caml_string_notequal(field_name_082, cst_l$1))
           if(caml_string_notequal(field_name_082, cst_s$1)){
            if(Sexplib0_Sexp_conv[26][1])
             extra_081[1] = [0, field_name_082, extra_081[1]];
           }
           else if(s_074[1])
            duplicates_080[1] = [0, field_name_082, duplicates_080[1]];
           else{
            var
             field_sexp_083$0 = field_sexp_083(0),
             fvalue_087 = caml_call1(Core_Percent[7], field_sexp_083$0);
            s_074[1] = [0, fvalue_087];
           }
          else if(l_076[1])
           duplicates_080[1] = [0, field_name_082, duplicates_080[1]];
          else{
           var
            field_sexp_083$1 = field_sexp_083(0),
            fvalue_086 = caml_call1(Core_Percent[7], field_sexp_083$1);
           l_076[1] = [0, fvalue_086];
          }
         else if(h_072[1])
          duplicates_080[1] = [0, field_name_082, duplicates_080[1]];
         else{
          var
           field_sexp_083$2 = field_sexp_083(0),
           fvalue_088 = caml_call1(Core[357], field_sexp_083$2);
          h_072[1] = [0, fvalue_088];
         }
        else if(a_078[1])
         duplicates_080[1] = [0, field_name_082, duplicates_080[1]];
        else{
         var
          field_sexp_083$3 = field_sexp_083(0),
          fvalue_085 =
            caml_call2(Core[455], Core_Percent[7], field_sexp_083$3);
         a_078[1] = [0, fvalue_085];
        }
        var param = tail_091;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_089, sexp_070$0);
    }
    if(duplicates_080[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_089,
              duplicates_080[1],
              sexp_070);
    if(extra_081[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_089,
              extra_081[1],
              sexp_070);
    var _ex_ = h_072[1], _ey_ = s_074[1], _ez_ = l_076[1], match = a_078[1];
    if(_ex_ && _ey_ && _ez_ && match){
     var a_079 = match[1], l_077 = _ez_[1], s_075 = _ey_[1], h_073 = _ex_[1];
     return [0, h_073, s_075, l_077, a_079];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_089,
             sexp_070,
             [0,
              [0, 0 === h_072[1] ? 1 : 0, cst_h],
              [0,
               [0, 0 === s_074[1] ? 1 : 0, cst_s],
               [0,
                [0, 0 === l_076[1] ? 1 : 0, cst_l],
                [0, [0, 0 === a_078[1] ? 1 : 0, cst_a$1], 0]]]]);
   }
   function sexp_of_t$1(param){
    var
     a_100 = param[4],
     l_098 = param[3],
     s_096 = param[2],
     h_094 = param[1],
     arg_101 = caml_call2(Core[454], Core_Percent[8], a_100),
     bnds_093 = [0, [1, [0, _A_, [0, arg_101, 0]]], 0],
     arg_099 = caml_call1(Core_Percent[8], l_098),
     bnds_093$0 = [0, [1, [0, _B_, [0, arg_099, 0]]], bnds_093],
     arg_097 = caml_call1(Core_Percent[8], s_096),
     bnds_093$1 = [0, [1, [0, _C_, [0, arg_097, 0]]], bnds_093$0],
     arg_095 = caml_call1(Core[356], h_094),
     bnds_093$2 = [0, [1, [0, _D_, [0, arg_095, 0]]], bnds_093$1];
    return [1, bnds_093$2];
   }
   var
    _E_ = [0, [0, cst_a$2, caml_call1(Core[443], Core_Percent[13])], 0],
    _F_ =
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0, cst_h$0, Core[344]],
         [0,
          [0, cst_s$0, Core_Percent[13]],
          [0, [0, cst_l$0, Core_Percent[13]], _E_]]]),
    _G_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$3), 0, _F_], 0],
    _H_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_41_),
    group$2 = caml_call2(Bin_prot_Shape[6], _H_, _G_),
    _I_ = caml_call1(Bin_prot_Shape[2][1], cst_t$4),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[14], group$2, _I_), 0);
   function bin_size_t$1(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _er_ = caml_call1(Core[345], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _er_),
     _es_ = caml_call1(Core_Percent[9], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _es_),
     _et_ = caml_call1(Core_Percent[9], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _et_),
     _eu_ = caml_call2(Core[444], Core_Percent[9], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _eu_);
   }
   function bin_write_t$1(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[346], buf, pos, v1),
     pos$1 = caml_call3(Core_Percent[10], buf, pos$0, v2),
     pos$2 = caml_call3(Core_Percent[10], buf, pos$1, v3);
    return caml_call3(caml_call1(Core[445], Core_Percent[10]), buf, pos$2, v4);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_css_gen_src_css_gen_ml_Col$0,
             pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var
     v_h = caml_call2(Core[348], buf, pos_ref),
     v_s = caml_call2(Core_Percent[11], buf, pos_ref),
     v_l = caml_call2(Core_Percent[11], buf, pos_ref),
     v_a = caml_call2(caml_call1(Core[447], Core_Percent[11]), buf, pos_ref);
    return [0, v_h, v_s, v_l, v_a];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$1, bin_writer_t$1, bin_reader_t$1];
   function compare$1(a_102, b_103){
    if(caml_call2(Ppx_compare_lib[1], a_102, b_103)) return 0;
    var n = caml_call2(Core[352], a_102[1], b_103[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Core_Percent[24], a_102[2], b_103[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Core_Percent[24], a_102[3], b_103[3]);
    if(0 !== n$1) return n$1;
    var _eo_ = b_103[4], _ep_ = a_102[4];
    function _eq_(a_104, b_105){
     return caml_call2(Core_Percent[24], a_104, b_105);
    }
    return caml_call3(Core[451], _eq_, _ep_, _eo_);
   }
   function create$0(h, s, l, a, param){return [0, h, s, l, a];}
   function t_of_sexp$2(sexp_109){
    if(0 === sexp_109[0]){
     var atom_107 = sexp_109[1];
     try{var _ei_ = css_global_values_of_sexp(sexp_109); return _ei_;}
     catch(_en_){
      var _eh_ = caml_wrap_exception(_en_);
      if(_eh_ === Sexplib0_Sexp_conv_error[18])
       return caml_string_notequal(atom_107, cst_HSLA$0)
               ? caml_string_notequal
                  (atom_107, cst_Hex$0)
                 ? caml_string_notequal
                    (atom_107, cst_Name$0)
                   ? caml_string_notequal
                      (atom_107, cst_RGBA$0)
                     ? caml_string_notequal
                        (atom_107, cst_Var$0)
                       ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                       : caml_call2
                         (Sexplib0_Sexp_conv_error[23], error_source_114, sexp_109)
                     : caml_call2
                       (Sexplib0_Sexp_conv_error[23], error_source_114, sexp_109)
                   : caml_call2
                     (Sexplib0_Sexp_conv_error[23], error_source_114, sexp_109)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[23], error_source_114, sexp_109)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[23], error_source_114, sexp_109);
      throw caml_maybe_attach_backtrace(_eh_, 0);
     }
    }
    var _ej_ = sexp_109[1];
    if(! _ej_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_114, sexp_109);
    var match = _ej_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_114, sexp_109);
    var sexp_args_110 = _ej_[2], atom_107$0 = match[1];
    if(! caml_string_notequal(atom_107$0, cst_HSLA$0)){
     if(sexp_args_110 && ! sexp_args_110[2]){
      var arg0_122 = sexp_args_110[1], res0_123 = t_of_sexp$1(arg0_122);
      return [0, 802593344, res0_123];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_114,
              atom_107$0,
              sexp_109);
    }
    if(! caml_string_notequal(atom_107$0, cst_Hex$0)){
     if(sexp_args_110 && ! sexp_args_110[2]){
      var
       arg0_116 = sexp_args_110[1],
       res0_117 = caml_call1(Core[472], arg0_116);
      return [0, 3603131, res0_117];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_114,
              atom_107$0,
              sexp_109);
    }
    if(! caml_string_notequal(atom_107$0, cst_Name$0)){
     if(sexp_args_110 && ! sexp_args_110[2]){
      var
       arg0_119 = sexp_args_110[1],
       res0_120 = caml_call1(Core[472], arg0_119);
      return [0, 869834347, res0_120];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_114,
              atom_107$0,
              sexp_109);
    }
    if(caml_string_notequal(atom_107$0, cst_RGBA$0)){
     if(caml_string_notequal(atom_107$0, cst_Var$0))
      try{var _el_ = css_global_values_of_sexp(sexp_109); return _el_;}
      catch(_em_){
       var _ek_ = caml_wrap_exception(_em_);
       if(_ek_ === Sexplib0_Sexp_conv_error[18])
        return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
       throw caml_maybe_attach_backtrace(_ek_, 0);
      }
     if(sexp_args_110 && ! sexp_args_110[2]){
      var
       arg0_112 = sexp_args_110[1],
       res0_113 = caml_call1(Core[472], arg0_112);
      return [0, 4298439, res0_113];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_114,
              atom_107$0,
              sexp_109);
    }
    if(sexp_args_110 && ! sexp_args_110[2]){
     var arg0_125 = sexp_args_110[1], res0_126 = t_of_sexp$0(arg0_125);
     return [0, 912890036, res0_126];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_114,
             atom_107$0,
             sexp_109);
   }
   function t_of_sexp$3(sexp_127){
    try{var _ef_ = t_of_sexp$2(sexp_127); return _ef_;}
    catch(_eg_){
     var _ee_ = caml_wrap_exception(_eg_);
     if(_ee_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_128, sexp_127);
     throw caml_maybe_attach_backtrace(_ee_, 0);
    }
   }
   function sexp_of_t$2(v_134){
    if(typeof v_134 === "number") return sexp_of_css_global_values(v_134);
    var _ed_ = v_134[1];
    if(4298439 === _ed_){
     var v_133 = v_134[2];
     return [1, [0, _J_, [0, caml_call1(Core[471], v_133), 0]]];
    }
    if(869834347 <= _ed_){
     if(912890036 <= _ed_){
      var v_129 = v_134[2];
      return [1, [0, _K_, [0, sexp_of_t$0(v_129), 0]]];
     }
     var v_131 = v_134[2];
     return [1, [0, _L_, [0, caml_call1(Core[471], v_131), 0]]];
    }
    if(802593344 <= _ed_){
     var v_130 = v_134[2];
     return [1, [0, _M_, [0, sexp_of_t$1(v_130), 0]]];
    }
    var v_132 = v_134[2];
    return [1, [0, _N_, [0, caml_call1(Core[471], v_132), 0]]];
   }
   var
    _O_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_58_),
    _P_ =
      [0, caml_call2(Bin_prot_Shape[11], _O_, bin_shape_css_global_values), 0],
    _Q_ = [0, caml_call2(Bin_prot_Shape[10], cst_Var, [0, Core[459]]), _P_],
    _R_ = [0, caml_call2(Bin_prot_Shape[10], cst_Hex, [0, Core[459]]), _Q_],
    _S_ = [0, caml_call2(Bin_prot_Shape[10], cst_Name, [0, Core[459]]), _R_],
    _T_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_HSLA, [0, bin_shape_t$1]), _S_],
    _U_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_RGBA, [0, bin_shape_t$0]), _T_],
    _V_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_53_),
    _W_ = caml_call2(Bin_prot_Shape[12], _V_, _U_),
    _X_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$5), 0, _W_], 0],
    _Y_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_52_),
    group$3 = caml_call2(Bin_prot_Shape[6], _Y_, _X_),
    _Z_ = caml_call1(Bin_prot_Shape[2][1], cst_t$6),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[14], group$3, _Z_), 0);
   function bin_size_t$2(v){
    if(typeof v === "number") return 4;
    var _ec_ = v[1];
    if(4298439 === _ec_){
     var args = v[2], size_args = caml_call1(Core[460], args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    if(869834347 <= _ec_){
     if(912890036 <= _ec_){
      var args$0 = v[2], size_args$0 = bin_size_t$0(args$0);
      return caml_call2(Bin_prot_Common[23], size_args$0, 4);
     }
     var args$1 = v[2], size_args$1 = caml_call1(Core[460], args$1);
     return caml_call2(Bin_prot_Common[23], size_args$1, 4);
    }
    if(802593344 <= _ec_){
     var args$2 = v[2], size_args$2 = bin_size_t$1(args$2);
     return caml_call2(Bin_prot_Common[23], size_args$2, 4);
    }
    var args$3 = v[2], size_args$3 = caml_call1(Core[460], args$3);
    return caml_call2(Bin_prot_Common[23], size_args$3, 4);
   }
   function bin_write_t$2(buf, pos, v){
    if(typeof v === "number")
     return 418396260 <= v
             ? caml_call3(Bin_prot_Write[30], buf, pos, 418396260)
             : caml_call3(Bin_prot_Write[30], buf, pos, -72987685);
    var _eb_ = v[1];
    if(4298439 === _eb_){
     var
      args = v[2],
      pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 4298439);
     return caml_call3(Core[461], buf, pos$0, args);
    }
    if(869834347 <= _eb_){
     if(912890036 <= _eb_){
      var
       args$0 = v[2],
       pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 912890036);
      return bin_write_t$0(buf, pos$1, args$0);
     }
     var
      args$1 = v[2],
      pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 869834347);
     return caml_call3(Core[461], buf, pos$2, args$1);
    }
    if(802593344 <= _eb_){
     var
      args$2 = v[2],
      pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 802593344);
     return bin_write_t$1(buf, pos$3, args$2);
    }
    var
     args$3 = v[2],
     pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 3603131);
    return caml_call3(Core[461], buf, pos$4, args$3);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    if(802593344 <= vint){
     if(869834347 === vint){
      var arg_1 = caml_call2(Core[463], buf, pos_ref);
      return [0, 869834347, arg_1];
     }
     if(912890036 === vint){
      var arg_1$0 = bin_read_t$2(buf, pos_ref);
      return [0, 912890036, arg_1$0];
     }
     if(802593345 > vint){
      var arg_1$1 = bin_read_t$4(buf, pos_ref);
      return [0, 802593344, arg_1$1];
     }
    }
    else{
     if(3603131 === vint){
      var arg_1$2 = caml_call2(Core[463], buf, pos_ref);
      return [0, 3603131, arg_1$2];
     }
     if(4298439 === vint){
      var arg_1$3 = caml_call2(Core[463], buf, pos_ref);
      return [0, 4298439, arg_1$3];
     }
    }
    if(-72987685 === vint) return -72987685;
    if(418396260 === vint) return 418396260;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
   }
   function bin_read_t$6(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    try{var _d$_ = bin_read_t$5(buf, pos_ref, vint); return _d$_;}
    catch(_ea_){
     var _d__ = caml_wrap_exception(_ea_);
     if(_d__ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_d__, 0);
    }
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
   function compare$2(a_135, b_136){
    if(caml_call2(Ppx_compare_lib[1], a_135, b_136)) return 0;
    a:
    if(typeof a_135 === "number"){
     if(typeof b_136 === "number"){
      if(-72987685 !== b_136 && 418396260 !== b_136) break a;
      return compare_css_global_values(a_135, b_136);
     }
    }
    else{
     var _d9_ = a_135[1];
     if(4298439 === _d9_){
      if(typeof b_136 !== "number" && 4298439 === b_136[1]){
       var right_146 = b_136[2], left_145 = a_135[2];
       return caml_call2(Core[467], left_145, right_146);
      }
     }
     else
      if(869834347 <= _d9_){
       if(912890036 <= _d9_){
        if(typeof b_136 !== "number" && 912890036 === b_136[1]){
         var right_138 = b_136[2], left_137 = a_135[2];
         return compare$0(left_137, right_138);
        }
       }
       else if(typeof b_136 !== "number" && 869834347 === b_136[1]){
        var right_142 = b_136[2], left_141 = a_135[2];
        return caml_call2(Core[467], left_141, right_142);
       }
      }
      else
       if(802593344 <= _d9_){
        if(typeof b_136 !== "number" && 802593344 === b_136[1]){
         var right_140 = b_136[2], left_139 = a_135[2];
         return compare$1(left_139, right_140);
        }
       }
       else if(typeof b_136 !== "number" && 3603131 === b_136[1]){
        var right_144 = b_136[2], left_143 = a_135[2];
        return caml_call2(Core[467], left_143, right_144);
       }
    }
    return caml_compare(a_135, b_136);
   }
   caml_call1(Core_Sexpable[1], [0, t_of_sexp$3, sexp_of_t$2]);
   function to_string_css(param){
    if(typeof param === "number")
     return 418396260 <= param ? cst_initial : cst_inherit;
    var _dU_ = param[1];
    if(4298439 === _dU_){
     var var$0 = param[2];
     return caml_call2(Stdlib_String[6], cst$0, [0, cst_var, [0, var$0, ___]]);
    }
    if(869834347 <= _dU_){
     if(912890036 > _dU_){var name = param[2]; return name;}
     var
      match = param[2],
      a = match[4],
      b = match[3],
      g = match[2],
      r = match[1];
     if(a){
      var
       p = a[1],
       _dV_ = [0, cst$1, [0, f2s(2, caml_call1(Core_Percent[72], p)), _$_]],
       _dW_ = [0, cst$2, [0, caml_call1(Core_Int[82], b), _dV_]],
       _dX_ = [0, cst$3, [0, caml_call1(Core_Int[82], g), _dW_]],
       _dY_ = [0, cst_rgba, [0, caml_call1(Core_Int[82], r), _dX_]];
      return caml_call2(Stdlib_String[6], cst$4, _dY_);
     }
     var
      _dZ_ = [0, cst$5, [0, caml_call1(Core_Int[82], b), _aa_]],
      _d0_ = [0, cst$6, [0, caml_call1(Core_Int[82], g), _dZ_]],
      _d1_ = [0, cst_rgb, [0, caml_call1(Core_Int[82], r), _d0_]];
     return caml_call2(Stdlib_String[6], cst$7, _d1_);
    }
    if(802593344 > _dU_){var hex = param[2]; return hex;}
    var
     match$0 = param[2],
     a$0 = match$0[4],
     l = match$0[3],
     s = match$0[2],
     h = match$0[1];
    if(a$0){
     var
      p$0 = a$0[1],
      _d2_ = [0, cst$8, [0, f2s(2, caml_call1(Core_Percent[72], p$0)), _ab_]],
      _d3_ = [0, cst$9, [0, f2s(0, caml_call1(Core_Percent[74], l)), _d2_]],
      _d4_ = [0, cst$10, [0, f2s(0, caml_call1(Core_Percent[74], s)), _d3_]],
      _d5_ = [0, cst_hsla, [0, caml_call1(Core_Int[82], h), _d4_]];
     return caml_call2(Stdlib_String[6], cst$11, _d5_);
    }
    var
     _d6_ = [0, cst$12, [0, f2s(0, caml_call1(Core_Percent[74], l)), _ac_]],
     _d7_ = [0, cst$13, [0, f2s(0, caml_call1(Core_Percent[74], s)), _d6_]],
     _d8_ = [0, cst_hsl, [0, caml_call1(Core_Int[82], h), _d7_]];
    return caml_call2(Stdlib_String[6], cst$14, _d8_);
   }
   var
    _ad_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_101),
    _ae_ =
      [0,
       caml_call2(Bin_prot_Shape[11], _ad_, bin_shape_css_global_values),
       0],
    _af_ = [0, caml_call2(Bin_prot_Shape[10], cst_Sub, 0), _ae_],
    _ag_ = [0, caml_call2(Bin_prot_Shape[10], cst_Super, 0), _af_],
    _ah_ = [0, caml_call2(Bin_prot_Shape[10], cst_Justify, 0), _ag_],
    _ai_ = [0, caml_call2(Bin_prot_Shape[10], cst_Middle, 0), _ah_],
    _aj_ = [0, caml_call2(Bin_prot_Shape[10], cst_Bottom, 0), _ai_],
    _ak_ = [0, caml_call2(Bin_prot_Shape[10], cst_Top, 0), _aj_],
    _al_ = [0, caml_call2(Bin_prot_Shape[10], cst_Center, 0), _ak_],
    _am_ = [0, caml_call2(Bin_prot_Shape[10], cst_Right, 0), _al_],
    _an_ = [0, caml_call2(Bin_prot_Shape[10], cst_Left, 0), _am_],
    _ao_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_92_),
    _ap_ = caml_call2(Bin_prot_Shape[12], _ao_, _an_),
    _aq_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$7), 0, _ap_], 0],
    _ar_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_91_),
    group$4 = caml_call2(Bin_prot_Shape[6], _ar_, _aq_),
    _as_ = caml_call1(Bin_prot_Shape[2][1], cst_t$8);
   caml_call1(caml_call2(Bin_prot_Shape[14], group$4, _as_), 0);
   function t_of_sexp$4(sexp_156){
    if(0 === sexp_156[0]){
     var atom_154 = sexp_156[1];
     try{var _dO_ = css_global_values_of_sexp(sexp_156); return _dO_;}
     catch(_dT_){
      var _dN_ = caml_wrap_exception(_dT_);
      if(_dN_ !== Sexplib0_Sexp_conv_error[18])
       throw caml_maybe_attach_backtrace(_dN_, 0);
      var switch$0 = caml_string_compare(atom_154, cst_Px$0);
      if(0 <= switch$0){
       if(0 >= switch$0)
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Px_float$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Raw$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Rem$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Vh$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Vw$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
      }
      else{
       if(! caml_string_notequal(atom_154, cst_Ch$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Em$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Em_float$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Percent$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
       if(! caml_string_notequal(atom_154, cst_Pt$0))
        return caml_call2
                (Sexplib0_Sexp_conv_error[23], error_source_161, sexp_156);
      }
      return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
     }
    }
    var _dP_ = sexp_156[1];
    if(! _dP_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_161, sexp_156);
    var match = _dP_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_161, sexp_156);
    var
     sexp_args_157 = _dP_[2],
     atom_154$0 = match[1],
     switch$1 = caml_string_compare(atom_154$0, cst_Px$0);
    if(0 <= switch$1){
     if(0 >= switch$1){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_169 = sexp_args_157[1],
        res0_170 = caml_call1(Core[357], arg0_169);
       return [0, 17960, res0_170];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Px_float$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_166 = sexp_args_157[1],
        res0_167 = caml_call1(Core[340], arg0_166);
       return [0, -598646523, res0_167];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Raw$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_190 = sexp_args_157[1],
        res0_191 = caml_call1(Core[472], arg0_190);
       return [0, 4099528, res0_191];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Rem$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_184 = sexp_args_157[1],
        res0_185 = caml_call1(Core[340], arg0_184);
       return [0, 4100410, res0_185];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Vh$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_163 = sexp_args_157[1],
        res0_164 = caml_call1(Core_Percent[7], arg0_163);
       return [0, 19282, res0_164];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Vw$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_159 = sexp_args_157[1],
        res0_160 = caml_call1(Core_Percent[7], arg0_159);
       return [0, 19297, res0_160];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
    }
    else{
     if(! caml_string_notequal(atom_154$0, cst_Ch$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_187 = sexp_args_157[1],
        res0_188 = caml_call1(Core[340], arg0_187);
       return [0, 15045, res0_188];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Em$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_181 = sexp_args_157[1],
        res0_182 = caml_call1(Core[357], arg0_181);
       return [0, 15496, res0_182];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Em_float$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_178 = sexp_args_157[1],
        res0_179 = caml_call1(Core[340], arg0_178);
       return [0, 498753381, res0_179];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Percent$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_175 = sexp_args_157[1],
        res0_176 = caml_call1(Core_Percent[7], arg0_175);
       return [0, -970206555, res0_176];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
     if(! caml_string_notequal(atom_154$0, cst_Pt$0)){
      if(sexp_args_157 && ! sexp_args_157[2]){
       var
        arg0_172 = sexp_args_157[1],
        res0_173 = caml_call1(Core[340], arg0_172);
       return [0, 17956, res0_173];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_161,
               atom_154$0,
               sexp_156);
     }
    }
    try{var _dR_ = css_global_values_of_sexp(sexp_156); return _dR_;}
    catch(_dS_){
     var _dQ_ = caml_wrap_exception(_dS_);
     if(_dQ_ === Sexplib0_Sexp_conv_error[18])
      return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
     throw caml_maybe_attach_backtrace(_dQ_, 0);
    }
   }
   function t_of_sexp$5(sexp_192){
    try{var _dL_ = t_of_sexp$4(sexp_192); return _dL_;}
    catch(_dM_){
     var _dK_ = caml_wrap_exception(_dM_);
     if(_dK_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_193, sexp_192);
     throw caml_maybe_attach_backtrace(_dK_, 0);
    }
   }
   function sexp_of_t$3(v_205){
    if(typeof v_205 === "number") return sexp_of_css_global_values(v_205);
    var _dJ_ = v_205[1];
    if(17960 <= _dJ_){
     if(19297 > _dJ_){
      if(19282 <= _dJ_){
       var v_203 = v_205[2];
       return [1, [0, _ax_, [0, caml_call1(Core_Percent[8], v_203), 0]]];
      }
      var v_201 = v_205[2];
      return [1, [0, _ay_, [0, caml_call1(Core[356], v_201), 0]]];
     }
     if(4100410 <= _dJ_){
      if(498753381 <= _dJ_){
       var v_198 = v_205[2];
       return [1, [0, _at_, [0, caml_call1(Core[339], v_198), 0]]];
      }
      var v_196 = v_205[2];
      return [1, [0, _au_, [0, caml_call1(Core[339], v_196), 0]]];
     }
     if(4099528 <= _dJ_){
      var v_194 = v_205[2];
      return [1, [0, _av_, [0, caml_call1(Core[471], v_194), 0]]];
     }
     var v_204 = v_205[2];
     return [1, [0, _aw_, [0, caml_call1(Core_Percent[8], v_204), 0]]];
    }
    if(-598646523 === _dJ_){
     var v_202 = v_205[2];
     return [1, [0, _az_, [0, caml_call1(Core[339], v_202), 0]]];
    }
    if(15496 <= _dJ_){
     if(17956 <= _dJ_){
      var v_200 = v_205[2];
      return [1, [0, _aA_, [0, caml_call1(Core[339], v_200), 0]]];
     }
     var v_197 = v_205[2];
     return [1, [0, _aB_, [0, caml_call1(Core[356], v_197), 0]]];
    }
    if(15045 <= _dJ_){
     var v_195 = v_205[2];
     return [1, [0, _aC_, [0, caml_call1(Core[339], v_195), 0]]];
    }
    var v_199 = v_205[2];
    return [1, [0, _aD_, [0, caml_call1(Core_Percent[8], v_199), 0]]];
   }
   var
    _aE_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_133),
    _aF_ =
      [0,
       caml_call2(Bin_prot_Shape[11], _aE_, bin_shape_css_global_values),
       0],
    _aG_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_Vw, [0, Core_Percent[13]]), _aF_],
    _aH_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_Vh, [0, Core_Percent[13]]), _aG_],
    _aI_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_Px_float, [0, Core[327]]), _aH_],
    _aJ_ = [0, caml_call2(Bin_prot_Shape[10], cst_Px, [0, Core[344]]), _aI_],
    _aK_ = [0, caml_call2(Bin_prot_Shape[10], cst_Pt, [0, Core[327]]), _aJ_],
    _aL_ =
      [0,
       caml_call2(Bin_prot_Shape[10], cst_Percent, [0, Core_Percent[13]]),
       _aK_],
    _aM_ =
      [0, caml_call2(Bin_prot_Shape[10], cst_Em_float, [0, Core[327]]), _aL_],
    _aN_ = [0, caml_call2(Bin_prot_Shape[10], cst_Em, [0, Core[344]]), _aM_],
    _aO_ = [0, caml_call2(Bin_prot_Shape[10], cst_Rem, [0, Core[327]]), _aN_],
    _aP_ = [0, caml_call2(Bin_prot_Shape[10], cst_Ch, [0, Core[327]]), _aO_],
    _aQ_ = [0, caml_call2(Bin_prot_Shape[10], cst_Raw, [0, Core[459]]), _aP_],
    _aR_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_122),
    _aS_ = caml_call2(Bin_prot_Shape[12], _aR_, _aQ_),
    _aT_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$9), 0, _aS_], 0],
    _aU_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_121),
    group$5 = caml_call2(Bin_prot_Shape[6], _aU_, _aT_),
    _aV_ = caml_call1(Bin_prot_Shape[2][1], cst_t$10),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[14], group$5, _aV_), 0);
   function compare$3(a_206, b_207){
    if(caml_call2(Ppx_compare_lib[1], a_206, b_207)) return 0;
    a:
    if(typeof a_206 === "number"){
     if(typeof b_207 === "number"){
      if(-72987685 !== b_207 && 418396260 !== b_207) break a;
      return compare_css_global_values(a_206, b_207);
     }
    }
    else{
     var _dI_ = a_206[1];
     if(17960 <= _dI_){
      if(19297 <= _dI_){
       if(4100410 <= _dI_){
        if(498753381 <= _dI_){
         if(typeof b_207 !== "number" && 498753381 === b_207[1]){
          var right_217 = b_207[2], left_216 = a_206[2];
          return caml_call2(Core[335], left_216, right_217);
         }
        }
        else if(typeof b_207 !== "number" && 4100410 === b_207[1]){
         var right_213 = b_207[2], left_212 = a_206[2];
         return caml_call2(Core[335], left_212, right_213);
        }
       }
       else
        if(4099528 <= _dI_){
         if(typeof b_207 !== "number" && 4099528 === b_207[1]){
          var right_209 = b_207[2], left_208 = a_206[2];
          return caml_call2(Core[467], left_208, right_209);
         }
        }
        else if(typeof b_207 !== "number" && 19297 === b_207[1]){
         var right_229 = b_207[2], left_228 = a_206[2];
         return caml_call2(Core_Percent[24], left_228, right_229);
        }
      }
      else
       if(19282 <= _dI_){
        if(typeof b_207 !== "number" && 19282 === b_207[1]){
         var right_227 = b_207[2], left_226 = a_206[2];
         return caml_call2(Core_Percent[24], left_226, right_227);
        }
       }
       else if(typeof b_207 !== "number" && 17960 === b_207[1]){
        var right_223 = b_207[2], left_222 = a_206[2];
        return caml_call2(Core[352], left_222, right_223);
       }
     }
     else
      if(-598646523 === _dI_){
       if(typeof b_207 !== "number" && -598646523 === b_207[1]){
        var right_225 = b_207[2], left_224 = a_206[2];
        return caml_call2(Core[335], left_224, right_225);
       }
      }
      else
       if(15496 <= _dI_){
        if(17956 <= _dI_){
         if(typeof b_207 !== "number" && 17956 === b_207[1]){
          var right_221 = b_207[2], left_220 = a_206[2];
          return caml_call2(Core[335], left_220, right_221);
         }
        }
        else if(typeof b_207 !== "number" && 15496 === b_207[1]){
         var right_215 = b_207[2], left_214 = a_206[2];
         return caml_call2(Core[352], left_214, right_215);
        }
       }
       else
        if(15045 <= _dI_){
         if(typeof b_207 !== "number" && 15045 === b_207[1]){
          var right_211 = b_207[2], left_210 = a_206[2];
          return caml_call2(Core[335], left_210, right_211);
         }
        }
        else if(typeof b_207 !== "number" && -970206555 === b_207[1]){
         var right_219 = b_207[2], left_218 = a_206[2];
         return caml_call2(Core_Percent[24], left_218, right_219);
        }
    }
    return caml_compare(a_206, b_207);
   }
   function to_string_css$0(param){
    if(typeof param === "number")
     return 418396260 <= param ? cst_initial$1 : cst_inherit$1;
    var _dx_ = param[1];
    if(17960 <= _dx_){
     if(19297 > _dx_){
      if(19282 <= _dx_){
       var
        p$0 = param[2],
        _dB_ = [0, f2s(2, caml_call1(Core_Percent[74], p$0)), _aZ_];
       return caml_call2(Stdlib_String[6], cst$18, _dB_);
      }
      var i = param[2], _dC_ = [0, caml_call1(Core_Int[82], i), _a0_];
      return caml_call2(Stdlib_String[6], cst$19, _dC_);
     }
     if(4100410 <= _dx_){
      if(498753381 <= _dx_){
       var f = param[2], _dy_ = [0, f2s(2, f), _aW_];
       return caml_call2(Stdlib_String[6], cst$15, _dy_);
      }
      var f$0 = param[2], _dz_ = [0, f2s(2, f$0), _aX_];
      return caml_call2(Stdlib_String[6], cst$16, _dz_);
     }
     if(4099528 <= _dx_){var s = param[2]; return s;}
     var
      p = param[2],
      _dA_ = [0, f2s(2, caml_call1(Core_Percent[74], p)), _aY_];
     return caml_call2(Stdlib_String[6], cst$17, _dA_);
    }
    if(-598646523 === _dx_){
     var f$1 = param[2], _dD_ = [0, f2s(2, f$1), _a1_];
     return caml_call2(Stdlib_String[6], cst$20, _dD_);
    }
    if(15496 <= _dx_){
     if(17956 <= _dx_){
      var p$1 = param[2], _dE_ = [0, f2s(2, p$1), _a2_];
      return caml_call2(Stdlib_String[6], cst$21, _dE_);
     }
     var i$0 = param[2], _dF_ = [0, caml_call1(Core_Int[82], i$0), _a3_];
     return caml_call2(Stdlib_String[6], cst$22, _dF_);
    }
    if(15045 <= _dx_){
     var c = param[2], _dG_ = [0, f2s(2, c), _a4_];
     return caml_call2(Stdlib_String[6], cst$23, _dG_);
    }
    var
     p$2 = param[2],
     _dH_ = [0, f2s(2, caml_call1(Core_Percent[74], p$2)), _a5_];
    return caml_call2(Stdlib_String[6], cst$24, _dH_);
   }
   var
    percent100 = [0, -970206555, caml_call1(Core_Percent[73], 100.)],
    _a6_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_159),
    _a7_ = [0, caml_call2(Bin_prot_Shape[11], _a6_, bin_shape_t$3), 0],
    _a8_ = [0, caml_call2(Bin_prot_Shape[10], cst_Auto, 0), _a7_],
    _a9_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_158),
    _a__ = caml_call2(Bin_prot_Shape[12], _a9_, _a8_),
    _a$_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$11), 0, _a__], 0],
    _ba_ = caml_call1(Bin_prot_Shape[4][1], cst_css_gen_src_css_gen_ml_157),
    group$6 = caml_call2(Bin_prot_Shape[6], _ba_, _a$_),
    _bb_ = caml_call1(Bin_prot_Shape[2][1], cst_t$12);
   caml_call1(caml_call2(Bin_prot_Shape[14], group$6, _bb_), 0);
   function compare$4(a_232, b_233){
    if(caml_call2(Ppx_compare_lib[1], a_232, b_233)) return 0;
    a:
    {
     if(typeof a_232 === "number" && 726666127 <= a_232){
      if(typeof b_233 !== "number") break a;
      if(726666127 === b_233) return 0;
      break a;
     }
     if(typeof b_233 === "number"){
      if(-72987685 !== b_233 && 418396260 !== b_233) break a;
     }
     else{
      var _dw_ = b_233[1];
      if(17960 <= _dw_){
       if(4099528 <= _dw_){
        if(4100410 !== _dw_ && 498753381 !== _dw_ && 4099529 <= _dw_) break a;
       }
       else if(19282 !== _dw_ && 19297 !== _dw_ && 17961 <= _dw_) break a;
      }
      else
       if(15045 <= _dw_){
        if(15496 !== _dw_ && 17956 !== _dw_ && 15046 <= _dw_) break a;
       }
       else if(-970206555 !== _dw_ && -598646523 !== _dw_) break a;
     }
     return compare$3(a_232, b_233);
    }
    return caml_compare(a_232, b_233);
   }
   function t_of_sexp$6(sexp_239){
    if(0 === sexp_239[0]){
     var atom_237 = sexp_239[1];
     if(! caml_string_notequal(atom_237, cst_Auto$0)) return 726666127;
     try{var _dq_ = t_of_sexp$4(sexp_239); return _dq_;}
     catch(_dv_){
      var _dp_ = caml_wrap_exception(_dv_);
      if(_dp_ === Sexplib0_Sexp_conv_error[18])
       return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
      throw caml_maybe_attach_backtrace(_dp_, 0);
     }
    }
    var _dr_ = sexp_239[1];
    if(! _dr_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_241, sexp_239);
    var match = _dr_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_241, sexp_239);
    var atom_237$0 = match[1];
    try{var _dt_ = t_of_sexp$4(sexp_239); return _dt_;}
    catch(_du_){
     var _ds_ = caml_wrap_exception(_du_);
     if(_ds_ === Sexplib0_Sexp_conv_error[18])
      return caml_string_notequal(atom_237$0, cst_Auto$0)
              ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
              : caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_241, sexp_239);
     throw caml_maybe_attach_backtrace(_ds_, 0);
    }
   }
   function t_of_sexp$7(sexp_242){
    try{var _dn_ = t_of_sexp$6(sexp_242); return _dn_;}
    catch(_do_){
     var _dm_ = caml_wrap_exception(_do_);
     if(_dm_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_243, sexp_242);
     throw caml_maybe_attach_backtrace(_dm_, 0);
    }
   }
   function sexp_of_t$4(v_244){
    if(typeof v_244 === "number" && 726666127 <= v_244) return _bc_;
    return sexp_of_t$3(v_244);
   }
   function to_string_css$1(l){
    if(typeof l === "number" && 726666127 <= l) return cst_auto;
    return to_string_css$0(l);
   }
   function value_map(o, f){return caml_call3(Core_Option[36], o, cst$25, f);}
   function combine(t1, t2){return caml_call2(Core[157], t1, t2);}
   function concat(l){return caml_call1(Core_List[133], l);}
   function to_string_list(_dl_){return _dl_;}
   function to_string_css$2(t){
    function _dj_(param){
     var value = param[2], field = param[1];
     return caml_call2
             (Stdlib_String[6],
              cst$27,
              [0, field, [0, cst$26, [0, value, 0]]]);
    }
    var _dk_ = caml_call2(Core_List[72], t, _dj_);
    return caml_call2(Core_String[32], _bd_, _dk_);
   }
   function of_string_css_exn(s){
    var _di_ = caml_call1(Css_gen_Css_parser[2], s);
    return caml_call1(Core_Or_error[36], _di_);
   }
   function create_raw(field, value){return [0, [0, field, value], 0];}
   var should_validate = [0, 0], Expert = [0, should_validate];
   function create$1(field, value){
    if(Expert[1][1]){
     var _dh_ = caml_call1(Css_gen_Css_parser[1], value);
     caml_call1(Core_Or_error[36], _dh_);
    }
    return create_raw(field, value);
   }
   var is_empty = Core_List[8], empty = 0;
   function create_placement(name, length){
    return create$1(name, to_string_css$0(length));
   }
   function left(_dg_){return create_placement(cst_left$0, _dg_);}
   function top(_df_){return create_placement(cst_top$0, _df_);}
   function bottom(_de_){return create_placement(cst_bottom$0, _de_);}
   function right(_dd_){return create_placement(cst_right$0, _dd_);}
   function position(tp, bt, lt, rt, pos){
    var
     value =
       332360020 === pos
        ? cst_fixed
        : 982536398
          <= pos
          ? 1070408009 <= pos ? cst_sticky : cst_static
          : 491227799 <= pos ? cst_absolute : cst_relative,
     pos$0 = create$1(cst_position, value);
    function convert(opt_l, f){
     return caml_call3(Core_Option[36], opt_l, empty, f);
    }
    var
     _da_ = [0, convert(bt, bottom), 0],
     _db_ = [0, convert(rt, right), _da_],
     _dc_ = [0, convert(lt, left), _db_];
    return concat([0, pos$0, [0, convert(tp, top), _dc_]]);
   }
   function box_sizing(v){
    var
     value =
       367114405 <= v
        ? 418396260 <= v ? cst_initial$2 : cst_content_box
        : 92813848 <= v ? cst_border_box : cst_inherit$2;
    return create_raw(cst_box_sizing, value);
   }
   function display(v){
    var
     value =
       179740044 <= v
        ? 498536372
          <= v
          ? 781663065
            <= v
            ? 870530776 <= v ? cst_none : cst_flex
            : 504440814 <= v ? cst_table : cst_list_item
          : 418396260 <= v ? cst_initial$3 : cst_inline_grid
        : -841728391
          <= v
          ? -72987685
            <= v
            ? 168351231 <= v ? cst_inline_flex : cst_inherit$3
            : -266363961 <= v ? cst_inline_block : cst_inline
          : -936778451 <= v ? cst_block : cst_inline_table;
    return create_raw(cst_display, value);
   }
   function visibility(v){
    var
     value =
       -72987685 === v
        ? cst_inherit$4
        : 418396260
          <= v
          ? 507973005 <= v ? cst_collapse : cst_initial$4
          : 19559306 <= v ? cst_hidden : cst_visible;
    return create_raw(cst_visibility, value);
   }
   function make_overflow(field, v){
    var
     value =
       -67548115 <= v
        ? 418396260
          <= v
          ? 726666127 <= v ? cst_auto$0 : cst_initial$5
          : 19559306 <= v ? cst_hidden$0 : cst_scroll
        : -72987685 <= v ? cst_inherit$5 : cst_visible$0;
    return create_raw(field, value);
   }
   function overflow(_c$_){return make_overflow(cst_overflow, _c$_);}
   function overflow_x(_c__){return make_overflow(cst_overflow_x, _c__);}
   function overflow_y(_c9_){return make_overflow(cst_overflow_y, _c9_);}
   function z_index(i){
    return create_raw(cst_z_index, caml_call1(Core_Int[82], i));
   }
   function opacity(i){return create_raw(cst_opacity, f2s(6, i));}
   function create_length_field(field, l){
    return create_raw(field, to_string_css$1(l));
   }
   function white_space(v){
    var
     value =
       -397426005 <= v
        ? 4003843
          <= v
          ? 418396260 <= v ? cst_initial$6 : cst_pre
          : -72987685 <= v ? cst_inherit$6 : cst_nowrap
        : -932293946
          === v
          ? cst_pre_wrap
          : -453122489 <= v ? cst_normal : cst_pre_line;
    return create$1(cst_white_space, value);
   }
   function font_size(_c8_){return create_length_field(cst_font_size, _c8_);}
   function font_family(l){
    return create_raw(cst_font_family, caml_call2(Core_String[32], _be_, l));
   }
   function font_style(s){
    var
     value =
       -115526511 === s
        ? cst_oblique
        : 418396260
          <= s
          ? 989373200 <= s ? cst_italic : cst_initial$7
          : -72987685 <= s ? cst_inherit$7 : cst_normal$0;
    return create_raw(cst_font_style, value);
   }
   function font_weight(s){
    if(typeof s === "number")
     var
      value =
        -72987685 <= s
         ? 418396260
           <= s
           ? 737455525 <= s ? cst_bold : cst_initial$8
           : 347568466 <= s ? cst_bolder : cst_inherit$8
         : -415993181 <= s ? cst_lighter : cst_normal$1;
    else
     var i = s[2], value = caml_call1(Core_Int[82], i);
    return create_raw(cst_font_weight, value);
   }
   var bold = font_weight(737455525);
   function font_variant(s){
    var
     value =
       57678329 <= s
        ? 418396260 <= s ? cst_initial$9 : cst_small_caps
        : -72987685 <= s ? cst_inherit$9 : cst_normal$2;
    return create_raw(cst_font_variant, value);
   }
   function font(size, family, style, weight, variant, param){
    var
     _c3_ = [0, caml_call2(Core_Option[29], variant, font_variant), 0],
     _c4_ = [0, caml_call2(Core_Option[29], weight, font_weight), _c3_],
     _c5_ = [0, caml_call2(Core_Option[29], style, font_style), _c4_],
     _c6_ = [0, [0, font_family(family)], _c5_],
     _c7_ = [0, [0, font_size(size)], _c6_];
    return concat(caml_call1(Core_List[124], _c7_));
   }
   function create_with_color(field, color){
    return create_raw(field, to_string_css(color));
   }
   function color(color){return create_with_color(cst_color, color);}
   function background_color(color){
    return create_with_color(cst_background_color, color);
   }
   function fill(color){return create_with_color(cst_fill, color);}
   function stops_to_string(stops){
    function _cZ_(param){
     var
      color = param[2],
      pct = param[1],
      _c1_ = [0, cst$28, [0, f2s(6, caml_call1(Core_Percent[74], pct)), _bf_]],
      _c2_ = [0, to_string_css(color), _c1_];
     return caml_call2(Stdlib_String[6], cst$29, _c2_);
    }
    var _c0_ = caml_call2(Core_List[72], stops, _cZ_);
    return caml_call2(Core_String[32], _bg_, _c0_);
   }
   function background_image(spec){
    var _cU_ = spec[1];
    if(4252495 === _cU_)
     var
      url = spec[2],
      value =
        caml_call2(Stdlib_String[6], cst$30, [0, cst_url, [0, url, _bh_]]);
    else if(411117168 <= _cU_)
     var
      stops = spec[2][1],
      _cV_ = [0, cst_radial_gradient, [0, stops_to_string(stops), _bi_]],
      value = caml_call2(Stdlib_String[6], cst$31, _cV_);
    else
     var
      _cW_ = spec[2],
      stops$0 = _cW_[2],
      direction = _cW_[1][2],
      _cX_ = [0, cst_deg, [0, stops_to_string(stops$0), _bj_]],
      _cY_ =
        [0,
         cst_linear_gradient,
         [0, caml_call1(Core_Int[82], direction), _cX_]],
      value = caml_call2(Stdlib_String[6], cst$32, _cY_);
    return create_raw(cst_background_image, value);
   }
   function create_alignment(field, a){
    var
     _cT_ =
       15943541 <= a
        ? 418396260
          <= a
          ? 847852583
            <= a
            ? 980392437 <= a ? cst_center : cst_left
            : 437082891 <= a ? cst_bottom : cst_initial$0
          : 401437019 <= a ? cst_super : cst_middle
        : -72987685
          === a
          ? cst_inherit$0
          : 4153696
            <= a
            ? 4202101 <= a ? cst_top : cst_sub
            : -57574468 <= a ? cst_right : cst_justify;
    return create_raw(field, _cT_);
   }
   function text_align(_cS_){return create_alignment(cst_text_align, _cS_);}
   function horizontal_align(_cR_){
    return create_alignment(cst_horizontal_align, _cR_);
   }
   function vertical_align(_cQ_){
    return create_alignment(cst_vertical_align, _cQ_);
   }
   function float$0(f){
    var
     value =
       -57574468 === f
        ? cst_right$1
        : 847852583
          <= f
          ? 870530776 <= f ? cst_none$0 : cst_left$1
          : 418396260 <= f ? cst_initial$10 : cst_inherit$10;
    return create_raw(cst_float, value);
   }
   function width(_cP_){return create_length_field(cst_width, _cP_);}
   function min_width(_cO_){return create_length_field(cst_min_width, _cO_);}
   function max_width(_cN_){return create_length_field(cst_max_width, _cN_);}
   function height(_cM_){return create_length_field(cst_height, _cM_);}
   function min_height(_cL_){
    return create_length_field(cst_min_height, _cL_);
   }
   function max_height(_cK_){
    return create_length_field(cst_max_height, _cK_);
   }
   function padding_top(_cJ_){
    return create_length_field(cst_padding_top, _cJ_);
   }
   function padding_bottom(_cI_){
    return create_length_field(cst_padding_bottom, _cI_);
   }
   function padding_left(_cH_){
    return create_length_field(cst_padding_left, _cH_);
   }
   function padding_right(_cG_){
    return create_length_field(cst_padding_right, _cG_);
   }
   function padding(top, bottom, left, right, param){
    var
     m = Core_Option[29],
     _cC_ = [0, caml_call2(m, right, padding_right), 0],
     _cD_ = [0, caml_call2(m, left, padding_left), _cC_],
     _cE_ = [0, caml_call2(m, bottom, padding_bottom), _cD_],
     _cF_ = [0, caml_call2(m, top, padding_top), _cE_];
    return concat(caml_call1(Core_List[124], _cF_));
   }
   function uniform_padding(l){
    return padding([0, l], [0, l], [0, l], [0, l], 0);
   }
   function margin_top(_cB_){
    return create_length_field(cst_margin_top, _cB_);
   }
   function margin_bottom(_cA_){
    return create_length_field(cst_margin_bottom, _cA_);
   }
   function margin_left(_cz_){
    return create_length_field(cst_margin_left, _cz_);
   }
   function margin_right(_cy_){
    return create_length_field(cst_margin_right, _cy_);
   }
   function margin(top, bottom, left, right, param){
    var
     m = Core_Option[29],
     _cu_ = [0, caml_call2(m, right, margin_right), 0],
     _cv_ = [0, caml_call2(m, left, margin_left), _cu_],
     _cw_ = [0, caml_call2(m, bottom, margin_bottom), _cv_],
     _cx_ = [0, caml_call2(m, top, margin_top), _cw_];
    return concat(caml_call1(Core_List[124], _cx_));
   }
   function uniform_margin(l){
    return margin([0, l], [0, l], [0, l], [0, l], 0);
   }
   function concat2v(v1, v2){
    if(! caml_string_notequal(v1, cst$40)) return v2;
    if(! caml_string_notequal(v2, cst$40)) return v1;
    var _ct_ = caml_call2(Core[18], cst$33, v2);
    return caml_call2(Core[18], v1, _ct_);
   }
   function concat3v(v1, v2, v3){return concat2v(concat2v(v1, v2), v3);}
   function border_value(width, color, style, param){
    var
     style$0 =
       -72987685 <= style
        ? 19559306
          <= style
          ? 418396260
            <= style
            ? 870530776 <= style ? cst_none$1 : cst_initial$11
            : 334701579 <= style ? cst_solid : cst_hidden$1
          : -57723893 <= style ? cst_ridge : cst_inherit$11
        : -783455043
          <= style
          ? -423359734
            <= style
            ? -413163727 <= style ? cst_double : cst_dotted
            : -696935855 <= style ? cst_dashed : cst_inset
          : -793243622 <= style ? cst_groove : cst_outset,
     width$0 = value_map(width, to_string_css$0),
     color$0 = value_map(color, to_string_css);
    return concat3v(width$0, style$0, color$0);
   }
   function create_border(side, param){
    if(side)
     var
      _cr_ = side[1],
      _cs_ =
        437082891 <= _cr_
         ? 847852583 <= _cr_ ? cst_border_left : cst_border_bottom
         : 4202101 <= _cr_ ? cst_border_top : cst_border_right,
      field = _cs_;
    else
     var field = cst_border;
    return function(width, color, style, param){
     return create_raw(field, border_value(width, color, style, 0));};
   }
   function border_top(width, color, style, param){
    return create_border(_bk_, 0)(width, color, style, 0);
   }
   function border_bottom(width, color, style, param){
    return create_border(_bl_, 0)(width, color, style, 0);
   }
   function border_left(width, color, style, param){
    return create_border(_bm_, 0)(width, color, style, 0);
   }
   function border_right(width, color, style, param){
    return create_border(_bn_, 0)(width, color, style, 0);
   }
   function border(width, color, style, param){
    return create_border(0, 0)(width, color, style, 0);
   }
   function outline(width, color, style, param){
    return create_raw(cst_outline, border_value(width, color, style, 0));
   }
   function border_collapse(v){
    var
     value =
       418396260 <= v
        ? 507973005 <= v ? cst_collapse$0 : cst_initial$12
        : -72987685 <= v ? cst_inherit$12 : cst_separate;
    return create_raw(cst_border_collapse, value);
   }
   function border_spacing(_cq_){
    return create_length_field(cst_border_spacing, _cq_);
   }
   function border_radius(l){
    return create$1(cst_border_radius, to_string_css$0(l));
   }
   function text_decoration(style, color, line, param){
    function _cm_(param){
     return 418396260 <= param
             ? 698610924
               <= param
               ? 870530776 <= param ? cst_none$2 : cst_underline
               : 518168424 <= param ? cst_overline : cst_initial$13
             : -72987685 <= param ? cst_inherit$13 : cst_line_through;
    }
    var
     _cn_ = caml_call2(Core_List[72], line, _cm_),
     line$0 = caml_call2(Core_String[32], _bo_, _cn_);
    if(style)
     var
      _co_ = style[1],
      _cp_ =
        -72987685 <= _co_
         ? 418396260
           <= _co_
           ? 969642477 <= _co_ ? cst_wavy : cst_initial$14
           : 334701579 <= _co_ ? cst_solid$0 : cst_inherit$14
         : -423359734
           === _co_
           ? cst_dotted$0
           : -413163727 <= _co_ ? cst_double$0 : cst_dashed$0,
      style$0 = _cp_;
    else
     var style$0 = cst$34;
    var
     color$0 = value_map(color, to_string_css),
     value = concat3v(line$0, style$0, color$0);
    return create_raw(cst_text_decoration, value);
   }
   function item_alignment_to_string_css(param){
    return -354838363 <= param
            ? 726666127
              <= param
              ? 980392437 <= param ? cst_center$0 : cst_auto$1
              : 555646908 <= param ? cst_flex_start : cst_baseline
            : -401431371 <= param ? cst_flex_end : cst_stretch;
   }
   function flex_container
   (opt, _ch_, _cg_, align_items, justify_content, param){
    if(opt) var sth = opt[1], inline = sth; else var inline = 0;
    if(_ch_)
     var sth$0 = _ch_[1], direction = sth$0;
    else
     var direction = 4102650;
    if(_cg_) var sth$1 = _cg_[1], wrap = sth$1; else var wrap = -397426005;
    var
     direction$0 =
       175421085 <= direction
        ? 744569753 <= direction ? cst_column_reverse : cst_row_reverse
        : 4102650 <= direction ? cst_row : cst_column,
     wrap$0 =
       899936909 === wrap
        ? cst_wrap_reverse
        : 970483178 <= wrap ? cst_wrap : cst_nowrap$0;
    if(align_items)
     var
      a = align_items[1],
      align_items$0 =
        create_raw(cst_align_items, item_alignment_to_string_css(a));
    else
     var align_items$0 = empty;
    if(justify_content)
     var
      a$0 = justify_content[1],
      _ci_ =
        -337248785 <= a$0
         ? 934993376
           <= a$0
           ? 980392437 <= a$0 ? cst_center$1 : cst_space_evenly
           : 555646908 <= a$0 ? cst_flex_start$0 : cst_space_between
         : -401431371 <= a$0 ? cst_flex_end$0 : cst_space_around,
      justify_content$0 = create_raw(cst_justify_content, _ci_);
    else
     var justify_content$0 = empty;
    var
     _cj_ =
       [0,
        create_raw(cst_flex_wrap, wrap$0),
        [0, align_items$0, [0, justify_content$0, 0]]],
     _ck_ = [0, create_raw(cst_flex_direction, direction$0), _cj_],
     _cl_ = inline ? 168351231 : 781663065;
    return concat([0, display(_cl_), _ck_]);
   }
   function flex_item(order, opt, _ca_, grow, param){
    if(opt) var sth = opt[1], basis = sth; else var basis = 726666127;
    if(_ca_) var sth$0 = _ca_[1], shrink = sth$0; else var shrink = 1.;
    function _cb_(i){
     return create_raw(cst_order, caml_call1(Core_Int[82], i));
    }
    var
     _cc_ = caml_call2(Core_Option[29], order, _cb_),
     _cd_ = caml_call1(Core_Option[46], _cc_),
     order$0 = caml_call1(Core_List[27], _cd_),
     basis$0 = to_string_css$1(basis),
     _ce_ = [0, cst$36, [0, f2s(6, shrink), [0, cst$35, [0, basis$0, 0]]]],
     _cf_ = [0, f2s(6, grow), _ce_],
     flex = create_raw(cst_flex$0, caml_call2(Stdlib_String[6], cst$37, _cf_));
    return concat([0, flex, [0, order$0, 0]]);
   }
   function align_self(a){
    var value = item_alignment_to_string_css(a);
    return create_raw(cst_align_self, value);
   }
   function resize(value){
    var
     value$0 =
       208994564 <= value
        ? 737457313
          <= value
          ? 870530776 <= value ? cst_none$3 : cst_both
          : 418396260 <= value ? cst_initial$15 : cst_horizontal
        : -72987685 <= value ? cst_inherit$15 : cst_vertical;
    return create_raw(cst_resize, value$0);
   }
   function animation
   (name,
    duration,
    delay,
    direction,
    fill_mode,
    iter_count,
    timing_function,
    param){
    var m = Core_Option[29];
    function span_to_string(s){
     var _b$_ = [0, f2s(2, caml_call1(Core_Time_ns[1][91], s)), _bp_];
     return caml_call2(Stdlib_String[6], cst$38, _b$_);
    }
    var
     direction$0 =
       caml_call2
        (m,
         direction,
         function(d){
          var
           value =
             -397582078 <= d
              ? -72987685
                <= d
                ? 418396260 <= d ? cst_initial$16 : cst_inherit$16
                : -326048323 <= d ? cst_alternate_reverse : cst_reverse
              : -453122489 <= d ? cst_normal$3 : cst_alternate;
          return create_raw(cst_animation_direction, value);
         }),
     fill_mode$0 =
       caml_call2
        (m,
         fill_mode,
         function(f){
          var
           value =
             418396260 <= f
              ? 813329168
                <= f
                ? 870530776 <= f ? cst_none$4 : cst_backwards
                : 737457313 <= f ? cst_both$0 : cst_initial$17
              : 90990382 <= f ? cst_forwards : cst_inherit$17;
          return create_raw(cst_animation_fill_mode, value);
         }),
     _b5_ = [0, direction$0, [0, fill_mode$0, 0]],
     _b6_ =
       [0,
        caml_call2
         (m,
          timing_function,
          function(value){
           return create_raw(cst_animation_timing_function, value);
          }),
        _b5_],
     _b7_ =
       [0,
        caml_call2
         (m,
          iter_count,
          function(i){
           return create_raw
                   (cst_animation_iteration_count, caml_call1(Core_Int[82], i));
          }),
        _b6_],
     _b8_ =
       [0,
        caml_call2
         (m,
          delay,
          function(s){
           return create_raw(cst_animation_delay, span_to_string(s));
          }),
        _b7_],
     _b9_ =
       [0,
        [0, create_raw(cst_animation_duration, span_to_string(duration))],
        _b8_],
     _b__ = [0, [0, create_raw(cst_animation_name, name)], _b9_];
    return concat(caml_call1(Core_List[124], _b__));
   }
   function user_select(s){
    var
     value =
       870530776 <= s
        ? 936573133 <= s ? cst_text : cst_none$5
        : 726666127 <= s ? cst_auto$2 : cst_all;
    return create_raw(cst_user_select, value);
   }
   function _bq_(param){
    var
     Expect_test_collector$0 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _bC_(param){
     function t(css){
      var
       s = to_string_css$2(css),
       s2 = to_string_css$2(of_string_css_exn(s));
      caml_call1(Core[32], s);
      return caml_call1(Core[32], s2);
     }
     var _b1_ = overflow(-67548115);
     t(combine(flex_item(0, 0, 0, 1., 0), _b1_));
     var _b2_ = border(0, 0, -696935855, 0);
     t(combine(flex_container(_bs_, _br_, 0, 0, 0, 0), _b2_));
     t(color([0, 912890036, [0, 100, 100, 100, 0]]));
     var _b3_ = caml_call1(Core_Percent[71], 0.6);
     t
      (color
        ([0, 802593344, [0, 100, caml_call1(Core_Percent[71], 0.75), _b3_, 0]]));
     t(create$1(cst_content, cst$39));
     var
      _b4_ =
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml),
         819,
         20492,
         20500,
         20506];
     return caml_call1(Expect_test_collector$0[1], _b4_);
    }
    var
     _bD_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$0),
        820,
        20507,
        20515,
        20928],
     _bE_ =
       [0,
        [0,
         _bu_,
         _bt_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$1),
          819,
          20492,
          20500,
          20506],
         _bD_],
        0],
     _bF_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$3),
        800,
        19776,
        19780,
        20929],
     _bG_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_137ca25006cdd4c0890902a6ef);
    caml_call9
     (Expect_test_collector$0[3],
      _bG_,
      _bF_,
      cst_css_gen_src_css_gen_ml$2,
      _bv_,
      0,
      _bE_,
      0,
      Inline_test_config,
      _bC_);
    var
     Expect_test_collector$1 =
       caml_call1(Expect_test_collector[2], Expect_test_config);
    function _bH_(param){
     function p(x){return caml_call1(Core_Percent[71], x);}
     function c(s){return [0, 869834347, s];}
     function t(css){
      var _b0_ = to_string_css$2(css);
      return caml_call1(Core[32], _b0_);
     }
     var
      _bO_ =
        [0,
         912890036,
         [0, 100, 50, 30, [0, caml_call1(Core_Percent[71], 0.75)]]],
      _bP_ = [0, [0, p(1.), _bO_], 0],
      _bQ_ = c(cst_red),
      _bR_ = [0, [0, p(0.4), _bQ_], _bP_],
      _bS_ = c(cst_ff0000),
      _bT_ = [0, [0, p(0.2), _bS_], _bR_],
      _bU_ = c(cst_black);
     t
      (background_image
        ([0, -464780630, [0, _bw_, [0, [0, p(0.), _bU_], _bT_]]]));
     var
      _bV_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$4),
         851,
         21532,
         21540,
         21546];
     caml_call1(Expect_test_collector$1[1], _bV_);
     var
      _bW_ = c(cst_red$0),
      _bX_ = [0, [0, p(1.), _bW_], 0],
      _bY_ = c(cst_black$0);
     t(background_image([0, 411117168, [0, [0, [0, p(0.), _bY_], _bX_]]]));
     var
      _bZ_ =
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$5),
         856,
         21804,
         21812,
         21818];
     return caml_call1(Expect_test_collector$1[1], _bZ_);
    }
    var
     _bI_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$6),
        852,
        21547,
        21555,
        21688],
     _bJ_ =
       [0,
        [0,
         _by_,
         _bx_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$7),
          851,
          21532,
          21540,
          21546],
         _bI_],
        0],
     _bK_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$8),
        856,
        21804,
        21819,
        21892],
     _bL_ =
       [0,
        [0,
         _bA_,
         _bz_,
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$9),
          856,
          21804,
          21812,
          21818],
         _bK_],
        _bJ_],
     _bM_ =
       [0,
        caml_call1
         (Expect_test_common_File[1][6], cst_css_gen_src_css_gen_ml$11),
        833,
        20938,
        20942,
        21893],
     _bN_ =
       caml_call1
        (Expect_test_common_File[4][3], cst_137ca25006cdd4c0890902a6ef$0);
    caml_call9
     (Expect_test_collector$1[3],
      _bN_,
      _bM_,
      cst_css_gen_src_css_gen_ml$10,
      _bB_,
      0,
      _bL_,
      0,
      Inline_test_config,
      _bH_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[6],
     Inline_test_config,
     cst_tests,
     0,
     cst_css_gen_src_css_gen_ml$12,
     798,
     0,
     2173,
     _bq_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_css_gen);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Css_gen);
   var
    Css_gen =
      [0,
       sexp_of_css_global_values,
       css_global_values_of_sexp$0,
       css_global_values_of_sexp,
       compare_css_global_values,
       [0,
        [0,
         t_of_sexp$0,
         sexp_of_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         create],
        [0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         create$0],
        sexp_of_t$2,
        t_of_sexp$3,
        t_of_sexp$2,
        bin_size_t$2,
        bin_write_t$2,
        bin_read_t$6,
        bin_read_t$5,
        bin_shape_t$2,
        bin_writer_t$2,
        bin_reader_t$2,
        bin_t$2,
        compare$2,
        to_string_css],
       [0,
        sexp_of_t$3,
        t_of_sexp$5,
        t_of_sexp$4,
        compare$3,
        percent100,
        to_string_css$0],
       [0, sexp_of_t$4, t_of_sexp$7, t_of_sexp$6, compare$4, to_string_css$1],
       t_of_sexp,
       sexp_of_t,
       compare,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       create$1,
       empty,
       is_empty,
       position,
       top,
       bottom,
       left,
       right,
       combine,
       combine,
       concat,
       to_string_list,
       to_string_css$2,
       of_string_css_exn,
       box_sizing,
       display,
       visibility,
       overflow,
       overflow_x,
       overflow_y,
       z_index,
       opacity,
       font_size,
       font_family,
       font_style,
       font_weight,
       font_variant,
       font,
       bold,
       create_with_color,
       color,
       background_color,
       background_image,
       fill,
       text_align,
       horizontal_align,
       vertical_align,
       white_space,
       float$0,
       width,
       min_width,
       max_width,
       height,
       min_height,
       max_height,
       padding_top,
       padding_bottom,
       padding_left,
       padding_right,
       uniform_padding,
       padding,
       margin_top,
       margin_bottom,
       margin_left,
       margin_right,
       uniform_margin,
       margin,
       border_top,
       border_bottom,
       border_left,
       border_right,
       border,
       border_radius,
       border_collapse,
       border_spacing,
       outline,
       text_decoration,
       flex_container,
       flex_item,
       align_self,
       resize,
       animation,
       user_select,
       [0,
        [0,
         t_of_sexp,
         sexp_of_t,
         compare,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t]],
       Expert,
       Private];
   runtime.caml_register_global(584, Css_gen, cst_Css_gen$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
