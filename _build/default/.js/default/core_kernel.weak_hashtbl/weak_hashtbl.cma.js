// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Weak_hashtbl__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Weak_hashtbl = [0];
   runtime.caml_register_global(0, Weak_hashtbl, "Weak_hashtbl__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Weak_hashtbl__Import
//# unitInfo: Requires: Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Weak_hashtbl_Import = "Weak_hashtbl__Import",
    cst_weak_hashtbl = "weak_hashtbl";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core = global_data.Core;
   caml_call1(Ppx_module_timer_runtime[4], cst_Weak_hashtbl_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_weak_hashtbl);
   caml_call1(Expect_test_collector[5][1], "weak_hashtbl/src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_weak_hashtbl, cst);
   var
    Caml = Core[1],
    Mutex = Core[2],
    Thread = Core[3],
    Unix = Core[4],
    invalid_arg = Core[5],
    failwith = Core[6],
    Exit = Core[7],
    abs = Core[8],
    max_int = Core[9],
    min_int = Core[10],
    lnot = Core[11],
    infinity = Core[12],
    neg_infinity = Core[13],
    nan = Core[14],
    max_float = Core[15],
    min_float = Core[16],
    epsilon_float = Core[17],
    symbol = Core[18],
    char_of_int = Core[19],
    string_of_bool = Core[20],
    bool_of_string = Core[21],
    string_of_int = Core[22],
    string_of_float = Core[23],
    stdin = Core[24],
    stdout = Core[25],
    stderr = Core[26],
    print_char = Core[27],
    print_string = Core[28],
    print_bytes = Core[29],
    print_int = Core[30],
    print_float = Core[31],
    print_endline = Core[32],
    print_newline = Core[33],
    prerr_char = Core[34],
    prerr_string = Core[35],
    prerr_bytes = Core[36],
    prerr_int = Core[37],
    prerr_float = Core[38],
    prerr_endline = Core[39],
    prerr_newline = Core[40],
    read_line = Core[41],
    read_int = Core[42],
    read_float = Core[43],
    open_out = Core[44],
    open_out_bin = Core[45],
    open_out_gen = Core[46],
    flush = Core[47],
    flush_all = Core[48],
    output_char = Core[49],
    output_string = Core[50],
    output_bytes = Core[51],
    output = Core[52],
    output_substring = Core[53],
    output_byte = Core[54],
    output_binary_int = Core[55],
    output_value = Core[56],
    seek_out = Core[57],
    pos_out = Core[58],
    out_channel_length = Core[59],
    close_out = Core[60],
    close_out_noerr = Core[61],
    set_binary_mode_out = Core[62],
    open_in = Core[63],
    open_in_bin = Core[64],
    open_in_gen = Core[65],
    input_char = Core[66],
    input_line = Core[67],
    input = Core[68],
    really_input = Core[69],
    really_input_string = Core[70],
    input_byte = Core[71],
    input_binary_int = Core[72],
    input_value = Core[73],
    seek_in = Core[74],
    pos_in = Core[75],
    in_channel_length = Core[76],
    close_in = Core[77],
    close_in_noerr = Core[78],
    set_binary_mode_in = Core[79],
    LargeFile = Core[80],
    string_of_format = Core[81],
    symbol$0 = Core[82],
    exit = Core[83],
    at_exit = Core[84],
    valid_float_lexem = Core[85],
    unsafe_really_input = Core[86],
    do_at_exit = Core[87],
    symbol$1 = Core[88],
    symbol$2 = Core[89],
    symbol$3 = Core[90],
    symbol$4 = Core[91],
    symbol$5 = Core[92],
    symbol$6 = Core[93],
    equal = Core[94],
    compare = Core[95],
    min = Core[96],
    max = Core[97],
    quickcheck_generator_unit = Core[98],
    quickcheck_generator_bool = Core[99],
    quickcheck_generator_char = Core[100],
    quickcheck_generator_string = Core[101],
    quickcheck_generator_bytes = Core[102],
    quickcheck_generator_int = Core[103],
    quickcheck_generator_int32 = Core[104],
    quickcheck_generator_int64 = Core[105],
    quickcheck_generator_nativeint = Core[106],
    quickcheck_generator_float = Core[107],
    quickcheck_observer_unit = Core[108],
    quickcheck_observer_bool = Core[109],
    quickcheck_observer_char = Core[110],
    quickcheck_observer_string = Core[111],
    quickcheck_observer_bytes = Core[112],
    quickcheck_observer_int = Core[113],
    quickcheck_observer_int32 = Core[114],
    quickcheck_observer_int64 = Core[115],
    quickcheck_observer_nativeint = Core[116],
    quickcheck_observer_float = Core[117],
    quickcheck_shrinker_unit = Core[118],
    quickcheck_shrinker_bool = Core[119],
    quickcheck_shrinker_char = Core[120],
    quickcheck_shrinker_string = Core[121],
    quickcheck_shrinker_bytes = Core[122],
    quickcheck_shrinker_int = Core[123],
    quickcheck_shrinker_int32 = Core[124],
    quickcheck_shrinker_int64 = Core[125],
    quickcheck_shrinker_nativeint = Core[126],
    quickcheck_shrinker_float = Core[127],
    quickcheck_generator_option = Core[128],
    quickcheck_generator_list = Core[129],
    quickcheck_generator_array = Core[130],
    quickcheck_generator_ref = Core[131],
    quickcheck_generator_lazy_t = Core[132],
    quickcheck_observer_option = Core[133],
    quickcheck_observer_list = Core[134],
    quickcheck_observer_array = Core[135],
    quickcheck_observer_ref = Core[136],
    quickcheck_observer_lazy_t = Core[137],
    quickcheck_shrinker_option = Core[138],
    quickcheck_shrinker_list = Core[139],
    quickcheck_shrinker_array = Core[140],
    quickcheck_shrinker_ref = Core[141],
    quickcheck_shrinker_lazy_t = Core[142],
    symbol$7 = Core[143],
    sexp_of_bigstring = Core[144],
    bigstring_of_sexp = Core[145],
    sexp_of_mat = Core[146],
    mat_of_sexp = Core[147],
    sexp_of_vec = Core[148],
    vec_of_sexp = Core[149],
    sexp_of_opaque = Core[150],
    opaque_of_sexp = Core[151],
    sexp_of_pair = Core[152],
    pair_of_sexp = Core[153],
    Of_sexp_error = Core[154],
    of_sexp_error = Core[155],
    of_sexp_error_exn = Core[156],
    symbol$8 = Core[157],
    sexp_of_never_returns = Core[158],
    never_returns = Core[159],
    bin_shape_read = Core[160],
    bin_size_read = Core[161],
    bin_write_read = Core[162],
    bin_writer_read = Core[163],
    bin_read_read = Core[164],
    bin_read_read$0 = Core[165],
    bin_reader_read = Core[166],
    bin_read = Core[167],
    compare_read = Core[168],
    hash_fold_read = Core[169],
    hash_read = Core[170],
    sexp_of_read = Core[171],
    read_of_sexp = Core[172],
    compare_write = Core[173],
    hash_fold_write = Core[174],
    hash_write = Core[175],
    sexp_of_write = Core[176],
    write_of_sexp = Core[177],
    bin_shape_immutable = Core[178],
    bin_size_immutable = Core[179],
    bin_write_immutable = Core[180],
    bin_writer_immutable = Core[181],
    bin_read_immutable = Core[182],
    bin_read_immutable$0 = Core[183],
    bin_reader_immutable = Core[184],
    bin_immutable = Core[185],
    compare_immutable = Core[186],
    hash_fold_immutable = Core[187],
    hash_immutable = Core[188],
    sexp_of_immutable = Core[189],
    immutable_of_sexp = Core[190],
    bin_shape_read_write = Core[191],
    bin_size_read_write = Core[192],
    bin_write_read_write = Core[193],
    bin_writer_read_write = Core[194],
    bin_read_read_write = Core[195],
    bin_read_read_write$0 = Core[196],
    bin_reader_read_write = Core[197],
    bin_read_write = Core[198],
    compare_read_write = Core[199],
    hash_fold_read_write = Core[200],
    hash_read_write = Core[201],
    sexp_of_read_write = Core[202],
    read_write_of_sexp = Core[203],
    bin_shape_perms = Core[204],
    bin_size_perms = Core[205],
    bin_write_perms = Core[206],
    bin_writer_perms = Core[207],
    bin_read_perms = Core[208],
    bin_read_perms$0 = Core[209],
    bin_reader_perms = Core[210],
    bin_perms = Core[211],
    compare_perms = Core[212],
    hash_fold_perms = Core[213],
    sexp_of_perms = Core[214],
    perms_of_sexp = Core[215],
    is_ok = Core[216],
    is_error = Core[217],
    Bug = Core[218],
    C_malloc_exn = Core[219],
    Finally = Core[220],
    fst3 = Core[221],
    snd3 = Core[222],
    trd3 = Core[223],
    uw = Core[224],
    symbol$9 = Core[225],
    symbol$10 = Core[226],
    symbol$11 = Core[227],
    symbol$12 = Core[228],
    bprintf = Core[229],
    const$0 = Core[230],
    eprintf = Core[231],
    error = Core[232],
    error_s = Core[233],
    failwithf = Core[234],
    failwithp = Core[235],
    failwiths = Core[236],
    force = Core[237],
    fprintf = Core[238],
    ident = Core[239],
    invalid_argf = Core[240],
    ifprintf = Core[241],
    is_none = Core[242],
    is_some = Core[243],
    ksprintf = Core[244],
    ok_exn = Core[245],
    phys_equal = Core[246],
    phys_same = Core[247],
    print_s = Core[248],
    eprint_s = Core[249],
    printf = Core[250],
    protect = Core[251],
    protectx = Core[252],
    raise_s = Core[253],
    round = Core[254],
    symbol$13 = Core[255],
    symbol$14 = Core[256],
    sprintf = Core[257],
    stage = Core[258],
    unstage = Core[259],
    with_return = Core[260],
    with_return_option = Core[261],
    Typerep = Core[262],
    typerep_of_int63 = Core[263],
    value_tuple0 = Core[264],
    typerep_of_function = Core[265],
    typerep_of_tuple0 = Core[266],
    typerep_of_tuple2 = Core[267],
    typerep_of_tuple3 = Core[268],
    typerep_of_tuple4 = Core[269],
    typerep_of_tuple5 = Core[270],
    typename_of_int63 = Core[271],
    typename_of_function = Core[272],
    typename_of_tuple0 = Core[273],
    typename_of_tuple2 = Core[274],
    typename_of_tuple3 = Core[275],
    typename_of_tuple4 = Core[276],
    typename_of_tuple5 = Core[277],
    bin_shape_array = Core[278],
    bin_size_array = Core[279],
    bin_write_array = Core[280],
    bin_writer_array = Core[281],
    bin_read_array = Core[282],
    bin_read_array$0 = Core[283],
    bin_reader_array = Core[284],
    bin_array = Core[285],
    compare_array = Core[286],
    equal_array = Core[287],
    sexp_of_array = Core[288],
    array_of_sexp = Core[289],
    array_sexp_grammar = Core[290],
    typerep_of_array = Core[291],
    typename_of_array = Core[292],
    bin_shape_bool = Core[293],
    bin_size_bool = Core[294],
    bin_write_bool = Core[295],
    bin_writer_bool = Core[296],
    bin_read_bool = Core[297],
    bin_read_bool$0 = Core[298],
    bin_reader_bool = Core[299],
    bin_bool = Core[300],
    compare_bool = Core[301],
    equal_bool = Core[302],
    hash_fold_bool = Core[303],
    hash_bool = Core[304],
    sexp_of_bool = Core[305],
    bool_of_sexp = Core[306],
    bool_sexp_grammar = Core[307],
    typerep_of_bool = Core[308],
    typename_of_bool = Core[309],
    bin_shape_char = Core[310],
    bin_size_char = Core[311],
    bin_write_char = Core[312],
    bin_writer_char = Core[313],
    bin_read_char = Core[314],
    bin_read_char$0 = Core[315],
    bin_reader_char = Core[316],
    bin_char = Core[317],
    compare_char = Core[318],
    equal_char = Core[319],
    hash_fold_char = Core[320],
    hash_char = Core[321],
    sexp_of_char = Core[322],
    char_of_sexp = Core[323],
    char_sexp_grammar = Core[324],
    typerep_of_char = Core[325],
    typename_of_char = Core[326],
    bin_shape_float = Core[327],
    bin_size_float = Core[328],
    bin_write_float = Core[329],
    bin_writer_float = Core[330],
    bin_read_float = Core[331],
    bin_read_float$0 = Core[332],
    bin_reader_float = Core[333],
    bin_float = Core[334],
    compare_float = Core[335],
    equal_float = Core[336],
    hash_fold_float = Core[337],
    hash_float = Core[338],
    sexp_of_float = Core[339],
    float_of_sexp = Core[340],
    float_sexp_grammar = Core[341],
    typerep_of_float = Core[342],
    typename_of_float = Core[343],
    bin_shape_int = Core[344],
    bin_size_int = Core[345],
    bin_write_int = Core[346],
    bin_writer_int = Core[347],
    bin_read_int = Core[348],
    bin_read_int$0 = Core[349],
    bin_reader_int = Core[350],
    bin_int = Core[351],
    compare_int = Core[352],
    equal_int = Core[353],
    hash_fold_int = Core[354],
    hash_int = Core[355],
    sexp_of_int = Core[356],
    int_of_sexp = Core[357],
    int_sexp_grammar = Core[358],
    typerep_of_int = Core[359],
    typename_of_int = Core[360],
    bin_shape_int32 = Core[361],
    bin_size_int32 = Core[362],
    bin_write_int32 = Core[363],
    bin_writer_int32 = Core[364],
    bin_read_int32 = Core[365],
    bin_read_int32$0 = Core[366],
    bin_reader_int32 = Core[367],
    bin_int32 = Core[368],
    compare_int32 = Core[369],
    equal_int32 = Core[370],
    hash_fold_int32 = Core[371],
    hash_int32 = Core[372],
    sexp_of_int32 = Core[373],
    int32_of_sexp = Core[374],
    int32_sexp_grammar = Core[375],
    typerep_of_int32 = Core[376],
    typename_of_int32 = Core[377],
    bin_shape_int64 = Core[378],
    bin_size_int64 = Core[379],
    bin_write_int64 = Core[380],
    bin_writer_int64 = Core[381],
    bin_read_int64 = Core[382],
    bin_read_int64$0 = Core[383],
    bin_reader_int64 = Core[384],
    bin_int64 = Core[385],
    compare_int64 = Core[386],
    equal_int64 = Core[387],
    hash_fold_int64 = Core[388],
    hash_int64 = Core[389],
    sexp_of_int64 = Core[390],
    int64_of_sexp = Core[391],
    int64_sexp_grammar = Core[392],
    typerep_of_int64 = Core[393],
    typename_of_int64 = Core[394],
    bin_shape_lazy_t = Core[395],
    bin_size_lazy_t = Core[396],
    bin_write_lazy_t = Core[397],
    bin_writer_lazy_t = Core[398],
    bin_read_lazy_t = Core[399],
    bin_read_lazy_t$0 = Core[400],
    bin_reader_lazy_t = Core[401],
    bin_lazy_t = Core[402],
    compare_lazy_t = Core[403],
    hash_fold_lazy_t = Core[404],
    sexp_of_lazy_t = Core[405],
    lazy_t_of_sexp = Core[406],
    lazy_t_sexp_grammar = Core[407],
    typerep_of_lazy_t = Core[408],
    typename_of_lazy_t = Core[409],
    bin_shape_list = Core[410],
    bin_size_list = Core[411],
    bin_write_list = Core[412],
    bin_writer_list = Core[413],
    bin_read_list = Core[414],
    bin_read_list$0 = Core[415],
    bin_reader_list = Core[416],
    bin_list = Core[417],
    compare_list = Core[418],
    equal_list = Core[419],
    hash_fold_list = Core[420],
    sexp_of_list = Core[421],
    list_of_sexp = Core[422],
    list_sexp_grammar = Core[423],
    typerep_of_list = Core[424],
    typename_of_list = Core[425],
    bin_shape_nativeint = Core[426],
    bin_size_nativeint = Core[427],
    bin_write_nativeint = Core[428],
    bin_writer_nativeint = Core[429],
    bin_read_nativeint = Core[430],
    bin_read_nativeint$0 = Core[431],
    bin_reader_nativeint = Core[432],
    bin_nativeint = Core[433],
    compare_nativeint = Core[434],
    equal_nativeint = Core[435],
    hash_fold_nativeint = Core[436],
    hash_nativeint = Core[437],
    sexp_of_nativeint = Core[438],
    nativeint_of_sexp = Core[439],
    nativeint_sexp_grammar = Core[440],
    typerep_of_nativeint = Core[441],
    typename_of_nativeint = Core[442],
    bin_shape_option = Core[443],
    bin_size_option = Core[444],
    bin_write_option = Core[445],
    bin_writer_option = Core[446],
    bin_read_option = Core[447],
    bin_read_option$0 = Core[448],
    bin_reader_option = Core[449],
    bin_option = Core[450],
    compare_option = Core[451],
    equal_option = Core[452],
    hash_fold_option = Core[453],
    sexp_of_option = Core[454],
    option_of_sexp = Core[455],
    option_sexp_grammar = Core[456],
    typerep_of_option = Core[457],
    typename_of_option = Core[458],
    bin_shape_string = Core[459],
    bin_size_string = Core[460],
    bin_write_string = Core[461],
    bin_writer_string = Core[462],
    bin_read_string = Core[463],
    bin_read_string$0 = Core[464],
    bin_reader_string = Core[465],
    bin_string = Core[466],
    compare_string = Core[467],
    equal_string = Core[468],
    hash_fold_string = Core[469],
    hash_string = Core[470],
    sexp_of_string = Core[471],
    string_of_sexp = Core[472],
    string_sexp_grammar = Core[473],
    typerep_of_string = Core[474],
    typename_of_string = Core[475],
    bin_shape_bytes = Core[476],
    bin_size_bytes = Core[477],
    bin_write_bytes = Core[478],
    bin_writer_bytes = Core[479],
    bin_read_bytes = Core[480],
    bin_read_bytes$0 = Core[481],
    bin_reader_bytes = Core[482],
    bin_bytes = Core[483],
    compare_bytes = Core[484],
    equal_bytes = Core[485],
    sexp_of_bytes = Core[486],
    bytes_of_sexp = Core[487],
    bytes_sexp_grammar = Core[488],
    typerep_of_bytes = Core[489],
    typename_of_bytes = Core[490],
    bin_shape_ref = Core[491],
    bin_size_ref = Core[492],
    bin_write_ref = Core[493],
    bin_writer_ref = Core[494],
    bin_read_ref = Core[495],
    bin_read_ref$0 = Core[496],
    bin_reader_ref = Core[497],
    bin_ref = Core[498],
    compare_ref = Core[499],
    equal_ref = Core[500],
    sexp_of_ref = Core[501],
    ref_of_sexp = Core[502],
    ref_sexp_grammar = Core[503],
    typerep_of_ref = Core[504],
    typename_of_ref = Core[505],
    bin_shape_unit = Core[506],
    bin_size_unit = Core[507],
    bin_write_unit = Core[508],
    bin_writer_unit = Core[509],
    bin_read_unit = Core[510],
    bin_read_unit$0 = Core[511],
    bin_reader_unit = Core[512],
    bin_unit = Core[513],
    compare_unit = Core[514],
    equal_unit = Core[515],
    hash_fold_unit = Core[516],
    hash_unit = Core[517],
    sexp_of_unit = Core[518],
    unit_of_sexp = Core[519],
    unit_sexp_grammar = Core[520],
    typerep_of_unit = Core[521],
    typename_of_unit = Core[522],
    bin_shape_float_array = Core[523],
    bin_size_float_array = Core[524],
    bin_write_float_array = Core[525],
    bin_writer_float_array = Core[526],
    bin_read_float_array = Core[527],
    bin_read_float_array$0 = Core[528],
    bin_reader_float_array = Core[529],
    bin_float_array = Core[530],
    compare_float_array = Core[531],
    sexp_of_float_array = Core[532],
    float_array_of_sexp = Core[533],
    float_array_sexp_grammar = Core[534],
    typerep_of_float_array = Core[535],
    typename_of_float_array = Core[536],
    sexp_of_exn = Core[537],
    Not_found = Core[538],
    Not_found_s = Core[539],
    am_running_inline_test = Core[540],
    am_running_test = Core[541],
    does_raise = Core[542],
    sec = Core[543],
    symbol$15 = Core[544],
    Core_private = Core[545];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_weak_hashtbl);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Weak_hashtbl_Import);
   var
    Weak_hashtbl_Import =
      [0,
       Caml,
       Mutex,
       Thread,
       Unix,
       invalid_arg,
       failwith,
       Exit,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       equal,
       compare,
       min,
       max,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t,
       symbol$7,
       sexp_of_bigstring,
       bigstring_of_sexp,
       sexp_of_mat,
       mat_of_sexp,
       sexp_of_vec,
       vec_of_sexp,
       sexp_of_opaque,
       opaque_of_sexp,
       sexp_of_pair,
       pair_of_sexp,
       Of_sexp_error,
       of_sexp_error,
       of_sexp_error_exn,
       symbol$8,
       sexp_of_never_returns,
       never_returns,
       bin_shape_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_read_read,
       bin_read_read$0,
       bin_reader_read,
       bin_read,
       compare_read,
       hash_fold_read,
       hash_read,
       sexp_of_read,
       read_of_sexp,
       compare_write,
       hash_fold_write,
       hash_write,
       sexp_of_write,
       write_of_sexp,
       bin_shape_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_read_immutable,
       bin_read_immutable$0,
       bin_reader_immutable,
       bin_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       sexp_of_immutable,
       immutable_of_sexp,
       bin_shape_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_read_read_write,
       bin_read_read_write$0,
       bin_reader_read_write,
       bin_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       sexp_of_read_write,
       read_write_of_sexp,
       bin_shape_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_read_perms,
       bin_read_perms$0,
       bin_reader_perms,
       bin_perms,
       compare_perms,
       hash_fold_perms,
       sexp_of_perms,
       perms_of_sexp,
       is_ok,
       is_error,
       Bug,
       C_malloc_exn,
       Finally,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       bprintf,
       const$0,
       eprintf,
       error,
       error_s,
       failwithf,
       failwithp,
       failwiths,
       force,
       fprintf,
       ident,
       invalid_argf,
       ifprintf,
       is_none,
       is_some,
       ksprintf,
       ok_exn,
       phys_equal,
       phys_same,
       print_s,
       eprint_s,
       printf,
       protect,
       protectx,
       raise_s,
       round,
       symbol$13,
       symbol$14,
       sprintf,
       stage,
       unstage,
       with_return,
       with_return_option,
       Typerep,
       typerep_of_int63,
       value_tuple0,
       typerep_of_function,
       typerep_of_tuple0,
       typerep_of_tuple2,
       typerep_of_tuple3,
       typerep_of_tuple4,
       typerep_of_tuple5,
       typename_of_int63,
       typename_of_function,
       typename_of_tuple0,
       typename_of_tuple2,
       typename_of_tuple3,
       typename_of_tuple4,
       typename_of_tuple5,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array,
       bin_read_array$0,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_bool,
       bin_write_bool,
       bin_writer_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_reader_bool,
       bin_bool,
       compare_bool,
       equal_bool,
       hash_fold_bool,
       hash_bool,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       bin_size_char,
       bin_write_char,
       bin_writer_char,
       bin_read_char,
       bin_read_char$0,
       bin_reader_char,
       bin_char,
       compare_char,
       equal_char,
       hash_fold_char,
       hash_char,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_float,
       bin_write_float,
       bin_writer_float,
       bin_read_float,
       bin_read_float$0,
       bin_reader_float,
       bin_float,
       compare_float,
       equal_float,
       hash_fold_float,
       hash_float,
       sexp_of_float,
       float_of_sexp,
       float_sexp_grammar,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_int,
       bin_write_int,
       bin_writer_int,
       bin_read_int,
       bin_read_int$0,
       bin_reader_int,
       bin_int,
       compare_int,
       equal_int,
       hash_fold_int,
       hash_int,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_int32,
       bin_write_int32,
       bin_writer_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_reader_int32,
       bin_int32,
       compare_int32,
       equal_int32,
       hash_fold_int32,
       hash_int32,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_int64,
       bin_write_int64,
       bin_writer_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_reader_int64,
       bin_int64,
       compare_int64,
       equal_int64,
       hash_fold_int64,
       hash_int64,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t,
       bin_read_lazy_t$0,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       hash_fold_lazy_t,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list,
       bin_read_list$0,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_list,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_nativeint,
       bin_write_nativeint,
       bin_writer_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_reader_nativeint,
       bin_nativeint,
       compare_nativeint,
       equal_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option,
       bin_read_option$0,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_option,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_string,
       bin_write_string,
       bin_writer_string,
       bin_read_string,
       bin_read_string$0,
       bin_reader_string,
       bin_string,
       compare_string,
       equal_string,
       hash_fold_string,
       hash_string,
       sexp_of_string,
       string_of_sexp,
       string_sexp_grammar,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_bytes,
       bin_write_bytes,
       bin_writer_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_reader_bytes,
       bin_bytes,
       compare_bytes,
       equal_bytes,
       sexp_of_bytes,
       bytes_of_sexp,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref,
       bin_read_ref$0,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_unit,
       bin_write_unit,
       bin_writer_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_reader_unit,
       bin_unit,
       compare_unit,
       equal_unit,
       hash_fold_unit,
       hash_unit,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array,
       bin_read_float_array$0,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       sexp_of_exn,
       Not_found,
       Not_found_s,
       am_running_inline_test,
       am_running_test,
       does_raise,
       sec,
       symbol$15,
       Core_private];
   runtime.caml_register_global
    (12, Weak_hashtbl_Import, cst_Weak_hashtbl_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Weak_hashtbl
//# unitInfo: Requires: Base__Hashable, Core__Gc, Core__Hashtbl, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Thread_safe_queue, Weak_hashtbl__Import, Weak_pointer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Weak_hashtbl$0 = "Weak_hashtbl",
    cst$0 = "_",
    cst_weak_hashtbl$0 = "weak_hashtbl",
    cst_weak_hashtbl_src_weak_hash = "weak_hashtbl/src/weak_hashtbl.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Weak_pointer = global_data.Weak_pointer,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Weak_hashtbl_Import = global_data.Weak_hashtbl__Import,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Core_Gc = global_data.Core__Gc,
    Base_Hashable = global_data.Base__Hashable,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Weak_hashtbl$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_weak_hashtbl$0);
   caml_call1(Expect_test_collector[5][1], cst_weak_hashtbl_src_weak_hash);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_weak_hashtbl$0, cst);
   var
    _e_ = [0, cst$0],
    _d_ = [0, cst$0],
    cst_Weak_hashtbl_add_exn_of_ke = "Weak_hashtbl.add_exn of key in use",
    _f_ = [0, cst_weak_hashtbl_src_weak_hash, 68, 2177, 2200],
    _a_ = [0, "thread_safe_run_when_unused_data"],
    _b_ = [0, "keys_with_unused_data"],
    _c_ = [0, "entry_by_key"],
    cst_weak_hashtbl = cst_weak_hashtbl$0,
    cst_Weak_hashtbl = cst_Weak_hashtbl$0;
   function sexp_of_t(of_a_001, of_b_002, param){
    var
     keys_with_unused_data_006 = param[2],
     entry_by_key_004 = param[1],
     bnds_003 = 0;
    function _p_(_r_){return 0;}
    var
     arg_009 = caml_call1(Sexplib0_Sexp_conv[24], _p_),
     bnds_003$0 = [0, [1, [0, _a_, [0, arg_009, 0]]], bnds_003],
     arg_007 =
       caml_call2(Thread_safe_queue[1], of_a_001, keys_with_unused_data_006),
     bnds_003$1 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_003$0],
     _q_ = caml_call1(Weak_pointer[1], of_b_002),
     arg_005 = caml_call3(Core_Hashtbl[3], of_a_001, _q_, entry_by_key_004),
     bnds_003$2 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003$1];
    return [1, bnds_003$2];
   }
   function create(growth_allowed, size, hashable){
    function _m_(_o_){return 0;}
    var _n_ = caml_call1(Thread_safe_queue[3], 0);
    return [0,
            caml_call4(Core_Hashtbl[84][1], growth_allowed, size, hashable, 0),
            _n_,
            _m_];
   }
   var Using_hashable = [0, create];
   function create$0(growth_allowed, size, m){
    var _l_ = caml_call1(Base_Hashable[3], m);
    return caml_call3(Using_hashable[1], growth_allowed, size, _l_);
   }
   function set_run_when_unused_data(t, thread_safe_f){t[3] = thread_safe_f; return 0;
   }
   function remove(t, key){return caml_call2(Core_Hashtbl[31], t[1], key);}
   function reclaim_space_for_keys_with_un(t){
    for(;;){
     var _k_ = caml_call1(Thread_safe_queue[4], t[2]);
     if(! caml_call2(Weak_hashtbl_Import[91], _k_, 0)) return 0;
     var
      key = caml_call1(Thread_safe_queue[6], t[2]),
      match = caml_call2(Core_Hashtbl[53], t[1], key);
     if(match){
      var entry = match[1];
      if(caml_call1(Weak_pointer[5], entry)) remove(t, key);
     }
    }
   }
   function get_entry(t, key){
    function _j_(param){return caml_call1(Weak_pointer[2], 0);}
    return caml_call3(Core_Hashtbl[51], t[1], key, _j_);
   }
   function mem(t, key){
    var match = caml_call2(Core_Hashtbl[53], t[1], key);
    if(! match) return 0;
    var entry = match[1];
    return caml_call1(Weak_pointer[4], entry);
   }
   function key_is_using_space(t, key){
    return caml_call2(Core_Hashtbl[30], t[1], key);
   }
   function set_data(t, key, entry, data){
    caml_call2(Weak_pointer[6], entry, data);
    function _i_(param){
     caml_call2(Thread_safe_queue[5], t[2], key);
     return caml_call1(t[3], 0);
    }
    return caml_call2(Core_Gc[10][3], data, _i_);
   }
   function replace(t, key, data){
    return set_data(t, key, get_entry(t, key), data);
   }
   function add_exn(t, key, data){
    var entry = get_entry(t, key);
    if(caml_call1(Weak_pointer[4], entry)){
     var
      _g_ =
        function(x_010){
         function _h_(param){return _d_;}
         return sexp_of_t(function(param){return _e_;}, _h_, x_010);
        };
     caml_call5
      (Weak_hashtbl_Import[236],
       0,
       _f_,
       cst_Weak_hashtbl_add_exn_of_ke,
       t,
       _g_);
    }
    return set_data(t, key, entry, data);
   }
   function find(t, key){
    var match = caml_call2(Core_Hashtbl[53], t[1], key);
    if(! match) return 0;
    var entry = match[1];
    return caml_call1(Weak_pointer[3], entry);
   }
   function find_or_add(t, key, default$0){
    var entry = get_entry(t, key), match = caml_call1(Weak_pointer[3], entry);
    if(match){var v = match[1]; return v;}
    var data = caml_call1(default$0, 0);
    set_data(t, key, entry, data);
    return data;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_weak_hashtbl);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Weak_hashtbl);
   var
    Weak_hashtbl =
      [0,
       sexp_of_t,
       create$0,
       Using_hashable,
       mem,
       find,
       find_or_add,
       remove,
       add_exn,
       replace,
       key_is_using_space,
       reclaim_space_for_keys_with_un,
       set_run_when_unused_data];
   runtime.caml_register_global(25, Weak_hashtbl, cst_Weak_hashtbl$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
