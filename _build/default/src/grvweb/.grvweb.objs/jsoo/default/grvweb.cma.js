// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Color
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    red = '"#FF5C56"',
    orange = '"#FFB643"',
    green = '"#A4FF77"',
    blue = '"#87E2FF"',
    purple = '"#D7BBD9"',
    white = '"#FFFFFF"',
    black = '"#000000#"',
    Color = [0, red, orange, green, blue, purple, white, black];
   runtime.caml_register_global(7, Color, "Color");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Stdlib, Stdlib__Array, Stdlib__Int, Stdlib__Printf, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "')",
    cst$9 = "', ",
    cst$11 = "', '",
    cst$8 = ")",
    caml_js_eval_string = runtime.caml_js_eval_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$7 = "') || ''",
    cst$5 = cst$8,
    cst$6 = cst$9,
    cst$3 = cst$8,
    cst$4 = cst$9,
    cst$2 = cst$10,
    cst$1 = cst$10,
    cst$0 = cst$10,
    cst = cst$10,
    Stdlib = global_data.Stdlib,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Uuid = global_data.Uuid,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    null$0 = Js_of_ocaml_Js[1],
    some = Js_of_ocaml_Js[2],
    undefined$0 = Js_of_ocaml_Js[3],
    def = Js_of_ocaml_Js[4],
    Opt = Js_of_ocaml_Js[5],
    Optdef = Js_of_ocaml_Js[6],
    true$0 = Js_of_ocaml_Js[7],
    false$0 = Js_of_ocaml_Js[8],
    nfd = Js_of_ocaml_Js[9],
    nfc = Js_of_ocaml_Js[10],
    nfkd = Js_of_ocaml_Js[11],
    nfkc = Js_of_ocaml_Js[12],
    string_constr = Js_of_ocaml_Js[13],
    regExp = Js_of_ocaml_Js[14],
    regExp_withFlags = Js_of_ocaml_Js[15],
    regExp_copy = Js_of_ocaml_Js[16],
    object_keys = Js_of_ocaml_Js[17],
    array_empty = Js_of_ocaml_Js[18],
    array_length = Js_of_ocaml_Js[19],
    array_get = Js_of_ocaml_Js[20],
    array_set = Js_of_ocaml_Js[21],
    array_map = Js_of_ocaml_Js[22],
    array_mapi = Js_of_ocaml_Js[23],
    str_array = Js_of_ocaml_Js[24],
    match_result = Js_of_ocaml_Js[25],
    date_now = Js_of_ocaml_Js[26],
    date_fromTimeValue = Js_of_ocaml_Js[27],
    date_month = Js_of_ocaml_Js[28],
    date_day = Js_of_ocaml_Js[29],
    date_hour = Js_of_ocaml_Js[30],
    date_min = Js_of_ocaml_Js[31],
    date_sec = Js_of_ocaml_Js[32],
    date_ms = Js_of_ocaml_Js[33],
    date = Js_of_ocaml_Js[34],
    math = Js_of_ocaml_Js[35],
    error_constr = Js_of_ocaml_Js[36],
    Js_error = Js_of_ocaml_Js[37],
    JSON = Js_of_ocaml_Js[38],
    decodeURI = Js_of_ocaml_Js[39],
    decodeURIComponent = Js_of_ocaml_Js[40],
    encodeURI = Js_of_ocaml_Js[41],
    encodeURIComponent = Js_of_ocaml_Js[42],
    escape = Js_of_ocaml_Js[43],
    unescape = Js_of_ocaml_Js[44],
    isNaN = Js_of_ocaml_Js[45],
    parseInt = Js_of_ocaml_Js[46],
    parseFloat = Js_of_ocaml_Js[47],
    coerce = Js_of_ocaml_Js[48],
    coerce_opt = Js_of_ocaml_Js[49],
    export$0 = Js_of_ocaml_Js[50],
    export_all = Js_of_ocaml_Js[51],
    Unsafe = Js_of_ocaml_Js[52],
    string_of_error = Js_of_ocaml_Js[53],
    raise_js_error = Js_of_ocaml_Js[54],
    exn_with_js_backtrace = Js_of_ocaml_Js[55],
    js_error_of_exn = Js_of_ocaml_Js[56],
    Error = Js_of_ocaml_Js[57],
    cst_window_prompt = "window.prompt('",
    cst_selectItem = "selectItem('",
    cst_toggleItem = "toggleItem('",
    cst_fillSelection = "fillSelection('",
    cst_clearSelection = "clearSelection('",
    cst_getSelection = "getSelection('",
    _b_ =
      [0,
       [11, "drawViz('graph", [2, 0, [11, cst$11, [2, 0, [11, cst$10, 0]]]]],
       "drawViz('graph%s', '%s')"],
    _a_ =
      [0,
       [11, "setInput('", [2, 0, [11, cst$11, [2, 0, [11, cst$10, 0]]]]],
       "setInput('%s', '%s')"],
    cst_getInput = "getInput('",
    cst_0 = "')}, 0)",
    cst_setTimeout_function_refocu = "setTimeout(function(){refocus('";
   function claim_event(event){
    caml_call1(Js_of_ocaml_Dom[18], event);
    return caml_call1(Js_of_ocaml_Dom_html[116], event);
   }
   function eval_to_string(js){
    return runtime.caml_string_of_jsstring(caml_js_eval_string(js));
   }
   function eval_to_unit(js){caml_js_eval_string(js); return 0;}
   function focus(id){
    var _r_ = caml_call2(Stdlib[28], id, cst_0);
    return eval_to_unit
            (caml_call2(Stdlib[28], cst_setTimeout_function_refocu, _r_));
   }
   function get_input(id){
    var _q_ = caml_call2(Stdlib[28], id, cst);
    return eval_to_string(caml_call2(Stdlib[28], cst_getInput, _q_));
   }
   function set_input(id, value){
    return eval_to_unit(caml_call3(Stdlib_Printf[4], _a_, id, value));
   }
   function focus_input(id){focus(id); return get_input(id);}
   function draw_viz(id, dot_src){
    var _p_ = caml_call1(Uuid[1][6], id);
    return eval_to_unit(caml_call3(Stdlib_Printf[4], _b_, _p_, dot_src));
   }
   function get_selection(id){
    var
     _n_ = caml_call2(Stdlib[28], id, cst$0),
     _o_ =
       runtime.caml_js_to_array
        (caml_js_eval_string(caml_call2(Stdlib[28], cst_getSelection, _n_)));
    return caml_call1(Stdlib_Array[9], _o_);
   }
   function clear_selection(id){
    var _m_ = caml_call2(Stdlib[28], id, cst$1);
    return eval_to_unit(caml_call2(Stdlib[28], cst_clearSelection, _m_));
   }
   function fill_selection(id){
    var _l_ = caml_call2(Stdlib[28], id, cst$2);
    return eval_to_unit(caml_call2(Stdlib[28], cst_fillSelection, _l_));
   }
   function toggle_item(id, i){
    var
     _h_ = caml_call1(Stdlib_Int[12], i),
     _i_ = caml_call2(Stdlib[28], _h_, cst$3),
     _j_ = caml_call2(Stdlib[28], cst$4, _i_),
     _k_ = caml_call2(Stdlib[28], id, _j_);
    return eval_to_unit(caml_call2(Stdlib[28], cst_toggleItem, _k_));
   }
   function select_item(id, i){
    var
     _d_ = caml_call1(Stdlib_Int[12], i),
     _e_ = caml_call2(Stdlib[28], _d_, cst$5),
     _f_ = caml_call2(Stdlib[28], cst$6, _e_),
     _g_ = caml_call2(Stdlib[28], id, _f_);
    return eval_to_unit(caml_call2(Stdlib[28], cst_selectItem, _g_));
   }
   function prompt(message){
    var _c_ = caml_call2(Stdlib[28], message, cst$7);
    return eval_to_string(caml_call2(Stdlib[28], cst_window_prompt, _c_));
   }
   var
    Js =
      [0,
       null$0,
       some,
       undefined$0,
       def,
       Opt,
       Optdef,
       true$0,
       false$0,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       regExp,
       regExp_withFlags,
       regExp_copy,
       object_keys,
       array_empty,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_now,
       date_fromTimeValue,
       date_month,
       date_day,
       date_hour,
       date_min,
       date_sec,
       date_ms,
       date,
       math,
       error_constr,
       Js_error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       exn_with_js_backtrace,
       js_error_of_exn,
       Error,
       claim_event,
       eval_to_string,
       eval_to_unit,
       focus,
       get_input,
       set_input,
       focus_input,
       draw_viz,
       get_selection,
       clear_selection,
       fill_selection,
       toggle_item,
       select_item,
       prompt];
   runtime.caml_register_global(28, Js, "Js");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Graphviz
//# unitInfo: Requires: Color, Edge, Graph, Js, Lang, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__String, Uuid, Vertex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_nposition = "\\nposition: ",
    cst_nsource = "\\nsource: ",
    cst_ntarget = "\\ntarget: ",
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "}",
    cst$1 = ";\n",
    partial =
      [2,
       0,
       [11, cst_nposition, [2, 0, [11, cst_ntarget, [2, 0, [11, '"]', 0]]]]]],
    partial$0 =
      [11,
       '",edgeURL="#",edgetooltip="id: ',
       [2,
        0,
        [11,
         cst_nsource,
         [2,
          0,
          [11,
           cst_nposition,
           [2,
            0,
            [11,
             cst_ntarget,
             [2,
              0,
              [11, '",labeltooltip="id: ', [2, 0, [11, cst_nsource, partial]]]]]]]]]]],
    partial$1 = [11, ", color=", [2, 0, [12, 93, 0]]],
    cst = "|",
    Stdlib_String = global_data.Stdlib__String,
    Js = global_data.Js,
    Graph = global_data.Graph,
    Vertex = global_data.Vertex,
    Stdlib_List = global_data.Stdlib__List,
    Edge = global_data.Edge,
    Stdlib = global_data.Stdlib,
    Lang = global_data.Lang,
    Uuid = global_data.Uuid,
    Stdlib_Format = global_data.Stdlib__Format,
    Color = global_data.Color,
    cst_digraph_G_node_shape_Mreco =
      "digraph G {\n   node [shape=Mrecord,fontsize=11,ranksep=0];\n   edge [arrowhead=vee,fontsize=11,weight=2];\n   rankdir = LR;\n   {rank=min; n0 [shape=point]};\n   ",
    _d_ =
      [0,
       [12, 110, [2, 0, [12, 58, [2, 0, [11, " -> hole", 0]]]]],
       "n%s:%s -> hole"],
    _e_ =
      [0,
       [11,
        'hole [label="",shape=circle,style=filled,fillcolor=',
        [2, 0, [12, 93, 0]]],
       'hole [label="",shape=circle,style=filled,fillcolor=%s]'],
    _f_ = [0, 0, 0],
    _c_ =
      [0,
       [12,
        110,
        [2,
         0,
         [12,
          58,
          [2,
           0,
           [11,
            " -> n",
            [2,
             0,
             [11, " [color=", [2, 0, [11, ',label="', [2, 0, partial$0]]]]]]]]]],
       'n%s:%s -> n%s [color=%s,label="%s",edgeURL="#",edgetooltip="id: %s\\nsource: %s\\nposition: %s\\ntarget: %s",labeltooltip="id: %s\\nsource: %s\\nposition: %s\\ntarget: %s"]'],
    _b_ =
      [0,
       [12,
        110,
        [2,
         0,
         [11,
          ' [label="{',
          [2,
           0,
           [11,
            ": ",
            [2,
             0,
             [11,
              "|{",
              [2, 0, [11, '}}", style=filled, fillcolor=', [2, 0, partial$1]]]]]]]]]],
       'n%s [label="{%s: %s|{%s}}", style=filled, fillcolor=%s, color=%s]'],
    _a_ = [0, [12, 60, [2, 0, [11, "> ", [2, 0, 0]]]], "<%s> %s"];
   function vertex_color(graph, cursor, vertex){
    var parents = caml_call2(Graph[6], graph, vertex);
    function source_is_cursor(edge){
     var
      _J_ = caml_equal(edge[2][1], cursor),
      _K_ = _J_ ? caml_equal(edge[2][2], vertex) : _J_;
     return _K_;
    }
    return caml_equal(vertex, Vertex[4])
            ? Color[7]
            : caml_call1
               (Edge[7][2], parents)
              ? Color[6]
              : caml_call2
                 (Edge[7][18], source_is_cursor, parents)
                ? Color[5]
                : Color[6];
   }
   function draw_position(position){
    var name = caml_call1(Lang[3][7], position);
    return caml_call3(Stdlib_Format[138], _a_, name, name);
   }
   function draw_vertex_children(vertex){
    var
     _H_ = caml_call1(Lang[3][9], vertex[2]),
     _I_ = caml_call1(caml_call1(Stdlib_List[19], draw_position), _H_);
    return caml_call1(caml_call1(Stdlib_String[6], cst), _I_);
   }
   function draw_vertex(graph, cursor, vertex){
    var
     id = caml_call1(Uuid[1][6], vertex[1]),
     _C_ = caml_call2(Graph[6], graph, vertex),
     _D_ = 2 <= caml_call1(Edge[7][22], _C_) ? Color[2] : Color[7],
     _E_ = vertex_color(graph, cursor, vertex),
     _F_ = draw_vertex_children(vertex),
     _G_ = caml_call1(Lang[2][8], vertex[2]);
    return caml_call7(Stdlib_Format[138], _b_, id, id, _G_, _F_, _E_, _D_);
   }
   function draw_edge(graph, live, edge){
    var
     source_id = caml_call1(Uuid[1][6], edge[2][1][1][1]),
     target_id = caml_call1(Uuid[1][6], edge[2][2][1]),
     edge_id = caml_call1(Uuid[1][6], edge[1]),
     position = caml_call1(Lang[3][2], edge[2][1][2]),
     field = caml_call1(Lang[3][7], edge[2][1][2]),
     _y_ = caml_call2(Edge[7][6], edge, live);
    function _z_(e){return caml_equal(e[2][1], edge[2][1]);}
    var
     _A_ = caml_call1(caml_call1(Edge[7][19], _z_), _y_),
     num_conflicts = caml_call1(Edge[7][22], _A_),
     _B_ = caml_call2(Graph[6], graph, edge[2][2]),
     num_parents = caml_call1(Edge[7][22], _B_);
    a:
    {
     if(0 === num_conflicts && 1 === num_parents){var color = Color[7]; break a;}
     var color = 0 < num_conflicts ? Color[1] : Color[2];
    }
    return caml_call14
            (Stdlib_Format[138],
             _c_,
             source_id,
             field,
             target_id,
             color,
             edge_id,
             edge_id,
             source_id,
             position,
             target_id,
             edge_id,
             source_id,
             position,
             target_id);
   }
   function maybe_draw_cursor_hole(graph, cursor){
    var _u_ = caml_call3(Graph[7], graph, cursor[1], cursor[2]);
    if(! caml_call1(Edge[7][2], _u_)) return _f_;
    var
     _v_ = caml_call1(Lang[3][7], cursor[2]),
     _w_ = caml_call1(Uuid[1][6], cursor[1][1]),
     _x_ = [0, caml_call3(Stdlib_Format[138], _d_, _w_, _v_), 0];
    return [0, [0, caml_call2(Stdlib_Format[138], _e_, Color[5]), 0], _x_];
   }
   function draw_graph(graph, cursor){
    var
     _i_ = caml_call1(Graph[8], graph),
     _j_ = caml_call1(Vertex[6][23], _i_);
    function _k_(_t_){return draw_vertex(graph, cursor, _t_);}
    var
     nodes = caml_call1(caml_call1(Stdlib_List[19], _k_), _j_),
     live = caml_call1(Graph[5], graph),
     _l_ = caml_call1(Edge[7][23], live);
    function _m_(_s_){return draw_edge(graph, live, _s_);}
    var
     edges = caml_call1(caml_call1(Stdlib_List[19], _m_), _l_),
     match = maybe_draw_cursor_hole(graph, cursor),
     hole_edge = match[2],
     hole_node = match[1],
     _n_ = caml_call2(Stdlib[37], edges, hole_edge),
     _o_ = caml_call2(Stdlib[37], hole_node, _n_),
     _p_ = caml_call2(Stdlib[37], nodes, _o_),
     _q_ = caml_call2(Stdlib_String[6], cst$1, _p_),
     _r_ = caml_call2(Stdlib[28], _q_, cst$0);
    return caml_call2(Stdlib[28], cst_digraph_G_node_shape_Mreco, _r_);
   }
   function draw(editor){
    var
     _g_ = draw_graph(editor[2], editor[3]),
     _h_ = caml_call1(Stdlib_String[24], _g_);
    return caml_call1(caml_call1(Js[65], editor[1]), _h_);
   }
   var
    Graphviz =
      [0,
       vertex_color,
       draw_position,
       draw_vertex_children,
       draw_vertex,
       draw_edge,
       maybe_draw_cursor_hole,
       draw_graph,
       draw];
   runtime.caml_register_global(21, Graphviz, "Graphviz");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Gui
//# unitInfo: Requires: Edge, Graph, Graph_action, Js, Lang, Stdlib, Stdlib__Int, Stdlib__List, Stdlib__Option, Stdlib__String, Util, Uuid, Vertex, Virtual_dom__Effect, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_actions$1 = "actions",
    cst_editor$2 = "editor",
    caml_equal = runtime.caml_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Js = global_data.Js,
    Uuid = global_data.Uuid,
    Graph = global_data.Graph,
    Edge = global_data.Edge,
    Vertex = global_data.Vertex,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Option = global_data.Stdlib__Option,
    Lang = global_data.Lang,
    Stdlib_Int = global_data.Stdlib__Int,
    Util = global_data.Util,
    Graph_action = global_data.Graph_action,
    _g_ = [0, "selector", 0],
    _f_ = [0, "panel", 0],
    cst_edge_id_or_vertex_id = "edge_id or vertex_id",
    cst_editor$1 = cst_editor$2,
    _c_ = [0, 0],
    _a_ = [0, "selected", 0],
    _b_ = [0, "selectItem", 0],
    cst_selectItems = "selectItems",
    _d_ = [0, "select", 0],
    cst_editor$0 = cst_editor$2,
    cst_editor = cst_editor$2,
    cst_deleted = "deleted",
    cst_actions = cst_actions$1,
    cst_editors = "editors",
    cst_actions$0 = cst_actions$1,
    cst_break = "break";
   function clicks_to(ctx, cursor){
    function _aU_(event){
     caml_call1(Js[58], event);
     return caml_call1(ctx[1], [0, ctx[2][1], [0, [0, cursor]]]);
    }
    return caml_call1(Virtual_dom_Vdom[1][47], _aU_);
   }
   function selected(selection, elements){
    var _aO_ = caml_call2(Stdlib_List[55], selection, elements);
    function _aP_(_aT_){return _aT_[1];}
    var _aQ_ = caml_call1(caml_call1(Stdlib_List[41], _aP_), _aO_);
    function _aR_(_aS_){return _aS_[2];}
    return caml_call1(caml_call1(Stdlib_List[19], _aR_), _aQ_);
   }
   function send(model, editor){
    var
     _aC_ = caml_call1(Uuid[1][6], editor[1]),
     _aD_ = caml_call2(Stdlib[28], cst_actions, _aC_),
     selection = caml_call1(Js[66], _aD_);
    if(! selection) return 0;
    var
     actions = selected(selection, caml_call1(Graph_action[4][23], editor[4])),
     _aE_ = caml_call1(Uuid[2][20], model[1]);
    function _aF_(_aN_){return _aN_[2];}
    var
     _aG_ = caml_call1(caml_call1(Stdlib_List[21], _aF_), _aE_),
     _aH_ = caml_call1(Uuid[1][6], editor[1]),
     _aI_ = caml_call2(Stdlib[28], cst_editors, _aH_),
     _aM_ = selected(caml_call1(Js[66], _aI_), _aG_);
    function _aJ_(editor){return editor[1];}
    var
     editor_ids = caml_call1(caml_call1(Stdlib_List[19], _aJ_), _aM_),
     _aK_ = caml_call1(Uuid[1][6], editor[1]),
     _aL_ = caml_call2(Stdlib[28], cst_actions$0, _aK_);
    caml_call1(Js[68], _aL_);
    return [0, [2, [0, actions, editor_ids]]];
   }
   function restore(editor, deleted, vertex_id){
    if(caml_call2(Stdlib_String[8], vertex_id, cst))
     var
      _aw_ = caml_call1(Uuid[1][6], editor[1]),
      _ax_ = caml_call2(Stdlib[28], cst_deleted, _aw_),
      selection = caml_call1(Js[66], _ax_),
      vertexes = caml_call1(Vertex[6][23], deleted),
      _ay_ = selected(selection, vertexes),
      _az_ = caml_call2(Stdlib_List[8], _ay_, 0);
    else
     var
      _aB_ = caml_call1(Uuid[1][7], vertex_id),
      _az_ = caml_call2(Graph[13], editor[2], _aB_);
    function _aA_(selection){return [1, [1, selection]];}
    return caml_call2(Util[3][1][1][2], _aA_, _az_);
   }
   function base_attrs(classes, opt, id){
    if(opt) var sth = opt[1], disabled = sth; else var disabled = 0;
    var
     _as_ = disabled ? [0, Virtual_dom_Vdom[1][18], 0] : 0,
     _at_ = [0, caml_call1(Virtual_dom_Vdom[1][16], classes), 0],
     _au_ = caml_call2(Stdlib[37], _at_, _as_);
    if(id)
     var
      id$0 = id[1],
      _av_ = [0, caml_call1(Virtual_dom_Vdom[1][22], id$0), 0];
    else
     var _av_ = 0;
    return caml_call2(Stdlib[37], _av_, _au_);
   }
   function apply_action(ctx, action, tabindexes){
    if(! action) return Virtual_dom_Effect[1];
    var
     action$0 = action[1],
     _ap_ = caml_call2(Uuid[2][28], ctx[2][1], tabindexes),
     _aq_ = caml_call1(Stdlib_Int[12], _ap_),
     _ar_ = caml_call2(Stdlib[28], cst_editor, _aq_);
    caml_call1(Js[61], _ar_);
    return caml_call1(ctx[1], [0, ctx[2][1], action$0]);
   }
   function text_input(opt, _ah_, on_change){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    if(_ah_) var sth$0 = _ah_[1], disabled = sth$0; else var disabled = 0;
    return function(ctx, id, tabindexes){
     caml_call2(Js[63], id, cst$0);
     var _ai_ = 0, _aj_ = 0;
     function _ak_(param, value){
      return caml_string_notequal(value, cst$2)
              ? apply_action(ctx, caml_call1(on_change, value), tabindexes)
              : Virtual_dom_Effect[1];
     }
     var
      _al_ = [0, caml_call1(Virtual_dom_Vdom[1][45], _ak_), _aj_],
      _am_ = base_attrs(classes, [0, disabled], [0, id]),
      _an_ = caml_call2(Stdlib[37], _am_, _al_),
      _ao_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _an_)];
     return caml_call3(Virtual_dom_Node[23], 0, _ao_, _ai_);};
   }
   function button(opt, _$_, on_click){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    if(_$_) var sth$0 = _$_[1], disabled = sth$0; else var disabled = 0;
    return function(ctx, label, tabindexes){
     var _aa_ = [0, caml_call1(Virtual_dom_Node[5], label), 0], _ab_ = 0;
     function _ac_(param){
      return apply_action(ctx, caml_call1(on_click, 0), tabindexes);
     }
     var
      _ad_ = [0, caml_call1(Virtual_dom_Vdom[1][47], _ac_), _ab_],
      _ae_ = base_attrs(classes, [0, disabled], 0),
      _af_ = caml_call2(Stdlib[37], _ae_, _ad_),
      _ag_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _af_)];
     return caml_call3(Virtual_dom_Node[9], 0, _ag_, _aa_);};
   }
   function none_button(on_click, ctx, label, tabindexes){
    return button(0, 0, function(param){caml_call1(on_click, 0); return 0;})
            (ctx, label, tabindexes);
   }
   function some_button(opt, ctx){
    if(opt) var sth = opt[1], disabled = sth; else var disabled = 0;
    return function(label, tabindexes, action){
     return button(0, [0, disabled], function(param){return [0, action];})
             (ctx, label, tabindexes);};
   }
   function button_text_input(opt, disabled){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    return function(on_click, on_change, ctx, label, id, tabindexes){
     var
      disabled$0 = caml_call2(Stdlib_Option[3], disabled, 0),
      _X_ =
        [0, text_input(0, [0, disabled$0], on_change)(ctx, id, tabindexes), 0],
      _Y_ =
        [0, button(0, [0, disabled$0], on_click)(ctx, label, tabindexes), _X_],
      _Z_ = base_attrs(classes, [0, disabled$0], [0, id]),
      ___ = [0, caml_call1(Virtual_dom_Vdom[1][8], _Z_)];
     return caml_call3(Virtual_dom_Node[11], 0, ___, _Y_);};
   }
   function sorted_text_input(opt, on_change){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    return function(ctx, id, sort, tabindexes){
     var
      disabled = 1 - (caml_call1(Lang[3][10], ctx[2][3][2]) === sort ? 1 : 0);
     return text_input([0, classes], [0, disabled], on_change)
             (ctx, id, tabindexes);};
   }
   function sorted_button(opt, on_click){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    return function(ctx, label, sort, tabindexes){
     var
      disabled = 1 - (caml_call1(Lang[3][10], ctx[2][3][2]) === sort ? 1 : 0);
     return button([0, classes], [0, disabled], on_click)
             (ctx, label, tabindexes);};
   }
   function action_button(ctx, label, sort, tabindexes, id_opt, mk_action){
    return sorted_button
             (0,
              function(param){
               var match = caml_call2(Stdlib_Option[7], Js[71], id_opt);
               if(! match) return [0, caml_call1(mk_action, cst$1)];
               var str = match[1];
               if(! caml_string_notequal(str, cst$2)) return 0;
               var
                _V_ = caml_call1(Stdlib_Option[4], id_opt),
                _W_ = caml_call2(Stdlib[28], cst_editor$0, _V_);
               caml_call1(Js[61], _W_);
               return [0, caml_call1(mk_action, str)];
              })
            (ctx, label, sort, tabindexes);
   }
   function select(opt, _A_, _z_, label){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    if(_A_) var sth$0 = _A_[1], multi = sth$0; else var multi = 1;
    if(_z_) var sth$1 = _z_[1], default$0 = sth$1; else var default$0 = multi;
    return function(id, items, view_item){
     var
      _B_ = default$0 ? _a_ : 0,
      _C_ = caml_call2(Stdlib[37], _b_, _B_),
      classes$0 = caml_call2(Stdlib[37], classes, _C_);
     function select_item(i, item){
      var _O_ = caml_call1(view_item, item), _P_ = 0;
      function _Q_(param){
       if(multi) caml_call2(Js[69], id, i); else caml_call2(Js[70], id, i);
       return Virtual_dom_Effect[1];
      }
      var
       _R_ = [0, caml_call1(Virtual_dom_Vdom[1][47], _Q_), _P_],
       _S_ = base_attrs(classes$0, _c_, 0),
       _T_ = caml_call2(Stdlib[37], _S_, _R_),
       _U_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _T_)];
      return caml_call3(Virtual_dom_Node[11], 0, _U_, _O_);
     }
     if(label){
      var label$0 = label[1];
      if(caml_call2(Stdlib_String[14], label$0, 32))
       var
        _D_ = [0, caml_call1(Virtual_dom_Node[5], label$0), 0],
        heading = [0, caml_call3(Virtual_dom_Node[15], 0, 0, _D_), 0],
        classes$1 = classes$0;
      else
       var
        _N_ = [0, caml_call1(Virtual_dom_Node[5], label$0), 0],
        heading$0 = [0, caml_call3(Virtual_dom_Node[15], 0, 0, _N_), 0],
        heading = heading$0,
        classes$1 = caml_call2(Stdlib[37], classes$0, [0, label$0, 0]);
     }
     else
      var heading = 0, classes$1 = classes$0;
     var
      _E_ = caml_call2(Stdlib_List[20], select_item, items),
      _F_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_selectItems), 0],
      _G_ = [0, caml_call1(Virtual_dom_Vdom[1][22], id), _F_],
      _H_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _G_)],
      _I_ = [0, caml_call3(Virtual_dom_Node[11], 0, _H_, _E_), 0],
      _J_ = caml_call2(Stdlib[37], heading, _I_),
      _K_ = caml_call2(Stdlib[37], classes$1, _d_),
      _L_ = [0, caml_call1(Virtual_dom_Vdom[1][16], _K_), 0],
      _M_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _L_)];
     return caml_call3(Virtual_dom_Node[11], 0, _M_, _J_);};
   }
   function teleport(ctx, id, param){
    var str = caml_call1(Js[71], cst_edge_id_or_vertex_id);
    if(! caml_string_notequal(str, cst$2)) return 0;
    var
     teleport_id = caml_call1(Uuid[1][7], str),
     _t_ = caml_call2(Stdlib[28], cst_editor$1, id);
    caml_call1(Js[61], _t_);
    var _u_ = caml_call1(Graph[4], ctx[2][2]);
    function _v_(edge){return caml_equal(edge[1], teleport_id);}
    var match = caml_call2(Edge[7][34], _v_, _u_);
    if(match){var edge = match[1]; return [0, [0, [0, edge[2][1]]]];}
    var _w_ = caml_call1(Graph[8], ctx[2][2]);
    function _x_(vertex){return caml_equal(vertex[1], teleport_id);}
    var match$0 = caml_call2(Vertex[6][34], _x_, _w_);
    if(! match$0) return 0;
    var
     vertex = match$0[1],
     _y_ = caml_call2(Graph[6], ctx[2][2], vertex),
     match$1 = caml_call1(Edge[7][29], _y_);
    if(! match$1) return 0;
    var edge$0 = match$1[1];
    return [0, [0, [0, edge$0[2][1]]]];
   }
   var
    _e_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_break)],
    break$0 = caml_call3(Virtual_dom_Node[11], 0, _e_, 0);
   function panel(opt, label){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    return function(nodes){
     if(label)
      var
       label$0 = label[1],
       _o_ = [0, caml_call1(Virtual_dom_Node[5], label$0), 0],
       heading = [0, caml_call3(Virtual_dom_Node[15], 0, 0, _o_), 0];
     else
      var heading = 0;
     var
      _p_ = caml_call2(Stdlib[37], [0, break$0, 0], nodes),
      _q_ = caml_call2(Stdlib[37], heading, _p_),
      _r_ = base_attrs(caml_call2(Stdlib[37], classes, _f_), 0, 0),
      _s_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _r_)];
     return caml_call3(Virtual_dom_Node[11], 0, _s_, _q_);};
   }
   function select_panel(opt, _i_, _h_, label){
    if(opt) var sth = opt[1], classes = sth; else var classes = 0;
    if(_i_) var sth$0 = _i_[1], multi = sth$0; else var multi = 1;
    if(_h_) var sth$1 = _h_[1], default$0 = sth$1; else var default$0 = multi;
    return function(id, items, view_item, nodes){
     if(label)
      var
       label$0 = label[1],
       _j_ =
         caml_call2(Stdlib_String[14], label$0, 32)
          ? select
             ([0, classes], [0, multi], [0, default$0], [0, label$0])
            (id, items, view_item)
          : select
             (0, [0, multi], [0, default$0], [0, label$0])
            (id, items, view_item),
       selector = _j_;
     else
      var
       selector =
         select(0, [0, multi], [0, default$0], 0)(id, items, view_item);
     var
      _k_ = caml_call2(Stdlib[37], [0, break$0, 0], nodes),
      _l_ = caml_call2(Stdlib[37], [0, selector, 0], _k_),
      _m_ = caml_call2(Stdlib[37], classes, _g_),
      _n_ = [0, caml_call1(Virtual_dom_Vdom[1][16], _m_)];
     return caml_call3(Virtual_dom_Node[11], 0, _n_, _l_);};
   }
   var
    Gui =
      [0,
       clicks_to,
       selected,
       send,
       restore,
       base_attrs,
       apply_action,
       text_input,
       button,
       none_button,
       some_button,
       button_text_input,
       sorted_text_input,
       sorted_button,
       action_button,
       select,
       teleport,
       break$0,
       panel,
       select_panel];
   runtime.caml_register_global(38, Gui, "Gui");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Key
//# unitInfo: Requires: Gui, Js, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Stdlib, Stdlib__Int, Util, Uuid, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_editor$4 = "editor",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js = global_data.Js,
    Uuid = global_data.Uuid,
    Stdlib = global_data.Stdlib,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Util = global_data.Util,
    Gui = global_data.Gui,
    Stdlib_Int = global_data.Stdlib__Int,
    cst_editor$3 = cst_editor$4,
    _e_ = [0, [0, 0]],
    _f_ = [0, [0, 1]],
    _g_ = [0, [0, 2]],
    _h_ = [0, [0, 3]],
    _i_ = [0, [1, [0, 2]]],
    cst_deleted = "deleted",
    _j_ = [0, [1, 0]],
    _k_ = [0, [1, [0, 1]]],
    cst_num_id = "num_id",
    cst_editor$0 = cst_editor$4,
    cst_pat_id = "pat_id",
    cst_editor$1 = cst_editor$4,
    cst_var_id = "var_id",
    cst_editor$2 = cst_editor$4,
    _a_ = [0, [1, [0, 8]]],
    _b_ = [0, [1, [0, 9]]],
    _c_ = [0, [1, [0, 3]]],
    _d_ = [0, [1, [0, 4]]],
    cst_editor = cst_editor$4;
   function moveLR(editor, tabindexes, event, delta){
    caml_call1(Js[58], event);
    var match = caml_call2(Uuid[2][29], editor[1], tabindexes);
    if(match)
     var
      tabindex = match[1],
      _x_ =
        tabindex === caml_call1(Uuid[2][23], tabindexes)[2]
         ? 1
         : tabindex + delta | 0,
      _y_ = _x_;
    else
     var _y_ = 1;
    var
     _z_ = caml_call1(Stdlib_Int[12], _y_),
     _A_ = caml_call2(Stdlib[28], cst_editor, _z_);
    return caml_call1(Js[61], _A_);
   }
   function ctrl(model, editor, tabindexes, event){
    var key = caml_call1(Js_of_ocaml_Dom_html[26][1], event);
    if(19 !== key)
     return 94 === key
             ? (moveLR(editor, tabindexes, event, -1), 0)
             : 95 === key ? (moveLR(editor, tabindexes, event, 1), 0) : 0;
    var result = caml_call2(Gui[3], model, editor);
    return result ? result : (caml_call1(Js[58], event), 0);
   }
   function shift(event){
    function _v_(jstr){
     var match = runtime.caml_string_of_jsstring(jstr);
     return caml_string_notequal(match, "*")
             ? caml_string_notequal
                (match, "+")
               ? caml_string_notequal
                  (match, ">")
                 ? caml_string_notequal(match, "N") ? 0 : _a_
                 : _b_
               : _c_
             : _d_;
    }
    var _w_ = caml_call1(Js[6][10], event.key);
    return caml_call2(Util[3][1][1][3], _w_, _v_);
   }
   function base(editor, event){
    var
     id = caml_call1(Uuid[1][6], editor[1]),
     match = caml_call1(Js_of_ocaml_Dom_html[26][1], event);
    if(41 <= match){
     if(94 <= match){
      if(98 > match)
       switch(match - 94 | 0){
         case 0:
          return _e_;
         case 1:
          return _f_;
         case 2:
          return _g_;
         default: return _h_;
       }
     }
     else if(53 > match)
      switch(match - 41 | 0){
        case 0:
         return _i_;
        case 4:
         var _r_ = caml_call2(Stdlib[28], cst_deleted, id);
         caml_call1(Js[67], _r_);
         return _j_;
        case 11:
         return _k_;
      }
    }
    else{
     var switcher = match - 14 | 0;
     if(8 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var str = caml_call1(Js[71], cst_num_id);
         if(caml_string_notequal(str, cst)){
          var _s_ = caml_call2(Stdlib[28], cst_editor$0, id);
          caml_call1(Js[61], _s_);
          return [0, [1, [0, [1, runtime.caml_int_of_string(str)]]]];
         }
         caml_call1(Js[58], event);
         return 0;
        case 2:
         var str$0 = caml_call1(Js[71], cst_pat_id);
         if(caml_string_notequal(str$0, cst)){
          var _t_ = caml_call2(Stdlib[28], cst_editor$1, id);
          caml_call1(Js[61], _t_);
          return [0, [1, [0, [2, str$0]]]];
         }
         caml_call1(Js[58], event);
         return 0;
        case 8:
         var str$1 = caml_call1(Js[71], cst_var_id);
         if(caml_string_notequal(str$1, cst)){
          var _u_ = caml_call2(Stdlib[28], cst_editor$2, id);
          caml_call1(Js[61], _u_);
          return [0, [1, [0, [0, str$1]]]];
         }
         caml_call1(Js[58], event);
         return 0;
      }
    }
    return 0;
   }
   function dispatch(inject, model, editor, tabindexes, event){
    var match = event.ctrlKey | 0;
    if(event.shiftKey | 0)
     var _l_ = match ? function(param){return 0;} : shift, handle = _l_;
    else
     var
      _o_ =
        match
         ? function(_p_){return ctrl(model, editor, tabindexes, _p_);}
         : function(_q_){return base(editor, _q_);},
      handle = _o_;
    var match$0 = handle(event);
    if(! match$0) return Virtual_dom_Effect[1];
    var action = match$0[1];
    caml_call1(Js[58], event);
    var
     _m_ = caml_call1(Uuid[1][6], editor[1]),
     _n_ = caml_call2(Stdlib[28], cst_editor$3, _m_);
    caml_call1(Js[61], _n_);
    return caml_call1(inject, [0, editor[1], action]);
   }
   var Key = [0, moveLR, ctrl, shift, base, dispatch];
   runtime.caml_register_global(38, Key, "Key");
   return;
  }
  (globalThis));

//# unitInfo: Provides: View
//# unitInfo: Requires: Cursor, Graph, Graph_action, Graphviz, Grove, Gui, Js, Key, Lang, Position_map, Stdlib, Stdlib__Format, Stdlib__Int, Stdlib__List, Stdlib__Option, Util, Uuid, Vertex, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = "",
    cst$10 = "(",
    cst$9 = ")",
    cst_Cursor = "Cursor",
    cst_Graph = "Graph",
    cst_deleted$1 = "deleted",
    cst_editor$1 = "editor",
    cst_editors$2 = "editors",
    cst_restore$2 = "restore",
    cst_sub$1 = "sub",
    cst_tabindex$1 = "tabindex",
    cst_vertex$2 = "vertex",
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$9,
    cst$4 = cst$10,
    cst$5 = " }",
    cst$6 = " | ",
    cst$7 = "{ ",
    cst$8 = cst$11,
    cst$2 = "\xe2\x96\xa1",
    cst$1 = "#",
    cst = cst$9,
    cst$0 = cst$10,
    Cursor = global_data.Cursor,
    Position_map = global_data.Position_map,
    Lang = global_data.Lang,
    Gui = global_data.Gui,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Vertex = global_data.Vertex,
    Uuid = global_data.Uuid,
    Stdlib = global_data.Stdlib,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Stdlib_List = global_data.Stdlib__List,
    Util = global_data.Util,
    Js = global_data.Js,
    Grove = global_data.Grove,
    Graphviz = global_data.Graphviz,
    Stdlib_Option = global_data.Stdlib__Option,
    Key = global_data.Key,
    Stdlib_Int = global_data.Stdlib__Int,
    Graph = global_data.Graph,
    Graph_action = global_data.Graph_action,
    Stdlib_Format = global_data.Stdlib__Format,
    cst_sub = cst_sub$1,
    cst_sub$0 = cst_sub$1,
    cst_vertex$1 = cst_vertex$2,
    cst_vertex$0 = cst_vertex$2,
    cst_conflict = "conflict",
    cst_1 = "-1",
    cst_tabindex$0 = cst_tabindex$1,
    _G_ = [1, [0, 1]],
    _F_ = [1, [0, 2]],
    _E_ = [1, [0, 3]],
    _D_ = [1, [0, 4]],
    _B_ = [1, [0, 8]],
    _A_ = [1, [0, 9]],
    cst_deleted$0 = cst_deleted$1,
    _y_ = [0, [1, 0]],
    cst_Replay_Recording = "Replay Recording",
    cst_Load_a_Dump = "Load a Dump",
    cst_Drop = "Drop",
    cst_Clone = "Clone",
    _o_ = [0, "Editor"],
    cst_Load = "Load",
    _p_ = [3, 3],
    cst_Dump = "Dump",
    cst_Replay = "Replay",
    _q_ = [3, 2],
    cst_Stop = "Stop",
    _r_ = [3, 1],
    cst_Report = "Report",
    _s_ = [3, 0],
    cst_Record = "Record",
    _t_ = [0, "Environment"],
    cst_Teleport = "Teleport",
    _u_ = [0, 1],
    cst_Right = "Right (\xe2\x86\x92)",
    _v_ = [0, 0],
    cst_Left = "Left (\xe2\x86\x90)",
    _w_ = [0, 3],
    cst_Down = "Down (\xe2\x86\x93)",
    _x_ = [0, 2],
    cst_Up = "Up (\xe2\x86\x91)",
    cst_Delete_delete = "Delete (delete)",
    _z_ = [0, cst_Cursor],
    cst_Arrow = "Arrow (>)",
    cst_Num_N = "Num (N)",
    _C_ = [0, "Types"],
    cst_Times = "Times (*)",
    cst_Plus = "Plus (+)",
    cst_App_space = "App (space)",
    cst_Lam = "Lam (\\)",
    _H_ = [0, "num_id"],
    cst_Num_n = "Num (n)",
    _I_ = [0, "var_id"],
    cst_Var_v = "Var (v)",
    _J_ = [0, "pat_id"],
    cst_Pat_p = "Pat (p)",
    _K_ = [0, "Patterns and Expressions"],
    cst_selectors = "selectors",
    cst_tabindex = cst_tabindex$1,
    cst_editor = cst_editor$1,
    cst_editor$0 = cst_editor$1,
    cst_unicycles = "unicycles",
    _m_ = [0, "Unicycles"],
    _n_ = [0, 0],
    cst_restore$1 = cst_restore$2,
    cst_restore = cst_restore$2,
    cst_restore$0 = cst_restore$2,
    cst_Restore = "Restore",
    cst_deleted = cst_deleted$1,
    _k_ = [0, "Deleted"],
    _l_ = [0, 0],
    cst_multiparent = "multiparent",
    _i_ = [0, "Multiparented"],
    _j_ = [0, 0],
    cst_editors$0 = cst_editors$2,
    cst_editors = cst_editors$2,
    cst_None = "None",
    cst_All = "All",
    cst_Send_ctrl_s = "Send (ctrl-s)",
    cst_editors$1 = cst_editors$2,
    _f_ = [0, "Send to Editors"],
    _g_ = [0, 1],
    _h_ = [0, [0, "Editors", 0]],
    cst_actions = "actions",
    _d_ = [0, "Actions"],
    _e_ = [0, 1],
    cst_edge_id = "edge_id",
    _b_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    cst_Toggle_IDs = "Toggle IDs",
    cst_Show_Source = "Show Source",
    cst_Drop_Edge = "Drop Edge",
    cst_graph = "graph",
    _c_ = [0, cst_Graph],
    _a_ = [0, cst_Cursor],
    cst_hole = "hole",
    cst_vertex = cst_vertex$2,
    cst_cursor = "cursor",
    cst_errs = "errs",
    cst_chars = "chars";
   function chars(str){
    var
     _cR_ = [0, caml_call1(Virtual_dom_Node[5], str), 0],
     _cS_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_chars), 0],
     _cT_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _cS_)];
    return caml_call3(Virtual_dom_Node[32], 0, _cT_, _cR_);
   }
   function errs(str){
    var
     _cO_ = [0, caml_call1(Virtual_dom_Node[5], str), 0],
     _cP_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_errs), 0],
     _cQ_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _cP_)];
    return caml_call3(Virtual_dom_Node[32], 0, _cQ_, _cO_);
   }
   function parenthesized(node){
    var _cM_ = [0, node, [0, chars(cst), 0]], _cN_ = [0, chars(cst$0), _cM_];
    return caml_call3(Virtual_dom_Node[32], 0, 0, _cN_);
   }
   function cursor_node(node){
    var _cL_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_cursor)];
    return caml_call3(Virtual_dom_Node[32], 0, _cL_, [0, node, 0]);
   }
   function maybe_cursor_node(editor, parent, node){
    return caml_equal(parent, editor[3]) ? cursor_node(node) : node;
   }
   function ref_node(ctx, parent, id){
    var
     _cF_ = caml_call1(Uuid[1][6], id),
     _cG_ = caml_call2(Stdlib[28], cst$1, _cF_),
     _cH_ = [0, caml_call1(Virtual_dom_Node[5], _cG_), 0],
     _cI_ = [0, caml_call2(Gui[1], ctx, parent), 0],
     _cJ_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_vertex), _cI_],
     _cK_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _cJ_)];
    return caml_call3(Virtual_dom_Node[32], 0, _cK_, _cH_);
   }
   function hole_node(ctx, parent){
    var
     _cB_ = [0, chars(cst$2), 0],
     _cC_ = [0, caml_call2(Gui[1], ctx, parent), 0],
     _cD_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_hole), _cC_],
     _cE_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _cD_)];
    return caml_call3(Virtual_dom_Node[32], 0, _cE_, _cB_);
   }
   function tree_node(opt, _cz_, ctx){
    if(opt) var sth = opt[1], parent = sth; else var parent = Cursor[4];
    if(_cz_) var sth$0 = _cz_[1], at_top = sth$0; else var at_top = 1;
    return function(tree){
     if(0 === tree[0])
      var
       children = tree[2],
       vertex = tree[1],
       _cA_ = vertex_node(ctx, parent, vertex, children, at_top);
     else
      var vertex$0 = tree[1], _cA_ = ref_node(ctx, parent, vertex$0[1]);
     return maybe_cursor_node(ctx[2], parent, _cA_);};
   }
   function vertex_node(ctx, parent, vertex, children, at_top){
    var _cl_ = vertex[2];
    function _cm_(position){
     var child_specs = caml_call3(Position_map[41], 0, position, children);
     if(! child_specs){
      var _cy_ = hole_node(ctx, [0, vertex, position]);
      return maybe_cursor_node(ctx[2], [0, vertex, position], _cy_);
     }
     if(child_specs[2])
      return conflict_node(ctx, [0, vertex, position], child_specs);
     var tree = child_specs[1][2], at_top = 1 === vertex[2] ? 1 : 0;
     return tree_node([0, [0, vertex, position]], [0, at_top], ctx)(tree);
    }
    var
     _cn_ = caml_call4(Lang[5], chars, chars, _cm_, _cl_),
     _co_ = [0, caml_call2(Gui[1], ctx, parent)],
     node = caml_call3(Virtual_dom_Node[32], 0, _co_, _cn_);
    a:
    {
     if(ctx[2][6] && ! caml_equal(vertex, Vertex[4])){
      var
       _cr_ = [0, caml_call1(Virtual_dom_Node[5], cst$3), 0],
       _cs_ =
         [0,
          node,
          [0, caml_call4(Virtual_dom_Node[47], cst_sub, 0, 0, _cr_), 0]],
       _ct_ = caml_call1(Uuid[1][6], vertex[1]),
       _cu_ = caml_call2(Stdlib[28], _ct_, cst$4),
       _cv_ = [0, caml_call1(Virtual_dom_Node[5], _cu_), 0],
       _cw_ =
         [0, caml_call4(Virtual_dom_Node[47], cst_sub$0, 0, 0, _cv_), _cs_],
       _cx_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_vertex$1)],
       decorated_node = caml_call3(Virtual_dom_Node[32], 0, _cx_, _cw_);
      break a;
     }
     var
      _cp_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_vertex$0)],
      decorated_node = caml_call3(Virtual_dom_Node[32], 0, _cp_, [0, node, 0]);
    }
    if(! at_top && 0 !== parent[2]){
     var _cq_ = vertex[2];
     if(typeof _cq_ === "number")
      switch(_cq_){
        case 1:
        case 2:
        case 3:
        case 4:
        case 9:
         return parenthesized(decorated_node);
      }
     return decorated_node;
    }
    return decorated_node;
   }
   function conflict_node(ctx, parent, child_specs){
    function _b$_(child){
     var _ck_ = child[2];
     return tree_node([0, parent], 0, ctx)(_ck_);
    }
    var
     nodes = caml_call2(Stdlib_List[19], _b$_, child_specs),
     _ca_ = [0, errs(cst$5), 0],
     _cb_ = errs(cst$6),
     _cc_ = caml_call2(Util[1][1], _cb_, nodes),
     _cd_ = caml_call2(Stdlib[37], _cc_, _ca_),
     _ce_ = [0, errs(cst$7), 0],
     _cf_ = caml_call2(Stdlib[37], _ce_, _cd_),
     _cg_ = [0, caml_call2(Gui[1], ctx, parent), 0],
     _ch_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_conflict), _cg_],
     _ci_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _ch_)],
     _cj_ = caml_call3(Virtual_dom_Node[32], 0, _ci_, _cf_);
    return maybe_cursor_node(ctx[2], parent, _cj_);
   }
   function cursor_panel(ctx){
    var _b__ = [0, chars(caml_call1(Cursor[3], ctx[2][3])), 0];
    return caml_call3(Gui[18], 0, _a_, _b__);
   }
   function graph_panel(ctx, id, tabindexes){
    var
     _bX_ = 0,
     _bY_ =
       [0,
        caml_call5
         (Gui[10], 0, ctx, cst_Toggle_IDs, tabindexes, [3, [4, ctx[2][1]]]),
        0];
    function _bZ_(param){
     var _b9_ = caml_call2(Graphviz[7], ctx[2][2], ctx[2][3]);
     return caml_call2(Stdlib_Format[136], _b_, _b9_);
    }
    var
     _b0_ =
       [0, caml_call4(Gui[9], _bZ_, ctx, cst_Show_Source, tabindexes), _bY_];
    function _b1_(param){
     var str = caml_call1(Js[71], cst_edge_id);
     return runtime.caml_string_notequal(str, cst$11)
             ? [0, [1, [2, caml_call1(Uuid[1][7], str)]]]
             : 0;
    }
    var
     _b2_ =
       [0,
        caml_call6(Gui[8], 0, 0, _b1_, ctx, cst_Drop_Edge, tabindexes),
        _b0_],
     _b3_ = [0, caml_call3(Virtual_dom_Node[11], 0, 0, _b2_), _bX_],
     _b4_ = [0, Gui[17], _b3_],
     _b5_ = [0, caml_call3(Virtual_dom_Node[32], 0, 0, 0), 0],
     _b6_ = caml_call2(Stdlib[28], cst_graph, id),
     _b7_ = [0, caml_call1(Virtual_dom_Vdom[1][22], _b6_)],
     _b8_ = [0, caml_call3(Virtual_dom_Node[11], 0, _b7_, _b5_), _b4_];
    return caml_call3(Gui[18], 0, _c_, _b8_);
   }
   function actions_panel(ctx, id){
    var _bT_ = 0;
    function _bU_(graph_action){
     return [0, chars(caml_call1(Graph_action[5], graph_action)), 0];
    }
    var
     _bV_ = caml_call1(Graph_action[4][23], ctx[2][4]),
     _bW_ = caml_call2(Stdlib[28], cst_actions, id);
    return caml_call8(Gui[19], 0, _e_, 0, _d_, _bW_, _bV_, _bU_, _bT_);
   }
   function send_actions_panel(model, ctx, id, tabindexes){
    var _bD_ = 0;
    function _bE_(param){
     var _bS_ = caml_call2(Stdlib[28], cst_editors, id);
     return caml_call1(Js[67], _bS_);
    }
    var _bF_ = [0, caml_call4(Gui[9], _bE_, ctx, cst_None, tabindexes), _bD_];
    function _bG_(param){
     var _bR_ = caml_call2(Stdlib[28], cst_editors$0, id);
     return caml_call1(Js[68], _bR_);
    }
    var _bH_ = [0, caml_call4(Gui[9], _bG_, ctx, cst_All, tabindexes), _bF_];
    function _bI_(param){return caml_call2(Gui[3], model, ctx[2]);}
    var
     _bJ_ =
       [0,
        caml_call6(Gui[8], 0, 0, _bI_, ctx, cst_Send_ctrl_s, tabindexes),
        _bH_];
    function _bK_(editor_id){
     var _bQ_ = caml_call1(Uuid[1][6], editor_id);
     return [0, caml_call1(Virtual_dom_Node[5], _bQ_), 0];
    }
    var _bL_ = caml_call1(Uuid[2][20], model[1]);
    function _bM_(_bP_){return _bP_[1];}
    var
     _bN_ = caml_call2(Stdlib_List[21], _bM_, _bL_),
     _bO_ = caml_call2(Stdlib[28], cst_editors$1, id);
    return caml_call8(Gui[19], _h_, _g_, 0, _f_, _bO_, _bN_, _bK_, _bJ_);
   }
   function multiparented_panel(ctx, id, mp, children){
    var _bu_ = 0;
    function _bv_(tree){
     var
      vertex = tree[1],
      _bx_ = caml_call2(Graph[10], ctx[2][2], vertex),
      _by_ = caml_call1(Vertex[6][23], _bx_);
     function _bz_(parent_vertex){
      var
       _bB_ = [0, caml_call1(Vertex[6][5], vertex)],
       _bC_ = caml_call4(Grove[1], _bB_, 0, parent_vertex, children)[1];
      return tree_node(0, 0, ctx)(_bC_);
     }
     var _bA_ = caml_call1(caml_call1(Stdlib_List[19], _bz_), _by_);
     return [0, tree_node(0, 0, ctx)(tree), _bA_];
    }
    var _bw_ = caml_call2(Stdlib[28], cst_multiparent, id);
    return caml_call8(Gui[19], 0, _j_, 0, _i_, _bw_, mp, _bv_, _bu_);
   }
   function deleted_panel(ctx, id, tabindexes, deleted){
    function _be_(param){var v = param[1]; return v;}
    var
     _bf_ = caml_call2(Stdlib_List[19], _be_, deleted),
     d = caml_call1(Vertex[6][37], _bf_),
     _bh_ = caml_call2(Stdlib[28], cst_restore, id);
    caml_call2(Js[63], _bh_, cst$8);
    var _bg_ = 0, _bi_ = 0, _bj_ = caml_call2(Stdlib[28], cst_restore$0, id);
    function _bk_(str){return caml_call3(Gui[4], ctx[2], d, str);}
    var
     _bl_ = [0, caml_call6(Gui[7], 0, 0, _bk_, ctx, _bj_, tabindexes), _bi_];
    function _bm_(param){
     var
      _bs_ = caml_call2(Stdlib[28], cst_restore$1, id),
      _bt_ = caml_call1(Js[62], _bs_);
     return caml_call3(Gui[4], ctx[2], d, _bt_);
    }
    var
     _bn_ =
       [0, caml_call6(Gui[8], 0, 0, _bm_, ctx, cst_Restore, tabindexes), _bl_],
     _bo_ = [0, caml_call3(Gui[18], 0, 0, _bn_), _bg_];
    function _bp_(tree){
     var vertex = tree[1], _br_ = caml_call1(Lang[3][11], vertex[2]);
     return [0,
             tree_node
               ([0, [0, vertex, caml_call2(Stdlib_Option[3], _br_, 0)]],
                0,
                ctx)
              (tree),
             0];
    }
    var _bq_ = caml_call2(Stdlib[28], cst_deleted, id);
    return caml_call8(Gui[19], 0, _l_, 0, _k_, _bq_, deleted, _bp_, _bo_);
   }
   function unicycles_panel(ctx, id, sc){
    var _bb_ = 0;
    function _bc_(tree){return [0, tree_node(0, 0, ctx)(tree), 0];}
    var _bd_ = caml_call2(Stdlib[28], cst_unicycles, id);
    return caml_call8(Gui[19], 0, _n_, 0, _m_, _bd_, sc, _bc_, _bb_);
   }
   function view_editor(model, ctx, tabindexes){
    var
     id = caml_call1(Uuid[1][6], ctx[2][1]),
     match = caml_call1(Grove[2], ctx[2][2]),
     children = match[2],
     decomp = match[1];
    caml_call1(Graphviz[8], ctx[2]);
    var
     _W_ = [3, [3, ctx[2][1]]],
     _X_ = [0, caml_call1(Uuid[2][19], model[1]) < 2 ? 1 : 0],
     _Y_ = [0, caml_call5(Gui[10], _X_, ctx, cst_Drop, tabindexes, _W_), 0],
     _Z_ =
       [0,
        caml_call5
         (Gui[10], 0, ctx, cst_Clone, tabindexes, [3, [2, ctx[2][1]]]),
        _Y_],
     ___ = [0, caml_call3(Gui[18], 0, _o_, _Z_), 0],
     _$_ = 0;
    function _aa_(param){
     return [0, [3, [1, caml_call1(Js[71], cst_Load_a_Dump)]]];
    }
    var
     _ab_ =
       [0, caml_call6(Gui[8], 0, 0, _aa_, ctx, cst_Load, tabindexes), _$_],
     _ac_ = [0, caml_call5(Gui[10], 0, ctx, cst_Dump, tabindexes, _p_), _ab_];
    function _ad_(param){
     return [0, [3, [0, caml_call1(Js[71], cst_Replay_Recording)]]];
    }
    var
     _ae_ =
       [0, caml_call6(Gui[8], 0, 0, _ad_, ctx, cst_Replay, tabindexes), _ac_],
     _af_ = [0, caml_call1(Stdlib_Option[10], model[2])],
     _ag_ =
       [0, caml_call5(Gui[10], _af_, ctx, cst_Stop, tabindexes, _q_), _ae_],
     _ah_ = [0, caml_call1(Stdlib_Option[10], model[2])],
     _ai_ =
       [0, caml_call5(Gui[10], _ah_, ctx, cst_Report, tabindexes, _r_), _ag_],
     _aj_ = [0, caml_call1(Stdlib_Option[11], model[2])],
     _ak_ =
       [0, caml_call5(Gui[10], _aj_, ctx, cst_Record, tabindexes, _s_), _ai_],
     _al_ = [0, caml_call3(Gui[18], 0, _t_, _ak_), ___],
     _am_ = caml_call2(Gui[16], ctx, id),
     _an_ =
       [0, caml_call6(Gui[8], 0, 0, _am_, ctx, cst_Teleport, tabindexes), 0],
     _ao_ = [0, caml_call5(Gui[10], 0, ctx, cst_Right, tabindexes, _u_), _an_],
     _ap_ = [0, caml_call5(Gui[10], 0, ctx, cst_Left, tabindexes, _v_), _ao_],
     _aq_ = [0, caml_call5(Gui[10], 0, ctx, cst_Down, tabindexes, _w_), _ap_],
     _ar_ = [0, caml_call5(Gui[10], 0, ctx, cst_Up, tabindexes, _x_), _aq_];
    function _as_(param){
     var _ba_ = caml_call2(Stdlib[28], cst_deleted$0, id);
     caml_call1(Js[67], _ba_);
     return _y_;
    }
    var
     _at_ =
       [0,
        caml_call6(Gui[8], 0, 0, _as_, ctx, cst_Delete_delete, tabindexes),
        _ar_],
     _au_ = [0, caml_call3(Gui[18], 0, _z_, _at_), _al_],
     _av_ = 0;
    function _aw_(param){return _A_;}
    var
     _ax_ =
       [0, caml_call6(Gui[14], ctx, cst_Arrow, 3, tabindexes, 0, _aw_), _av_];
    function _ay_(param){return _B_;}
    var
     _az_ =
       [0, caml_call6(Gui[14], ctx, cst_Num_N, 3, tabindexes, 0, _ay_), _ax_],
     _aA_ = [0, caml_call3(Gui[18], 0, _C_, _az_), _au_],
     _aB_ = 0;
    function _aC_(param){return _D_;}
    var
     _aD_ =
       [0, caml_call6(Gui[14], ctx, cst_Times, 1, tabindexes, 0, _aC_), _aB_];
    function _aE_(param){return _E_;}
    var
     _aF_ =
       [0, caml_call6(Gui[14], ctx, cst_Plus, 1, tabindexes, 0, _aE_), _aD_];
    function _aG_(param){return _F_;}
    var
     _aH_ =
       [0,
        caml_call6(Gui[14], ctx, cst_App_space, 1, tabindexes, 0, _aG_),
        _aF_];
    function _aI_(param){return _G_;}
    var
     _aJ_ =
       [0, caml_call6(Gui[14], ctx, cst_Lam, 1, tabindexes, 0, _aI_), _aH_];
    function _aK_(str){return [1, [0, [1, runtime.caml_int_of_string(str)]]];}
    var
     _aL_ =
       [0,
        caml_call6(Gui[14], ctx, cst_Num_n, 1, tabindexes, _H_, _aK_),
        _aJ_];
    function _aM_(str){return [1, [0, [0, str]]];}
    var
     _aN_ =
       [0,
        caml_call6(Gui[14], ctx, cst_Var_v, 1, tabindexes, _I_, _aM_),
        _aL_];
    function _aO_(str){return [1, [0, [0, str]]];}
    var
     _aP_ =
       [0,
        caml_call6(Gui[14], ctx, cst_Pat_p, 2, tabindexes, _J_, _aO_),
        _aN_],
     _aQ_ = [0, caml_call3(Gui[18], 0, _K_, _aP_), _aA_],
     _aR_ = [0, unicycles_panel(ctx, id, decomp[4]), 0],
     _aS_ = [0, deleted_panel(ctx, id, tabindexes, decomp[2]), _aR_],
     _aT_ = [0, multiparented_panel(ctx, id, decomp[1], children), _aS_],
     _aU_ = [0, send_actions_panel(model, ctx, id, tabindexes), _aT_],
     _aV_ = [0, actions_panel(ctx, id), _aU_],
     _aW_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_selectors)],
     _aX_ = [0, caml_call3(Virtual_dom_Node[11], 0, _aW_, _aV_), _aQ_],
     _aY_ = [0, graph_panel(ctx, id, tabindexes), _aX_],
     _aZ_ = [0, cursor_panel(ctx), _aY_],
     _a0_ = [0, Gui[17], _aZ_],
     _a1_ = decomp[3],
     _a2_ = [0, tree_node(0, 0, ctx)(_a1_), _a0_],
     _a3_ = caml_call4(Key[5], ctx[1], model, ctx[2], tabindexes),
     _a4_ = [0, caml_call1(Virtual_dom_Vdom[1][66], _a3_), 0],
     _a5_ = caml_call2(Uuid[2][28], ctx[2][1], tabindexes),
     _a6_ = caml_call1(Stdlib_Int[12], _a5_),
     _a7_ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_tabindex, _a6_), _a4_],
     _a8_ = [0, caml_call1(Virtual_dom_Vdom[1][15], cst_editor), _a7_],
     _a9_ = caml_call2(Stdlib[28], cst_editor$0, id),
     _a__ = [0, caml_call1(Virtual_dom_Vdom[1][22], _a9_), _a8_],
     _a$_ = [0, caml_call1(Virtual_dom_Vdom[1][8], _a__)];
    return caml_call3(Virtual_dom_Node[11], 0, _a$_, _a2_);
   }
   function view(inject, model){
    var _L_ = caml_call1(Uuid[2][20], model[1]);
    function _M_(_V_){return _V_[2];}
    var editors = caml_call1(caml_call1(Stdlib_List[19], _M_), _L_);
    function _N_(editor){return editor[1];}
    var editor_ids = caml_call2(Stdlib_List[19], _N_, editors);
    function _O_(i){return i + 1 | 0;}
    var
     _P_ = caml_call1(Stdlib_List[1], editors),
     positions = caml_call2(Stdlib_List[10], _P_, _O_),
     _Q_ = caml_call2(Stdlib_List[55], editor_ids, positions),
     _R_ = caml_call1(Stdlib_List[61], _Q_),
     tabindexes = caml_call1(Uuid[2][40], _R_);
    function _S_(editor){
     return view_editor(model, [0, inject, editor], tabindexes);
    }
    var
     _T_ = caml_call2(Stdlib_List[19], _S_, editors),
     _U_ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_tabindex$0, cst_1)];
    return caml_call3(Virtual_dom_Node[11], 0, _U_, _T_);
   }
   var
    View =
      [0,
       chars,
       errs,
       parenthesized,
       cursor_node,
       maybe_cursor_node,
       ref_node,
       hole_node,
       tree_node,
       vertex_node,
       conflict_node,
       cursor_panel,
       graph_panel,
       actions_panel,
       send_actions_panel,
       multiparented_panel,
       deleted_panel,
       unicycles_panel,
       view_editor,
       view];
   runtime.caml_register_global(129, View, "View");
   return;
  }
  (globalThis));

//# unitInfo: Provides: App
//# unitInfo: Requires: Action, Async_kernel__Deferred, Incr_dom__Component, Incr_dom__Incr, View
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    View = global_data.View,
    Action = global_data.Action,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Incr_dom_Incr = global_data.Incr_dom__Incr,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred;
   function on_startup(param, _c_){
    return caml_call1(Async_kernel_Deferred[12], 0);
   }
   function create(model, param, inject){
    function _a_(model){
     var
      view = caml_call2(View[19], inject, model),
      _b_ = [0, caml_call1(Action[15], model)];
     return caml_call5(Incr_dom_Component[6], _b_, 0, 0, model, view);
    }
    return caml_call2(Incr_dom_Incr[78][4][6], model, _a_);
   }
   var App = [0, on_startup, create];
   runtime.caml_register_global(5, App, "App");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
