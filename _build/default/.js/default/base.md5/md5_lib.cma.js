// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Md5_lib
//# unitInfo: Requires: Assert_failure, Stdlib__Digest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Digest = global_data.Stdlib__Digest,
    Assert_failure = global_data.Assert_failure,
    empty = caml_call1(Stdlib_Digest[3], cst),
    _a_ = [0, "md5/src/md5_lib.ml", 16, 22];
   function make(s){return runtime.caml_string_equal(s, empty) ? empty : s;}
   var compare = runtime.caml_compare, length = 16;
   function to_binary(s){return s;}
   function of_binary_exn(s){
    if(runtime.caml_ml_string_length(s) === 16) return make(s);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var to_hex = Stdlib_Digest[10];
   function of_hex_exn(s){return make(caml_call1(Stdlib_Digest[11], s));}
   function string(s){return make(caml_call1(Stdlib_Digest[3], s));}
   function bytes(s){return make(caml_call1(Stdlib_Digest[4], s));}
   function subbytes(bytes, pos, len){
    return make(caml_call3(Stdlib_Digest[6], bytes, pos, len));
   }
   var
    Md5_lib =
      [0,
       compare,
       length,
       to_binary,
       of_binary_exn,
       make,
       to_hex,
       of_hex_exn,
       string,
       bytes,
       subbytes];
   runtime.caml_register_global(4, Md5_lib, "Md5_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtZDVfbGliLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJlbXB0eSIsIm1ha2UiLCJzIiwiY29tcGFyZSIsImxlbmd0aCIsInRvX2JpbmFyeSIsIm9mX2JpbmFyeV9leG4iLCJ0b19oZXgiLCJvZl9oZXhfZXhuIiwic3RyaW5nIiwiYnl0ZXMiLCJzdWJieXRlcyIsInBvcyIsImxlbiJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdmlzaG51cy8ub3BhbS9ncnYtdGVzdC9saWIvYmFzZS9tZDUvbWQ1X2xpYi5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7R0FHWTs7Ozs7SUFBUkEsUUFBUTs7WUFDUkMsS0FBS0MsR0FDUCxPQUFHLDBCQURJQSxHQURMRixTQUFBQSxRQUNLRSxFQUlKO0dBRVMsSUFBVkMsZ0NBRUFDO1lBRUFDLFVBQVVILEdBQUksT0FBSkEsRUFBSztZQUNmSSxjQUFjSjtJQUFJLGlDQUFKQSxXQUF1QyxPQVhyREQsS0FXY0M7SUFBSSxNQUFBO0dBQXlDO09BRzNESztZQUNBQyxXQUFXTixHQUFJLE9BZmZELEtBZW9CLDhCQUFUQyxJQUE0QjtZQUV2Q08sT0FBT1AsR0FBSSxPQWpCWEQsS0FpQmdCLDZCQUFUQyxJQUEwQjtZQUVqQ1EsTUFBTVIsR0FBSSxPQW5CVkQsS0FtQmUsNkJBQVRDLElBQXlCO1lBRS9CUyxTQUFTRCxPQUFPRSxLQUFLQztJQUFNLE9BckIzQlosS0FxQmdDLDZCQUF2QlMsT0FBT0UsS0FBS0M7R0FBMEM7Ozs7T0FmL0RWO09BRUFDO09BRUFDO09BQ0FDO09BWEFMO09BY0FNO09BQ0FDO09BRUFDO09BRUFDO09BRUFDOzs7RSIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgdCA9IHN0cmluZ1xuXG4oKiBTaGFyZSB0aGUgZGlnZXN0IG9mIHRoZSBlbXB0eSBzdHJpbmcgKilcbmxldCBlbXB0eSA9IERpZ2VzdC5zdHJpbmcgXCJcIlxubGV0IG1ha2UgcyA9XG4gIGlmIHMgPSBlbXB0eSB0aGVuXG4gICAgZW1wdHlcbiAgZWxzZVxuICAgIHNcblxubGV0IGNvbXBhcmUgPSBjb21wYXJlXG5cbmxldCBsZW5ndGggPSAxNlxuXG5sZXQgdG9fYmluYXJ5IHMgPSBzXG5sZXQgb2ZfYmluYXJ5X2V4biBzID0gYXNzZXJ0IChTdHJpbmcubGVuZ3RoIHMgPSBsZW5ndGgpOyBtYWtlIHNcbmxldCB1bnNhZmVfb2ZfYmluYXJ5ID0gbWFrZVxuXG5sZXQgdG9faGV4ID0gRGlnZXN0LnRvX2hleFxubGV0IG9mX2hleF9leG4gcyA9IG1ha2UgKERpZ2VzdC5mcm9tX2hleCBzKVxuXG5sZXQgc3RyaW5nIHMgPSBtYWtlIChEaWdlc3Quc3RyaW5nIHMpXG5cbmxldCBieXRlcyBzID0gbWFrZSAoRGlnZXN0LmJ5dGVzIHMpXG5cbmxldCBzdWJieXRlcyBieXRlcyB+cG9zIH5sZW4gPSBtYWtlIChEaWdlc3Quc3ViYnl0ZXMgYnl0ZXMgcG9zIGxlbilcbiJdfQ==
