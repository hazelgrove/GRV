// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ojs
//# unitInfo: Requires: CamlinternalOO, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    joo_global_object = globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_to_js$0 = "to_js",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_to_bool = runtime.caml_js_to_bool,
    caml_js_to_string = runtime.caml_js_to_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    shared = [0, cst_to_js$0],
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_to_js = cst_to_js$0;
   function type_of(x){return caml_js_to_string(typeof x);}
   function instance_of(x, constr){return (x instanceof constr ? 1 : 0) | 0;}
   var null$0 = null, undefined$0 = undefined, global = joo_global_object;
   function array_make(n){return new global["Array"](n);}
   var array_get = caml_js_get, array_set = caml_js_set;
   function array_of_js_from(f, objs, start){
    var n = objs["length"];
    function _G_(i){return caml_call1(f, objs[start + i | 0]);}
    return caml_call2(Stdlib_Array[1], n - start | 0, _G_);
   }
   function array_of_js(f, objs){return array_of_js_from(f, objs, 0);}
   function array_to_js(f, arr){
    var n = arr.length - 1, a = array_make(n), _E_ = n - 1 | 0, _D_ = 0;
    if(_E_ >= 0){
     var i = _D_;
     for(;;){
      a[i] = caml_call1(f, runtime.caml_check_bound(arr, i)[1 + i]);
      var _F_ = i + 1 | 0;
      if(_E_ === i) break;
      var i = _F_;
     }
    }
    return a;
   }
   function list_of_js_from(f, objs, start){
    var _C_ = array_of_js_from(f, objs, start);
    return caml_call1(Stdlib_Array[9], _C_);
   }
   function list_of_js(f, objs){return list_of_js_from(f, objs, 0);}
   function list_to_js(f, l){
    return array_to_js(f, caml_call1(Stdlib_Array[10], l));
   }
   function option_of_js(f, x){
    if(x != null$0 && x !== undefined$0) return [0, caml_call1(f, x)];
    return 0;
   }
   function option_to_js(f, param){
    if(! param) return null$0;
    var x = param[1];
    return caml_call1(f, x);
   }
   function unit_to_js(param){return undefined$0;}
   function unit_of_js(param){return 0;}
   function _a_(_u_){
    var
     _v_ = caml_call2(CamlinternalOO[3], _u_, cst),
     _w_ = caml_call2(CamlinternalOO[7], _u_, cst_to_js);
    function _x_(self_1){return self_1[1 + _v_];}
    caml_call3(CamlinternalOO[10], _u_, _w_, _x_);
    return function(_A_, _z_, _y_){
     var _B_ = caml_call2(CamlinternalOO[24], _z_, _u_);
     _B_[1 + _v_] = _y_;
     return _B_;};
   }
   var obj = caml_call2(CamlinternalOO[19], shared, _a_);
   function has_property(o, x){
    var _r_ = runtime.caml_string_equal(type_of(o), "object");
    if(_r_)
     var
      _s_ = o !== null$0 ? 1 : 0,
      _t_ = _s_ ? o[caml_js_from_string(x)] !== undefined$0 ? 1 : 0 : _s_;
    else
     var _t_ = _r_;
    return _t_;
   }
   function empty_obj(param){return new global["Object"];}
   function iter_properties(x, f){
    return runtime.caml_ojs_iterate_properties
            (x,
             runtime.caml_js_wrap_callback_strict
              (1, function(x){return caml_call1(f, caml_js_to_string(x));}));
   }
   function apply_arr(o, arr){return o.apply(null$0, arr);}
   function call_arr(o, s, arr){
    return o[caml_js_from_string(s)].apply(o, arr);
   }
   function is_null(x){return x == null$0 ? 1 : 0;}
   function obj_type(x){
    return caml_js_to_string(Object.prototype.toString.call(x));
   }
   function t_to_js(_q_){return _q_;}
   function t_of_js(_p_){return _p_;}
   var
    Int = [0, t_to_js, t_of_js],
    t_to_js$0 = caml_js_from_string,
    t_of_js$0 = caml_js_to_string,
    String = [0, t_to_js$0, t_of_js$0],
    t_to_js$1 = runtime.caml_js_from_bool,
    t_of_js$1 = caml_js_to_bool,
    Bool = [0, t_to_js$1, t_of_js$1];
   function t_to_js$2(_o_){return _o_;}
   function t_of_js$2(_n_){return _n_;}
   var Float = [0, t_to_js$2, t_of_js$2];
   function Array(A){
    var _j_ = A[1];
    function t_to_js(_m_){return array_to_js(_j_, _m_);}
    var _k_ = A[2];
    function t_of_js(_l_){return array_of_js(_k_, _l_);}
    return [0, t_to_js, t_of_js];
   }
   function List(A){
    var _f_ = A[1];
    function t_to_js(_i_){return list_to_js(_f_, _i_);}
    var _g_ = A[2];
    function t_of_js(_h_){return list_of_js(_g_, _h_);}
    return [0, t_to_js, t_of_js];
   }
   function Option(A){
    var _b_ = A[1];
    function t_to_js(_e_){return option_to_js(_b_, _e_);}
    var _c_ = A[2];
    function t_of_js(_d_){return option_of_js(_c_, _d_);}
    return [0, t_to_js, t_of_js];
   }
   var
    Ojs =
      [0,
       array_of_js,
       array_to_js,
       list_of_js,
       list_to_js,
       array_of_js_from,
       list_of_js_from,
       option_of_js,
       option_to_js,
       unit_of_js,
       unit_to_js,
       empty_obj,
       has_property,
       iter_properties,
       call_arr,
       apply_arr,
       array_make,
       array_get,
       array_set,
       global,
       null$0,
       type_of,
       instance_of,
       obj,
       is_null,
       obj_type,
       Int,
       String,
       Bool,
       Float,
       Array,
       List,
       Option];
   runtime.caml_register_global(16, Ojs, "Ojs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ojs_exn
//# unitInfo: Requires: Jsoo_runtime, Ojs, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_to_string = runtime.caml_js_to_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ojs = global_data.Ojs,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_Printexc = global_data.Stdlib__Printexc;
   function name(x){return caml_js_to_string(x["name"]);}
   function message(x){return caml_js_to_string(x["message"]);}
   function stack(x){
    var _b_ = x["stack"];
    return caml_call2(Ojs[7], caml_js_to_string, _b_);
   }
   function to_string(x){return caml_js_to_string(x.toString());}
   var Error = Jsoo_runtime[3][4];
   function _a_(param){
    if(param[1] !== Error) return 0;
    var x = param[2];
    return [0, to_string(x)];
   }
   caml_call1(Stdlib_Printexc[9], _a_);
   var Ojs_exn = [0, name, message, stack, to_string, Error];
   runtime.caml_register_global(7, Ojs_exn, "Ojs_exn");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
