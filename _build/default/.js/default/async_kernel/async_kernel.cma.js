// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_kernel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Async_kernel = [0];
   runtime.caml_register_global(0, Async_kernel, "Async_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Time_ns
//# unitInfo: Requires: Core__Time_ns, Core__Time_ns_alternate_sexp, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Time_ns$0 = "Async_kernel__Time_ns",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Time_ns = global_data.Core__Time_ns,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Time_ns$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/time_ns.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    typerep_of_t = Core_Time_ns_alternate_sexp[1],
    typename_of_t = Core_Time_ns_alternate_sexp[2],
    bin_size_t = Core_Time_ns_alternate_sexp[3],
    bin_write_t = Core_Time_ns_alternate_sexp[4],
    bin_read_t = Core_Time_ns_alternate_sexp[5],
    bin_read_t$0 = Core_Time_ns_alternate_sexp[6],
    bin_shape_t = Core_Time_ns_alternate_sexp[7],
    bin_writer_t = Core_Time_ns_alternate_sexp[8],
    bin_reader_t = Core_Time_ns_alternate_sexp[9],
    bin_t = Core_Time_ns_alternate_sexp[10],
    quickcheck_generator = Core_Time_ns_alternate_sexp[11],
    quickcheck_observer = Core_Time_ns_alternate_sexp[12],
    quickcheck_shrinker = Core_Time_ns_alternate_sexp[13],
    gen_incl = Core_Time_ns_alternate_sexp[14],
    gen_uniform_incl = Core_Time_ns_alternate_sexp[15],
    is_earlier = Core_Time_ns_alternate_sexp[16],
    is_later = Core_Time_ns_alternate_sexp[17],
    of_date_ofday = Core_Time_ns_alternate_sexp[18],
    of_date_ofday_precise = Core_Time_ns_alternate_sexp[19],
    to_date_ofday = Core_Time_ns_alternate_sexp[20],
    to_date_ofday_precise = Core_Time_ns_alternate_sexp[21],
    to_date = Core_Time_ns_alternate_sexp[22],
    to_ofday = Core_Time_ns_alternate_sexp[23],
    reset_date_cache = Core_Time_ns_alternate_sexp[24],
    convert = Core_Time_ns_alternate_sexp[25],
    utc_offset = Core_Time_ns_alternate_sexp[26],
    to_filename_string = Core_Time_ns_alternate_sexp[27],
    of_filename_string = Core_Time_ns_alternate_sexp[28],
    to_string_abs = Core_Time_ns_alternate_sexp[29],
    to_string_abs_trimmed = Core_Time_ns_alternate_sexp[30],
    to_string_abs_parts = Core_Time_ns_alternate_sexp[31],
    to_string_trimmed = Core_Time_ns_alternate_sexp[32],
    to_sec_string = Core_Time_ns_alternate_sexp[33],
    to_sec_string_with_zone = Core_Time_ns_alternate_sexp[34],
    of_localized_string = Core_Time_ns_alternate_sexp[35],
    of_string_gen = Core_Time_ns_alternate_sexp[36],
    to_string_iso8601_basic = Core_Time_ns_alternate_sexp[37],
    occurrence = Core_Time_ns_alternate_sexp[38],
    of_string = Core_Time_ns_alternate_sexp[39],
    of_string_with_utc_offset = Core_Time_ns_alternate_sexp[40],
    to_string = Core_Time_ns_alternate_sexp[41],
    to_string_utc = Core_Time_ns_alternate_sexp[42],
    epoch = Core_Time_ns_alternate_sexp[43],
    min_value_representable = Core_Time_ns_alternate_sexp[44],
    max_value_representable = Core_Time_ns_alternate_sexp[45],
    min_value_for_1us_rounding = Core_Time_ns_alternate_sexp[46],
    max_value_for_1us_rounding = Core_Time_ns_alternate_sexp[47],
    min_value = Core_Time_ns_alternate_sexp[48],
    max_value = Core_Time_ns_alternate_sexp[49],
    now = Core_Time_ns_alternate_sexp[50],
    add = Core_Time_ns_alternate_sexp[51],
    add_saturating = Core_Time_ns_alternate_sexp[52],
    sub_saturating = Core_Time_ns_alternate_sexp[53],
    sub = Core_Time_ns_alternate_sexp[54],
    next = Core_Time_ns_alternate_sexp[55],
    prev = Core_Time_ns_alternate_sexp[56],
    diff = Core_Time_ns_alternate_sexp[57],
    abs_diff = Core_Time_ns_alternate_sexp[58],
    to_span_since_epoch = Core_Time_ns_alternate_sexp[59],
    of_span_since_epoch = Core_Time_ns_alternate_sexp[60],
    to_int63_ns_since_epoch = Core_Time_ns_alternate_sexp[61],
    of_int63_ns_since_epoch = Core_Time_ns_alternate_sexp[62],
    to_int_ns_since_epoch = Core_Time_ns_alternate_sexp[63],
    of_int_ns_since_epoch = Core_Time_ns_alternate_sexp[64],
    next_multiple = Core_Time_ns_alternate_sexp[65],
    prev_multiple = Core_Time_ns_alternate_sexp[66],
    random = Core_Time_ns_alternate_sexp[67],
    of_time = Core_Time_ns_alternate_sexp[68],
    to_time = Core_Time_ns_alternate_sexp[69],
    to_time_float_round_nearest = Core_Time_ns_alternate_sexp[70],
    to_time_float_round_nearest_mi = Core_Time_ns_alternate_sexp[71],
    of_time_float_round_nearest = Core_Time_ns_alternate_sexp[72],
    of_time_float_round_nearest_mi = Core_Time_ns_alternate_sexp[73],
    arg_type = Core_Time_ns_alternate_sexp[74],
    get_sexp_zone = Core_Time_ns_alternate_sexp[75],
    interruptible_pause = Core_Time_ns_alternate_sexp[76],
    of_date_ofday_zoned = Core_Time_ns_alternate_sexp[77],
    of_string_abs = Core_Time_ns_alternate_sexp[78],
    of_string_fix_proto = Core_Time_ns_alternate_sexp[79],
    pause = Core_Time_ns_alternate_sexp[80],
    pause_forever = Core_Time_ns_alternate_sexp[81],
    pp = Core_Time_ns_alternate_sexp[82],
    set_sexp_zone = Core_Time_ns_alternate_sexp[83],
    sexp_of_t_abs = Core_Time_ns_alternate_sexp[84],
    t_of_sexp_abs = Core_Time_ns_alternate_sexp[85],
    to_date_ofday_zoned = Core_Time_ns_alternate_sexp[86],
    to_ofday_zoned = Core_Time_ns_alternate_sexp[87],
    to_string_fix_proto = Core_Time_ns_alternate_sexp[88],
    hash_fold_t = Core_Time_ns_alternate_sexp[89],
    hash = Core_Time_ns_alternate_sexp[90],
    t_of_sexp = Core_Time_ns_alternate_sexp[91],
    sexp_of_t = Core_Time_ns_alternate_sexp[92],
    t_sexp_grammar = Core_Time_ns_alternate_sexp[93],
    symbol = Core_Time_ns_alternate_sexp[94],
    symbol$0 = Core_Time_ns_alternate_sexp[95],
    symbol$1 = Core_Time_ns_alternate_sexp[96],
    symbol$2 = Core_Time_ns_alternate_sexp[97],
    symbol$3 = Core_Time_ns_alternate_sexp[98],
    symbol$4 = Core_Time_ns_alternate_sexp[99],
    equal = Core_Time_ns_alternate_sexp[100],
    compare = Core_Time_ns_alternate_sexp[101],
    min = Core_Time_ns_alternate_sexp[102],
    max = Core_Time_ns_alternate_sexp[103],
    ascending = Core_Time_ns_alternate_sexp[104],
    descending = Core_Time_ns_alternate_sexp[105],
    between = Core_Time_ns_alternate_sexp[106],
    clamp_exn = Core_Time_ns_alternate_sexp[107],
    clamp = Core_Time_ns_alternate_sexp[108],
    comparator = Core_Time_ns_alternate_sexp[109],
    validate_lbound = Core_Time_ns_alternate_sexp[110],
    validate_ubound = Core_Time_ns_alternate_sexp[111],
    validate_bound = Core_Time_ns_alternate_sexp[112],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Time_ns = cst_Async_kernel_Time_ns$0;
   function after(t, span){
    var result = caml_call2(add, t, span);
    if
     (caml_call2(Core_Time_ns[1][18], span, Core_Time_ns[1][75])
      && caml_call2(symbol$3, result, t))
     return max_value_for_1us_rounding;
    return result;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Time_ns);
   var
    Async_kernel_Time_ns =
      [0,
       typerep_of_t,
       typename_of_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed,
       to_sec_string,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic,
       occurrence,
       of_string,
       of_string_with_utc_offset,
       to_string,
       to_string_utc,
       epoch,
       min_value_representable,
       max_value_representable,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value,
       max_value,
       now,
       add,
       add_saturating,
       sub_saturating,
       sub,
       next,
       prev,
       diff,
       abs_diff,
       to_span_since_epoch,
       of_span_since_epoch,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       prev_multiple,
       random,
       of_time,
       to_time,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       arg_type,
       get_sexp_zone,
       interruptible_pause,
       of_date_ofday_zoned,
       of_string_abs,
       of_string_fix_proto,
       pause,
       pause_forever,
       pp,
       set_sexp_zone,
       sexp_of_t_abs,
       t_of_sexp_abs,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       after];
   runtime.caml_register_global
    (13, Async_kernel_Time_ns, cst_Async_kernel_Time_ns$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Debug
//# unitInfo: Requires: Async_kernel__Time_ns, Async_kernel_config, Core, Core__Sexp, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Debug$0 = "Async_kernel__Debug",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns,
    Async_kernel_config = global_data.Async_kernel_config,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Debug$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/debug.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    include = Async_kernel_config[14],
    clock = include[1],
    fd = include[2],
    file_descr_watcher = include[3],
    finalizers = include[4],
    interruptor = include[5],
    monitor = include[6],
    monitor_send_exn = include[7],
    parallel = include[8],
    reader = include[9],
    scheduler = include[10],
    shutdown = include[11],
    thread_pool = include[12],
    thread_safe = include[13],
    writer = include[14],
    _a_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Debug = cst_Async_kernel_Debug$0;
   function log(arg2_003, arg3_004, sexp_of_a){
    var
     arg1_002 = caml_call1(Async_kernel_Time_ns[50], 0),
     arg0_001 = caml_call1(Async_kernel_config[31][1], 0),
     res0_005 = caml_call1(Core_Sexp[90], arg0_001),
     res1_006 = caml_call1(Async_kernel_Time_ns[92], arg1_002),
     res2_007 = caml_call1(Core[471], arg2_003),
     res3_008 = caml_call1(sexp_of_a, arg3_004),
     _b_ =
       caml_call2
        (Core_Sexp[81],
         0,
         [1, [0, res0_005, [0, res1_006, [0, res2_007, [0, res3_008, 0]]]]]);
    return caml_call2(Core[231], _a_, _b_);
   }
   function log_string(message){return log(message, 0, Core[518]);}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Debug);
   var
    Async_kernel_Debug =
      [0,
       clock,
       fd,
       file_descr_watcher,
       finalizers,
       interruptor,
       monitor,
       monitor_send_exn,
       parallel,
       reader,
       scheduler,
       shutdown,
       thread_pool,
       thread_safe,
       writer,
       log,
       log_string];
   runtime.caml_register_global
    (16, Async_kernel_Debug, cst_Async_kernel_Debug$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Import
//# unitInfo: Requires: Core, Core__Debug, Core__Int, Core__Sexp, Core__String, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Import$0 = "Async_kernel__Import",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Sexp = global_data.Core__Sexp,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core_Debug = global_data.Core__Debug,
    Core_Time_ns = global_data.Core__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    include = Core_Int[99],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare = include[8],
    min = include[9],
    max = include[10],
    concat = Core_String[32],
    eprint = Core_Debug[1],
    eprint_s = Core_Debug[3],
    eprints = Core_Debug[2],
    _a_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Import = cst_Async_kernel_Import$0;
   function print_s(sexp){
    var _b_ = caml_call2(Core_Sexp[81], 0, sexp);
    return caml_call2(Core[250], _a_, _b_);
   }
   var sec = Core_Time_ns[1][81], Thread = [0], Unix = [0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Import);
   var
    Async_kernel_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       concat,
       eprint,
       eprint_s,
       eprints,
       print_s,
       sec,
       Thread,
       Unix];
   runtime.caml_register_global
    (18, Async_kernel_Import, cst_Async_kernel_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Priority
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Priority$0 = "Async_kernel__Priority",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Priority$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/priority.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, "Low"],
    _b_ = [0, "Normal"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Priority = cst_Async_kernel_Priority$0;
   function sexp_of_t(param){return param ? _a_ : _b_;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Priority);
   var Async_kernel_Priority = [0, sexp_of_t, 0, 1];
   runtime.caml_register_global
    (13, Async_kernel_Priority, cst_Async_kernel_Priority$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Types
//# unitInfo: Requires: CamlinternalMod, Core__Unique_id, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Types$0 = "Async_kernel__Types",
    cst_async_kernel$0 = "async_kernel",
    cst_src_types_ml = "src/types.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    CamlinternalMod = global_data.CamlinternalMod,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Types$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_types_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    Cell =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 37, 2], [0, [0]]),
    Handler =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 42, 2], [0, [0]]),
    Ivar =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 51, 2], [0, [0, [0, [0]]]]),
    Deferred =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 56, 2], [0, [0]]),
    Execution_context =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 66, 2], [0, [0]]),
    Forwarding =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 74, 2], [0, [0]]),
    Monitor =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 88, 2], [0, [0]]),
    Tail =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 93, 2], [0, [0]]),
    Stream =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 102, 2], [0, [0]]);
   caml_call3(CamlinternalMod[2], [0, [0]], Cell, Cell);
   caml_call3(CamlinternalMod[2], [0, [0]], Handler, Handler);
   caml_call3(CamlinternalMod[2], [0, [0, [0, [0]]]], Ivar, Ivar);
   caml_call3(CamlinternalMod[2], [0, [0]], Deferred, Deferred);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Execution_context, Execution_context);
   caml_call3(CamlinternalMod[2], [0, [0]], Forwarding, Forwarding);
   caml_call3(CamlinternalMod[2], [0, [0]], Monitor, Monitor);
   caml_call3(CamlinternalMod[2], [0, [0]], Tail, Tail);
   caml_call3(CamlinternalMod[2], [0, [0]], Stream, Stream);
   var
    _a_ = [0, [0, [0, [0]], [0, [0]]]],
    _b_ = [0, cst_src_types_ml, 155, 2],
    _c_ = [0, [0]],
    _d_ = [0, cst_src_types_ml, 160, 2],
    _e_ = [0, [0]],
    _f_ = [0, cst_src_types_ml, 166, 2],
    _g_ = [0, [0]],
    _h_ = [0, cst_src_types_ml, 171, 2],
    _i_ = [0, [0]],
    _j_ = [0, cst_src_types_ml, 176, 2],
    _k_ = [0, [0]],
    _l_ = [0, cst_src_types_ml, 188, 2],
    _m_ = [0, [0]],
    _n_ = [0, cst_src_types_ml, 198, 2],
    _o_ = [0, [0]],
    _p_ = [0, cst_src_types_ml, 233, 2],
    _q_ = [0, [0]],
    _r_ = [0, cst_src_types_ml, 238, 2],
    _s_ = [0, [0]],
    _t_ = [0, cst_src_types_ml, 256, 2],
    _u_ = [0, [0, [0, [0]]]],
    _v_ = [0, cst_src_types_ml, 270, 2],
    _w_ = [0, [0, [0, [0]], [0, [0]]]],
    _x_ = [0, [0]],
    _y_ = [0, [0]],
    _z_ = [0, [0]],
    _A_ = [0, [0]],
    _B_ = [0, [0]],
    _C_ = [0, [0]],
    _D_ = [0, [0]],
    _E_ = [0, [0]],
    _F_ = [0, [0]],
    _G_ = [0, [0, [0, [0]]]],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Types = cst_Async_kernel_Types$0;
   function to_repr(t){return t;}
   function of_repr(t){return t;}
   var
    Bvar = [0, of_repr, to_repr],
    Event = caml_call2(CamlinternalMod[1], _b_, _a_),
    External_job = caml_call2(CamlinternalMod[1], _d_, _c_),
    Job = caml_call2(CamlinternalMod[1], _f_, _e_),
    Job_or_event = caml_call2(CamlinternalMod[1], _h_, _g_),
    Job_pool = caml_call2(CamlinternalMod[1], _j_, _i_),
    Job_queue = caml_call2(CamlinternalMod[1], _l_, _k_),
    Jobs = caml_call2(CamlinternalMod[1], _n_, _m_),
    Scheduler = caml_call2(CamlinternalMod[1], _p_, _o_),
    Cycle_hook = caml_call2(CamlinternalMod[1], _r_, _q_),
    Time_source = caml_call2(CamlinternalMod[1], _t_, _s_),
    Very_low_priority_worker = caml_call2(CamlinternalMod[1], _v_, _u_),
    Cycle_hook_handle = caml_call1(Core_Unique_id[2], [0]),
    Time_source_id = caml_call1(Core_Unique_id[2], [0]);
   caml_call3(CamlinternalMod[2], _w_, Event, Event);
   caml_call3(CamlinternalMod[2], _x_, External_job, External_job);
   caml_call3(CamlinternalMod[2], _y_, Job, Job);
   caml_call3(CamlinternalMod[2], _z_, Job_or_event, Job_or_event);
   caml_call3(CamlinternalMod[2], _A_, Job_pool, Job_pool);
   caml_call3(CamlinternalMod[2], _B_, Job_queue, Job_queue);
   caml_call3(CamlinternalMod[2], _C_, Jobs, Jobs);
   caml_call3(CamlinternalMod[2], _D_, Scheduler, Scheduler);
   caml_call3(CamlinternalMod[2], _E_, Cycle_hook, Cycle_hook);
   caml_call3(CamlinternalMod[2], _F_, Time_source, Time_source);
   caml_call3
    (CamlinternalMod[2],
     _G_,
     Very_low_priority_worker,
     Very_low_priority_worker);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Types);
   var
    Async_kernel_Types =
      [0,
       Cell,
       Handler,
       Ivar,
       Deferred,
       Execution_context,
       Forwarding,
       Monitor,
       Tail,
       Stream,
       Bvar,
       Event,
       External_job,
       Job,
       Job_or_event,
       Job_pool,
       Job_queue,
       Jobs,
       Scheduler,
       Cycle_hook,
       Cycle_hook_handle,
       Time_source_id,
       Time_source,
       Very_low_priority_worker];
   runtime.caml_register_global
    (73, Async_kernel_Types, cst_Async_kernel_Types$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Monitor0
//# unitInfo: Requires: Async_kernel__Debug, Base__Field, Core, Core__Bag, Core__Info, Core__List, Core__Sexp, Core__Source_code_position, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexp_hidden_in_test
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Monitor0$0 = "Async_kernel__Monitor0",
    cst_async_kernel$0 = "async_kernel",
    cst_forwarding$0 = "forwarding",
    cst_handlers_for_all_errors$0 = "handlers_for_all_errors",
    cst_has_seen_error$0 = "has_seen_error",
    cst_here$0 = "here",
    cst_id$1 = "id",
    cst_name$0 = "name",
    cst_next_error$0 = "next_error",
    cst_tails_for_all_errors$0 = "tails_for_all_errors";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    names =
      [0,
       cst_name$0,
       [0,
        cst_here$0,
        [0,
         cst_id$1,
         [0,
          cst_next_error$0,
          [0,
           cst_handlers_for_all_errors$0,
           [0,
            cst_tails_for_all_errors$0,
            [0, cst_has_seen_error$0, [0, cst_forwarding$0, 0]]]]]]]],
    Core = global_data.Core,
    Sexp_hidden_in_test = global_data.Sexp_hidden_in_test,
    Core_Info = global_data.Core__Info,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Core_Sexp = global_data.Core__Sexp,
    Core_List = global_data.Core__List,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Base_Field = global_data.Base__Field,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Monitor0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/monitor0.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    debug = Async_kernel_Debug[6],
    cst_id$0 = cst_id$1,
    cst_created_monitor = "created monitor",
    cst_forwarding = cst_forwarding$0,
    cst_has_seen_error = cst_has_seen_error$0,
    cst_tails_for_all_errors = cst_tails_for_all_errors$0,
    cst_handlers_for_all_errors = cst_handlers_for_all_errors$0,
    cst_next_error = cst_next_error$0,
    cst_id = cst_id$1,
    cst_here = cst_here$0,
    cst_name = cst_name$0,
    _q_ = [0, "main"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Monitor0 = cst_Async_kernel_Monitor0$0;
   function forwarding(r){return r[8];}
   function set_forwarding(r, v){r[8] = v; return 0;}
   function has_seen_error(r){return r[7];}
   function set_has_seen_error(r, v){r[7] = v; return 0;}
   function tails_for_all_errors(r){return r[6];}
   function set_tails_for_all_errors(r, v){r[6] = v; return 0;}
   function handlers_for_all_errors(r){return r[5];}
   function set_handlers_for_all_errors(r, v){r[5] = v; return 0;}
   function next_error(r){return r[4];}
   function set_next_error(r, v){r[4] = v; return 0;}
   function id(r){return r[3];}
   function here(r){return r[2];}
   function name(r){return r[1];}
   function _a_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v];
   }
   var
    _b_ = [0, set_forwarding],
    forwarding$0 =
      [0, function(param){return 0;}, cst_forwarding, _b_, forwarding, _a_];
   function _c_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
   }
   var
    _d_ = [0, set_has_seen_error],
    has_seen_error$0 =
      [0,
       function(param){return 0;},
       cst_has_seen_error,
       _d_,
       has_seen_error,
       _c_];
   function _e_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
   }
   var
    _f_ = [0, set_tails_for_all_errors],
    tails_for_all_errors$0 =
      [0,
       function(param){return 0;},
       cst_tails_for_all_errors,
       _f_,
       tails_for_all_errors,
       _e_];
   function _g_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8]];
   }
   var
    _h_ = [0, set_handlers_for_all_errors],
    handlers_for_all_errors$0 =
      [0,
       function(param){return 0;},
       cst_handlers_for_all_errors,
       _h_,
       handlers_for_all_errors,
       _g_];
   function _i_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8]];
   }
   var
    _j_ = [0, set_next_error],
    next_error$0 =
      [0, function(param){return 0;}, cst_next_error, _j_, next_error, _i_];
   function _k_(r, v){
    return [0, r[1], r[2], v, r[4], r[5], r[6], r[7], r[8]];
   }
   var _l_ = 0, id$0 = [0, function(param){return 0;}, cst_id, _l_, id, _k_];
   function _m_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _n_ = 0,
    here$0 = [0, function(param){return 0;}, cst_here, _n_, here, _m_];
   function _o_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _p_ = 0,
    name$0 = [0, function(param){return 0;}, cst_name, _p_, name, _o_];
   function make_creator
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun,
    compile_acc){
    var
     match = caml_call2(name_fun, name$0, compile_acc),
     compile_acc$0 = match[2],
     name_gen = match[1],
     match$0 = caml_call2(here_fun, here$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     here_gen = match$0[1],
     match$1 = caml_call2(id_fun, id$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     id_gen = match$1[1],
     match$2 = caml_call2(next_error_fun, next_error$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     next_error_gen = match$2[1],
     match$3 =
       caml_call2
        (handlers_for_all_errors_fun,
         handlers_for_all_errors$0,
         compile_acc$3),
     compile_acc$4 = match$3[2],
     handlers_for_all_errors_gen = match$3[1],
     match$4 =
       caml_call2
        (tails_for_all_errors_fun, tails_for_all_errors$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     tails_for_all_errors_gen = match$4[1],
     match$5 = caml_call2(has_seen_error_fun, has_seen_error$0, compile_acc$5),
     compile_acc$6 = match$5[2],
     has_seen_error_gen = match$5[1],
     match$6 = caml_call2(forwarding_fun, forwarding$0, compile_acc$6),
     compile_acc$7 = match$6[2],
     forwarding_gen = match$6[1];
    return [0,
            function(acc){
             var
              name = caml_call1(name_gen, acc),
              here = caml_call1(here_gen, acc),
              id = caml_call1(id_gen, acc),
              next_error = caml_call1(next_error_gen, acc),
              handlers_for_all_errors =
                caml_call1(handlers_for_all_errors_gen, acc),
              tails_for_all_errors = caml_call1(tails_for_all_errors_gen, acc),
              has_seen_error = caml_call1(has_seen_error_gen, acc),
              forwarding = caml_call1(forwarding_gen, acc);
             return [0,
                     name,
                     here,
                     id,
                     next_error,
                     handlers_for_all_errors,
                     tails_for_all_errors,
                     has_seen_error,
                     forwarding];
            },
            compile_acc$7];
   }
   function create
   (name,
    here,
    id,
    next_error,
    handlers_for_all_errors,
    tails_for_all_errors,
    has_seen_error,
    forwarding){
    return [0,
            name,
            here,
            id,
            next_error,
            handlers_for_all_errors,
            tails_for_all_errors,
            has_seen_error,
            forwarding];
   }
   function map
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _aE_ = caml_call1(forwarding_fun, forwarding$0),
     _aF_ = caml_call1(has_seen_error_fun, has_seen_error$0),
     _aG_ = caml_call1(tails_for_all_errors_fun, tails_for_all_errors$0),
     _aH_ = caml_call1(handlers_for_all_errors_fun, handlers_for_all_errors$0),
     _aI_ = caml_call1(next_error_fun, next_error$0),
     _aJ_ = caml_call1(id_fun, id$0),
     _aK_ = caml_call1(here_fun, here$0);
    return [0,
            caml_call1(name_fun, name$0),
            _aK_,
            _aJ_,
            _aI_,
            _aH_,
            _aG_,
            _aF_,
            _aE_];
   }
   function iter
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    caml_call1(name_fun, name$0);
    caml_call1(here_fun, here$0);
    caml_call1(id_fun, id$0);
    caml_call1(next_error_fun, next_error$0);
    caml_call1(handlers_for_all_errors_fun, handlers_for_all_errors$0);
    caml_call1(tails_for_all_errors_fun, tails_for_all_errors$0);
    caml_call1(has_seen_error_fun, has_seen_error$0);
    return caml_call1(forwarding_fun, forwarding$0);
   }
   function fold
   (init,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    return caml_call2
            (forwarding_fun,
             caml_call2
              (has_seen_error_fun,
               caml_call2
                (tails_for_all_errors_fun,
                 caml_call2
                  (handlers_for_all_errors_fun,
                   caml_call2
                    (next_error_fun,
                     caml_call2
                      (id_fun,
                       caml_call2
                        (here_fun, caml_call2(name_fun, init, name$0), here$0),
                       id$0),
                     next_error$0),
                   handlers_for_all_errors$0),
                 tails_for_all_errors$0),
               has_seen_error$0),
             forwarding$0);
   }
   function map_poly(record){
    var
     _ax_ = [0, caml_call1(record[1], forwarding$0), 0],
     _ay_ = [0, caml_call1(record[1], has_seen_error$0), _ax_],
     _az_ = [0, caml_call1(record[1], tails_for_all_errors$0), _ay_],
     _aA_ = [0, caml_call1(record[1], handlers_for_all_errors$0), _az_],
     _aB_ = [0, caml_call1(record[1], next_error$0), _aA_],
     _aC_ = [0, caml_call1(record[1], id$0), _aB_],
     _aD_ = [0, caml_call1(record[1], here$0), _aC_];
    return [0, caml_call1(record[1], name$0), _aD_];
   }
   function for_all
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _aq_ = caml_call1(name_fun, name$0),
     _ar_ = _aq_ ? caml_call1(here_fun, here$0) : _aq_,
     _as_ = _ar_ ? caml_call1(id_fun, id$0) : _ar_,
     _at_ = _as_ ? caml_call1(next_error_fun, next_error$0) : _as_,
     _au_ =
       _at_
        ? caml_call1(handlers_for_all_errors_fun, handlers_for_all_errors$0)
        : _at_,
     _av_ =
       _au_
        ? caml_call1(tails_for_all_errors_fun, tails_for_all_errors$0)
        : _au_,
     _aw_ = _av_ ? caml_call1(has_seen_error_fun, has_seen_error$0) : _av_;
    return _aw_ ? caml_call1(forwarding_fun, forwarding$0) : _aw_;
   }
   function exists
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _ap_ = caml_call1(name_fun, name$0),
     _aj_ = _ap_ || caml_call1(here_fun, here$0),
     _ak_ = _aj_ || caml_call1(id_fun, id$0),
     _al_ = _ak_ || caml_call1(next_error_fun, next_error$0),
     _am_ =
       _al_
       || caml_call1(handlers_for_all_errors_fun, handlers_for_all_errors$0),
     _an_ =
       _am_ || caml_call1(tails_for_all_errors_fun, tails_for_all_errors$0),
     _ao_ = _an_ || caml_call1(has_seen_error_fun, has_seen_error$0);
    return _ao_ ? _ao_ : caml_call1(forwarding_fun, forwarding$0);
   }
   function to_list
   (name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _ac_ = [0, caml_call1(forwarding_fun, forwarding$0), 0],
     _ad_ = [0, caml_call1(has_seen_error_fun, has_seen_error$0), _ac_],
     _ae_ =
       [0, caml_call1(tails_for_all_errors_fun, tails_for_all_errors$0), _ad_],
     _af_ =
       [0,
        caml_call1(handlers_for_all_errors_fun, handlers_for_all_errors$0),
        _ae_],
     _ag_ = [0, caml_call1(next_error_fun, next_error$0), _af_],
     _ah_ = [0, caml_call1(id_fun, id$0), _ag_],
     _ai_ = [0, caml_call1(here_fun, here$0), _ah_];
    return [0, caml_call1(name_fun, name$0), _ai_];
   }
   function iter$0
   (record,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    caml_call3(name_fun, name$0, record, record[1]);
    caml_call3(here_fun, here$0, record, record[2]);
    caml_call3(id_fun, id$0, record, record[3]);
    caml_call3(next_error_fun, next_error$0, record, record[4]);
    caml_call3
     (handlers_for_all_errors_fun,
      handlers_for_all_errors$0,
      record,
      record[5]);
    caml_call3
     (tails_for_all_errors_fun, tails_for_all_errors$0, record, record[6]);
    caml_call3(has_seen_error_fun, has_seen_error$0, record, record[7]);
    return caml_call3(forwarding_fun, forwarding$0, record, record[8]);
   }
   function fold$0
   (record,
    init,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _X_ = record[8],
     _Y_ = record[7],
     _Z_ = record[6],
     ___ = record[5],
     _$_ = record[4],
     _aa_ = record[3],
     _ab_ = record[2];
    return caml_call4
            (forwarding_fun,
             caml_call4
              (has_seen_error_fun,
               caml_call4
                (tails_for_all_errors_fun,
                 caml_call4
                  (handlers_for_all_errors_fun,
                   caml_call4
                    (next_error_fun,
                     caml_call4
                      (id_fun,
                       caml_call4
                        (here_fun,
                         caml_call4(name_fun, init, name$0, record, record[1]),
                         here$0,
                         record,
                         _ab_),
                       id$0,
                       record,
                       _aa_),
                     next_error$0,
                     record,
                     _$_),
                   handlers_for_all_errors$0,
                   record,
                   ___),
                 tails_for_all_errors$0,
                 record,
                 _Z_),
               has_seen_error$0,
               record,
               _Y_),
             forwarding$0,
             record,
             _X_);
   }
   function for_all$0
   (record,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _Q_ = caml_call3(name_fun, name$0, record, record[1]),
     _R_ = _Q_ ? caml_call3(here_fun, here$0, record, record[2]) : _Q_,
     _S_ = _R_ ? caml_call3(id_fun, id$0, record, record[3]) : _R_,
     _T_ =
       _S_ ? caml_call3(next_error_fun, next_error$0, record, record[4]) : _S_,
     _U_ =
       _T_
        ? caml_call3
          (handlers_for_all_errors_fun,
           handlers_for_all_errors$0,
           record,
           record[5])
        : _T_,
     _V_ =
       _U_
        ? caml_call3
          (tails_for_all_errors_fun,
           tails_for_all_errors$0,
           record,
           record[6])
        : _U_,
     _W_ =
       _V_
        ? caml_call3(has_seen_error_fun, has_seen_error$0, record, record[7])
        : _V_;
    return _W_
            ? caml_call3(forwarding_fun, forwarding$0, record, record[8])
            : _W_;
   }
   function exists$0
   (record,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _P_ = caml_call3(name_fun, name$0, record, record[1]),
     _J_ = _P_ || caml_call3(here_fun, here$0, record, record[2]),
     _K_ = _J_ || caml_call3(id_fun, id$0, record, record[3]),
     _L_ = _K_ || caml_call3(next_error_fun, next_error$0, record, record[4]),
     _M_ =
       _L_
       ||
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[5]),
     _N_ =
       _M_
       ||
        caml_call3
         (tails_for_all_errors_fun, tails_for_all_errors$0, record, record[6]),
     _O_ =
       _N_
       || caml_call3(has_seen_error_fun, has_seen_error$0, record, record[7]);
    return _O_
            ? _O_
            : caml_call3(forwarding_fun, forwarding$0, record, record[8]);
   }
   function to_list$0
   (record,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _C_ = [0, caml_call3(forwarding_fun, forwarding$0, record, record[8]), 0],
     _D_ =
       [0,
        caml_call3(has_seen_error_fun, has_seen_error$0, record, record[7]),
        _C_],
     _E_ =
       [0,
        caml_call3
         (tails_for_all_errors_fun, tails_for_all_errors$0, record, record[6]),
        _D_],
     _F_ =
       [0,
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[5]),
        _E_],
     _G_ =
       [0, caml_call3(next_error_fun, next_error$0, record, record[4]), _F_],
     _H_ = [0, caml_call3(id_fun, id$0, record, record[3]), _G_],
     _I_ = [0, caml_call3(here_fun, here$0, record, record[2]), _H_];
    return [0, caml_call3(name_fun, name$0, record, record[1]), _I_];
   }
   function map$0
   (record,
    name_fun,
    here_fun,
    id_fun,
    next_error_fun,
    handlers_for_all_errors_fun,
    tails_for_all_errors_fun,
    has_seen_error_fun,
    forwarding_fun){
    var
     _v_ = caml_call3(forwarding_fun, forwarding$0, record, record[8]),
     _w_ = caml_call3(has_seen_error_fun, has_seen_error$0, record, record[7]),
     _x_ =
       caml_call3
        (tails_for_all_errors_fun, tails_for_all_errors$0, record, record[6]),
     _y_ =
       caml_call3
        (handlers_for_all_errors_fun,
         handlers_for_all_errors$0,
         record,
         record[5]),
     _z_ = caml_call3(next_error_fun, next_error$0, record, record[4]),
     _A_ = caml_call3(id_fun, id$0, record, record[3]),
     _B_ = caml_call3(here_fun, here$0, record, record[2]);
    return [0,
            caml_call3(name_fun, name$0, record, record[1]),
            _B_,
            _A_,
            _z_,
            _y_,
            _x_,
            _w_,
            _v_];
   }
   function set_all_mutable_fields
   (record,
    next_error,
    handlers_for_all_errors,
    tails_for_all_errors,
    has_seen_error,
    forwarding){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[4] = next_error;
    record$0[5] = handlers_for_all_errors;
    record$0[6] = tails_for_all_errors;
    record$0[7] = has_seen_error;
    record$0[8] = forwarding;
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    Fields =
      [0,
       names,
       forwarding$0,
       has_seen_error$0,
       tails_for_all_errors$0,
       handlers_for_all_errors$0,
       next_error$0,
       id$0,
       here$0,
       name$0,
       make_creator,
       create,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct];
   function description(t){
    var match = t[2];
    if(! match) return caml_call1(Core_Info[6], t[1]);
    var
     here = match[1],
     _u_ = [0, caml_call1(Core_Source_code_position[1], here), 0];
    return [1, [0, caml_call1(Core_Info[6], t[1]), _u_]];
   }
   function descriptions(t$1){
    var t = t$1, ac = 0;
    for(;;){
     var ac$0 = [0, description(t), ac], match = t[8];
     if(typeof match === "number") return caml_call1(Core_List[34], ac$0);
     var t$0 = match[1], t = t$0, ac = ac$0;
    }
   }
   function sexp_of_t(t){
    var x_001 = descriptions(t);
    return caml_call2(Core[421], Core_Sexp[90], x_001);
   }
   var r = [0, 0];
   function next_id(param){r[1]++; return r[1];}
   function create_with_parent(here, info, name, parent){
    var id = next_id(0);
    if(info){
     var i = info[1];
     if(name)
      var s = name[1], _r_ = caml_call2(Core_Info[20], i, s);
     else
      var _r_ = i;
     var name$0 = _r_;
    }
    else if(name)
     var s$0 = name[1], name$0 = caml_call1(Core_Info[12], s$0);
    else
     var
      _t_ =
        function(x_002){
         return caml_call2(Sexp_hidden_in_test[10], Core[356], x_002);
        },
      name$0 = caml_call5(Core_Info[17], 0, 0, cst_id$0, id, _t_);
    if(parent)
     var parent$0 = parent[1], _s_ = [0, parent$0];
    else
     var _s_ = 1;
    var
     t = [0, name$0, here, id, [0, 0], caml_call1(Core_Bag[22], 0), 0, 0, _s_];
    if(debug)
     caml_call3(Async_kernel_Debug[15], cst_created_monitor, t, sexp_of_t);
    return t;
   }
   var main = create_with_parent(0, 0, _q_, 0);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Monitor0);
   var
    Async_kernel_Monitor0 =
      [0,
       debug,
       forwarding,
       set_forwarding,
       has_seen_error,
       set_has_seen_error,
       tails_for_all_errors,
       set_tails_for_all_errors,
       handlers_for_all_errors,
       set_handlers_for_all_errors,
       next_error,
       set_next_error,
       id,
       here,
       name,
       Fields,
       description,
       descriptions,
       sexp_of_t,
       next_id,
       create_with_parent,
       main];
   runtime.caml_register_global
    (32, Async_kernel_Monitor0, cst_Async_kernel_Monitor0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Execution_context
//# unitInfo: Requires: Async_kernel__Monitor0, Async_kernel__Priority, Base__Backtrace, Base__Field, Core, Core__Option, Core__Univ_map, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Execution_con$0 = "Async_kernel__Execution_context",
    cst_async_kernel$0 = "async_kernel",
    cst_backtrace_history$0 = "backtrace_history",
    cst_local_storage$0 = "local_storage",
    cst_monitor$0 = "monitor",
    cst_priority$0 = "priority";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    names =
      [0,
       cst_monitor$0,
       [0,
        cst_priority$0,
        [0, cst_local_storage$0, [0, cst_backtrace_history$0, 0]]]],
    Base_Backtrace = global_data.Base__Backtrace,
    Core_Univ_map = global_data.Core__Univ_map,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Async_kernel_Priority = global_data.Async_kernel__Priority,
    Async_kernel_Monitor0 = global_data.Async_kernel__Monitor0,
    Base_Field = global_data.Base__Field,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Execution_con$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/execution_context.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _i_ = [0, cst_backtrace_history$0],
    _j_ = [0, cst_local_storage$0],
    _k_ = [0, cst_priority$0],
    _l_ = [0, cst_monitor$0],
    cst_backtrace_history = cst_backtrace_history$0,
    cst_local_storage = cst_local_storage$0,
    cst_priority = cst_priority$0,
    cst_monitor = cst_monitor$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Execution_con = cst_Async_kernel_Execution_con$0;
   function backtrace_history(r){return r[4];}
   function local_storage(r){return r[3];}
   function priority(r){return r[2];}
   function monitor(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], r[3], v];}
   var
    _b_ = 0,
    backtrace_history$0 =
      [0,
       function(param){return 0;},
       cst_backtrace_history,
       _b_,
       backtrace_history,
       _a_];
   function _c_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _d_ = 0,
    local_storage$0 =
      [0,
       function(param){return 0;},
       cst_local_storage,
       _d_,
       local_storage,
       _c_];
   function _e_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _f_ = 0,
    priority$0 =
      [0, function(param){return 0;}, cst_priority, _f_, priority, _e_];
   function _g_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _h_ = 0,
    monitor$0 =
      [0, function(param){return 0;}, cst_monitor, _h_, monitor, _g_];
   function make_creator
   (monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun,
    compile_acc){
    var
     match = caml_call2(monitor_fun, monitor$0, compile_acc),
     compile_acc$0 = match[2],
     monitor_gen = match[1],
     match$0 = caml_call2(priority_fun, priority$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     priority_gen = match$0[1],
     match$1 = caml_call2(local_storage_fun, local_storage$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     local_storage_gen = match$1[1],
     match$2 =
       caml_call2(backtrace_history_fun, backtrace_history$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     backtrace_history_gen = match$2[1];
    return [0,
            function(acc){
             var
              monitor = caml_call1(monitor_gen, acc),
              priority = caml_call1(priority_gen, acc),
              local_storage = caml_call1(local_storage_gen, acc),
              backtrace_history = caml_call1(backtrace_history_gen, acc);
             return [0, monitor, priority, local_storage, backtrace_history];
            },
            compile_acc$3];
   }
   function create(monitor, priority, local_storage, backtrace_history){return [0, monitor, priority, local_storage, backtrace_history];
   }
   function map
   (monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    var
     _U_ = caml_call1(backtrace_history_fun, backtrace_history$0),
     _V_ = caml_call1(local_storage_fun, local_storage$0),
     _W_ = caml_call1(priority_fun, priority$0);
    return [0, caml_call1(monitor_fun, monitor$0), _W_, _V_, _U_];
   }
   function iter
   (monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    caml_call1(monitor_fun, monitor$0);
    caml_call1(priority_fun, priority$0);
    caml_call1(local_storage_fun, local_storage$0);
    return caml_call1(backtrace_history_fun, backtrace_history$0);
   }
   function fold
   (init, monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    return caml_call2
            (backtrace_history_fun,
             caml_call2
              (local_storage_fun,
               caml_call2
                (priority_fun,
                 caml_call2(monitor_fun, init, monitor$0),
                 priority$0),
               local_storage$0),
             backtrace_history$0);
   }
   function map_poly(record){
    var
     _R_ = [0, caml_call1(record[1], backtrace_history$0), 0],
     _S_ = [0, caml_call1(record[1], local_storage$0), _R_],
     _T_ = [0, caml_call1(record[1], priority$0), _S_];
    return [0, caml_call1(record[1], monitor$0), _T_];
   }
   function for_all
   (monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    var
     _O_ = caml_call1(monitor_fun, monitor$0),
     _P_ = _O_ ? caml_call1(priority_fun, priority$0) : _O_,
     _Q_ = _P_ ? caml_call1(local_storage_fun, local_storage$0) : _P_;
    return _Q_ ? caml_call1(backtrace_history_fun, backtrace_history$0) : _Q_;
   }
   function exists
   (monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    var
     _N_ = caml_call1(monitor_fun, monitor$0),
     _L_ = _N_ || caml_call1(priority_fun, priority$0),
     _M_ = _L_ || caml_call1(local_storage_fun, local_storage$0);
    return _M_ ? _M_ : caml_call1(backtrace_history_fun, backtrace_history$0);
   }
   function to_list
   (monitor_fun, priority_fun, local_storage_fun, backtrace_history_fun){
    var
     _I_ = [0, caml_call1(backtrace_history_fun, backtrace_history$0), 0],
     _J_ = [0, caml_call1(local_storage_fun, local_storage$0), _I_],
     _K_ = [0, caml_call1(priority_fun, priority$0), _J_];
    return [0, caml_call1(monitor_fun, monitor$0), _K_];
   }
   function iter$0
   (record,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    caml_call3(monitor_fun, monitor$0, record, record[1]);
    caml_call3(priority_fun, priority$0, record, record[2]);
    caml_call3(local_storage_fun, local_storage$0, record, record[3]);
    return caml_call3
            (backtrace_history_fun, backtrace_history$0, record, record[4]);
   }
   function fold$0
   (record,
    init,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    var _F_ = record[4], _G_ = record[3], _H_ = record[2];
    return caml_call4
            (backtrace_history_fun,
             caml_call4
              (local_storage_fun,
               caml_call4
                (priority_fun,
                 caml_call4(monitor_fun, init, monitor$0, record, record[1]),
                 priority$0,
                 record,
                 _H_),
               local_storage$0,
               record,
               _G_),
             backtrace_history$0,
             record,
             _F_);
   }
   function for_all$0
   (record,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    var
     _C_ = caml_call3(monitor_fun, monitor$0, record, record[1]),
     _D_ = _C_ ? caml_call3(priority_fun, priority$0, record, record[2]) : _C_,
     _E_ =
       _D_
        ? caml_call3(local_storage_fun, local_storage$0, record, record[3])
        : _D_;
    return _E_
            ? caml_call3
              (backtrace_history_fun, backtrace_history$0, record, record[4])
            : _E_;
   }
   function exists$0
   (record,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    var
     _B_ = caml_call3(monitor_fun, monitor$0, record, record[1]),
     _z_ = _B_ || caml_call3(priority_fun, priority$0, record, record[2]),
     _A_ =
       _z_
       || caml_call3(local_storage_fun, local_storage$0, record, record[3]);
    return _A_
            ? _A_
            : caml_call3
              (backtrace_history_fun, backtrace_history$0, record, record[4]);
   }
   function to_list$0
   (record,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    var
     _w_ =
       [0,
        caml_call3
         (backtrace_history_fun, backtrace_history$0, record, record[4]),
        0],
     _x_ =
       [0,
        caml_call3(local_storage_fun, local_storage$0, record, record[3]),
        _w_],
     _y_ = [0, caml_call3(priority_fun, priority$0, record, record[2]), _x_];
    return [0, caml_call3(monitor_fun, monitor$0, record, record[1]), _y_];
   }
   function map$0
   (record,
    monitor_fun,
    priority_fun,
    local_storage_fun,
    backtrace_history_fun){
    var
     _t_ =
       caml_call3
        (backtrace_history_fun, backtrace_history$0, record, record[4]),
     _u_ = caml_call3(local_storage_fun, local_storage$0, record, record[3]),
     _v_ = caml_call3(priority_fun, priority$0, record, record[2]);
    return [0,
            caml_call3(monitor_fun, monitor$0, record, record[1]),
            _v_,
            _u_,
            _t_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields];
   function sexp_of_t(param){
    var
     backtrace_history_008 = param[4],
     local_storage_006 = param[3],
     priority_004 = param[2],
     monitor_002 = param[1],
     arg_009 = caml_call2(Core[421], Base_Backtrace[1], backtrace_history_008),
     bnds_001 = [0, [1, [0, _i_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Core_Univ_map[2], local_storage_006),
     bnds_001$0 = [0, [1, [0, _j_, [0, arg_007, 0]]], bnds_001],
     arg_005 = caml_call1(Async_kernel_Priority[1], priority_004),
     bnds_001$1 = [0, [1, [0, _k_, [0, arg_005, 0]]], bnds_001$0],
     arg_003 = caml_call1(Async_kernel_Monitor0[18], monitor_002),
     bnds_001$2 = [0, [1, [0, _l_, [0, arg_003, 0]]], bnds_001$1];
    return [1, bnds_001$2];
   }
   function invariant(param){return 0;}
   var
    main =
      [0,
       Async_kernel_Monitor0[21],
       Async_kernel_Priority[2],
       Core_Univ_map[4],
       0];
   function create_like(monitor, priority, local_storage, t){
    var
     monitor$0 = caml_call2(Core_Option[34], monitor, t[1]),
     _r_ = t[4],
     _s_ = caml_call2(Core_Option[34], local_storage, t[3]);
    return [0,
            monitor$0,
            caml_call2(Core_Option[34], priority, t[2]),
            _s_,
            _r_];
   }
   function find_local(t, key){
    return caml_call2(Core_Univ_map[10], t[3], key);
   }
   function with_local(t, key, data){
    var _o_ = t[4];
    function _p_(param){return data;}
    var _q_ = caml_call3(Core_Univ_map[14], t[3], key, _p_);
    return [0, t[1], t[2], _q_, _o_];
   }
   function record_backtrace(t){
    var _m_ = t[4], _n_ = [0, caml_call2(Base_Backtrace[2], 0, 0), _m_];
    return [0, t[1], t[2], t[3], _n_];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Execution_con);
   var
    Async_kernel_Execution_context =
      [0,
       backtrace_history,
       local_storage,
       priority,
       monitor,
       [0,
        names,
        backtrace_history$0,
        local_storage$0,
        priority$0,
        monitor$0,
        fold,
        make_creator,
        create,
        map,
        iter,
        for_all,
        exists,
        to_list,
        map_poly,
        Direct],
       sexp_of_t,
       invariant,
       main,
       create_like,
       find_local,
       with_local,
       record_backtrace];
   runtime.caml_register_global
    (27, Async_kernel_Execution_context, cst_Async_kernel_Execution_con$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__External_job
//# unitInfo: Requires: Async_kernel__Types, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_External_job$0 = "Async_kernel__External_job",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_External_job$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/external_job.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, "<job>"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_External_job = cst_Async_kernel_External_job$0;
   function sexp_of_t(param){return _a_;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_External_job);
   var Async_kernel_External_job = [0, sexp_of_t];
   runtime.caml_register_global
    (12, Async_kernel_External_job, cst_Async_kernel_External_job$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Job_pool
//# unitInfo: Requires: Async_kernel__Execution_context, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Job_pool$0 = "Async_kernel__Job_pool",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Tuple_pool = global_data.Tuple_pool,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Job_pool$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/job_pool.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    dummy_e = Async_kernel_Execution_context[8],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Job_pool = cst_Async_kernel_Job_pool$0;
   function dummy_f(_g_){return 0;}
   var dummy_a = 0;
   function sexp_of_slots(x_001){
    var _c_ = Sexplib0_Sexp_conv[23];
    function _d_(param){
     function _e_(_f_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _e_);
    }
    return caml_call4
            (Tuple_pool[1][5],
             Async_kernel_Execution_context[6],
             _d_,
             _c_,
             x_001);
   }
   function sexp_of_t(x_002){
    return caml_call2(Tuple_pool[4], sexp_of_slots, x_002);
   }
   function invariant(t){
    function _a_(_b_){return 0;}
    return caml_call2(Tuple_pool[5], _a_, t);
   }
   function create(param){
    return caml_call3
            (Tuple_pool[9],
             Tuple_pool[1][19],
             1,
             [0, dummy_e, dummy_f, dummy_a]);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Job_pool);
   var
    Async_kernel_Job_pool = [0, sexp_of_slots, sexp_of_t, invariant, create];
   runtime.caml_register_global
    (14, Async_kernel_Job_pool, cst_Async_kernel_Job_pool$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Job
//# unitInfo: Requires: Async_kernel__Job_pool, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Job$0 = "Async_kernel__Job",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Job_pool = global_data.Async_kernel__Job_pool,
    Tuple_pool = global_data.Tuple_pool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Job$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/job.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Job = cst_Async_kernel_Job$0;
   function sexp_of_t(x_001){
    return caml_call2(Tuple_pool[3][1], Async_kernel_Job_pool[1], x_001);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Job);
   var Async_kernel_Job = [0, sexp_of_t];
   runtime.caml_register_global(13, Async_kernel_Job, cst_Async_kernel_Job$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Job_or_event
//# unitInfo: Requires: Async_kernel__Types, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Job_or_event$0 = "Async_kernel__Job_or_event",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Obj = global_data.Stdlib__Obj,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   global_data.Async_kernel__Types;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Job_or_event$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/job_or_event.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Job_or_event = cst_Async_kernel_Job_or_event$0;
   function of_event(event){return event;}
   function of_job(job){return job;}
   function is_event(t){return caml_call1(Stdlib_Obj[1], t);}
   function is_job(t){return typeof t === "number" ? 1 : 0;}
   function kind(t){return is_event(t) ? 0 : 1;}
   function project(param, job_or_event){return job_or_event;}
   var Match = [0, kind, project];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Job_or_event);
   var
    Async_kernel_Job_or_event = [0, of_event, of_job, is_event, is_job, Match];
   runtime.caml_register_global
    (13, Async_kernel_Job_or_event, cst_Async_kernel_Job_or_event$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Job_or_event_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Job_or_event_ = "Async_kernel__Job_or_event_intf",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Job_or_event_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/job_or_event_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Job_or_event_);
   var Async_kernel_Job_or_event_intf = [0];
   runtime.caml_register_global
    (11, Async_kernel_Job_or_event_intf, cst_Async_kernel_Job_or_event_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Scheduler0
//# unitInfo: Requires: Async_kernel__Types, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Scheduler0$0 = "Async_kernel__Scheduler0",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Scheduler0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/scheduler0.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Scheduler0 = cst_Async_kernel_Scheduler0$0;
   function events(t){return t[19][4];}
   function set_execution_context(t, execution_context){
    var
     _a_ = 1 - caml_call2(Core[246], t[7], execution_context),
     _b_ = _a_ ? (t[7] = execution_context, 0) : _a_;
    return _b_;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Scheduler0);
   var Async_kernel_Scheduler0 = [0, events, set_execution_context];
   runtime.caml_register_global
    (12, Async_kernel_Scheduler0, cst_Async_kernel_Scheduler0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Job_queue
//# unitInfo: Requires: Assert_failure, Async_kernel__Execution_context, Async_kernel__Import, Async_kernel__Scheduler0, Base__Backtrace, Base__Field, Base__Invariant, Core, Core__Int, Core__Uniform_array, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Thread_safe_queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Job_queue$0 = "Async_kernel__Job_queue",
    cst_async_kernel$0 = "async_kernel",
    cst_front$0 = "front",
    cst_jobs$0 = "jobs",
    cst_jobs_left_this_cycle$0 = "jobs_left_this_cycle",
    cst_length$0 = "length",
    cst_mask$0 = "mask",
    cst_num_jobs_run$0 = "num_jobs_run",
    cst_src_job_queue_ml = "src/job_queue.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Uniform_array = global_data.Core__Uniform_array,
    Base_Backtrace = global_data.Base__Backtrace,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Async_kernel_Import = global_data.Async_kernel__Import,
    Async_kernel_Scheduler0 = global_data.Async_kernel__Scheduler0,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Int = global_data.Core__Int,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Job_queue$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_job_queue_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    dummy_e = Async_kernel_Execution_context[8],
    _D_ = [0, 0],
    _B_ = [0, "t"],
    _C_ = [0, "n"],
    cst_Jobs_set_jobs_left_this_cy =
      "Jobs.set_jobs_left_this_cycle got negative number",
    _z_ = [0, cst_src_job_queue_ml, 39, 48],
    _y_ = [0, cst_src_job_queue_ml, 41, 44],
    _x_ = [0, cst_src_job_queue_ml, 51, 11],
    _w_ = [0, cst_src_job_queue_ml, 52, 11],
    _v_ = [0, cst_src_job_queue_ml, 55, 11],
    _u_ = [0, cst_src_job_queue_ml, 56, 11],
    _t_ = [0, cst_src_job_queue_ml, 59, 11],
    _s_ = [0, cst_src_job_queue_ml, 60, 11],
    _A_ = [0, cst_src_job_queue_ml, 36, 1334, 1356],
    _m_ = [0, cst_length$0],
    _n_ = [0, cst_front$0],
    _o_ = [0, cst_mask$0],
    _p_ = [0, cst_jobs$0],
    _q_ = [0, cst_jobs_left_this_cycle$0],
    _r_ = [0, cst_num_jobs_run$0],
    cst_length = cst_length$0,
    cst_front = cst_front$0,
    cst_mask = cst_mask$0,
    cst_jobs = cst_jobs$0,
    cst_jobs_left_this_cycle = cst_jobs_left_this_cycle$0,
    cst_num_jobs_run = cst_num_jobs_run$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Job_queue = cst_Async_kernel_Job_queue$0;
   function dummy_f(_T_){return 0;}
   var dummy_a = 0;
   function length(r){return r[6];}
   function set_length(r, v){r[6] = v; return 0;}
   function front(r){return r[5];}
   function set_front(r, v){r[5] = v; return 0;}
   function mask(r){return r[4];}
   function set_mask(r, v){r[4] = v; return 0;}
   function jobs(r){return r[3];}
   function set_jobs(r, v){r[3] = v; return 0;}
   function jobs_left_this_cycle(r){return r[2];}
   function set_jobs_left_this_cycle(r, v){r[2] = v; return 0;}
   function num_jobs_run(r){return r[1];}
   function set_num_jobs_run(r, v){r[1] = v; return 0;}
   function _a_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v];}
   var
    _b_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _b_, length, _a_];
   function _c_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6]];}
   var
    _d_ = [0, set_front],
    front$0 = [0, function(param){return 0;}, cst_front, _d_, front, _c_];
   function _e_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6]];}
   var
    _f_ = [0, set_mask],
    mask$0 = [0, function(param){return 0;}, cst_mask, _f_, mask, _e_];
   function _g_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}
   var
    _h_ = [0, set_jobs],
    jobs$0 = [0, function(param){return 0;}, cst_jobs, _h_, jobs, _g_];
   function _i_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6]];}
   var
    _j_ = [0, set_jobs_left_this_cycle],
    jobs_left_this_cycle$0 =
      [0,
       function(param){return 0;},
       cst_jobs_left_this_cycle,
       _j_,
       jobs_left_this_cycle,
       _i_];
   function _k_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}
   var
    _l_ = [0, set_num_jobs_run],
    num_jobs_run$0 =
      [0,
       function(param){return 0;},
       cst_num_jobs_run,
       _l_,
       num_jobs_run,
       _k_];
   function sexp_of_t(param){
    var
     num_jobs_run_002 = param[1],
     jobs_left_this_cycle_004 = param[2],
     jobs_006 = param[3],
     mask_008 = param[4],
     front_010 = param[5],
     length_012 = param[6],
     arg_013 = caml_call1(Core[356], length_012),
     bnds_001 = [0, [1, [0, _m_, [0, arg_013, 0]]], 0],
     arg_011 = caml_call1(Core[356], front_010),
     bnds_001$0 = [0, [1, [0, _n_, [0, arg_011, 0]]], bnds_001],
     arg_009 = caml_call1(Core[356], mask_008),
     bnds_001$1 = [0, [1, [0, _o_, [0, arg_009, 0]]], bnds_001$0],
     arg_007 = caml_call1(Sexplib0_Sexp_conv[23], jobs_006),
     bnds_001$2 = [0, [1, [0, _p_, [0, arg_007, 0]]], bnds_001$1],
     arg_005 = caml_call1(Core[356], jobs_left_this_cycle_004),
     bnds_001$3 = [0, [1, [0, _q_, [0, arg_005, 0]]], bnds_001$2],
     arg_003 = caml_call1(Core[356], num_jobs_run_002),
     bnds_001$4 = [0, [1, [0, _r_, [0, arg_003, 0]]], bnds_001$3];
    return [1, bnds_001$4];
   }
   function offset(t, i){return ((t[5] + i | 0) & t[4]) * 3 | 0;}
   function capacity(t){return t[4] + 1 | 0;}
   function invariant(t){
    function _K_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      length_fun =
        check
         (function(length){
           if(! caml_call2(Async_kernel_Import[1], length, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
           var _S_ = capacity(t);
           if(caml_call2(Async_kernel_Import[2], length, _S_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
          }),
      front_fun =
        check
         (function(front){
           if(! caml_call2(Async_kernel_Import[1], front, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
           var _R_ = capacity(t);
           if(caml_call2(Async_kernel_Import[5], front, _R_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
          }),
      mask_fun =
        check
         (function(mask){
           var capacity = mask + 1 | 0;
           if(! caml_call1(Core_Int[48], capacity))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
           var _Q_ = caml_call1(Core_Uniform_array[18], t[3]);
           if(caml_call2(Async_kernel_Import[3], capacity * 3 | 0, _Q_))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
          }),
      jobs_fun =
        check
         (function(jobs){
           var _M_ = t[6] - 1 | 0, _L_ = 0;
           if(_M_ >= 0){
            var i = _L_;
            for(;;){
             var
              _N_ = offset(t, i),
              _O_ = caml_call2(Core_Uniform_array[19], jobs, _N_);
             caml_call1(Async_kernel_Execution_context[7], _O_);
             var _P_ = i + 1 | 0;
             if(_M_ === i) break;
             var i = _P_;
            }
           }
           return 0;
          }),
      jobs_left_this_cycle_fun =
        check
         (function(jobs_left_this_cycle){
           if(caml_call2(Async_kernel_Import[1], jobs_left_this_cycle, 0))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
          }),
      num_jobs_run_fun =
        check
         (function(num_jobs_run){
           if(caml_call2(Async_kernel_Import[1], num_jobs_run, 0)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
          });
     caml_call1(num_jobs_run_fun, num_jobs_run$0);
     caml_call1(jobs_left_this_cycle_fun, jobs_left_this_cycle$0);
     caml_call1(jobs_fun, jobs$0);
     caml_call1(mask_fun, mask$0);
     caml_call1(front_fun, front$0);
     return caml_call1(length_fun, length$0);
    }
    return caml_call4(Base_Invariant[1], _A_, t, sexp_of_t, _K_);
   }
   function create_array(capacity){
    return caml_call1(Core_Uniform_array[43], capacity * 3 | 0);
   }
   function create(param){return [0, 0, 0, create_array(1), 0, 0, 0];}
   function clear(t){t[5] = 0; t[6] = 0; t[2] = 0; return 0;}
   function set(t, i, execution_context, f, a){
    var offset$0 = offset(t, i);
    caml_call3(Core_Uniform_array[22], t[3], offset$0, execution_context);
    caml_call3(Core_Uniform_array[22], t[3], offset$0 + 1 | 0, f);
    return caml_call3(Core_Uniform_array[22], t[3], offset$0 + 2 | 0, a);
   }
   function enqueue(t, execution_context, f, a){
    var _J_ = capacity(t);
    if(caml_call2(Async_kernel_Import[3], t[6], _J_)){
     var
      old_capacity = capacity(t),
      new_capacity = old_capacity * 2 | 0,
      old_jobs = t[3],
      old_front = t[5],
      len1 =
        caml_call2(Core_Int[92], t[6], old_capacity - old_front | 0) * 3 | 0,
      len2 = (t[6] * 3 | 0) - len1 | 0,
      new_jobs = create_array(new_capacity);
     caml_call5
      (Core_Uniform_array[36], old_jobs, old_front * 3 | 0, new_jobs, 0, len1);
     caml_call5(Core_Uniform_array[36], old_jobs, 0, new_jobs, len1, len2);
     t[4] = new_capacity - 1 | 0;
     t[3] = new_jobs;
     t[5] = 0;
    }
    set(t, t[6], execution_context, f, a);
    t[6] = t[6] + 1 | 0;
    return 0;
   }
   function set_jobs_left_this_cycle$0(t, n){
    if(caml_call2(Async_kernel_Import[5], n, 0)){
     var
      _G_ = [0, [1, [0, _B_, [0, sexp_of_t(t), 0]]], 0],
      _H_ = [0, [1, [0, _C_, [0, caml_call1(Core[356], n), 0]]], _G_],
      _I_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Jobs_set_jobs_left_this_cy),
          _H_]];
     caml_call1(Core[253], _I_);
    }
    t[2] = n;
    return 0;
   }
   function can_run_a_job(t){
    var _F_ = caml_call2(Async_kernel_Import[4], t[6], 0);
    return _F_ ? caml_call2(Async_kernel_Import[4], t[2], 0) : _F_;
   }
   function run_job(t, scheduler, execution_context, f, a){
    t[1] = t[1] + 1 | 0;
    caml_call2(Async_kernel_Scheduler0[2], scheduler, execution_context);
    return caml_call1(f, a);
   }
   function run_external_jobs(t, scheduler){
    var external_jobs = scheduler[20];
    for(;;){
     var _E_ = caml_call1(Thread_safe_queue[4], external_jobs);
     if(! caml_call2(Async_kernel_Import[4], _E_, 0)) return;
     var
      match = caml_call1(Thread_safe_queue[6], external_jobs),
      a = match[3],
      f = match[2],
      execution_context = match[1];
     run_job(t, scheduler, execution_context, f, a);
    }
   }
   function run_jobs(t, scheduler){
    try{
     run_external_jobs(t, scheduler);
     for(;;){
      if(! can_run_a_job(t)) return _D_;
      var
       this_job = offset(t, 0),
       execution_context = caml_call2(Core_Uniform_array[20], t[3], this_job),
       f = caml_call2(Core_Uniform_array[20], t[3], this_job + 1 | 0),
       a = caml_call2(Core_Uniform_array[20], t[3], this_job + 2 | 0);
      set(t, 0, dummy_e, dummy_f, dummy_a);
      t[5] = (t[5] + 1 | 0) & t[4];
      t[6] = t[6] - 1 | 0;
      t[2] = t[2] - 1 | 0;
      run_job(t, scheduler, execution_context, f, a);
      run_external_jobs(t, scheduler);
     }
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      backtrace = caml_call1(Base_Backtrace[6][4], 0);
     return [1, [0, exn, backtrace]];
    }
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Job_queue);
   var
    Async_kernel_Job_queue =
      [0,
       sexp_of_t,
       invariant,
       create,
       enqueue,
       clear,
       set_jobs_left_this_cycle$0,
       can_run_a_job,
       length,
       run_jobs,
       num_jobs_run];
   runtime.caml_register_global
    (49, Async_kernel_Job_queue, cst_Async_kernel_Job_queue$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Synchronous_time_source0
//# unitInfo: Requires: Assert_failure, Async_kernel__Job_or_event, Async_kernel__Scheduler0, Async_kernel__Time_ns, Base__Backtrace, Base__Field, Base__Invariant, Core, Core__Error, Core__List, Core__Or_error, Core__Time_ns, Expect_test_collector, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Synchronous_t$0 =
      "Async_kernel__Synchronous_time_source0",
    cst_advance_errors$0 = "advance_errors",
    cst_alarm$0 = "alarm",
    cst_am_advancing$0 = "am_advancing",
    cst_async_kernel$0 = "async_kernel",
    cst_at$0 = "at",
    cst_callback$0 = "callback",
    cst_events$0 = "events",
    cst_execution_context$0 = "execution_context",
    cst_fired_events$0 = "fired_events",
    cst_handle_fired$0 = "handle_fired",
    cst_id$0 = "id",
    cst_interval$0 = "interval",
    cst_is_wall_clock$0 = "is_wall_clock",
    cst_most_recently_fired$0 = "most_recently_fired",
    cst_next_fired$0 = "next_fired",
    cst_now = "now",
    cst_prev_fired$0 = "prev_fired",
    cst_scheduler$0 = "scheduler",
    cst_src_synchronous_time_sourc$0 = "src/synchronous_time_source0.ml",
    cst_status$0 = "status",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$3 = "src/synchronous_time_source0.ml:341:32",
    pos$2 = "src/synchronous_time_source0.ml:340:32",
    pos$1 = "src/synchronous_time_source0.ml:187:30",
    pos$0 = "src/synchronous_time_source0.ml:205:32",
    pos = "src/synchronous_time_source0.ml:215:32",
    cst = "",
    names =
      [0,
       cst_alarm$0,
       [0,
        cst_at$0,
        [0,
         cst_callback$0,
         [0,
          cst_execution_context$0,
          [0,
           cst_interval$0,
           [0, cst_next_fired$0, [0, cst_prev_fired$0, [0, cst_status$0, 0]]]]]]]],
    names$0 =
      [0,
       cst_id$0,
       [0,
        cst_advance_errors$0,
        [0,
         cst_am_advancing$0,
         [0,
          cst_events$0,
          [0,
           cst_fired_events$0,
           [0,
            cst_most_recently_fired$0,
            [0,
             cst_handle_fired$0,
             [0, cst_is_wall_clock$0, [0, cst_scheduler$0, 0]]]]]]]]],
    Timing_wheel = global_data.Timing_wheel,
    Core_Error = global_data.Core__Error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Scheduler0 = global_data.Async_kernel__Scheduler0,
    Base_Backtrace = global_data.Base__Backtrace,
    Core_Or_error = global_data.Core__Or_error,
    Core_Time_ns = global_data.Core__Time_ns,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_List = global_data.Core__List,
    Base_Field = global_data.Base__Field,
    Async_kernel_Job_or_event = global_data.Async_kernel__Job_or_event,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Synchronous_t$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_synchronous_time_sourc$0);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    typerep_of_t = Async_kernel_Time_ns[1],
    typename_of_t = Async_kernel_Time_ns[2],
    bin_size_t = Async_kernel_Time_ns[3],
    bin_write_t = Async_kernel_Time_ns[4],
    bin_read_t = Async_kernel_Time_ns[5],
    bin_read_t$0 = Async_kernel_Time_ns[6],
    bin_shape_t = Async_kernel_Time_ns[7],
    bin_writer_t = Async_kernel_Time_ns[8],
    bin_reader_t = Async_kernel_Time_ns[9],
    bin_t = Async_kernel_Time_ns[10],
    quickcheck_generator = Async_kernel_Time_ns[11],
    quickcheck_observer = Async_kernel_Time_ns[12],
    quickcheck_shrinker = Async_kernel_Time_ns[13],
    gen_incl = Async_kernel_Time_ns[14],
    gen_uniform_incl = Async_kernel_Time_ns[15],
    is_earlier = Async_kernel_Time_ns[16],
    is_later = Async_kernel_Time_ns[17],
    of_date_ofday = Async_kernel_Time_ns[18],
    of_date_ofday_precise = Async_kernel_Time_ns[19],
    to_date_ofday = Async_kernel_Time_ns[20],
    to_date_ofday_precise = Async_kernel_Time_ns[21],
    to_date = Async_kernel_Time_ns[22],
    to_ofday = Async_kernel_Time_ns[23],
    reset_date_cache = Async_kernel_Time_ns[24],
    convert = Async_kernel_Time_ns[25],
    utc_offset = Async_kernel_Time_ns[26],
    to_filename_string = Async_kernel_Time_ns[27],
    of_filename_string = Async_kernel_Time_ns[28],
    to_string_abs = Async_kernel_Time_ns[29],
    to_string_abs_trimmed = Async_kernel_Time_ns[30],
    to_string_abs_parts = Async_kernel_Time_ns[31],
    to_string_trimmed = Async_kernel_Time_ns[32],
    to_sec_string = Async_kernel_Time_ns[33],
    to_sec_string_with_zone = Async_kernel_Time_ns[34],
    of_localized_string = Async_kernel_Time_ns[35],
    of_string_gen = Async_kernel_Time_ns[36],
    to_string_iso8601_basic = Async_kernel_Time_ns[37],
    occurrence = Async_kernel_Time_ns[38],
    of_string = Async_kernel_Time_ns[39],
    of_string_with_utc_offset = Async_kernel_Time_ns[40],
    to_string = Async_kernel_Time_ns[41],
    to_string_utc = Async_kernel_Time_ns[42],
    epoch = Async_kernel_Time_ns[43],
    min_value_representable = Async_kernel_Time_ns[44],
    max_value_representable = Async_kernel_Time_ns[45],
    min_value_for_1us_rounding = Async_kernel_Time_ns[46],
    max_value_for_1us_rounding = Async_kernel_Time_ns[47],
    min_value = Async_kernel_Time_ns[48],
    max_value = Async_kernel_Time_ns[49],
    now = Async_kernel_Time_ns[50],
    add = Async_kernel_Time_ns[51],
    add_saturating = Async_kernel_Time_ns[52],
    sub_saturating = Async_kernel_Time_ns[53],
    sub = Async_kernel_Time_ns[54],
    next = Async_kernel_Time_ns[55],
    prev = Async_kernel_Time_ns[56],
    diff = Async_kernel_Time_ns[57],
    abs_diff = Async_kernel_Time_ns[58],
    to_span_since_epoch = Async_kernel_Time_ns[59],
    of_span_since_epoch = Async_kernel_Time_ns[60],
    to_int63_ns_since_epoch = Async_kernel_Time_ns[61],
    of_int63_ns_since_epoch = Async_kernel_Time_ns[62],
    to_int_ns_since_epoch = Async_kernel_Time_ns[63],
    of_int_ns_since_epoch = Async_kernel_Time_ns[64],
    next_multiple = Async_kernel_Time_ns[65],
    prev_multiple = Async_kernel_Time_ns[66],
    random = Async_kernel_Time_ns[67],
    of_time = Async_kernel_Time_ns[68],
    to_time = Async_kernel_Time_ns[69],
    to_time_float_round_nearest = Async_kernel_Time_ns[70],
    to_time_float_round_nearest_mi = Async_kernel_Time_ns[71],
    of_time_float_round_nearest = Async_kernel_Time_ns[72],
    of_time_float_round_nearest_mi = Async_kernel_Time_ns[73],
    arg_type = Async_kernel_Time_ns[74],
    get_sexp_zone = Async_kernel_Time_ns[75],
    interruptible_pause = Async_kernel_Time_ns[76],
    of_date_ofday_zoned = Async_kernel_Time_ns[77],
    of_string_abs = Async_kernel_Time_ns[78],
    of_string_fix_proto = Async_kernel_Time_ns[79],
    pause = Async_kernel_Time_ns[80],
    pause_forever = Async_kernel_Time_ns[81],
    pp = Async_kernel_Time_ns[82],
    set_sexp_zone = Async_kernel_Time_ns[83],
    sexp_of_t_abs = Async_kernel_Time_ns[84],
    t_of_sexp_abs = Async_kernel_Time_ns[85],
    to_date_ofday_zoned = Async_kernel_Time_ns[86],
    to_ofday_zoned = Async_kernel_Time_ns[87],
    to_string_fix_proto = Async_kernel_Time_ns[88],
    hash_fold_t = Async_kernel_Time_ns[89],
    hash = Async_kernel_Time_ns[90],
    t_of_sexp = Async_kernel_Time_ns[91],
    t_sexp_grammar = Async_kernel_Time_ns[93],
    symbol = Async_kernel_Time_ns[94],
    symbol$0 = Async_kernel_Time_ns[95],
    symbol$1 = Async_kernel_Time_ns[96],
    symbol$2 = Async_kernel_Time_ns[97],
    symbol$3 = Async_kernel_Time_ns[98],
    symbol$4 = Async_kernel_Time_ns[99],
    equal = Async_kernel_Time_ns[100],
    compare = Async_kernel_Time_ns[101],
    min = Async_kernel_Time_ns[102],
    max = Async_kernel_Time_ns[103],
    ascending = Async_kernel_Time_ns[104],
    descending = Async_kernel_Time_ns[105],
    between = Async_kernel_Time_ns[106],
    clamp_exn = Async_kernel_Time_ns[107],
    clamp = Async_kernel_Time_ns[108],
    comparator = Async_kernel_Time_ns[109],
    validate_lbound = Async_kernel_Time_ns[110],
    validate_ubound = Async_kernel_Time_ns[111],
    validate_bound = Async_kernel_Time_ns[112],
    after = Async_kernel_Time_ns[113],
    _ao_ = [0, 0],
    cst_cannot_call_advance_by_ala =
      "cannot call [advance_by_alarms] or [advance_directly] from callback",
    _an_ = [0, cst_src_synchronous_time_sourc$0, 633, 48],
    _am_ = [0, 0],
    cst_cannot_schedule_an_event_w = "cannot schedule an event with status",
    _al_ = [0, "reason"],
    cst_Synchronous_time_source_ab =
      "[Synchronous_time_source.abort_exn] cannot abort event",
    _ai_ = [0, "Ok"],
    _aj_ = [0, "Currently_happening"],
    _ak_ = [0, "Previously_unscheduled"],
    _ag_ = [0, "alarm_precision"],
    _ah_ = [0, "span"],
    cst_interval_span_smaller_than =
      "interval span smaller than alarm precision",
    _ae_ = [0, "_"],
    _ad_ = [0, cst_src_synchronous_time_sourc$0, 339, 17],
    _ac_ = [0, cst_src_synchronous_time_sourc$0, 346, 15],
    _ab_ = [0, cst_src_synchronous_time_sourc$0, 350, 17],
    _aa_ = [0, cst_src_synchronous_time_sourc$0, 362, 29],
    _af_ = [0, cst_src_synchronous_time_sourc$0, 323, 11243, 11267],
    _Z_ = [0, cst_now],
    cst_wall_clock = "wall_clock",
    ___ = [0, cst_events$0],
    _$_ = [0, cst_now],
    cst_Job_t = "<Job.t>",
    _E_ = [0, "event"],
    _F_ = [0, "to_"],
    _G_ = [0, "from"],
    cst_bug_set_status_transition_ =
      "bug -- set_status transition not allowed",
    cst_src_synchronous_time_sourc = "src/synchronous_time_source0.ml:226:12",
    _C_ = [0, cst_src_synchronous_time_sourc$0, 206, 17],
    _B_ = [0, cst_src_synchronous_time_sourc$0, 216, 17],
    _D_ = [0, cst_src_synchronous_time_sourc$0, 182, 5945, 5971],
    cst_Synchronous_time_source_Ev =
      "[Synchronous_time_source.Event.Option.value_exn None]",
    _k_ = [1, 0],
    _h_ = [0, cst_interval$0],
    _i_ = [0, cst_at$0],
    _j_ = [0, cst_status$0],
    _d_ = [0, "Fired"],
    _e_ = [0, "Happening"],
    _f_ = [0, "Scheduled"],
    _g_ = [0, "Unscheduled"],
    _b_ = [0, 13, [0, 6, [0, 6, [0, 5, 0]]]],
    cst_status = cst_status$0,
    cst_prev_fired = cst_prev_fired$0,
    cst_next_fired = cst_next_fired$0,
    cst_interval = cst_interval$0,
    cst_execution_context = cst_execution_context$0,
    cst_callback = cst_callback$0,
    cst_at = cst_at$0,
    cst_alarm = cst_alarm$0,
    cst_scheduler = cst_scheduler$0,
    cst_is_wall_clock = cst_is_wall_clock$0,
    cst_handle_fired = cst_handle_fired$0,
    cst_most_recently_fired = cst_most_recently_fired$0,
    cst_fired_events = cst_fired_events$0,
    cst_events = cst_events$0,
    cst_am_advancing = cst_am_advancing$0,
    cst_advance_errors = cst_advance_errors$0,
    cst_id = cst_id$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Synchronous_t = cst_Async_kernel_Synchronous_t$0;
   function sexp_of_t(t){
    var
     _d8_ = caml_call1(to_span_since_epoch, t),
     _d9_ =
       runtime.core_time_ns_format
        (caml_call1(Core_Time_ns[1][91], _d8_), "%Y-%m-%dT%H:%M:%S%z");
    return caml_call1(Core[471], _d9_);
   }
   var
    Time_ns =
      [0,
       typerep_of_t,
       typename_of_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed,
       to_sec_string,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic,
       occurrence,
       of_string,
       of_string_with_utc_offset,
       to_string,
       to_string_utc,
       epoch,
       min_value_representable,
       max_value_representable,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value,
       max_value,
       now,
       add,
       add_saturating,
       sub_saturating,
       sub,
       next,
       prev,
       diff,
       abs_diff,
       to_span_since_epoch,
       of_span_since_epoch,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       prev_multiple,
       random,
       of_time,
       to_time,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       arg_type,
       get_sexp_zone,
       interruptible_pause,
       of_date_ofday_zoned,
       of_string_abs,
       of_string_fix_proto,
       pause,
       pause_forever,
       pp,
       set_sexp_zone,
       sexp_of_t_abs,
       t_of_sexp_abs,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       hash_fold_t,
       hash,
       t_of_sexp,
       t_sexp_grammar,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       after,
       sexp_of_t],
    include = Timing_wheel[5],
    sexp_of_t$0 = include[1],
    null$0 = include[2],
    at = include[3],
    interval_num = include[4],
    value = include[5];
   function is_null(t){
    var _d7_ = caml_call1(null$0, 0);
    return caml_call2(Core[246], t, _d7_);
   }
   var
    Alarm = [0, sexp_of_t$0, null$0, at, interval_num, value, is_null],
    _a_ = caml_call2(Timing_wheel[1][13], Timing_wheel[1][10], 3),
    _c_ = [0, caml_call2(Timing_wheel[7][5], 0, _b_)],
    default_timing_wheel_config =
      caml_call4(Timing_wheel[8][4], 0, _c_, _a_, 0),
    compare$0 = runtime.caml_int_compare;
   function equal$0(_d6_, _d5_){return _d6_ === _d5_ ? 1 : 0;}
   function sexp_of_t$1(param){
    switch(param){
      case 0:
       return _d_;
      case 1:
       return _e_;
      case 2:
       return _f_;
      default: return _g_;
    }
   }
   function transition_is_allowed(from, to){
    a:
    {
     switch(from){
       case 0:
        if(1 !== to && 3 > to) break a; break;
       case 1:
        if(2 > to) break a; break;
       case 2:
        if(1 >= to - 1 >>> 0) break a; break;
       default: if(1 === to || 3 <= to) break a;
     }
     return 1;
    }
    return 0;
   }
   var Status = [0, compare$0, equal$0, sexp_of_t$1, transition_is_allowed];
   function sexp_of_event(param){
    var at = param[2], interval = param[5], status = param[8], match = 0;
    if(interval)
     var
      v = interval[1],
      _d3_ =
        [0, [1, [0, _h_, [0, caml_call1(Core_Time_ns[1][10], v), 0]]], match];
    else
     var _d3_ = match;
    var _d4_ = [0, [1, [0, _i_, [0, caml_call1(Time_ns[113], at), 0]]], _d3_];
    return [1,
            [0, [1, [0, _j_, [0, caml_call1(Status[3], status), 0]]], _d4_]];
   }
   var Event_is_block = [0], none = 0;
   function some(_d2_){return _d2_;}
   function is_none(t){return caml_call2(Core[246], t, none);}
   function is_some(t){return 1 - is_none(t);}
   function first_some(t1, t2){return is_some(t1) ? t1 : t2;}
   function unsafe_value(_d1_){return _d1_;}
   var
    Optional_syntax = [0, is_none, unsafe_value],
    Optional_syntax$0 = [0, Optional_syntax];
   function sexp_of_t$2(ppx_optional_e_0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0)) return _k_;
    var event = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0);
    return sexp_of_event(event);
   }
   function value$0(ppx_optional_e_0, default$0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0))
     return default$0;
    var event = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0);
    return event;
   }
   function value_exn(ppx_optional_e_0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0)){
     var
      _d0_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Synchronous_time_source_Ev);
     return caml_call1(Core[253], _d0_);
    }
    var event = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0);
    return event;
   }
   function to_option(ppx_optional_e_0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0)) return 0;
    var event = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0);
    return [0, event];
   }
   function of_option(param){
    if(! param) return none;
    var event = param[1];
    return event;
   }
   var
    Option =
      [0,
       Event_is_block,
       none,
       some,
       is_none,
       is_some,
       first_some,
       Optional_syntax$0,
       sexp_of_t$2,
       value$0,
       value_exn,
       to_option,
       of_option];
   function status(r){return r[8];}
   function set_status(r, v){r[8] = v; return 0;}
   function prev_fired(r){return r[7];}
   function set_prev_fired(r, v){r[7] = v; return 0;}
   function next_fired(r){return r[6];}
   function set_next_fired(r, v){r[6] = v; return 0;}
   function interval(r){return r[5];}
   function set_interval(r, v){r[5] = v; return 0;}
   function execution_context(r){return r[4];}
   function callback(r){return r[3];}
   function at$0(r){return r[2];}
   function set_at(r, v){r[2] = v; return 0;}
   function alarm(r){return r[1];}
   function set_alarm(r, v){r[1] = v; return 0;}
   function _l_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v];
   }
   var
    _m_ = [0, set_status],
    status$0 = [0, function(param){return 0;}, cst_status, _m_, status, _l_];
   function _n_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
   }
   var
    _o_ = [0, set_prev_fired],
    prev_fired$0 =
      [0, function(param){return 0;}, cst_prev_fired, _o_, prev_fired, _n_];
   function _p_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
   }
   var
    _q_ = [0, set_next_fired],
    next_fired$0 =
      [0, function(param){return 0;}, cst_next_fired, _q_, next_fired, _p_];
   function _r_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8]];
   }
   var
    _s_ = [0, set_interval],
    interval$0 =
      [0, function(param){return 0;}, cst_interval, _s_, interval, _r_];
   function _t_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8]];
   }
   var
    _u_ = 0,
    execution_context$0 =
      [0,
       function(param){return 0;},
       cst_execution_context,
       _u_,
       execution_context,
       _t_];
   function _v_(r, v){
    return [0, r[1], r[2], v, r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _w_ = 0,
    callback$0 =
      [0, function(param){return 0;}, cst_callback, _w_, callback, _v_];
   function _x_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _y_ = [0, set_at],
    at$1 = [0, function(param){return 0;}, cst_at, _y_, at$0, _x_];
   function _z_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _A_ = [0, set_alarm],
    alarm$0 = [0, function(param){return 0;}, cst_alarm, _A_, alarm, _z_];
   function make_creator
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun,
    compile_acc){
    var
     match = caml_call2(alarm_fun, alarm$0, compile_acc),
     compile_acc$0 = match[2],
     alarm_gen = match[1],
     match$0 = caml_call2(at_fun, at$1, compile_acc$0),
     compile_acc$1 = match$0[2],
     at_gen = match$0[1],
     match$1 = caml_call2(callback_fun, callback$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     callback_gen = match$1[1],
     match$2 =
       caml_call2(execution_context_fun, execution_context$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     execution_context_gen = match$2[1],
     match$3 = caml_call2(interval_fun, interval$0, compile_acc$3),
     compile_acc$4 = match$3[2],
     interval_gen = match$3[1],
     match$4 = caml_call2(next_fired_fun, next_fired$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     next_fired_gen = match$4[1],
     match$5 = caml_call2(prev_fired_fun, prev_fired$0, compile_acc$5),
     compile_acc$6 = match$5[2],
     prev_fired_gen = match$5[1],
     match$6 = caml_call2(status_fun, status$0, compile_acc$6),
     compile_acc$7 = match$6[2],
     status_gen = match$6[1];
    return [0,
            function(acc){
             var
              alarm = caml_call1(alarm_gen, acc),
              at = caml_call1(at_gen, acc),
              callback = caml_call1(callback_gen, acc),
              execution_context = caml_call1(execution_context_gen, acc),
              interval = caml_call1(interval_gen, acc),
              next_fired = caml_call1(next_fired_gen, acc),
              prev_fired = caml_call1(prev_fired_gen, acc),
              status = caml_call1(status_gen, acc);
             return [0,
                     alarm,
                     at,
                     callback,
                     execution_context,
                     interval,
                     next_fired,
                     prev_fired,
                     status];
            },
            compile_acc$7];
   }
   function create
   (alarm,
    at,
    callback,
    execution_context,
    interval,
    next_fired,
    prev_fired,
    status){
    return [0,
            alarm,
            at,
            callback,
            execution_context,
            interval,
            next_fired,
            prev_fired,
            status];
   }
   function map
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dT_ = caml_call1(status_fun, status$0),
     _dU_ = caml_call1(prev_fired_fun, prev_fired$0),
     _dV_ = caml_call1(next_fired_fun, next_fired$0),
     _dW_ = caml_call1(interval_fun, interval$0),
     _dX_ = caml_call1(execution_context_fun, execution_context$0),
     _dY_ = caml_call1(callback_fun, callback$0),
     _dZ_ = caml_call1(at_fun, at$1);
    return [0,
            caml_call1(alarm_fun, alarm$0),
            _dZ_,
            _dY_,
            _dX_,
            _dW_,
            _dV_,
            _dU_,
            _dT_];
   }
   function iter
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    caml_call1(alarm_fun, alarm$0);
    caml_call1(at_fun, at$1);
    caml_call1(callback_fun, callback$0);
    caml_call1(execution_context_fun, execution_context$0);
    caml_call1(interval_fun, interval$0);
    caml_call1(next_fired_fun, next_fired$0);
    caml_call1(prev_fired_fun, prev_fired$0);
    return caml_call1(status_fun, status$0);
   }
   function fold
   (init,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    return caml_call2
            (status_fun,
             caml_call2
              (prev_fired_fun,
               caml_call2
                (next_fired_fun,
                 caml_call2
                  (interval_fun,
                   caml_call2
                    (execution_context_fun,
                     caml_call2
                      (callback_fun,
                       caml_call2
                        (at_fun, caml_call2(alarm_fun, init, alarm$0), at$1),
                       callback$0),
                     execution_context$0),
                   interval$0),
                 next_fired$0),
               prev_fired$0),
             status$0);
   }
   function map_poly(record){
    var
     _dM_ = [0, caml_call1(record[1], status$0), 0],
     _dN_ = [0, caml_call1(record[1], prev_fired$0), _dM_],
     _dO_ = [0, caml_call1(record[1], next_fired$0), _dN_],
     _dP_ = [0, caml_call1(record[1], interval$0), _dO_],
     _dQ_ = [0, caml_call1(record[1], execution_context$0), _dP_],
     _dR_ = [0, caml_call1(record[1], callback$0), _dQ_],
     _dS_ = [0, caml_call1(record[1], at$1), _dR_];
    return [0, caml_call1(record[1], alarm$0), _dS_];
   }
   function for_all
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dF_ = caml_call1(alarm_fun, alarm$0),
     _dG_ = _dF_ ? caml_call1(at_fun, at$1) : _dF_,
     _dH_ = _dG_ ? caml_call1(callback_fun, callback$0) : _dG_,
     _dI_ =
       _dH_ ? caml_call1(execution_context_fun, execution_context$0) : _dH_,
     _dJ_ = _dI_ ? caml_call1(interval_fun, interval$0) : _dI_,
     _dK_ = _dJ_ ? caml_call1(next_fired_fun, next_fired$0) : _dJ_,
     _dL_ = _dK_ ? caml_call1(prev_fired_fun, prev_fired$0) : _dK_;
    return _dL_ ? caml_call1(status_fun, status$0) : _dL_;
   }
   function exists
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dE_ = caml_call1(alarm_fun, alarm$0),
     _dy_ = _dE_ || caml_call1(at_fun, at$1),
     _dz_ = _dy_ || caml_call1(callback_fun, callback$0),
     _dA_ = _dz_ || caml_call1(execution_context_fun, execution_context$0),
     _dB_ = _dA_ || caml_call1(interval_fun, interval$0),
     _dC_ = _dB_ || caml_call1(next_fired_fun, next_fired$0),
     _dD_ = _dC_ || caml_call1(prev_fired_fun, prev_fired$0);
    return _dD_ ? _dD_ : caml_call1(status_fun, status$0);
   }
   function to_list
   (alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dr_ = [0, caml_call1(status_fun, status$0), 0],
     _ds_ = [0, caml_call1(prev_fired_fun, prev_fired$0), _dr_],
     _dt_ = [0, caml_call1(next_fired_fun, next_fired$0), _ds_],
     _du_ = [0, caml_call1(interval_fun, interval$0), _dt_],
     _dv_ = [0, caml_call1(execution_context_fun, execution_context$0), _du_],
     _dw_ = [0, caml_call1(callback_fun, callback$0), _dv_],
     _dx_ = [0, caml_call1(at_fun, at$1), _dw_];
    return [0, caml_call1(alarm_fun, alarm$0), _dx_];
   }
   function iter$0
   (record,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    caml_call3(alarm_fun, alarm$0, record, record[1]);
    caml_call3(at_fun, at$1, record, record[2]);
    caml_call3(callback_fun, callback$0, record, record[3]);
    caml_call3(execution_context_fun, execution_context$0, record, record[4]);
    caml_call3(interval_fun, interval$0, record, record[5]);
    caml_call3(next_fired_fun, next_fired$0, record, record[6]);
    caml_call3(prev_fired_fun, prev_fired$0, record, record[7]);
    return caml_call3(status_fun, status$0, record, record[8]);
   }
   function fold$0
   (record,
    init,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dk_ = record[8],
     _dl_ = record[7],
     _dm_ = record[6],
     _dn_ = record[5],
     _do_ = record[4],
     _dp_ = record[3],
     _dq_ = record[2];
    return caml_call4
            (status_fun,
             caml_call4
              (prev_fired_fun,
               caml_call4
                (next_fired_fun,
                 caml_call4
                  (interval_fun,
                   caml_call4
                    (execution_context_fun,
                     caml_call4
                      (callback_fun,
                       caml_call4
                        (at_fun,
                         caml_call4(alarm_fun, init, alarm$0, record, record[1]),
                         at$1,
                         record,
                         _dq_),
                       callback$0,
                       record,
                       _dp_),
                     execution_context$0,
                     record,
                     _do_),
                   interval$0,
                   record,
                   _dn_),
                 next_fired$0,
                 record,
                 _dm_),
               prev_fired$0,
               record,
               _dl_),
             status$0,
             record,
             _dk_);
   }
   function for_all$0
   (record,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dd_ = caml_call3(alarm_fun, alarm$0, record, record[1]),
     _de_ = _dd_ ? caml_call3(at_fun, at$1, record, record[2]) : _dd_,
     _df_ =
       _de_ ? caml_call3(callback_fun, callback$0, record, record[3]) : _de_,
     _dg_ =
       _df_
        ? caml_call3
          (execution_context_fun, execution_context$0, record, record[4])
        : _df_,
     _dh_ =
       _dg_ ? caml_call3(interval_fun, interval$0, record, record[5]) : _dg_,
     _di_ =
       _dh_
        ? caml_call3(next_fired_fun, next_fired$0, record, record[6])
        : _dh_,
     _dj_ =
       _di_
        ? caml_call3(prev_fired_fun, prev_fired$0, record, record[7])
        : _di_;
    return _dj_ ? caml_call3(status_fun, status$0, record, record[8]) : _dj_;
   }
   function exists$0
   (record,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _dc_ = caml_call3(alarm_fun, alarm$0, record, record[1]),
     _c8_ = _dc_ || caml_call3(at_fun, at$1, record, record[2]),
     _c9_ = _c8_ || caml_call3(callback_fun, callback$0, record, record[3]),
     _c__ =
       _c9_
       ||
        caml_call3
         (execution_context_fun, execution_context$0, record, record[4]),
     _c$_ = _c__ || caml_call3(interval_fun, interval$0, record, record[5]),
     _da_ =
       _c$_ || caml_call3(next_fired_fun, next_fired$0, record, record[6]),
     _db_ =
       _da_ || caml_call3(prev_fired_fun, prev_fired$0, record, record[7]);
    return _db_ ? _db_ : caml_call3(status_fun, status$0, record, record[8]);
   }
   function to_list$0
   (record,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _c1_ = [0, caml_call3(status_fun, status$0, record, record[8]), 0],
     _c2_ =
       [0, caml_call3(prev_fired_fun, prev_fired$0, record, record[7]), _c1_],
     _c3_ =
       [0, caml_call3(next_fired_fun, next_fired$0, record, record[6]), _c2_],
     _c4_ = [0, caml_call3(interval_fun, interval$0, record, record[5]), _c3_],
     _c5_ =
       [0,
        caml_call3
         (execution_context_fun, execution_context$0, record, record[4]),
        _c4_],
     _c6_ = [0, caml_call3(callback_fun, callback$0, record, record[3]), _c5_],
     _c7_ = [0, caml_call3(at_fun, at$1, record, record[2]), _c6_];
    return [0, caml_call3(alarm_fun, alarm$0, record, record[1]), _c7_];
   }
   function map$0
   (record,
    alarm_fun,
    at_fun,
    callback_fun,
    execution_context_fun,
    interval_fun,
    next_fired_fun,
    prev_fired_fun,
    status_fun){
    var
     _cU_ = caml_call3(status_fun, status$0, record, record[8]),
     _cV_ = caml_call3(prev_fired_fun, prev_fired$0, record, record[7]),
     _cW_ = caml_call3(next_fired_fun, next_fired$0, record, record[6]),
     _cX_ = caml_call3(interval_fun, interval$0, record, record[5]),
     _cY_ =
       caml_call3
        (execution_context_fun, execution_context$0, record, record[4]),
     _cZ_ = caml_call3(callback_fun, callback$0, record, record[3]),
     _c0_ = caml_call3(at_fun, at$1, record, record[2]);
    return [0,
            caml_call3(alarm_fun, alarm$0, record, record[1]),
            _c0_,
            _cZ_,
            _cY_,
            _cX_,
            _cW_,
            _cV_,
            _cU_];
   }
   function set_all_mutable_fields
   (record, alarm, at, interval, next_fired, prev_fired, status){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[1] = alarm;
    record$0[2] = at;
    record$0[5] = interval;
    record$0[6] = next_fired;
    record$0[7] = prev_fired;
    record$0[8] = status;
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    Fields =
      [0,
       names,
       status$0,
       prev_fired$0,
       next_fired$0,
       interval$0,
       execution_context$0,
       callback$0,
       at$1,
       alarm$0,
       make_creator,
       create,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct];
   function invariant(t){
    function _cC_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     function _cD_(_cT_){return 0;}
     var
      _cE_ =
        check
         (function(ppx_optional_e_0){
           if(caml_call1(Option[7][1][1], ppx_optional_e_0)) return 0;
           var
            prev_fired = caml_call1(Option[7][1][2], ppx_optional_e_0),
            got = t[8],
            sexpifier = Status[3],
            expect = 0,
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_013, b_014){
            return caml_call2(Status[1], a_013, b_014);
           }
           caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             expect,
             got);
           var _cR_ = prev_fired[6], _cS_ = caml_call1(Option[3], t);
           if(caml_call2(Core[246], _cS_, _cR_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
          }),
      _cF_ =
        check
         (function(ppx_optional_e_0){
           if(caml_call1(Option[7][1][1], ppx_optional_e_0)) return 0;
           var
            next_fired = caml_call1(Option[7][1][2], ppx_optional_e_0),
            got = t[8],
            sexpifier = Status[3],
            expect = 0,
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_009, b_010){
            return caml_call2(Status[1], a_009, b_010);
           }
           caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$0,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             expect,
             got);
           var _cP_ = next_fired[7], _cQ_ = caml_call1(Option[3], t);
           if(caml_call2(Core[246], _cQ_, _cP_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
          });
     function _cG_(_cO_){return 0;}
     function _cH_(_cN_){return 0;}
     function _cI_(_cM_){return 0;}
     function _cJ_(_cL_){return 0;}
     var
      _cK_ =
        check
         (function(alarm){
           var
            got = caml_call1(Alarm[6], alarm),
            expect = 2 === t[8] ? 0 : 1,
            sexpifier = Core[305],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_005, b_006){
            return caml_call2(Core[301], a_005, b_006);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$1,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    got);
          });
     return caml_call8
             (Fields[13], _cK_, _cJ_, _cI_, _cH_, _cG_, _cF_, _cE_, _cD_);
    }
    return caml_call4(Base_Invariant[1], _D_, t, sexp_of_event, _cC_);
   }
   function set_status$0(t, to){
    var from = t[8];
    if(1 - caml_call2(Status[4], from, to)){
     var
      _cx_ = [0, [1, [0, _E_, [0, sexp_of_event(t), 0]]], 0],
      _cy_ = [0, [1, [0, _F_, [0, caml_call1(Status[3], to), 0]]], _cx_],
      _cz_ = [0, [1, [0, _G_, [0, caml_call1(Status[3], from), 0]]], _cy_],
      _cA_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_bug_set_status_transition_),
         _cz_],
      _cB_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_synchronous_time_sourc),
          _cA_]];
     caml_call1(Core[253], _cB_);
    }
    t[8] = to;
    return 0;
   }
   function set_status_if(is, t, to){
    var _cw_ = caml_call2(Status[2], is, t[8]);
    return _cw_ ? set_status$0(t, to) : _cw_;
   }
   var
    Event =
      [0,
       Status,
       sexp_of_event,
       Option,
       status,
       prev_fired,
       set_prev_fired,
       next_fired,
       set_next_fired,
       interval,
       set_interval,
       execution_context,
       callback,
       at$0,
       set_at,
       alarm,
       set_alarm,
       Fields,
       sexp_of_event,
       invariant,
       set_status$0,
       set_status_if,
       at$0],
    of_event = Async_kernel_Job_or_event[1],
    of_job = Async_kernel_Job_or_event[2],
    is_event = Async_kernel_Job_or_event[3],
    is_job = Async_kernel_Job_or_event[4],
    Match = Async_kernel_Job_or_event[5];
   function sexp_of_t$3(t){
    var
     k = caml_call1(Async_kernel_Job_or_event[5][1], t),
     match = caml_call2(Async_kernel_Job_or_event[5][2], k, t);
    return k
            ? caml_call1(Sexplib0_Sexp_conv[7], cst_Job_t)
            : caml_call1(Event[18], match);
   }
   var
    Job_or_event = [0, of_event, of_job, is_event, is_job, Match, sexp_of_t$3];
   function scheduler(r){return r[9];}
   function is_wall_clock(r){return r[8];}
   function handle_fired(r){return r[7];}
   function most_recently_fired(r){return r[6];}
   function set_most_recently_fired(r, v){r[6] = v; return 0;}
   function fired_events(r){return r[5];}
   function set_fired_events(r, v){r[5] = v; return 0;}
   function events(r){return r[4];}
   function am_advancing(r){return r[3];}
   function set_am_advancing(r, v){r[3] = v; return 0;}
   function advance_errors(r){return r[2];}
   function set_advance_errors(r, v){r[2] = v; return 0;}
   function id(r){return r[1];}
   function _H_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], v];
   }
   var
    _I_ = 0,
    scheduler$0 =
      [0, function(param){return 0;}, cst_scheduler, _I_, scheduler, _H_];
   function _J_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v, r[9]];
   }
   var
    _K_ = 0,
    is_wall_clock$0 =
      [0,
       function(param){return 0;},
       cst_is_wall_clock,
       _K_,
       is_wall_clock,
       _J_];
   function _L_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8], r[9]];
   }
   var
    _M_ = 0,
    handle_fired$0 =
      [0,
       function(param){return 0;},
       cst_handle_fired,
       _M_,
       handle_fired,
       _L_];
   function _N_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8], r[9]];
   }
   var
    _O_ = [0, set_most_recently_fired],
    most_recently_fired$0 =
      [0,
       function(param){return 0;},
       cst_most_recently_fired,
       _O_,
       most_recently_fired,
       _N_];
   function _P_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8], r[9]];
   }
   var
    _Q_ = [0, set_fired_events],
    fired_events$0 =
      [0,
       function(param){return 0;},
       cst_fired_events,
       _Q_,
       fired_events,
       _P_];
   function _R_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8], r[9]];
   }
   var
    _S_ = 0,
    events$0 = [0, function(param){return 0;}, cst_events, _S_, events, _R_];
   function _T_(r, v){
    return [0, r[1], r[2], v, r[4], r[5], r[6], r[7], r[8], r[9]];
   }
   var
    _U_ = [0, set_am_advancing],
    am_advancing$0 =
      [0,
       function(param){return 0;},
       cst_am_advancing,
       _U_,
       am_advancing,
       _T_];
   function _V_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8], r[9]];
   }
   var
    _W_ = [0, set_advance_errors],
    advance_errors$0 =
      [0,
       function(param){return 0;},
       cst_advance_errors,
       _W_,
       advance_errors,
       _V_];
   function _X_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9]];
   }
   var _Y_ = 0, id$0 = [0, function(param){return 0;}, cst_id, _Y_, id, _X_];
   function make_creator$0
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun,
    compile_acc){
    var
     match = caml_call2(id_fun, id$0, compile_acc),
     compile_acc$0 = match[2],
     id_gen = match[1],
     match$0 = caml_call2(advance_errors_fun, advance_errors$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     advance_errors_gen = match$0[1],
     match$1 = caml_call2(am_advancing_fun, am_advancing$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     am_advancing_gen = match$1[1],
     match$2 = caml_call2(events_fun, events$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     events_gen = match$2[1],
     match$3 = caml_call2(fired_events_fun, fired_events$0, compile_acc$3),
     compile_acc$4 = match$3[2],
     fired_events_gen = match$3[1],
     match$4 =
       caml_call2
        (most_recently_fired_fun, most_recently_fired$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     most_recently_fired_gen = match$4[1],
     match$5 = caml_call2(handle_fired_fun, handle_fired$0, compile_acc$5),
     compile_acc$6 = match$5[2],
     handle_fired_gen = match$5[1],
     match$6 = caml_call2(is_wall_clock_fun, is_wall_clock$0, compile_acc$6),
     compile_acc$7 = match$6[2],
     is_wall_clock_gen = match$6[1],
     match$7 = caml_call2(scheduler_fun, scheduler$0, compile_acc$7),
     compile_acc$8 = match$7[2],
     scheduler_gen = match$7[1];
    return [0,
            function(acc){
             var
              id = caml_call1(id_gen, acc),
              advance_errors = caml_call1(advance_errors_gen, acc),
              am_advancing = caml_call1(am_advancing_gen, acc),
              events = caml_call1(events_gen, acc),
              fired_events = caml_call1(fired_events_gen, acc),
              most_recently_fired = caml_call1(most_recently_fired_gen, acc),
              handle_fired = caml_call1(handle_fired_gen, acc),
              is_wall_clock = caml_call1(is_wall_clock_gen, acc),
              scheduler = caml_call1(scheduler_gen, acc);
             return [0,
                     id,
                     advance_errors,
                     am_advancing,
                     events,
                     fired_events,
                     most_recently_fired,
                     handle_fired,
                     is_wall_clock,
                     scheduler];
            },
            compile_acc$8];
   }
   function create$0
   (id,
    advance_errors,
    am_advancing,
    events,
    fired_events,
    most_recently_fired,
    handle_fired,
    is_wall_clock,
    scheduler){
    return [0,
            id,
            advance_errors,
            am_advancing,
            events,
            fired_events,
            most_recently_fired,
            handle_fired,
            is_wall_clock,
            scheduler];
   }
   function map$1
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _co_ = caml_call1(scheduler_fun, scheduler$0),
     _cp_ = caml_call1(is_wall_clock_fun, is_wall_clock$0),
     _cq_ = caml_call1(handle_fired_fun, handle_fired$0),
     _cr_ = caml_call1(most_recently_fired_fun, most_recently_fired$0),
     _cs_ = caml_call1(fired_events_fun, fired_events$0),
     _ct_ = caml_call1(events_fun, events$0),
     _cu_ = caml_call1(am_advancing_fun, am_advancing$0),
     _cv_ = caml_call1(advance_errors_fun, advance_errors$0);
    return [0,
            caml_call1(id_fun, id$0),
            _cv_,
            _cu_,
            _ct_,
            _cs_,
            _cr_,
            _cq_,
            _cp_,
            _co_];
   }
   function iter$1
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    caml_call1(id_fun, id$0);
    caml_call1(advance_errors_fun, advance_errors$0);
    caml_call1(am_advancing_fun, am_advancing$0);
    caml_call1(events_fun, events$0);
    caml_call1(fired_events_fun, fired_events$0);
    caml_call1(most_recently_fired_fun, most_recently_fired$0);
    caml_call1(handle_fired_fun, handle_fired$0);
    caml_call1(is_wall_clock_fun, is_wall_clock$0);
    return caml_call1(scheduler_fun, scheduler$0);
   }
   function fold$1
   (init,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    return caml_call2
            (scheduler_fun,
             caml_call2
              (is_wall_clock_fun,
               caml_call2
                (handle_fired_fun,
                 caml_call2
                  (most_recently_fired_fun,
                   caml_call2
                    (fired_events_fun,
                     caml_call2
                      (events_fun,
                       caml_call2
                        (am_advancing_fun,
                         caml_call2
                          (advance_errors_fun,
                           caml_call2(id_fun, init, id$0),
                           advance_errors$0),
                         am_advancing$0),
                       events$0),
                     fired_events$0),
                   most_recently_fired$0),
                 handle_fired$0),
               is_wall_clock$0),
             scheduler$0);
   }
   function map_poly$0(record){
    var
     _cg_ = [0, caml_call1(record[1], scheduler$0), 0],
     _ch_ = [0, caml_call1(record[1], is_wall_clock$0), _cg_],
     _ci_ = [0, caml_call1(record[1], handle_fired$0), _ch_],
     _cj_ = [0, caml_call1(record[1], most_recently_fired$0), _ci_],
     _ck_ = [0, caml_call1(record[1], fired_events$0), _cj_],
     _cl_ = [0, caml_call1(record[1], events$0), _ck_],
     _cm_ = [0, caml_call1(record[1], am_advancing$0), _cl_],
     _cn_ = [0, caml_call1(record[1], advance_errors$0), _cm_];
    return [0, caml_call1(record[1], id$0), _cn_];
   }
   function for_all$1
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _b__ = caml_call1(id_fun, id$0),
     _b$_ = _b__ ? caml_call1(advance_errors_fun, advance_errors$0) : _b__,
     _ca_ = _b$_ ? caml_call1(am_advancing_fun, am_advancing$0) : _b$_,
     _cb_ = _ca_ ? caml_call1(events_fun, events$0) : _ca_,
     _cc_ = _cb_ ? caml_call1(fired_events_fun, fired_events$0) : _cb_,
     _cd_ =
       _cc_
        ? caml_call1(most_recently_fired_fun, most_recently_fired$0)
        : _cc_,
     _ce_ = _cd_ ? caml_call1(handle_fired_fun, handle_fired$0) : _cd_,
     _cf_ = _ce_ ? caml_call1(is_wall_clock_fun, is_wall_clock$0) : _ce_;
    return _cf_ ? caml_call1(scheduler_fun, scheduler$0) : _cf_;
   }
   function exists$1
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _b9_ = caml_call1(id_fun, id$0),
     _b2_ = _b9_ || caml_call1(advance_errors_fun, advance_errors$0),
     _b3_ = _b2_ || caml_call1(am_advancing_fun, am_advancing$0),
     _b4_ = _b3_ || caml_call1(events_fun, events$0),
     _b5_ = _b4_ || caml_call1(fired_events_fun, fired_events$0),
     _b6_ = _b5_ || caml_call1(most_recently_fired_fun, most_recently_fired$0),
     _b7_ = _b6_ || caml_call1(handle_fired_fun, handle_fired$0),
     _b8_ = _b7_ || caml_call1(is_wall_clock_fun, is_wall_clock$0);
    return _b8_ ? _b8_ : caml_call1(scheduler_fun, scheduler$0);
   }
   function to_list$1
   (id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bU_ = [0, caml_call1(scheduler_fun, scheduler$0), 0],
     _bV_ = [0, caml_call1(is_wall_clock_fun, is_wall_clock$0), _bU_],
     _bW_ = [0, caml_call1(handle_fired_fun, handle_fired$0), _bV_],
     _bX_ =
       [0, caml_call1(most_recently_fired_fun, most_recently_fired$0), _bW_],
     _bY_ = [0, caml_call1(fired_events_fun, fired_events$0), _bX_],
     _bZ_ = [0, caml_call1(events_fun, events$0), _bY_],
     _b0_ = [0, caml_call1(am_advancing_fun, am_advancing$0), _bZ_],
     _b1_ = [0, caml_call1(advance_errors_fun, advance_errors$0), _b0_];
    return [0, caml_call1(id_fun, id$0), _b1_];
   }
   function iter$2
   (record,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    caml_call3(id_fun, id$0, record, record[1]);
    caml_call3(advance_errors_fun, advance_errors$0, record, record[2]);
    caml_call3(am_advancing_fun, am_advancing$0, record, record[3]);
    caml_call3(events_fun, events$0, record, record[4]);
    caml_call3(fired_events_fun, fired_events$0, record, record[5]);
    caml_call3
     (most_recently_fired_fun, most_recently_fired$0, record, record[6]);
    caml_call3(handle_fired_fun, handle_fired$0, record, record[7]);
    caml_call3(is_wall_clock_fun, is_wall_clock$0, record, record[8]);
    return caml_call3(scheduler_fun, scheduler$0, record, record[9]);
   }
   function fold$2
   (record,
    init,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bM_ = record[9],
     _bN_ = record[8],
     _bO_ = record[7],
     _bP_ = record[6],
     _bQ_ = record[5],
     _bR_ = record[4],
     _bS_ = record[3],
     _bT_ = record[2];
    return caml_call4
            (scheduler_fun,
             caml_call4
              (is_wall_clock_fun,
               caml_call4
                (handle_fired_fun,
                 caml_call4
                  (most_recently_fired_fun,
                   caml_call4
                    (fired_events_fun,
                     caml_call4
                      (events_fun,
                       caml_call4
                        (am_advancing_fun,
                         caml_call4
                          (advance_errors_fun,
                           caml_call4(id_fun, init, id$0, record, record[1]),
                           advance_errors$0,
                           record,
                           _bT_),
                         am_advancing$0,
                         record,
                         _bS_),
                       events$0,
                       record,
                       _bR_),
                     fired_events$0,
                     record,
                     _bQ_),
                   most_recently_fired$0,
                   record,
                   _bP_),
                 handle_fired$0,
                 record,
                 _bO_),
               is_wall_clock$0,
               record,
               _bN_),
             scheduler$0,
             record,
             _bM_);
   }
   function for_all$2
   (record,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bE_ = caml_call3(id_fun, id$0, record, record[1]),
     _bF_ =
       _bE_
        ? caml_call3(advance_errors_fun, advance_errors$0, record, record[2])
        : _bE_,
     _bG_ =
       _bF_
        ? caml_call3(am_advancing_fun, am_advancing$0, record, record[3])
        : _bF_,
     _bH_ = _bG_ ? caml_call3(events_fun, events$0, record, record[4]) : _bG_,
     _bI_ =
       _bH_
        ? caml_call3(fired_events_fun, fired_events$0, record, record[5])
        : _bH_,
     _bJ_ =
       _bI_
        ? caml_call3
          (most_recently_fired_fun, most_recently_fired$0, record, record[6])
        : _bI_,
     _bK_ =
       _bJ_
        ? caml_call3(handle_fired_fun, handle_fired$0, record, record[7])
        : _bJ_,
     _bL_ =
       _bK_
        ? caml_call3(is_wall_clock_fun, is_wall_clock$0, record, record[8])
        : _bK_;
    return _bL_
            ? caml_call3(scheduler_fun, scheduler$0, record, record[9])
            : _bL_;
   }
   function exists$2
   (record,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bD_ = caml_call3(id_fun, id$0, record, record[1]),
     _bw_ =
       _bD_
       || caml_call3(advance_errors_fun, advance_errors$0, record, record[2]),
     _bx_ =
       _bw_ || caml_call3(am_advancing_fun, am_advancing$0, record, record[3]),
     _by_ = _bx_ || caml_call3(events_fun, events$0, record, record[4]),
     _bz_ =
       _by_ || caml_call3(fired_events_fun, fired_events$0, record, record[5]),
     _bA_ =
       _bz_
       ||
        caml_call3
         (most_recently_fired_fun, most_recently_fired$0, record, record[6]),
     _bB_ =
       _bA_ || caml_call3(handle_fired_fun, handle_fired$0, record, record[7]),
     _bC_ =
       _bB_
       || caml_call3(is_wall_clock_fun, is_wall_clock$0, record, record[8]);
    return _bC_
            ? _bC_
            : caml_call3(scheduler_fun, scheduler$0, record, record[9]);
   }
   function to_list$2
   (record,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bo_ = [0, caml_call3(scheduler_fun, scheduler$0, record, record[9]), 0],
     _bp_ =
       [0,
        caml_call3(is_wall_clock_fun, is_wall_clock$0, record, record[8]),
        _bo_],
     _bq_ =
       [0,
        caml_call3(handle_fired_fun, handle_fired$0, record, record[7]),
        _bp_],
     _br_ =
       [0,
        caml_call3
         (most_recently_fired_fun, most_recently_fired$0, record, record[6]),
        _bq_],
     _bs_ =
       [0,
        caml_call3(fired_events_fun, fired_events$0, record, record[5]),
        _br_],
     _bt_ = [0, caml_call3(events_fun, events$0, record, record[4]), _bs_],
     _bu_ =
       [0,
        caml_call3(am_advancing_fun, am_advancing$0, record, record[3]),
        _bt_],
     _bv_ =
       [0,
        caml_call3(advance_errors_fun, advance_errors$0, record, record[2]),
        _bu_];
    return [0, caml_call3(id_fun, id$0, record, record[1]), _bv_];
   }
   function map$2
   (record,
    id_fun,
    advance_errors_fun,
    am_advancing_fun,
    events_fun,
    fired_events_fun,
    most_recently_fired_fun,
    handle_fired_fun,
    is_wall_clock_fun,
    scheduler_fun){
    var
     _bg_ = caml_call3(scheduler_fun, scheduler$0, record, record[9]),
     _bh_ = caml_call3(is_wall_clock_fun, is_wall_clock$0, record, record[8]),
     _bi_ = caml_call3(handle_fired_fun, handle_fired$0, record, record[7]),
     _bj_ =
       caml_call3
        (most_recently_fired_fun, most_recently_fired$0, record, record[6]),
     _bk_ = caml_call3(fired_events_fun, fired_events$0, record, record[5]),
     _bl_ = caml_call3(events_fun, events$0, record, record[4]),
     _bm_ = caml_call3(am_advancing_fun, am_advancing$0, record, record[3]),
     _bn_ =
       caml_call3(advance_errors_fun, advance_errors$0, record, record[2]);
    return [0,
            caml_call3(id_fun, id$0, record, record[1]),
            _bn_,
            _bm_,
            _bl_,
            _bk_,
            _bj_,
            _bi_,
            _bh_,
            _bg_];
   }
   function set_all_mutable_fields$0
   (record, advance_errors, am_advancing, fired_events, most_recently_fired){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[2] = advance_errors;
    record$0[3] = am_advancing;
    record$0[5] = fired_events;
    record$0[6] = most_recently_fired;
    return 0;
   }
   var
    Direct$0 =
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0],
    Fields$0 =
      [0,
       names$0,
       scheduler$0,
       is_wall_clock$0,
       handle_fired$0,
       most_recently_fired$0,
       fired_events$0,
       events$0,
       am_advancing$0,
       advance_errors$0,
       id$0,
       make_creator$0,
       create$0,
       map$1,
       iter$1,
       fold$1,
       map_poly$0,
       for_all$1,
       exists$1,
       to_list$1,
       Direct$0];
   function sexp_of_t$4(param, _a7_){
    var
     events = _a7_[4],
     is_wall_clock = _a7_[8],
     now = caml_call1(Timing_wheel[11], events);
    if(is_wall_clock){
     var _a8_ = [0, [1, [0, _Z_, [0, caml_call1(Time_ns[113], now), 0]]], 0];
     return [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_wall_clock), _a8_]];
    }
    var all_events = [0, 0];
    function _a9_(alarm){
     var _be_ = all_events[1], _bf_ = caml_call2(Alarm[5], events, alarm);
     all_events[1] = [0, [0, caml_call2(Alarm[3], events, alarm), _bf_], _be_];
     return 0;
    }
    caml_call2(Timing_wheel[15], events, _a9_);
    function _a__(_bd_){return _bd_[2];}
    function _a$_(param, _bc_){
     var at2 = _bc_[1], at1 = param[1];
     return caml_call2(Time_ns[100], at1, at2);
    }
    var
     _ba_ = caml_call2(Core_List[58], all_events[1], _a$_),
     events$0 = caml_call2(Core_List[72], _ba_, _a__),
     _bb_ =
       [0,
        [1,
         [0, ___, [0, caml_call2(Core[421], Job_or_event[6], events$0), 0]]],
        0];
    return [1,
            [0, [1, [0, _$_, [0, caml_call1(Time_ns[113], now), 0]]], _bb_]];
   }
   function timing_wheel_now(t){return caml_call1(Timing_wheel[11], t[4]);}
   function is_in_fired_events(t, target_event){
    var current$1 = t[5], ppx_optional_e_0 = current$1;
    for(;;){
     if(caml_call1(Event[3][7][1][1], ppx_optional_e_0)) return 0;
     var
      current = caml_call1(Event[3][7][1][2], ppx_optional_e_0),
      _a6_ = caml_call2(Core[246], current, target_event);
     if(_a6_) return _a6_;
     var current$0 = current[6], ppx_optional_e_0 = current$0;
    }
   }
   function invariant_with_jobs(job_invariant, t){
    function _aL_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     function _aN_(_a5_){return 0;}
     function _aO_(_a4_){return 0;}
     function _aP_(_a3_){return 0;}
     var
      _aQ_ =
        check
         (function(most_recently_fired){
           if(caml_call1(Event[3][7][1][1], most_recently_fired)) return 0;
           var event = caml_call1(Event[3][7][1][2], most_recently_fired);
           if(is_in_fired_events(t, event)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
          }),
      _aR_ =
        check
         (function(ppx_optional_e_0){
           if(caml_call1(Event[3][7][1][1], ppx_optional_e_0)) return 0;
           var
            current$1 = caml_call1(Event[3][7][1][2], ppx_optional_e_0),
            current = current$1;
           for(;;){
            var _a2_ = timing_wheel_now(t);
            if(! caml_call2(Time_ns[94], current[2], _a2_))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _ac_], 1);
            var ppx_optional_e_0$0 = current[6];
            if(caml_call1(Event[3][7][1][1], ppx_optional_e_0$0)) return 0;
            var current$0 = caml_call1(Event[3][7][1][2], ppx_optional_e_0$0);
            if(! caml_call2(Time_ns[94], current[2], current$0[2]))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
            var current = current$0;
           }
          }),
      _aS_ =
        check
         (function(events){
           function _aZ_(_a1_){return 0;}
           caml_call2(Timing_wheel[6], _aZ_, events);
           function _a0_(alarm){
            var
             job_or_event = caml_call2(Alarm[5], events, alarm),
             k = caml_call1(Job_or_event[5][1], job_or_event),
             event = caml_call2(Job_or_event[5][2], k, job_or_event);
            if(k) return caml_call1(job_invariant, event);
            if(! caml_call2(Core[246], alarm, event[1]))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _ad_], 1);
            var
             got = event[2],
             expect = caml_call2(Alarm[3], events, alarm),
             sexpifier = Time_ns[113],
             equal = 0,
             message = 0,
             here = 0;
            function comparator(a_017, b_018){
             return caml_call2(Time_ns[100], a_017, b_018);
            }
            caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$2,
              sexpifier,
              comparator,
              here,
              message,
              equal,
              expect,
              got);
            var
             got$0 = event[8],
             sexpifier$0 = Event[1][3],
             expect$0 = 2,
             equal$0 = 0,
             message$0 = 0,
             here$0 = 0;
            function comparator$0(a_019, b_020){
             return caml_call2(Event[1][1], a_019, b_020);
            }
            caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$3,
              sexpifier$0,
              comparator$0,
              here$0,
              message$0,
              equal$0,
              expect$0,
              got$0);
            return caml_call1(Event[19], event);
           }
           return caml_call2(Timing_wheel[15], events, _a0_);
          });
     function _aT_(_aY_){return 0;}
     function _aU_(_aX_){return 0;}
     function _aV_(_aW_){return 0;}
     return caml_call9
             (Fields$0[14],
              _aV_,
              _aU_,
              _aT_,
              _aS_,
              _aR_,
              _aQ_,
              _aP_,
              _aO_,
              _aN_);
    }
    function _aM_(x_016){
     return sexp_of_t$4(function(param){return _ae_;}, x_016);
    }
    return caml_call4(Base_Invariant[1], _af_, t, _aM_, _aL_);
   }
   function invariant$0(t){
    return invariant_with_jobs(function(param){return 0;}, t);
   }
   var
    T1 =
      [0,
       Event,
       Job_or_event,
       scheduler,
       is_wall_clock,
       handle_fired,
       most_recently_fired,
       set_most_recently_fired,
       fired_events,
       set_fired_events,
       events,
       am_advancing,
       set_am_advancing,
       advance_errors,
       set_advance_errors,
       id,
       Fields$0,
       sexp_of_t$4,
       timing_wheel_now,
       is_in_fired_events,
       invariant_with_jobs,
       invariant$0];
   function sexp_of_t$5(x_021){return caml_call2(T1[17], Core[171], x_021);}
   var invariant$1 = T1[21], invariant_with_jobs$0 = T1[20];
   function sexp_of_t$6(x_022){return caml_call2(T1[17], Core[202], x_022);}
   var Read_write = [0, sexp_of_t$6, invariant$1, invariant_with_jobs$0];
   function id$1(t){return t[1];}
   function is_wall_clock$1(t){return t[8];}
   function length(t){return caml_call1(Timing_wheel[14], t[4]);}
   function max_allowed_alarm_time(t){
    return caml_call1(Timing_wheel[22], t[4]);
   }
   function read_only(t){return t;}
   function fire(t, event){
    caml_call2(T1[1][20], event, 0);
    event[1] = caml_call1(Alarm[2], 0);
    var ppx_optional_e_0 = t[6];
    a:
    {
     if(! caml_call1(T1[1][3][7][1][1], ppx_optional_e_0)){
      var
       most_recently_fired = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0);
      if(caml_call2(Time_ns[94], most_recently_fired[2], event[2])){
       var
        most_recently_fired$0 =
          caml_call1(T1[1][3][7][1][2], ppx_optional_e_0);
       event[7] = caml_call1(T1[1][3][3], most_recently_fired$0);
       event[6] = most_recently_fired$0[6];
       break a;
      }
     }
     event[7] = T1[1][3][2];
     event[6] = t[5];
    }
    t[6] = caml_call1(T1[1][3][3], event);
    for(;;){
     var ppx_optional_e_0$0 = event[6];
     if(caml_call1(T1[1][3][7][1][1], ppx_optional_e_0$0))
      var continue$0 = 0;
     else{
      var
       next$0 = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0$0),
       continue$1 = caml_call2(Time_ns[94], next$0[2], event[2]);
      if(continue$1){event[7] = event[6]; event[6] = next$0[6];}
      var continue$0 = continue$1;
     }
     if(! continue$0) break;
    }
    var ppx_optional_e_0$1 = event[6];
    if(! caml_call1(T1[1][3][7][1][1], ppx_optional_e_0$1)){
     var next = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0$1);
     next[7] = caml_call1(T1[1][3][3], event);
    }
    var ppx_optional_e_0$2 = event[7];
    if(caml_call1(T1[1][3][7][1][1], ppx_optional_e_0$2)){t[5] = caml_call1(T1[1][3][3], event); return 0;}
    var prev = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0$2);
    prev[6] = caml_call1(T1[1][3][3], event);
    return 0;
   }
   function alarm_precision(t){return caml_call1(Timing_wheel[10], t[4]);}
   function next_alarm_fires_at(t){return caml_call1(Timing_wheel[38], t[4]);}
   function next_alarm_runs_at(t){
    return caml_call1(T1[1][3][5], t[5])
            ? [0, caml_call1(T1[18], t)]
            : caml_call1(Timing_wheel[38], t[4]);
   }
   function now$0(t){
    return t[8] ? caml_call1(Time_ns[50], 0) : caml_call1(T1[18], t);
   }
   var timing_wheel_now$0 = T1[18];
   function schedule(t, event){
    caml_call2(T1[1][20], event, 2);
    var _aK_ = caml_call1(T1[2][1], event);
    event[1] = caml_call3(Timing_wheel[25], t[4], event[2], _aK_);
    return 0;
   }
   function remove_from_fired(t, event, new_status){
    var ppx_optional_e_0 = t[6];
    if(! caml_call1(T1[1][3][7][1][1], ppx_optional_e_0)){
     var
      most_recently_fired = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0);
     if(caml_call2(Core[246], event, most_recently_fired))
      t[6] = caml_call2(T1[1][3][6], event[6], event[7]);
    }
    var ppx_optional_e_0$0 = event[7];
    if(caml_call1(T1[1][3][7][1][1], ppx_optional_e_0$0))
     t[5] = event[6];
    else{
     var prev = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0$0);
     prev[6] = event[6];
    }
    var ppx_optional_e_0$1 = event[6];
    if(! caml_call1(T1[1][3][7][1][1], ppx_optional_e_0$1)){
     var next = caml_call1(T1[1][3][7][1][2], ppx_optional_e_0$1);
     next[7] = event[7];
    }
    event[6] = T1[1][3][2];
    event[7] = T1[1][3][2];
    return caml_call2(T1[1][20], event, new_status);
   }
   var
    include$0 = T1[1],
    Status$0 = include$0[1],
    sexp_of_event$0 = include$0[2],
    Option$0 = include$0[3],
    status$1 = include$0[4],
    prev_fired$1 = include$0[5],
    set_prev_fired$0 = include$0[6],
    next_fired$1 = include$0[7],
    set_next_fired$0 = include$0[8],
    interval$1 = include$0[9],
    set_interval$0 = include$0[10],
    execution_context$1 = include$0[11],
    callback$1 = include$0[12],
    set_at$0 = include$0[14],
    alarm$1 = include$0[15],
    set_alarm$0 = include$0[16],
    Fields$1 = include$0[17],
    sexp_of_t$7 = include$0[18],
    invariant$2 = include$0[19],
    set_status$1 = include$0[20],
    set_status_if$0 = include$0[21],
    scheduled_at = include$0[22];
   function create_internal(t, at, interval, callback){
    var _aH_ = T1[1][3][2], _aI_ = T1[1][3][2], _aJ_ = t[9][7];
    return [0,
            caml_call1(Alarm[2], 0),
            at,
            callback,
            _aJ_,
            interval,
            _aI_,
            _aH_,
            3];
   }
   function add$0(t, event){
    var _aG_ = caml_call1(timing_wheel_now$0, t);
    return caml_call2(Time_ns[94], event[2], _aG_)
            ? fire(t, event)
            : schedule(t, event);
   }
   function create_and_add(t, at, interval, callback){
    var event = create_internal(t, at, interval, callback);
    add$0(t, event);
    return event;
   }
   function at$2(t, at, callback){return create_and_add(t, at, 0, callback);}
   function after$0(t, span, callback){
    var _aF_ = now$0(t);
    return create_and_add
            (t, caml_call2(Time_ns[112], _aF_, span), 0, callback);
   }
   function require_span_at_least_alarm_pr(t, span){
    var
     alarm_precision$0 = alarm_precision(t),
     _aB_ = caml_call2(Core_Time_ns[1][19], span, alarm_precision$0);
    if(! _aB_) return _aB_;
    var
     _aC_ =
       [0,
        [1,
         [0, _ag_, [0, caml_call1(Core_Time_ns[1][10], alarm_precision$0), 0]]],
        0],
     _aD_ =
       [0,
        [1, [0, _ah_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]],
        _aC_],
     _aE_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_interval_span_smaller_than),
         _aD_]];
    return caml_call1(Core[253], _aE_);
   }
   function at_intervals(t, span, callback){
    require_span_at_least_alarm_pr(t, span);
    return create_and_add(t, now$0(t), [0, span], callback);
   }
   function sexp_of_t$8(param){
    switch(param){
      case 0:
       return _ai_;
      case 1:
       return _aj_;
      default: return _ak_;
    }
   }
   var Abort_result = [0, sexp_of_t$8];
   function abort(t, event){
    switch(event[8]){
      case 0:
       remove_from_fired(t, event, 3); return 0;
      case 1:
       return event[5] ? (event[5] = 0, 0) : 1;
      case 2:
       caml_call2(T1[1][20], event, 3);
       caml_call2(Timing_wheel[28], t[4], event[1]);
       event[1] = caml_call1(Alarm[2], 0);
       return 0;
      default: return 2;
    }
   }
   function abort_if_possible(t, event){abort(t, event); return 0;}
   function abort_exn(t, event){
    var reason = abort(t, event);
    if(! reason) return 0;
    var
     _az_ =
       [0, [1, [0, _al_, [0, caml_call1(Abort_result[1], reason), 0]]], 0],
     _aA_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Synchronous_time_source_ab),
         _az_]];
    return caml_call1(Core[253], _aA_);
   }
   function create$1(t, callback){
    return create_internal(t, Time_ns[43], 0, callback);
   }
   function schedule_at_internal(t, event, at, interval){
    var status = event[8];
    if(3 <= status){
     event[2] = at;
     event[5] = interval;
     add$0(t, event);
     return _am_;
    }
    var
     _ax_ = [0, caml_call1(T1[1][1][3], status), 0],
     _ay_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_schedule_an_event_w),
         _ax_]];
    return caml_call1(Core_Or_error[40], _ay_);
   }
   function schedule_at(t, event, at){
    return schedule_at_internal(t, event, at, 0);
   }
   function schedule_after(t, event, span){
    var _aw_ = now$0(t);
    return schedule_at(t, event, caml_call2(Time_ns[112], _aw_, span));
   }
   function schedule_at_intervals(t, event, span){
    require_span_at_least_alarm_pr(t, span);
    return schedule_at_internal(t, event, now$0(t), [0, span]);
   }
   function reschedule_at(t, event, at){
    switch(event[8]){
      case 0:
       remove_from_fired(t, event, 3); event[2] = at; return add$0(t, event);
      case 1:
       event[2] = at; return add$0(t, event);
      case 2:
       event[2] = at;
       var _av_ = caml_call1(timing_wheel_now$0, t);
       return caml_call2(Time_ns[96], at, _av_)
               ? caml_call3(Timing_wheel[29], t[4], event[1], at)
               : (caml_call2
                  (Timing_wheel[28], t[4], event[1]),
                 fire(t, event));
      default: event[2] = at; event[5] = 0; return add$0(t, event);
    }
   }
   function reschedule_after(t, event, span){
    var _au_ = now$0(t);
    return reschedule_at(t, event, caml_call2(Time_ns[112], _au_, span));
   }
   var
    Event$0 =
      [0,
       Status$0,
       sexp_of_event$0,
       Option$0,
       status$1,
       prev_fired$1,
       set_prev_fired$0,
       next_fired$1,
       set_next_fired$0,
       interval$1,
       set_interval$0,
       execution_context$1,
       callback$1,
       set_at$0,
       alarm$1,
       set_alarm$0,
       Fields$1,
       sexp_of_t$7,
       invariant$2,
       set_status$1,
       set_status_if$0,
       scheduled_at,
       create_internal,
       add$0,
       create_and_add,
       at$2,
       after$0,
       require_span_at_least_alarm_pr,
       at_intervals,
       Abort_result,
       abort,
       abort_if_possible,
       abort_exn,
       create$1,
       schedule_at_internal,
       schedule_at,
       schedule_after,
       schedule_at_intervals,
       reschedule_at,
       reschedule_after];
   function run_after(t, span, callback){
    caml_call3(Event$0[26], t, span, callback);
    return 0;
   }
   function run_at(t, at, callback){
    caml_call3(Event$0[25], t, at, callback);
    return 0;
   }
   function run_at_intervals(t, span, callback){
    caml_call3(Event$0[28], t, span, callback);
    return 0;
   }
   function run_fired_events(t, send_exn){
    var current_execution_context = t[9][7];
    for(;;){
     var ppx_optional_e_0 = t[5];
     if(caml_call1(Event$0[3][7][1][1], ppx_optional_e_0))
      var _ar_ = 0;
     else{
      var event = caml_call1(Event$0[3][7][1][2], ppx_optional_e_0);
      if(event[8])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
      remove_from_fired(t, event, 1);
      caml_call2(Async_kernel_Scheduler0[2], t[9], event[4]);
      a:
      {
       try{caml_call1(event[3], 0);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(send_exn){
         var
          send_exn$0 = send_exn[1],
          backtrace = caml_call1(Base_Backtrace[6][4], 0);
         caml_call3
          (send_exn$0, event[4][1], [0, [0, 936718974, backtrace]], exn);
        }
        else{
         var _as_ = t[2];
         t[2] = [0, caml_call2(Core_Error[25], 0, exn), _as_];
        }
        caml_call3(Event$0[20], 1, event, 3);
        break a;
       }
       var match = event[5];
       if(match){
        var interval = match[1];
        if(caml_call2(Event$0[1][2], 1, event[8])){
         var _at_ = caml_call1(timing_wheel_now$0, t);
         event[2] = caml_call5(Time_ns[65], 0, event[2], _at_, interval, 0);
         schedule(t, event);
        }
       }
       else
        caml_call3(Event$0[20], 1, event, 3);
      }
      var _ar_ = 1;
     }
     if(! _ar_)
      return caml_call2
              (Async_kernel_Scheduler0[2], t[9], current_execution_context);
    }
   }
   function advance_clock(t, to, send_exn){
    caml_call3(Timing_wheel[20], t[4], to, t[7]);
    return run_fired_events(t, send_exn);
   }
   function fire_past_alarms(t, send_exn){
    caml_call2(Timing_wheel[21], t[4], t[7]);
    return run_fired_events(t, send_exn);
   }
   function advance_internal(t, to, send_exn){
    advance_clock(t, to, send_exn);
    return fire_past_alarms(t, send_exn);
   }
   function prepare_to_advance(t, send_exn){
    if(t[3]){
     var
      _aq_ = caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_call_advance_by_ala);
     caml_call1(Core[253], _aq_);
    }
    t[3] = 1;
    if(t[2]) t[2] = 0;
    return run_fired_events(t, send_exn);
   }
   function finish_advancing(t){
    t[3] = 0;
    var errors = t[2];
    return errors
            ? (t[2] = 0, [1, caml_call2(Core_Error[24], 0, errors)])
            : _ao_;
   }
   function advance_by_alarms(t, to){
    prepare_to_advance(t, 0);
    var continue$0 = [0, 1], send_exn = 0;
    for(;;){
     if(! continue$0[1]){
      advance_internal(t, to, send_exn);
      return finish_advancing(t);
     }
     if(caml_call1(Timing_wheel[13], t[4]))
      continue$0[1] = 0;
     else{
      var min_alarm_time = caml_call1(Timing_wheel[37], t[4]);
      if(caml_call2(Time_ns[93], min_alarm_time, to))
       continue$0[1] = 0;
      else
       advance_internal(t, min_alarm_time, send_exn);
     }
    }
   }
   function advance_by_max_alarms_in_each_(t, to){
    prepare_to_advance(t, 0);
    var continue$0 = [0, 1], send_exn = 0;
    for(;;){
     if(! continue$0[1]){
      advance_internal(t, to, send_exn);
      return finish_advancing(t);
     }
     if(caml_call1(Timing_wheel[13], t[4]))
      continue$0[1] = 0;
     else{
      var next_alarm_fires_at = caml_call1(Timing_wheel[39], t[4]);
      if(caml_call2(Time_ns[93], next_alarm_fires_at, to))
       continue$0[1] = 0;
      else
       advance_internal(t, caml_call1(Timing_wheel[36], t[4]), send_exn);
     }
    }
   }
   function advance_directly(t, to){
    prepare_to_advance(t, 0);
    advance_internal(t, to, 0);
    return finish_advancing(t);
   }
   function duration_of(t, f){
    var
     start = now$0(t),
     result = caml_call1(f, 0),
     _ap_ = now$0(t),
     duration = caml_call2(Time_ns[57], _ap_, start);
    return [0, result, duration];
   }
   function max_alarm_time_in_min_timing_w(t){
    return caml_call1(Timing_wheel[34], t[4]);
   }
   function has_events_to_run(t){return caml_call1(Event$0[3][5], t[5]);}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Synchronous_t);
   var
    Async_kernel_Synchronous_time_ =
      [0,
       Time_ns,
       Alarm,
       default_timing_wheel_config,
       T1,
       sexp_of_t$5,
       invariant$1,
       invariant_with_jobs$0,
       Read_write,
       id$1,
       is_wall_clock$1,
       length,
       max_allowed_alarm_time,
       read_only,
       fire,
       alarm_precision,
       next_alarm_fires_at,
       next_alarm_runs_at,
       now$0,
       timing_wheel_now$0,
       schedule,
       remove_from_fired,
       Event$0,
       run_after,
       run_at,
       run_at_intervals,
       run_fired_events,
       advance_clock,
       fire_past_alarms,
       advance_internal,
       prepare_to_advance,
       finish_advancing,
       advance_by_alarms,
       advance_by_max_alarms_in_each_,
       advance_directly,
       duration_of,
       max_alarm_time_in_min_timing_w,
       has_events_to_run];
   runtime.caml_register_global
    (102, Async_kernel_Synchronous_time_, cst_Async_kernel_Synchronous_t$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Scheduler1
//# unitInfo: Requires: Assert_failure, Async_kernel__Debug, Async_kernel__Execution_context, Async_kernel__External_job, Async_kernel__Import, Async_kernel__Job_pool, Async_kernel__Job_queue, Async_kernel__Scheduler0, Async_kernel__Synchronous_time_source0, Async_kernel__Time_ns, Async_kernel__Types, Async_kernel_config, Base__Exn, Base__Field, Base__Invariant, Core, Core__Deque, Core__Error, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Result, Core__Sexp, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Thread_safe_queue, Timing_wheel, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Scheduler1$0 = "Async_kernel__Scheduler1",
    cst_async_kernel$0 = "async_kernel",
    cst_check_access$0 = "check_access",
    cst_check_invariants$0 = "check_invariants",
    cst_current_execution_context$0 = "current_execution_context",
    cst_cycle_count$0 = "cycle_count",
    cst_cycle_start$0 = "cycle_start",
    cst_event_added_hook$0 = "event_added_hook",
    cst_exec$0 = "exec",
    cst_execution_context$0 = "execution_context",
    cst_external_jobs$0 = "external_jobs",
    cst_in_cycle$0 = "in_cycle",
    cst_job_pool$0 = "job_pool",
    cst_job_queued_hook$0 = "job_queued_hook",
    cst_last_cycle_num_jobs$0 = "last_cycle_num_jobs",
    cst_last_cycle_time$0 = "last_cycle_time",
    cst_low_priority_jobs$0 = "low_priority_jobs",
    cst_main_execution_context$0 = "main_execution_context",
    cst_max_num_jobs_per_priority_$0 = "max_num_jobs_per_priority_per_cycle",
    cst_normal_priority_jobs$0 = "normal_priority_jobs",
    cst_record_backtraces$0 = "record_backtraces",
    cst_run_every_cycle_end$0 = "run_every_cycle_end",
    cst_run_every_cycle_end_state$0 = "run_every_cycle_end_state",
    cst_run_every_cycle_start$0 = "run_every_cycle_start",
    cst_run_every_cycle_start_stat$0 = "run_every_cycle_start_state",
    cst_src_scheduler1_ml = "src/scheduler1.ml",
    cst_thread_safe_external_job_h$0 = "thread_safe_external_job_hook",
    cst_time_source$0 = "time_source",
    cst_total_cycle_time$0 = "total_cycle_time",
    cst_uncaught_exn$0 = "uncaught_exn",
    cst_very_low_priority_workers$0 = "very_low_priority_workers",
    cst_yield$0 = "yield",
    cst_yield_until_no_jobs_remain$0 = "yield_until_no_jobs_remain",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call28
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27){
    return (f.l >= 0 ? f.l : f.l = f.length) == 28
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16,
               a17,
               a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16,
                a17,
                a18,
                a19,
                a20,
                a21,
                a22,
                a23,
                a24,
                a25,
                a26,
                a27]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    names = [0, cst_execution_context$0, [0, cst_exec$0, 0]],
    names$0 =
      caml_list_of_js_array
       ([cst_check_access$0,
         cst_job_pool$0,
         cst_normal_priority_jobs$0,
         cst_low_priority_jobs$0,
         cst_very_low_priority_workers$0,
         cst_main_execution_context$0,
         cst_current_execution_context$0,
         cst_uncaught_exn$0,
         cst_cycle_count$0,
         cst_cycle_start$0,
         cst_in_cycle$0,
         cst_run_every_cycle_start$0,
         cst_run_every_cycle_start_stat$0,
         cst_run_every_cycle_end$0,
         cst_run_every_cycle_end_state$0,
         cst_last_cycle_time$0,
         cst_last_cycle_num_jobs$0,
         cst_total_cycle_time$0,
         cst_time_source$0,
         cst_external_jobs$0,
         cst_thread_safe_external_job_h$0,
         cst_job_queued_hook$0,
         cst_event_added_hook$0,
         cst_yield$0,
         cst_yield_until_no_jobs_remain$0,
         cst_check_invariants$0,
         cst_max_num_jobs_per_priority_$0,
         cst_record_backtraces$0]),
    Async_kernel_Job_queue = global_data.Async_kernel__Job_queue,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source0,
    Timing_wheel = global_data.Timing_wheel,
    Async_kernel_config = global_data.Async_kernel_config,
    Async_kernel_Types = global_data.Async_kernel__Types,
    Core_Int = global_data.Core__Int,
    Base_Exn = global_data.Base__Exn,
    Core_Sexp = global_data.Core__Sexp,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Core_List = global_data.Core__List,
    Tuple_pool = global_data.Tuple_pool,
    Core = global_data.Core,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Async_kernel_Import = global_data.Async_kernel__Import,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Deque = global_data.Core__Deque,
    Async_kernel_Job_pool = global_data.Async_kernel__Job_pool,
    Assert_failure = global_data.Assert_failure,
    Base_Field = global_data.Base__Field,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Core_Error = global_data.Core__Error,
    Async_kernel_External_job = global_data.Async_kernel__External_job,
    Core_Time_ns = global_data.Core__Time_ns,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Scheduler0 = global_data.Async_kernel__Scheduler0,
    Core_Result = global_data.Core__Result;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Scheduler1$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_scheduler1_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    events = Async_kernel_Scheduler0[1],
    set_execution_context = Async_kernel_Scheduler0[2],
    debug = Async_kernel_Debug[10],
    _aU_ = [0, 0],
    _aV_ = [0, 0],
    cst_got_uncaught_exn = "got_uncaught_exn",
    _aT_ = [0, cst_src_scheduler1_ml, 170, 40],
    _aS_ = [0, cst_src_scheduler1_ml, 171, 46],
    _aR_ = [0, cst_src_scheduler1_ml, 187, 43],
    _aQ_ = [0, cst_src_scheduler1_ml, 191, 14],
    _aO_ = [0, "t"],
    _aP_ = [0, "exn"],
    cst_Scheduler_invariant_failed = "Scheduler.invariant failed",
    _aN_ = [0, cst_src_scheduler1_ml, 153, 2],
    cst_unhandled_exception = "unhandled exception",
    _al_ = [0, cst_record_backtraces$0],
    _am_ = [0, cst_max_num_jobs_per_priority_$0],
    _an_ = [0, cst_check_invariants$0],
    _ao_ = [0, cst_yield_until_no_jobs_remain$0],
    _ap_ = [0, cst_yield$0],
    _aq_ = [0, cst_event_added_hook$0],
    _ar_ = [0, cst_job_queued_hook$0],
    _as_ = [0, cst_thread_safe_external_job_h$0],
    _at_ = [0, cst_external_jobs$0],
    _au_ = [0, cst_time_source$0],
    _av_ = [0, cst_total_cycle_time$0],
    _aw_ = [0, cst_last_cycle_num_jobs$0],
    _ax_ = [0, cst_last_cycle_time$0],
    _ay_ = [0, cst_run_every_cycle_end_state$0],
    _az_ = [0, cst_run_every_cycle_end$0],
    _aA_ = [0, cst_run_every_cycle_start_stat$0],
    _aB_ = [0, cst_run_every_cycle_start$0],
    _aC_ = [0, cst_in_cycle$0],
    _aD_ = [0, cst_cycle_start$0],
    _aE_ = [0, cst_cycle_count$0],
    _aF_ = [0, cst_uncaught_exn$0],
    _aG_ = [0, cst_current_execution_context$0],
    _aH_ = [0, cst_main_execution_context$0],
    _aI_ = [0, cst_very_low_priority_workers$0],
    _aJ_ = [0, cst_low_priority_jobs$0],
    _aK_ = [0, cst_normal_priority_jobs$0],
    _aL_ = [0, cst_job_pool$0],
    _aM_ = [0, cst_check_access$0],
    _i_ = [0, cst_src_scheduler1_ml, 51, 1645, 1669],
    _g_ = [0, cst_exec$0],
    _h_ = [0, cst_execution_context$0],
    _a_ = [0, "Not_finished"],
    _b_ = [0, "Finished"],
    cst_exec = cst_exec$0,
    cst_execution_context = cst_execution_context$0,
    cst_record_backtraces = cst_record_backtraces$0,
    cst_max_num_jobs_per_priority_ = cst_max_num_jobs_per_priority_$0,
    cst_check_invariants = cst_check_invariants$0,
    cst_yield_until_no_jobs_remain = cst_yield_until_no_jobs_remain$0,
    cst_yield = cst_yield$0,
    cst_event_added_hook = cst_event_added_hook$0,
    cst_job_queued_hook = cst_job_queued_hook$0,
    cst_thread_safe_external_job_h = cst_thread_safe_external_job_h$0,
    cst_external_jobs = cst_external_jobs$0,
    cst_time_source = cst_time_source$0,
    cst_total_cycle_time = cst_total_cycle_time$0,
    cst_last_cycle_num_jobs = cst_last_cycle_num_jobs$0,
    cst_last_cycle_time = cst_last_cycle_time$0,
    cst_run_every_cycle_end_state = cst_run_every_cycle_end_state$0,
    cst_run_every_cycle_end = cst_run_every_cycle_end$0,
    cst_run_every_cycle_start_stat = cst_run_every_cycle_start_stat$0,
    cst_run_every_cycle_start = cst_run_every_cycle_start$0,
    cst_in_cycle = cst_in_cycle$0,
    cst_cycle_start = cst_cycle_start$0,
    cst_cycle_count = cst_cycle_count$0,
    cst_uncaught_exn = cst_uncaught_exn$0,
    cst_current_execution_context = cst_current_execution_context$0,
    cst_main_execution_context = cst_main_execution_context$0,
    cst_very_low_priority_workers = cst_very_low_priority_workers$0,
    cst_low_priority_jobs = cst_low_priority_jobs$0,
    cst_normal_priority_jobs = cst_normal_priority_jobs$0,
    cst_job_pool = cst_job_pool$0,
    cst_check_access = cst_check_access$0,
    cst_Async_cannot_create_its_ra = "Async cannot create its raw scheduler",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Scheduler1 = cst_Async_kernel_Scheduler1$0;
   function create_with_cell(cell){return [0, cell];}
   function create(param){return [0, 0];}
   function create_full(a){return [0, [2, a]];}
   var Ivar = [0, create_with_cell, create, create_full];
   function create$0(param){
    var _ht_ = [0, 0, caml_call1(Ivar[2], 0)];
    return caml_call1(Async_kernel_Types[10][1], _ht_);
   }
   var Bvar = [0, create$0];
   function sexp_of_t(param){return param ? _a_ : _b_;}
   var Exec_result = [0, sexp_of_t];
   function exec(r){return r[2];}
   function execution_context(r){return r[1];}
   function _c_(r, v){return [0, r[1], v];}
   var
    _d_ = 0,
    exec$0 = [0, function(param){return 0;}, cst_exec, _d_, exec, _c_];
   function _e_(r, v){return [0, v, r[2]];}
   var
    _f_ = 0,
    execution_context$0 =
      [0,
       function(param){return 0;},
       cst_execution_context,
       _f_,
       execution_context,
       _e_];
   function make_creator(execution_context_fun, exec_fun, compile_acc){
    var
     match =
       caml_call2(execution_context_fun, execution_context$0, compile_acc),
     compile_acc$0 = match[2],
     execution_context_gen = match[1],
     match$0 = caml_call2(exec_fun, exec$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     exec_gen = match$0[1];
    return [0,
            function(acc){
             var
              execution_context = caml_call1(execution_context_gen, acc),
              exec = caml_call1(exec_gen, acc);
             return [0, execution_context, exec];
            },
            compile_acc$1];
   }
   function create$1(execution_context, exec){return [0, execution_context, exec];
   }
   function map(execution_context_fun, exec_fun){
    var _hs_ = caml_call1(exec_fun, exec$0);
    return [0, caml_call1(execution_context_fun, execution_context$0), _hs_];
   }
   function iter(execution_context_fun, exec_fun){
    caml_call1(execution_context_fun, execution_context$0);
    return caml_call1(exec_fun, exec$0);
   }
   function fold(init, execution_context_fun, exec_fun){
    return caml_call2
            (exec_fun,
             caml_call2(execution_context_fun, init, execution_context$0),
             exec$0);
   }
   function map_poly(record){
    var _hr_ = [0, caml_call1(record[1], exec$0), 0];
    return [0, caml_call1(record[1], execution_context$0), _hr_];
   }
   function for_all(execution_context_fun, exec_fun){
    var _hq_ = caml_call1(execution_context_fun, execution_context$0);
    return _hq_ ? caml_call1(exec_fun, exec$0) : _hq_;
   }
   function exists(execution_context_fun, exec_fun){
    var _hp_ = caml_call1(execution_context_fun, execution_context$0);
    return _hp_ ? _hp_ : caml_call1(exec_fun, exec$0);
   }
   function to_list(execution_context_fun, exec_fun){
    var _ho_ = [0, caml_call1(exec_fun, exec$0), 0];
    return [0, caml_call1(execution_context_fun, execution_context$0), _ho_];
   }
   function iter$0(record, execution_context_fun, exec_fun){
    caml_call3(execution_context_fun, execution_context$0, record, record[1]);
    return caml_call3(exec_fun, exec$0, record, record[2]);
   }
   function fold$0(record, init, execution_context_fun, exec_fun){
    var _hn_ = record[2];
    return caml_call4
            (exec_fun,
             caml_call4
              (execution_context_fun,
               init,
               execution_context$0,
               record,
               record[1]),
             exec$0,
             record,
             _hn_);
   }
   function for_all$0(record, execution_context_fun, exec_fun){
    var
     _hm_ =
       caml_call3
        (execution_context_fun, execution_context$0, record, record[1]);
    return _hm_ ? caml_call3(exec_fun, exec$0, record, record[2]) : _hm_;
   }
   function exists$0(record, execution_context_fun, exec_fun){
    var
     _hl_ =
       caml_call3
        (execution_context_fun, execution_context$0, record, record[1]);
    return _hl_ ? _hl_ : caml_call3(exec_fun, exec$0, record, record[2]);
   }
   function to_list$0(record, execution_context_fun, exec_fun){
    var _hk_ = [0, caml_call3(exec_fun, exec$0, record, record[2]), 0];
    return [0,
            caml_call3
             (execution_context_fun, execution_context$0, record, record[1]),
            _hk_];
   }
   function map$0(record, execution_context_fun, exec_fun){
    var _hj_ = caml_call3(exec_fun, exec$0, record, record[2]);
    return [0,
            caml_call3
             (execution_context_fun, execution_context$0, record, record[1]),
            _hj_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    Fields =
      [0,
       names,
       exec$0,
       execution_context$0,
       make_creator,
       create$1,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct];
   function sexp_of_t$0(param){
    var execution_context_002 = param[1], bnds_001 = 0;
    function _hh_(_hi_){return 0;}
    var
     arg_005 = caml_call1(Sexplib0_Sexp_conv[24], _hh_),
     bnds_001$0 = [0, [1, [0, _g_, [0, arg_005, 0]]], bnds_001],
     arg_003 =
       caml_call1(Async_kernel_Execution_context[6], execution_context_002),
     bnds_001$1 = [0, [1, [0, _h_, [0, arg_003, 0]]], bnds_001$0];
    return [1, bnds_001$1];
   }
   function invariant(t){
    function _hd_(param){
     function _hf_(_hg_){return 0;}
     var
      f = Async_kernel_Execution_context[7],
      _he_ = caml_call2(Base_Invariant[2], t, f);
     return caml_call2(Fields[7], _he_, _hf_);
    }
    return caml_call4(Base_Invariant[1], _i_, t, sexp_of_t$0, _hd_);
   }
   var
    Very_low_priority_worker =
      [0,
       Exec_result,
       exec,
       execution_context,
       Fields,
       sexp_of_t$0,
       invariant];
   function record_backtraces(r){return r[28];}
   function set_record_backtraces(r, v){r[28] = v; return 0;}
   function max_num_jobs_per_priority_per_(r){return r[27];}
   function set_max_num_jobs_per_priority_(r, v){r[27] = v; return 0;}
   function check_invariants(r){return r[26];}
   function set_check_invariants(r, v){r[26] = v; return 0;}
   function yield_until_no_jobs_remain(r){return r[25];}
   function set_yield_until_no_jobs_remain(r, v){r[25] = v; return 0;}
   function yield$0(r){return r[24];}
   function set_yield(r, v){r[24] = v; return 0;}
   function event_added_hook(r){return r[23];}
   function set_event_added_hook(r, v){r[23] = v; return 0;}
   function job_queued_hook(r){return r[22];}
   function set_job_queued_hook(r, v){r[22] = v; return 0;}
   function thread_safe_external_job_hook(r){return r[21];}
   function set_thread_safe_external_job_h(r, v){r[21] = v; return 0;}
   function external_jobs(r){return r[20];}
   function time_source(r){return r[19];}
   function set_time_source(r, v){r[19] = v; return 0;}
   function total_cycle_time(r){return r[18];}
   function set_total_cycle_time(r, v){r[18] = v; return 0;}
   function last_cycle_num_jobs(r){return r[17];}
   function set_last_cycle_num_jobs(r, v){r[17] = v; return 0;}
   function last_cycle_time(r){return r[16];}
   function set_last_cycle_time(r, v){r[16] = v; return 0;}
   function run_every_cycle_end_state(r){return r[15];}
   function run_every_cycle_end(r){return r[14];}
   function set_run_every_cycle_end(r, v){r[14] = v; return 0;}
   function run_every_cycle_start_state(r){return r[13];}
   function run_every_cycle_start(r){return r[12];}
   function set_run_every_cycle_start(r, v){r[12] = v; return 0;}
   function in_cycle(r){return r[11];}
   function set_in_cycle(r, v){r[11] = v; return 0;}
   function cycle_start(r){return r[10];}
   function set_cycle_start(r, v){r[10] = v; return 0;}
   function cycle_count(r){return r[9];}
   function set_cycle_count(r, v){r[9] = v; return 0;}
   function uncaught_exn_unwrapped(r){return r[8];}
   function set_uncaught_exn(r, v){r[8] = v; return 0;}
   function current_execution_context(r){return r[7];}
   function set_current_execution_context(r, v){r[7] = v; return 0;}
   function main_execution_context(r){return r[6];}
   function set_main_execution_context(r, v){r[6] = v; return 0;}
   function very_low_priority_workers(r){return r[5];}
   function low_priority_jobs(r){return r[4];}
   function normal_priority_jobs(r){return r[3];}
   function job_pool(r){return r[2];}
   function set_job_pool(r, v){r[2] = v; return 0;}
   function check_access(r){return r[1];}
   function set_check_access(r, v){r[1] = v; return 0;}
   function _j_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            v];
   }
   var
    _k_ = [0, set_record_backtraces],
    record_backtraces$0 =
      [0,
       function(param){return 0;},
       cst_record_backtraces,
       _k_,
       record_backtraces,
       _j_];
   function _l_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            v,
            r[28]];
   }
   var
    _m_ = [0, set_max_num_jobs_per_priority_],
    max_num_jobs_per_priority_per_$0 =
      [0,
       function(param){return 0;},
       cst_max_num_jobs_per_priority_,
       _m_,
       max_num_jobs_per_priority_per_,
       _l_];
   function _n_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            v,
            r[27],
            r[28]];
   }
   var
    _o_ = [0, set_check_invariants],
    check_invariants$0 =
      [0,
       function(param){return 0;},
       cst_check_invariants,
       _o_,
       check_invariants,
       _n_];
   function _p_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            v,
            r[26],
            r[27],
            r[28]];
   }
   var
    _q_ = [0, set_yield_until_no_jobs_remain],
    yield_until_no_jobs_remain$0 =
      [0,
       function(param){return 0;},
       cst_yield_until_no_jobs_remain,
       _q_,
       yield_until_no_jobs_remain,
       _p_];
   function _r_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            v,
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _s_ = [0, set_yield],
    yield$1 = [0, function(param){return 0;}, cst_yield, _s_, yield$0, _r_];
   function _t_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            v,
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _u_ = [0, set_event_added_hook],
    event_added_hook$0 =
      [0,
       function(param){return 0;},
       cst_event_added_hook,
       _u_,
       event_added_hook,
       _t_];
   function _v_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            v,
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _w_ = [0, set_job_queued_hook],
    job_queued_hook$0 =
      [0,
       function(param){return 0;},
       cst_job_queued_hook,
       _w_,
       job_queued_hook,
       _v_];
   function _x_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            v,
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _y_ = [0, set_thread_safe_external_job_h],
    thread_safe_external_job_hook$0 =
      [0,
       function(param){return 0;},
       cst_thread_safe_external_job_h,
       _y_,
       thread_safe_external_job_hook,
       _x_];
   function _z_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            v,
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _A_ = 0,
    external_jobs$0 =
      [0,
       function(param){return 0;},
       cst_external_jobs,
       _A_,
       external_jobs,
       _z_];
   function _B_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _C_ = [0, set_time_source],
    time_source$0 =
      [0, function(param){return 0;}, cst_time_source, _C_, time_source, _B_];
   function _D_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _E_ = [0, set_total_cycle_time],
    total_cycle_time$0 =
      [0,
       function(param){return 0;},
       cst_total_cycle_time,
       _E_,
       total_cycle_time,
       _D_];
   function _F_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _G_ = [0, set_last_cycle_num_jobs],
    last_cycle_num_jobs$0 =
      [0,
       function(param){return 0;},
       cst_last_cycle_num_jobs,
       _G_,
       last_cycle_num_jobs,
       _F_];
   function _H_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _I_ = [0, set_last_cycle_time],
    last_cycle_time$0 =
      [0,
       function(param){return 0;},
       cst_last_cycle_time,
       _I_,
       last_cycle_time,
       _H_];
   function _J_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _K_ = 0,
    run_every_cycle_end_state$0 =
      [0,
       function(param){return 0;},
       cst_run_every_cycle_end_state,
       _K_,
       run_every_cycle_end_state,
       _J_];
   function _L_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _M_ = [0, set_run_every_cycle_end],
    run_every_cycle_end$0 =
      [0,
       function(param){return 0;},
       cst_run_every_cycle_end,
       _M_,
       run_every_cycle_end,
       _L_];
   function _N_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _O_ = 0,
    run_every_cycle_start_state$0 =
      [0,
       function(param){return 0;},
       cst_run_every_cycle_start_stat,
       _O_,
       run_every_cycle_start_state,
       _N_];
   function _P_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _Q_ = [0, set_run_every_cycle_start],
    run_every_cycle_start$0 =
      [0,
       function(param){return 0;},
       cst_run_every_cycle_start,
       _Q_,
       run_every_cycle_start,
       _P_];
   function _R_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _S_ = [0, set_in_cycle],
    in_cycle$0 =
      [0, function(param){return 0;}, cst_in_cycle, _S_, in_cycle, _R_];
   function _T_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _U_ = [0, set_cycle_start],
    cycle_start$0 =
      [0, function(param){return 0;}, cst_cycle_start, _U_, cycle_start, _T_];
   function _V_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _W_ = [0, set_cycle_count],
    cycle_count$0 =
      [0, function(param){return 0;}, cst_cycle_count, _W_, cycle_count, _V_];
   function _X_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _Y_ = [0, set_uncaught_exn],
    uncaught_exn =
      [0,
       function(param){return 0;},
       cst_uncaught_exn,
       _Y_,
       uncaught_exn_unwrapped,
       _X_];
   function _Z_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    ___ = [0, set_current_execution_context],
    current_execution_context$0 =
      [0,
       function(param){return 0;},
       cst_current_execution_context,
       ___,
       current_execution_context,
       _Z_];
   function _$_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _aa_ = [0, set_main_execution_context],
    main_execution_context$0 =
      [0,
       function(param){return 0;},
       cst_main_execution_context,
       _aa_,
       main_execution_context,
       _$_];
   function _ab_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _ac_ = 0,
    very_low_priority_workers$0 =
      [0,
       function(param){return 0;},
       cst_very_low_priority_workers,
       _ac_,
       very_low_priority_workers,
       _ab_];
   function _ad_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _ae_ = 0,
    low_priority_jobs$0 =
      [0,
       function(param){return 0;},
       cst_low_priority_jobs,
       _ae_,
       low_priority_jobs,
       _ad_];
   function _af_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _ag_ = 0,
    normal_priority_jobs$0 =
      [0,
       function(param){return 0;},
       cst_normal_priority_jobs,
       _ag_,
       normal_priority_jobs,
       _af_];
   function _ah_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _ai_ = [0, set_job_pool],
    job_pool$0 =
      [0, function(param){return 0;}, cst_job_pool, _ai_, job_pool, _ah_];
   function _aj_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _ak_ = [0, set_check_access],
    check_access$0 =
      [0,
       function(param){return 0;},
       cst_check_access,
       _ak_,
       check_access,
       _aj_];
   function make_creator$0
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun,
    compile_acc){
    var
     match = caml_call2(check_access_fun, check_access$0, compile_acc),
     compile_acc$0 = match[2],
     check_access_gen = match[1],
     match$0 = caml_call2(job_pool_fun, job_pool$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     job_pool_gen = match$0[1],
     match$1 =
       caml_call2
        (normal_priority_jobs_fun, normal_priority_jobs$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     normal_priority_jobs_gen = match$1[1],
     match$2 =
       caml_call2(low_priority_jobs_fun, low_priority_jobs$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     low_priority_jobs_gen = match$2[1],
     match$3 =
       caml_call2
        (very_low_priority_workers_fun,
         very_low_priority_workers$0,
         compile_acc$3),
     compile_acc$4 = match$3[2],
     very_low_priority_workers_gen = match$3[1],
     match$4 =
       caml_call2
        (main_execution_context_fun, main_execution_context$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     main_execution_context_gen = match$4[1],
     match$5 =
       caml_call2
        (current_execution_context_fun,
         current_execution_context$0,
         compile_acc$5),
     compile_acc$6 = match$5[2],
     current_execution_context_gen = match$5[1],
     match$6 = caml_call2(uncaught_exn_fun, uncaught_exn, compile_acc$6),
     compile_acc$7 = match$6[2],
     uncaught_exn_gen = match$6[1],
     match$7 = caml_call2(cycle_count_fun, cycle_count$0, compile_acc$7),
     compile_acc$8 = match$7[2],
     cycle_count_gen = match$7[1],
     match$8 = caml_call2(cycle_start_fun, cycle_start$0, compile_acc$8),
     compile_acc$9 = match$8[2],
     cycle_start_gen = match$8[1],
     match$9 = caml_call2(in_cycle_fun, in_cycle$0, compile_acc$9),
     compile_acc$10 = match$9[2],
     in_cycle_gen = match$9[1],
     match$10 =
       caml_call2
        (run_every_cycle_start_fun, run_every_cycle_start$0, compile_acc$10),
     compile_acc$11 = match$10[2],
     run_every_cycle_start_gen = match$10[1],
     match$11 =
       caml_call2
        (run_every_cycle_start_state_fu,
         run_every_cycle_start_state$0,
         compile_acc$11),
     compile_acc$12 = match$11[2],
     run_every_cycle_start_state_ge = match$11[1],
     match$12 =
       caml_call2
        (run_every_cycle_end_fun, run_every_cycle_end$0, compile_acc$12),
     compile_acc$13 = match$12[2],
     run_every_cycle_end_gen = match$12[1],
     match$13 =
       caml_call2
        (run_every_cycle_end_state_fun,
         run_every_cycle_end_state$0,
         compile_acc$13),
     compile_acc$14 = match$13[2],
     run_every_cycle_end_state_gen = match$13[1],
     match$14 =
       caml_call2(last_cycle_time_fun, last_cycle_time$0, compile_acc$14),
     compile_acc$15 = match$14[2],
     last_cycle_time_gen = match$14[1],
     match$15 =
       caml_call2
        (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, compile_acc$15),
     compile_acc$16 = match$15[2],
     last_cycle_num_jobs_gen = match$15[1],
     match$16 =
       caml_call2(total_cycle_time_fun, total_cycle_time$0, compile_acc$16),
     compile_acc$17 = match$16[2],
     total_cycle_time_gen = match$16[1],
     match$17 = caml_call2(time_source_fun, time_source$0, compile_acc$17),
     compile_acc$18 = match$17[2],
     time_source_gen = match$17[1],
     match$18 = caml_call2(external_jobs_fun, external_jobs$0, compile_acc$18),
     compile_acc$19 = match$18[2],
     external_jobs_gen = match$18[1],
     match$19 =
       caml_call2
        (thread_safe_external_job_hook_,
         thread_safe_external_job_hook$0,
         compile_acc$19),
     compile_acc$20 = match$19[2],
     thread_safe_external_job_hook_$0 = match$19[1],
     match$20 =
       caml_call2(job_queued_hook_fun, job_queued_hook$0, compile_acc$20),
     compile_acc$21 = match$20[2],
     job_queued_hook_gen = match$20[1],
     match$21 =
       caml_call2(event_added_hook_fun, event_added_hook$0, compile_acc$21),
     compile_acc$22 = match$21[2],
     event_added_hook_gen = match$21[1],
     match$22 = caml_call2(yield_fun, yield$1, compile_acc$22),
     compile_acc$23 = match$22[2],
     yield_gen = match$22[1],
     match$23 =
       caml_call2
        (yield_until_no_jobs_remain_fun,
         yield_until_no_jobs_remain$0,
         compile_acc$23),
     compile_acc$24 = match$23[2],
     yield_until_no_jobs_remain_gen = match$23[1],
     match$24 =
       caml_call2(check_invariants_fun, check_invariants$0, compile_acc$24),
     compile_acc$25 = match$24[2],
     check_invariants_gen = match$24[1],
     match$25 =
       caml_call2
        (max_num_jobs_per_priority_per_,
         max_num_jobs_per_priority_per_$0,
         compile_acc$25),
     compile_acc$26 = match$25[2],
     max_num_jobs_per_priority_per_$1 = match$25[1],
     match$26 =
       caml_call2(record_backtraces_fun, record_backtraces$0, compile_acc$26),
     compile_acc$27 = match$26[2],
     record_backtraces_gen = match$26[1];
    return [0,
            function(acc){
             var
              check_access = caml_call1(check_access_gen, acc),
              job_pool = caml_call1(job_pool_gen, acc),
              normal_priority_jobs = caml_call1(normal_priority_jobs_gen, acc),
              low_priority_jobs = caml_call1(low_priority_jobs_gen, acc),
              very_low_priority_workers =
                caml_call1(very_low_priority_workers_gen, acc),
              main_execution_context =
                caml_call1(main_execution_context_gen, acc),
              current_execution_context =
                caml_call1(current_execution_context_gen, acc),
              uncaught_exn = caml_call1(uncaught_exn_gen, acc),
              cycle_count = caml_call1(cycle_count_gen, acc),
              cycle_start = caml_call1(cycle_start_gen, acc),
              in_cycle = caml_call1(in_cycle_gen, acc),
              run_every_cycle_start =
                caml_call1(run_every_cycle_start_gen, acc),
              run_every_cycle_start_state =
                caml_call1(run_every_cycle_start_state_ge, acc),
              run_every_cycle_end = caml_call1(run_every_cycle_end_gen, acc),
              run_every_cycle_end_state =
                caml_call1(run_every_cycle_end_state_gen, acc),
              last_cycle_time = caml_call1(last_cycle_time_gen, acc),
              last_cycle_num_jobs = caml_call1(last_cycle_num_jobs_gen, acc),
              total_cycle_time = caml_call1(total_cycle_time_gen, acc),
              time_source = caml_call1(time_source_gen, acc),
              external_jobs = caml_call1(external_jobs_gen, acc),
              thread_safe_external_job_hook =
                caml_call1(thread_safe_external_job_hook_$0, acc),
              job_queued_hook = caml_call1(job_queued_hook_gen, acc),
              event_added_hook = caml_call1(event_added_hook_gen, acc),
              yield$0 = caml_call1(yield_gen, acc),
              yield_until_no_jobs_remain =
                caml_call1(yield_until_no_jobs_remain_gen, acc),
              check_invariants = caml_call1(check_invariants_gen, acc),
              max_num_jobs_per_priority_per_ =
                caml_call1(max_num_jobs_per_priority_per_$1, acc),
              record_backtraces = caml_call1(record_backtraces_gen, acc);
             return [0,
                     check_access,
                     job_pool,
                     normal_priority_jobs,
                     low_priority_jobs,
                     very_low_priority_workers,
                     main_execution_context,
                     current_execution_context,
                     uncaught_exn,
                     cycle_count,
                     cycle_start,
                     in_cycle,
                     run_every_cycle_start,
                     run_every_cycle_start_state,
                     run_every_cycle_end,
                     run_every_cycle_end_state,
                     last_cycle_time,
                     last_cycle_num_jobs,
                     total_cycle_time,
                     time_source,
                     external_jobs,
                     thread_safe_external_job_hook,
                     job_queued_hook,
                     event_added_hook,
                     yield$0,
                     yield_until_no_jobs_remain,
                     check_invariants,
                     max_num_jobs_per_priority_per_,
                     record_backtraces];
            },
            compile_acc$27];
   }
   function create$2
   (check_access,
    job_pool,
    normal_priority_jobs,
    low_priority_jobs,
    very_low_priority_workers,
    main_execution_context,
    current_execution_context,
    uncaught_exn,
    cycle_count,
    cycle_start,
    in_cycle,
    run_every_cycle_start,
    run_every_cycle_start_state,
    run_every_cycle_end,
    run_every_cycle_end_state,
    last_cycle_time,
    last_cycle_num_jobs,
    total_cycle_time,
    time_source,
    external_jobs,
    thread_safe_external_job_hook,
    job_queued_hook,
    event_added_hook,
    yield$0,
    yield_until_no_jobs_remain,
    check_invariants,
    max_num_jobs_per_priority_per_,
    record_backtraces){
    return [0,
            check_access,
            job_pool,
            normal_priority_jobs,
            low_priority_jobs,
            very_low_priority_workers,
            main_execution_context,
            current_execution_context,
            uncaught_exn,
            cycle_count,
            cycle_start,
            in_cycle,
            run_every_cycle_start,
            run_every_cycle_start_state,
            run_every_cycle_end,
            run_every_cycle_end_state,
            last_cycle_time,
            last_cycle_num_jobs,
            total_cycle_time,
            time_source,
            external_jobs,
            thread_safe_external_job_hook,
            job_queued_hook,
            event_added_hook,
            yield$0,
            yield_until_no_jobs_remain,
            check_invariants,
            max_num_jobs_per_priority_per_,
            record_backtraces];
   }
   function map$1
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _gO_ = caml_call1(record_backtraces_fun, record_backtraces$0),
     _gP_ =
       caml_call1
        (max_num_jobs_per_priority_per_, max_num_jobs_per_priority_per_$0),
     _gQ_ = caml_call1(check_invariants_fun, check_invariants$0),
     _gR_ =
       caml_call1
        (yield_until_no_jobs_remain_fun, yield_until_no_jobs_remain$0),
     _gS_ = caml_call1(yield_fun, yield$1),
     _gT_ = caml_call1(event_added_hook_fun, event_added_hook$0),
     _gU_ = caml_call1(job_queued_hook_fun, job_queued_hook$0),
     _gV_ =
       caml_call1
        (thread_safe_external_job_hook_, thread_safe_external_job_hook$0),
     _gW_ = caml_call1(external_jobs_fun, external_jobs$0),
     _gX_ = caml_call1(time_source_fun, time_source$0),
     _gY_ = caml_call1(total_cycle_time_fun, total_cycle_time$0),
     _gZ_ = caml_call1(last_cycle_num_jobs_fun, last_cycle_num_jobs$0),
     _g0_ = caml_call1(last_cycle_time_fun, last_cycle_time$0),
     _g1_ =
       caml_call1(run_every_cycle_end_state_fun, run_every_cycle_end_state$0),
     _g2_ = caml_call1(run_every_cycle_end_fun, run_every_cycle_end$0),
     _g3_ =
       caml_call1
        (run_every_cycle_start_state_fu, run_every_cycle_start_state$0),
     _g4_ = caml_call1(run_every_cycle_start_fun, run_every_cycle_start$0),
     _g5_ = caml_call1(in_cycle_fun, in_cycle$0),
     _g6_ = caml_call1(cycle_start_fun, cycle_start$0),
     _g7_ = caml_call1(cycle_count_fun, cycle_count$0),
     _g8_ = caml_call1(uncaught_exn_fun, uncaught_exn),
     _g9_ =
       caml_call1(current_execution_context_fun, current_execution_context$0),
     _g__ = caml_call1(main_execution_context_fun, main_execution_context$0),
     _g$_ =
       caml_call1(very_low_priority_workers_fun, very_low_priority_workers$0),
     _ha_ = caml_call1(low_priority_jobs_fun, low_priority_jobs$0),
     _hb_ = caml_call1(normal_priority_jobs_fun, normal_priority_jobs$0),
     _hc_ = caml_call1(job_pool_fun, job_pool$0);
    return [0,
            caml_call1(check_access_fun, check_access$0),
            _hc_,
            _hb_,
            _ha_,
            _g$_,
            _g__,
            _g9_,
            _g8_,
            _g7_,
            _g6_,
            _g5_,
            _g4_,
            _g3_,
            _g2_,
            _g1_,
            _g0_,
            _gZ_,
            _gY_,
            _gX_,
            _gW_,
            _gV_,
            _gU_,
            _gT_,
            _gS_,
            _gR_,
            _gQ_,
            _gP_,
            _gO_];
   }
   function iter$1
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    caml_call1(check_access_fun, check_access$0);
    caml_call1(job_pool_fun, job_pool$0);
    caml_call1(normal_priority_jobs_fun, normal_priority_jobs$0);
    caml_call1(low_priority_jobs_fun, low_priority_jobs$0);
    caml_call1(very_low_priority_workers_fun, very_low_priority_workers$0);
    caml_call1(main_execution_context_fun, main_execution_context$0);
    caml_call1(current_execution_context_fun, current_execution_context$0);
    caml_call1(uncaught_exn_fun, uncaught_exn);
    caml_call1(cycle_count_fun, cycle_count$0);
    caml_call1(cycle_start_fun, cycle_start$0);
    caml_call1(in_cycle_fun, in_cycle$0);
    caml_call1(run_every_cycle_start_fun, run_every_cycle_start$0);
    caml_call1(run_every_cycle_start_state_fu, run_every_cycle_start_state$0);
    caml_call1(run_every_cycle_end_fun, run_every_cycle_end$0);
    caml_call1(run_every_cycle_end_state_fun, run_every_cycle_end_state$0);
    caml_call1(last_cycle_time_fun, last_cycle_time$0);
    caml_call1(last_cycle_num_jobs_fun, last_cycle_num_jobs$0);
    caml_call1(total_cycle_time_fun, total_cycle_time$0);
    caml_call1(time_source_fun, time_source$0);
    caml_call1(external_jobs_fun, external_jobs$0);
    caml_call1
     (thread_safe_external_job_hook_, thread_safe_external_job_hook$0);
    caml_call1(job_queued_hook_fun, job_queued_hook$0);
    caml_call1(event_added_hook_fun, event_added_hook$0);
    caml_call1(yield_fun, yield$1);
    caml_call1(yield_until_no_jobs_remain_fun, yield_until_no_jobs_remain$0);
    caml_call1(check_invariants_fun, check_invariants$0);
    caml_call1
     (max_num_jobs_per_priority_per_, max_num_jobs_per_priority_per_$0);
    return caml_call1(record_backtraces_fun, record_backtraces$0);
   }
   function fold$1
   (init,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    return caml_call2
            (record_backtraces_fun,
             caml_call2
              (max_num_jobs_per_priority_per_,
               caml_call2
                (check_invariants_fun,
                 caml_call2
                  (yield_until_no_jobs_remain_fun,
                   caml_call2
                    (yield_fun,
                     caml_call2
                      (event_added_hook_fun,
                       caml_call2
                        (job_queued_hook_fun,
                         caml_call2
                          (thread_safe_external_job_hook_,
                           caml_call2
                            (external_jobs_fun,
                             caml_call2
                              (time_source_fun,
                               caml_call2
                                (total_cycle_time_fun,
                                 caml_call2
                                  (last_cycle_num_jobs_fun,
                                   caml_call2
                                    (last_cycle_time_fun,
                                     caml_call2
                                      (run_every_cycle_end_state_fun,
                                       caml_call2
                                        (run_every_cycle_end_fun,
                                         caml_call2
                                          (run_every_cycle_start_state_fu,
                                           caml_call2
                                            (run_every_cycle_start_fun,
                                             caml_call2
                                              (in_cycle_fun,
                                               caml_call2
                                                (cycle_start_fun,
                                                 caml_call2
                                                  (cycle_count_fun,
                                                   caml_call2
                                                    (uncaught_exn_fun,
                                                     caml_call2
                                                      (current_execution_context_fun,
                                                       caml_call2
                                                        (main_execution_context_fun,
                                                         caml_call2
                                                          (very_low_priority_workers_fun,
                                                           caml_call2
                                                            (low_priority_jobs_fun,
                                                             caml_call2
                                                              (normal_priority_jobs_fun,
                                                               caml_call2
                                                                (job_pool_fun,
                                                                 caml_call2(check_access_fun, init, check_access$0),
                                                                 job_pool$0),
                                                               normal_priority_jobs$0),
                                                             low_priority_jobs$0),
                                                           very_low_priority_workers$0),
                                                         main_execution_context$0),
                                                       current_execution_context$0),
                                                     uncaught_exn),
                                                   cycle_count$0),
                                                 cycle_start$0),
                                               in_cycle$0),
                                             run_every_cycle_start$0),
                                           run_every_cycle_start_state$0),
                                         run_every_cycle_end$0),
                                       run_every_cycle_end_state$0),
                                     last_cycle_time$0),
                                   last_cycle_num_jobs$0),
                                 total_cycle_time$0),
                               time_source$0),
                             external_jobs$0),
                           thread_safe_external_job_hook$0),
                         job_queued_hook$0),
                       event_added_hook$0),
                     yield$1),
                   yield_until_no_jobs_remain$0),
                 check_invariants$0),
               max_num_jobs_per_priority_per_$0),
             record_backtraces$0);
   }
   function map_poly$0(record){
    var
     _gn_ = [0, caml_call1(record[1], record_backtraces$0), 0],
     _go_ = [0, caml_call1(record[1], max_num_jobs_per_priority_per_$0), _gn_],
     _gp_ = [0, caml_call1(record[1], check_invariants$0), _go_],
     _gq_ = [0, caml_call1(record[1], yield_until_no_jobs_remain$0), _gp_],
     _gr_ = [0, caml_call1(record[1], yield$1), _gq_],
     _gs_ = [0, caml_call1(record[1], event_added_hook$0), _gr_],
     _gt_ = [0, caml_call1(record[1], job_queued_hook$0), _gs_],
     _gu_ = [0, caml_call1(record[1], thread_safe_external_job_hook$0), _gt_],
     _gv_ = [0, caml_call1(record[1], external_jobs$0), _gu_],
     _gw_ = [0, caml_call1(record[1], time_source$0), _gv_],
     _gx_ = [0, caml_call1(record[1], total_cycle_time$0), _gw_],
     _gy_ = [0, caml_call1(record[1], last_cycle_num_jobs$0), _gx_],
     _gz_ = [0, caml_call1(record[1], last_cycle_time$0), _gy_],
     _gA_ = [0, caml_call1(record[1], run_every_cycle_end_state$0), _gz_],
     _gB_ = [0, caml_call1(record[1], run_every_cycle_end$0), _gA_],
     _gC_ = [0, caml_call1(record[1], run_every_cycle_start_state$0), _gB_],
     _gD_ = [0, caml_call1(record[1], run_every_cycle_start$0), _gC_],
     _gE_ = [0, caml_call1(record[1], in_cycle$0), _gD_],
     _gF_ = [0, caml_call1(record[1], cycle_start$0), _gE_],
     _gG_ = [0, caml_call1(record[1], cycle_count$0), _gF_],
     _gH_ = [0, caml_call1(record[1], uncaught_exn), _gG_],
     _gI_ = [0, caml_call1(record[1], current_execution_context$0), _gH_],
     _gJ_ = [0, caml_call1(record[1], main_execution_context$0), _gI_],
     _gK_ = [0, caml_call1(record[1], very_low_priority_workers$0), _gJ_],
     _gL_ = [0, caml_call1(record[1], low_priority_jobs$0), _gK_],
     _gM_ = [0, caml_call1(record[1], normal_priority_jobs$0), _gL_],
     _gN_ = [0, caml_call1(record[1], job_pool$0), _gM_];
    return [0, caml_call1(record[1], check_access$0), _gN_];
   }
   function for_all$1
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _fY_ = caml_call1(check_access_fun, check_access$0),
     _fZ_ = _fY_ ? caml_call1(job_pool_fun, job_pool$0) : _fY_,
     _f0_ =
       _fZ_
        ? caml_call1(normal_priority_jobs_fun, normal_priority_jobs$0)
        : _fZ_,
     _f1_ =
       _f0_ ? caml_call1(low_priority_jobs_fun, low_priority_jobs$0) : _f0_,
     _f2_ =
       _f1_
        ? caml_call1
          (very_low_priority_workers_fun, very_low_priority_workers$0)
        : _f1_,
     _f3_ =
       _f2_
        ? caml_call1(main_execution_context_fun, main_execution_context$0)
        : _f2_,
     _f4_ =
       _f3_
        ? caml_call1
          (current_execution_context_fun, current_execution_context$0)
        : _f3_,
     _f5_ = _f4_ ? caml_call1(uncaught_exn_fun, uncaught_exn) : _f4_,
     _f6_ = _f5_ ? caml_call1(cycle_count_fun, cycle_count$0) : _f5_,
     _f7_ = _f6_ ? caml_call1(cycle_start_fun, cycle_start$0) : _f6_,
     _f8_ = _f7_ ? caml_call1(in_cycle_fun, in_cycle$0) : _f7_,
     _f9_ =
       _f8_
        ? caml_call1(run_every_cycle_start_fun, run_every_cycle_start$0)
        : _f8_,
     _f__ =
       _f9_
        ? caml_call1
          (run_every_cycle_start_state_fu, run_every_cycle_start_state$0)
        : _f9_,
     _f$_ =
       _f__
        ? caml_call1(run_every_cycle_end_fun, run_every_cycle_end$0)
        : _f__,
     _ga_ =
       _f$_
        ? caml_call1
          (run_every_cycle_end_state_fun, run_every_cycle_end_state$0)
        : _f$_,
     _gb_ = _ga_ ? caml_call1(last_cycle_time_fun, last_cycle_time$0) : _ga_,
     _gc_ =
       _gb_
        ? caml_call1(last_cycle_num_jobs_fun, last_cycle_num_jobs$0)
        : _gb_,
     _gd_ = _gc_ ? caml_call1(total_cycle_time_fun, total_cycle_time$0) : _gc_,
     _ge_ = _gd_ ? caml_call1(time_source_fun, time_source$0) : _gd_,
     _gf_ = _ge_ ? caml_call1(external_jobs_fun, external_jobs$0) : _ge_,
     _gg_ =
       _gf_
        ? caml_call1
          (thread_safe_external_job_hook_, thread_safe_external_job_hook$0)
        : _gf_,
     _gh_ = _gg_ ? caml_call1(job_queued_hook_fun, job_queued_hook$0) : _gg_,
     _gi_ = _gh_ ? caml_call1(event_added_hook_fun, event_added_hook$0) : _gh_,
     _gj_ = _gi_ ? caml_call1(yield_fun, yield$1) : _gi_,
     _gk_ =
       _gj_
        ? caml_call1
          (yield_until_no_jobs_remain_fun, yield_until_no_jobs_remain$0)
        : _gj_,
     _gl_ = _gk_ ? caml_call1(check_invariants_fun, check_invariants$0) : _gk_,
     _gm_ =
       _gl_
        ? caml_call1
          (max_num_jobs_per_priority_per_, max_num_jobs_per_priority_per_$0)
        : _gl_;
    return _gm_
            ? caml_call1(record_backtraces_fun, record_backtraces$0)
            : _gm_;
   }
   function exists$1
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _fX_ = caml_call1(check_access_fun, check_access$0),
     _fx_ = _fX_ || caml_call1(job_pool_fun, job_pool$0),
     _fy_ =
       _fx_ || caml_call1(normal_priority_jobs_fun, normal_priority_jobs$0),
     _fz_ = _fy_ || caml_call1(low_priority_jobs_fun, low_priority_jobs$0),
     _fA_ =
       _fz_
       ||
        caml_call1(very_low_priority_workers_fun, very_low_priority_workers$0),
     _fB_ =
       _fA_
       || caml_call1(main_execution_context_fun, main_execution_context$0),
     _fC_ =
       _fB_
       ||
        caml_call1(current_execution_context_fun, current_execution_context$0),
     _fD_ = _fC_ || caml_call1(uncaught_exn_fun, uncaught_exn),
     _fE_ = _fD_ || caml_call1(cycle_count_fun, cycle_count$0),
     _fF_ = _fE_ || caml_call1(cycle_start_fun, cycle_start$0),
     _fG_ = _fF_ || caml_call1(in_cycle_fun, in_cycle$0),
     _fH_ =
       _fG_ || caml_call1(run_every_cycle_start_fun, run_every_cycle_start$0),
     _fI_ =
       _fH_
       ||
        caml_call1
         (run_every_cycle_start_state_fu, run_every_cycle_start_state$0),
     _fJ_ = _fI_ || caml_call1(run_every_cycle_end_fun, run_every_cycle_end$0),
     _fK_ =
       _fJ_
       ||
        caml_call1(run_every_cycle_end_state_fun, run_every_cycle_end_state$0),
     _fL_ = _fK_ || caml_call1(last_cycle_time_fun, last_cycle_time$0),
     _fM_ = _fL_ || caml_call1(last_cycle_num_jobs_fun, last_cycle_num_jobs$0),
     _fN_ = _fM_ || caml_call1(total_cycle_time_fun, total_cycle_time$0),
     _fO_ = _fN_ || caml_call1(time_source_fun, time_source$0),
     _fP_ = _fO_ || caml_call1(external_jobs_fun, external_jobs$0),
     _fQ_ =
       _fP_
       ||
        caml_call1
         (thread_safe_external_job_hook_, thread_safe_external_job_hook$0),
     _fR_ = _fQ_ || caml_call1(job_queued_hook_fun, job_queued_hook$0),
     _fS_ = _fR_ || caml_call1(event_added_hook_fun, event_added_hook$0),
     _fT_ = _fS_ || caml_call1(yield_fun, yield$1),
     _fU_ =
       _fT_
       ||
        caml_call1
         (yield_until_no_jobs_remain_fun, yield_until_no_jobs_remain$0),
     _fV_ = _fU_ || caml_call1(check_invariants_fun, check_invariants$0),
     _fW_ =
       _fV_
       ||
        caml_call1
         (max_num_jobs_per_priority_per_, max_num_jobs_per_priority_per_$0);
    return _fW_
            ? _fW_
            : caml_call1(record_backtraces_fun, record_backtraces$0);
   }
   function to_list$1
   (check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _e8_ = [0, caml_call1(record_backtraces_fun, record_backtraces$0), 0],
     _e9_ =
       [0,
        caml_call1
         (max_num_jobs_per_priority_per_, max_num_jobs_per_priority_per_$0),
        _e8_],
     _e__ = [0, caml_call1(check_invariants_fun, check_invariants$0), _e9_],
     _e$_ =
       [0,
        caml_call1
         (yield_until_no_jobs_remain_fun, yield_until_no_jobs_remain$0),
        _e__],
     _fa_ = [0, caml_call1(yield_fun, yield$1), _e$_],
     _fb_ = [0, caml_call1(event_added_hook_fun, event_added_hook$0), _fa_],
     _fc_ = [0, caml_call1(job_queued_hook_fun, job_queued_hook$0), _fb_],
     _fd_ =
       [0,
        caml_call1
         (thread_safe_external_job_hook_, thread_safe_external_job_hook$0),
        _fc_],
     _fe_ = [0, caml_call1(external_jobs_fun, external_jobs$0), _fd_],
     _ff_ = [0, caml_call1(time_source_fun, time_source$0), _fe_],
     _fg_ = [0, caml_call1(total_cycle_time_fun, total_cycle_time$0), _ff_],
     _fh_ =
       [0, caml_call1(last_cycle_num_jobs_fun, last_cycle_num_jobs$0), _fg_],
     _fi_ = [0, caml_call1(last_cycle_time_fun, last_cycle_time$0), _fh_],
     _fj_ =
       [0,
        caml_call1(run_every_cycle_end_state_fun, run_every_cycle_end_state$0),
        _fi_],
     _fk_ =
       [0, caml_call1(run_every_cycle_end_fun, run_every_cycle_end$0), _fj_],
     _fl_ =
       [0,
        caml_call1
         (run_every_cycle_start_state_fu, run_every_cycle_start_state$0),
        _fk_],
     _fm_ =
       [0,
        caml_call1(run_every_cycle_start_fun, run_every_cycle_start$0),
        _fl_],
     _fn_ = [0, caml_call1(in_cycle_fun, in_cycle$0), _fm_],
     _fo_ = [0, caml_call1(cycle_start_fun, cycle_start$0), _fn_],
     _fp_ = [0, caml_call1(cycle_count_fun, cycle_count$0), _fo_],
     _fq_ = [0, caml_call1(uncaught_exn_fun, uncaught_exn), _fp_],
     _fr_ =
       [0,
        caml_call1(current_execution_context_fun, current_execution_context$0),
        _fq_],
     _fs_ =
       [0,
        caml_call1(main_execution_context_fun, main_execution_context$0),
        _fr_],
     _ft_ =
       [0,
        caml_call1(very_low_priority_workers_fun, very_low_priority_workers$0),
        _fs_],
     _fu_ = [0, caml_call1(low_priority_jobs_fun, low_priority_jobs$0), _ft_],
     _fv_ =
       [0, caml_call1(normal_priority_jobs_fun, normal_priority_jobs$0), _fu_],
     _fw_ = [0, caml_call1(job_pool_fun, job_pool$0), _fv_];
    return [0, caml_call1(check_access_fun, check_access$0), _fw_];
   }
   function iter$2
   (record,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    caml_call3(check_access_fun, check_access$0, record, record[1]);
    caml_call3(job_pool_fun, job_pool$0, record, record[2]);
    caml_call3
     (normal_priority_jobs_fun, normal_priority_jobs$0, record, record[3]);
    caml_call3(low_priority_jobs_fun, low_priority_jobs$0, record, record[4]);
    caml_call3
     (very_low_priority_workers_fun,
      very_low_priority_workers$0,
      record,
      record[5]);
    caml_call3
     (main_execution_context_fun, main_execution_context$0, record, record[6]);
    caml_call3
     (current_execution_context_fun,
      current_execution_context$0,
      record,
      record[7]);
    caml_call3(uncaught_exn_fun, uncaught_exn, record, record[8]);
    caml_call3(cycle_count_fun, cycle_count$0, record, record[9]);
    caml_call3(cycle_start_fun, cycle_start$0, record, record[10]);
    caml_call3(in_cycle_fun, in_cycle$0, record, record[11]);
    caml_call3
     (run_every_cycle_start_fun, run_every_cycle_start$0, record, record[12]);
    caml_call3
     (run_every_cycle_start_state_fu,
      run_every_cycle_start_state$0,
      record,
      record[13]);
    caml_call3
     (run_every_cycle_end_fun, run_every_cycle_end$0, record, record[14]);
    caml_call3
     (run_every_cycle_end_state_fun,
      run_every_cycle_end_state$0,
      record,
      record[15]);
    caml_call3(last_cycle_time_fun, last_cycle_time$0, record, record[16]);
    caml_call3
     (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, record, record[17]);
    caml_call3(total_cycle_time_fun, total_cycle_time$0, record, record[18]);
    caml_call3(time_source_fun, time_source$0, record, record[19]);
    caml_call3(external_jobs_fun, external_jobs$0, record, record[20]);
    caml_call3
     (thread_safe_external_job_hook_,
      thread_safe_external_job_hook$0,
      record,
      record[21]);
    caml_call3(job_queued_hook_fun, job_queued_hook$0, record, record[22]);
    caml_call3(event_added_hook_fun, event_added_hook$0, record, record[23]);
    caml_call3(yield_fun, yield$1, record, record[24]);
    caml_call3
     (yield_until_no_jobs_remain_fun,
      yield_until_no_jobs_remain$0,
      record,
      record[25]);
    caml_call3(check_invariants_fun, check_invariants$0, record, record[26]);
    caml_call3
     (max_num_jobs_per_priority_per_,
      max_num_jobs_per_priority_per_$0,
      record,
      record[27]);
    return caml_call3
            (record_backtraces_fun, record_backtraces$0, record, record[28]);
   }
   function fold$2
   (record,
    init,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _eH_ = record[28],
     _eI_ = record[27],
     _eJ_ = record[26],
     _eK_ = record[25],
     _eL_ = record[24],
     _eM_ = record[23],
     _eN_ = record[22],
     _eO_ = record[21],
     _eP_ = record[20],
     _eQ_ = record[19],
     _eR_ = record[18],
     _eS_ = record[17],
     _eT_ = record[16],
     _eU_ = record[15],
     _eV_ = record[14],
     _eW_ = record[13],
     _eX_ = record[12],
     _eY_ = record[11],
     _eZ_ = record[10],
     _e0_ = record[9],
     _e1_ = record[8],
     _e2_ = record[7],
     _e3_ = record[6],
     _e4_ = record[5],
     _e5_ = record[4],
     _e6_ = record[3],
     _e7_ = record[2];
    return caml_call4
            (record_backtraces_fun,
             caml_call4
              (max_num_jobs_per_priority_per_,
               caml_call4
                (check_invariants_fun,
                 caml_call4
                  (yield_until_no_jobs_remain_fun,
                   caml_call4
                    (yield_fun,
                     caml_call4
                      (event_added_hook_fun,
                       caml_call4
                        (job_queued_hook_fun,
                         caml_call4
                          (thread_safe_external_job_hook_,
                           caml_call4
                            (external_jobs_fun,
                             caml_call4
                              (time_source_fun,
                               caml_call4
                                (total_cycle_time_fun,
                                 caml_call4
                                  (last_cycle_num_jobs_fun,
                                   caml_call4
                                    (last_cycle_time_fun,
                                     caml_call4
                                      (run_every_cycle_end_state_fun,
                                       caml_call4
                                        (run_every_cycle_end_fun,
                                         caml_call4
                                          (run_every_cycle_start_state_fu,
                                           caml_call4
                                            (run_every_cycle_start_fun,
                                             caml_call4
                                              (in_cycle_fun,
                                               caml_call4
                                                (cycle_start_fun,
                                                 caml_call4
                                                  (cycle_count_fun,
                                                   caml_call4
                                                    (uncaught_exn_fun,
                                                     caml_call4
                                                      (current_execution_context_fun,
                                                       caml_call4
                                                        (main_execution_context_fun,
                                                         caml_call4
                                                          (very_low_priority_workers_fun,
                                                           caml_call4
                                                            (low_priority_jobs_fun,
                                                             caml_call4
                                                              (normal_priority_jobs_fun,
                                                               caml_call4
                                                                (job_pool_fun,
                                                                 caml_call4
                                                                  (check_access_fun, init, check_access$0, record, record[1]),
                                                                 job_pool$0,
                                                                 record,
                                                                 _e7_),
                                                               normal_priority_jobs$0,
                                                               record,
                                                               _e6_),
                                                             low_priority_jobs$0,
                                                             record,
                                                             _e5_),
                                                           very_low_priority_workers$0,
                                                           record,
                                                           _e4_),
                                                         main_execution_context$0,
                                                         record,
                                                         _e3_),
                                                       current_execution_context$0,
                                                       record,
                                                       _e2_),
                                                     uncaught_exn,
                                                     record,
                                                     _e1_),
                                                   cycle_count$0,
                                                   record,
                                                   _e0_),
                                                 cycle_start$0,
                                                 record,
                                                 _eZ_),
                                               in_cycle$0,
                                               record,
                                               _eY_),
                                             run_every_cycle_start$0,
                                             record,
                                             _eX_),
                                           run_every_cycle_start_state$0,
                                           record,
                                           _eW_),
                                         run_every_cycle_end$0,
                                         record,
                                         _eV_),
                                       run_every_cycle_end_state$0,
                                       record,
                                       _eU_),
                                     last_cycle_time$0,
                                     record,
                                     _eT_),
                                   last_cycle_num_jobs$0,
                                   record,
                                   _eS_),
                                 total_cycle_time$0,
                                 record,
                                 _eR_),
                               time_source$0,
                               record,
                               _eQ_),
                             external_jobs$0,
                             record,
                             _eP_),
                           thread_safe_external_job_hook$0,
                           record,
                           _eO_),
                         job_queued_hook$0,
                         record,
                         _eN_),
                       event_added_hook$0,
                       record,
                       _eM_),
                     yield$1,
                     record,
                     _eL_),
                   yield_until_no_jobs_remain$0,
                   record,
                   _eK_),
                 check_invariants$0,
                 record,
                 _eJ_),
               max_num_jobs_per_priority_per_$0,
               record,
               _eI_),
             record_backtraces$0,
             record,
             _eH_);
   }
   function for_all$2
   (record,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _eg_ = caml_call3(check_access_fun, check_access$0, record, record[1]),
     _eh_ =
       _eg_ ? caml_call3(job_pool_fun, job_pool$0, record, record[2]) : _eg_,
     _ei_ =
       _eh_
        ? caml_call3
          (normal_priority_jobs_fun,
           normal_priority_jobs$0,
           record,
           record[3])
        : _eh_,
     _ej_ =
       _ei_
        ? caml_call3
          (low_priority_jobs_fun, low_priority_jobs$0, record, record[4])
        : _ei_,
     _ek_ =
       _ej_
        ? caml_call3
          (very_low_priority_workers_fun,
           very_low_priority_workers$0,
           record,
           record[5])
        : _ej_,
     _el_ =
       _ek_
        ? caml_call3
          (main_execution_context_fun,
           main_execution_context$0,
           record,
           record[6])
        : _ek_,
     _em_ =
       _el_
        ? caml_call3
          (current_execution_context_fun,
           current_execution_context$0,
           record,
           record[7])
        : _el_,
     _en_ =
       _em_
        ? caml_call3(uncaught_exn_fun, uncaught_exn, record, record[8])
        : _em_,
     _eo_ =
       _en_
        ? caml_call3(cycle_count_fun, cycle_count$0, record, record[9])
        : _en_,
     _ep_ =
       _eo_
        ? caml_call3(cycle_start_fun, cycle_start$0, record, record[10])
        : _eo_,
     _eq_ =
       _ep_ ? caml_call3(in_cycle_fun, in_cycle$0, record, record[11]) : _ep_,
     _er_ =
       _eq_
        ? caml_call3
          (run_every_cycle_start_fun,
           run_every_cycle_start$0,
           record,
           record[12])
        : _eq_,
     _es_ =
       _er_
        ? caml_call3
          (run_every_cycle_start_state_fu,
           run_every_cycle_start_state$0,
           record,
           record[13])
        : _er_,
     _et_ =
       _es_
        ? caml_call3
          (run_every_cycle_end_fun, run_every_cycle_end$0, record, record[14])
        : _es_,
     _eu_ =
       _et_
        ? caml_call3
          (run_every_cycle_end_state_fun,
           run_every_cycle_end_state$0,
           record,
           record[15])
        : _et_,
     _ev_ =
       _eu_
        ? caml_call3
          (last_cycle_time_fun, last_cycle_time$0, record, record[16])
        : _eu_,
     _ew_ =
       _ev_
        ? caml_call3
          (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, record, record[17])
        : _ev_,
     _ex_ =
       _ew_
        ? caml_call3
          (total_cycle_time_fun, total_cycle_time$0, record, record[18])
        : _ew_,
     _ey_ =
       _ex_
        ? caml_call3(time_source_fun, time_source$0, record, record[19])
        : _ex_,
     _ez_ =
       _ey_
        ? caml_call3(external_jobs_fun, external_jobs$0, record, record[20])
        : _ey_,
     _eA_ =
       _ez_
        ? caml_call3
          (thread_safe_external_job_hook_,
           thread_safe_external_job_hook$0,
           record,
           record[21])
        : _ez_,
     _eB_ =
       _eA_
        ? caml_call3
          (job_queued_hook_fun, job_queued_hook$0, record, record[22])
        : _eA_,
     _eC_ =
       _eB_
        ? caml_call3
          (event_added_hook_fun, event_added_hook$0, record, record[23])
        : _eB_,
     _eD_ = _eC_ ? caml_call3(yield_fun, yield$1, record, record[24]) : _eC_,
     _eE_ =
       _eD_
        ? caml_call3
          (yield_until_no_jobs_remain_fun,
           yield_until_no_jobs_remain$0,
           record,
           record[25])
        : _eD_,
     _eF_ =
       _eE_
        ? caml_call3
          (check_invariants_fun, check_invariants$0, record, record[26])
        : _eE_,
     _eG_ =
       _eF_
        ? caml_call3
          (max_num_jobs_per_priority_per_,
           max_num_jobs_per_priority_per_$0,
           record,
           record[27])
        : _eF_;
    return _eG_
            ? caml_call3
              (record_backtraces_fun, record_backtraces$0, record, record[28])
            : _eG_;
   }
   function exists$2
   (record,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _ef_ = caml_call3(check_access_fun, check_access$0, record, record[1]),
     _dR_ = _ef_ || caml_call3(job_pool_fun, job_pool$0, record, record[2]),
     _dS_ =
       _dR_
       ||
        caml_call3
         (normal_priority_jobs_fun, normal_priority_jobs$0, record, record[3]),
     _dT_ =
       _dS_
       ||
        caml_call3
         (low_priority_jobs_fun, low_priority_jobs$0, record, record[4]),
     _dU_ =
       _dT_
       ||
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
     _dV_ =
       _dU_
       ||
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
     _dW_ =
       _dV_
       ||
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
     _dX_ =
       _dW_ || caml_call3(uncaught_exn_fun, uncaught_exn, record, record[8]),
     _dY_ =
       _dX_ || caml_call3(cycle_count_fun, cycle_count$0, record, record[9]),
     _dZ_ =
       _dY_ || caml_call3(cycle_start_fun, cycle_start$0, record, record[10]),
     _d0_ = _dZ_ || caml_call3(in_cycle_fun, in_cycle$0, record, record[11]),
     _d1_ =
       _d0_
       ||
        caml_call3
         (run_every_cycle_start_fun,
          run_every_cycle_start$0,
          record,
          record[12]),
     _d2_ =
       _d1_
       ||
        caml_call3
         (run_every_cycle_start_state_fu,
          run_every_cycle_start_state$0,
          record,
          record[13]),
     _d3_ =
       _d2_
       ||
        caml_call3
         (run_every_cycle_end_fun, run_every_cycle_end$0, record, record[14]),
     _d4_ =
       _d3_
       ||
        caml_call3
         (run_every_cycle_end_state_fun,
          run_every_cycle_end_state$0,
          record,
          record[15]),
     _d5_ =
       _d4_
       ||
        caml_call3(last_cycle_time_fun, last_cycle_time$0, record, record[16]),
     _d6_ =
       _d5_
       ||
        caml_call3
         (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, record, record[17]),
     _d7_ =
       _d6_
       ||
        caml_call3
         (total_cycle_time_fun, total_cycle_time$0, record, record[18]),
     _d8_ =
       _d7_ || caml_call3(time_source_fun, time_source$0, record, record[19]),
     _d9_ =
       _d8_
       || caml_call3(external_jobs_fun, external_jobs$0, record, record[20]),
     _d__ =
       _d9_
       ||
        caml_call3
         (thread_safe_external_job_hook_,
          thread_safe_external_job_hook$0,
          record,
          record[21]),
     _d$_ =
       _d__
       ||
        caml_call3(job_queued_hook_fun, job_queued_hook$0, record, record[22]),
     _ea_ =
       _d$_
       ||
        caml_call3
         (event_added_hook_fun, event_added_hook$0, record, record[23]),
     _eb_ = _ea_ || caml_call3(yield_fun, yield$1, record, record[24]),
     _ec_ =
       _eb_
       ||
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[25]),
     _ed_ =
       _ec_
       ||
        caml_call3
         (check_invariants_fun, check_invariants$0, record, record[26]),
     _ee_ =
       _ed_
       ||
        caml_call3
         (max_num_jobs_per_priority_per_,
          max_num_jobs_per_priority_per_$0,
          record,
          record[27]);
    return _ee_
            ? _ee_
            : caml_call3
              (record_backtraces_fun, record_backtraces$0, record, record[28]);
   }
   function to_list$2
   (record,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _dq_ =
       [0,
        caml_call3
         (record_backtraces_fun, record_backtraces$0, record, record[28]),
        0],
     _dr_ =
       [0,
        caml_call3
         (max_num_jobs_per_priority_per_,
          max_num_jobs_per_priority_per_$0,
          record,
          record[27]),
        _dq_],
     _ds_ =
       [0,
        caml_call3
         (check_invariants_fun, check_invariants$0, record, record[26]),
        _dr_],
     _dt_ =
       [0,
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[25]),
        _ds_],
     _du_ = [0, caml_call3(yield_fun, yield$1, record, record[24]), _dt_],
     _dv_ =
       [0,
        caml_call3
         (event_added_hook_fun, event_added_hook$0, record, record[23]),
        _du_],
     _dw_ =
       [0,
        caml_call3(job_queued_hook_fun, job_queued_hook$0, record, record[22]),
        _dv_],
     _dx_ =
       [0,
        caml_call3
         (thread_safe_external_job_hook_,
          thread_safe_external_job_hook$0,
          record,
          record[21]),
        _dw_],
     _dy_ =
       [0,
        caml_call3(external_jobs_fun, external_jobs$0, record, record[20]),
        _dx_],
     _dz_ =
       [0,
        caml_call3(time_source_fun, time_source$0, record, record[19]),
        _dy_],
     _dA_ =
       [0,
        caml_call3
         (total_cycle_time_fun, total_cycle_time$0, record, record[18]),
        _dz_],
     _dB_ =
       [0,
        caml_call3
         (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, record, record[17]),
        _dA_],
     _dC_ =
       [0,
        caml_call3(last_cycle_time_fun, last_cycle_time$0, record, record[16]),
        _dB_],
     _dD_ =
       [0,
        caml_call3
         (run_every_cycle_end_state_fun,
          run_every_cycle_end_state$0,
          record,
          record[15]),
        _dC_],
     _dE_ =
       [0,
        caml_call3
         (run_every_cycle_end_fun, run_every_cycle_end$0, record, record[14]),
        _dD_],
     _dF_ =
       [0,
        caml_call3
         (run_every_cycle_start_state_fu,
          run_every_cycle_start_state$0,
          record,
          record[13]),
        _dE_],
     _dG_ =
       [0,
        caml_call3
         (run_every_cycle_start_fun,
          run_every_cycle_start$0,
          record,
          record[12]),
        _dF_],
     _dH_ =
       [0, caml_call3(in_cycle_fun, in_cycle$0, record, record[11]), _dG_],
     _dI_ =
       [0,
        caml_call3(cycle_start_fun, cycle_start$0, record, record[10]),
        _dH_],
     _dJ_ =
       [0,
        caml_call3(cycle_count_fun, cycle_count$0, record, record[9]),
        _dI_],
     _dK_ =
       [0,
        caml_call3(uncaught_exn_fun, uncaught_exn, record, record[8]),
        _dJ_],
     _dL_ =
       [0,
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
        _dK_],
     _dM_ =
       [0,
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
        _dL_],
     _dN_ =
       [0,
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
        _dM_],
     _dO_ =
       [0,
        caml_call3
         (low_priority_jobs_fun, low_priority_jobs$0, record, record[4]),
        _dN_],
     _dP_ =
       [0,
        caml_call3
         (normal_priority_jobs_fun, normal_priority_jobs$0, record, record[3]),
        _dO_],
     _dQ_ = [0, caml_call3(job_pool_fun, job_pool$0, record, record[2]), _dP_];
    return [0,
            caml_call3(check_access_fun, check_access$0, record, record[1]),
            _dQ_];
   }
   function map$2
   (record,
    check_access_fun,
    job_pool_fun,
    normal_priority_jobs_fun,
    low_priority_jobs_fun,
    very_low_priority_workers_fun,
    main_execution_context_fun,
    current_execution_context_fun,
    uncaught_exn_fun,
    cycle_count_fun,
    cycle_start_fun,
    in_cycle_fun,
    run_every_cycle_start_fun,
    run_every_cycle_start_state_fu,
    run_every_cycle_end_fun,
    run_every_cycle_end_state_fun,
    last_cycle_time_fun,
    last_cycle_num_jobs_fun,
    total_cycle_time_fun,
    time_source_fun,
    external_jobs_fun,
    thread_safe_external_job_hook_,
    job_queued_hook_fun,
    event_added_hook_fun,
    yield_fun,
    yield_until_no_jobs_remain_fun,
    check_invariants_fun,
    max_num_jobs_per_priority_per_,
    record_backtraces_fun){
    var
     _c1_ =
       caml_call3
        (record_backtraces_fun, record_backtraces$0, record, record[28]),
     _c2_ =
       caml_call3
        (max_num_jobs_per_priority_per_,
         max_num_jobs_per_priority_per_$0,
         record,
         record[27]),
     _c3_ =
       caml_call3
        (check_invariants_fun, check_invariants$0, record, record[26]),
     _c4_ =
       caml_call3
        (yield_until_no_jobs_remain_fun,
         yield_until_no_jobs_remain$0,
         record,
         record[25]),
     _c5_ = caml_call3(yield_fun, yield$1, record, record[24]),
     _c6_ =
       caml_call3
        (event_added_hook_fun, event_added_hook$0, record, record[23]),
     _c7_ =
       caml_call3(job_queued_hook_fun, job_queued_hook$0, record, record[22]),
     _c8_ =
       caml_call3
        (thread_safe_external_job_hook_,
         thread_safe_external_job_hook$0,
         record,
         record[21]),
     _c9_ = caml_call3(external_jobs_fun, external_jobs$0, record, record[20]),
     _c__ = caml_call3(time_source_fun, time_source$0, record, record[19]),
     _c$_ =
       caml_call3
        (total_cycle_time_fun, total_cycle_time$0, record, record[18]),
     _da_ =
       caml_call3
        (last_cycle_num_jobs_fun, last_cycle_num_jobs$0, record, record[17]),
     _db_ =
       caml_call3(last_cycle_time_fun, last_cycle_time$0, record, record[16]),
     _dc_ =
       caml_call3
        (run_every_cycle_end_state_fun,
         run_every_cycle_end_state$0,
         record,
         record[15]),
     _dd_ =
       caml_call3
        (run_every_cycle_end_fun, run_every_cycle_end$0, record, record[14]),
     _de_ =
       caml_call3
        (run_every_cycle_start_state_fu,
         run_every_cycle_start_state$0,
         record,
         record[13]),
     _df_ =
       caml_call3
        (run_every_cycle_start_fun,
         run_every_cycle_start$0,
         record,
         record[12]),
     _dg_ = caml_call3(in_cycle_fun, in_cycle$0, record, record[11]),
     _dh_ = caml_call3(cycle_start_fun, cycle_start$0, record, record[10]),
     _di_ = caml_call3(cycle_count_fun, cycle_count$0, record, record[9]),
     _dj_ = caml_call3(uncaught_exn_fun, uncaught_exn, record, record[8]),
     _dk_ =
       caml_call3
        (current_execution_context_fun,
         current_execution_context$0,
         record,
         record[7]),
     _dl_ =
       caml_call3
        (main_execution_context_fun,
         main_execution_context$0,
         record,
         record[6]),
     _dm_ =
       caml_call3
        (very_low_priority_workers_fun,
         very_low_priority_workers$0,
         record,
         record[5]),
     _dn_ =
       caml_call3
        (low_priority_jobs_fun, low_priority_jobs$0, record, record[4]),
     _do_ =
       caml_call3
        (normal_priority_jobs_fun, normal_priority_jobs$0, record, record[3]),
     _dp_ = caml_call3(job_pool_fun, job_pool$0, record, record[2]);
    return [0,
            caml_call3(check_access_fun, check_access$0, record, record[1]),
            _dp_,
            _do_,
            _dn_,
            _dm_,
            _dl_,
            _dk_,
            _dj_,
            _di_,
            _dh_,
            _dg_,
            _df_,
            _de_,
            _dd_,
            _dc_,
            _db_,
            _da_,
            _c$_,
            _c__,
            _c9_,
            _c8_,
            _c7_,
            _c6_,
            _c5_,
            _c4_,
            _c3_,
            _c2_,
            _c1_];
   }
   function set_all_mutable_fields$0
   (record,
    check_access,
    job_pool,
    main_execution_context,
    current_execution_context,
    uncaught_exn,
    cycle_count,
    cycle_start,
    in_cycle,
    run_every_cycle_start,
    run_every_cycle_end,
    last_cycle_time,
    last_cycle_num_jobs,
    total_cycle_time,
    time_source,
    thread_safe_external_job_hook,
    job_queued_hook,
    event_added_hook,
    yield$0,
    yield_until_no_jobs_remain,
    check_invariants,
    max_num_jobs_per_priority_per_,
    record_backtraces){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[1] = check_access;
    record$0[2] = job_pool;
    record$0[6] = main_execution_context;
    record$0[7] = current_execution_context;
    record$0[8] = uncaught_exn;
    record$0[9] = cycle_count;
    record$0[10] = cycle_start;
    record$0[11] = in_cycle;
    record$0[12] = run_every_cycle_start;
    record$0[14] = run_every_cycle_end;
    record$0[16] = last_cycle_time;
    record$0[17] = last_cycle_num_jobs;
    record$0[18] = total_cycle_time;
    record$0[19] = time_source;
    record$0[21] = thread_safe_external_job_hook;
    record$0[22] = job_queued_hook;
    record$0[23] = event_added_hook;
    record$0[24] = yield$0;
    record$0[25] = yield_until_no_jobs_remain;
    record$0[26] = check_invariants;
    record$0[27] = max_num_jobs_per_priority_per_;
    record$0[28] = record_backtraces;
    return 0;
   }
   var
    Direct$0 =
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0],
    Fields$0 =
      [0,
       names$0,
       record_backtraces$0,
       max_num_jobs_per_priority_per_$0,
       check_invariants$0,
       yield_until_no_jobs_remain$0,
       yield$1,
       event_added_hook$0,
       job_queued_hook$0,
       thread_safe_external_job_hook$0,
       external_jobs$0,
       time_source$0,
       total_cycle_time$0,
       last_cycle_num_jobs$0,
       last_cycle_time$0,
       run_every_cycle_end_state$0,
       run_every_cycle_end$0,
       run_every_cycle_start_state$0,
       run_every_cycle_start$0,
       in_cycle$0,
       cycle_start$0,
       cycle_count$0,
       uncaught_exn,
       current_execution_context$0,
       main_execution_context$0,
       very_low_priority_workers$0,
       low_priority_jobs$0,
       normal_priority_jobs$0,
       job_pool$0,
       check_access$0,
       make_creator$0,
       create$2,
       map$1,
       iter$1,
       fold$1,
       map_poly$0,
       for_all$1,
       exists$1,
       to_list$1,
       Direct$0];
   function sexp_of_t$1(param){
    var
     check_access_007 = param[1],
     job_pool_009 = param[2],
     very_low_priority_workers_015 = param[5],
     low_priority_jobs_013 = param[4],
     normal_priority_jobs_011 = param[3],
     main_execution_context_017 = param[6],
     current_execution_context_019 = param[7],
     uncaught_exn_021 = param[8],
     cycle_count_027 = param[9],
     cycle_start_029 = param[10],
     in_cycle_031 = param[11],
     run_every_cycle_start_033 = param[12],
     run_every_cycle_start_state_03 = param[13],
     run_every_cycle_end_037 = param[14],
     run_every_cycle_end_state_039 = param[15],
     last_cycle_time_041 = param[16],
     last_cycle_num_jobs_043 = param[17],
     total_cycle_time_045 = param[18],
     time_source_047 = param[19],
     external_jobs_049 = param[20],
     job_queued_hook_053 = param[22],
     event_added_hook_055 = param[23],
     yield_057 = param[24],
     yield_until_no_jobs_remain_059 = param[25],
     check_invariants_061 = param[26],
     max_num_jobs_per_priority_per_ = param[27],
     record_backtraces_065 = param[28],
     arg_066 = caml_call1(Core[305], record_backtraces_065),
     bnds_006 = [0, [1, [0, _al_, [0, arg_066, 0]]], 0],
     arg_064 =
       caml_call1(Async_kernel_config[5][2], max_num_jobs_per_priority_per_),
     bnds_006$0 = [0, [1, [0, _am_, [0, arg_064, 0]]], bnds_006],
     arg_062 = caml_call1(Core[305], check_invariants_061),
     bnds_006$1 = [0, [1, [0, _an_, [0, arg_062, 0]]], bnds_006$0],
     arg_060 =
       caml_call1(Sexplib0_Sexp_conv[23], yield_until_no_jobs_remain_059),
     bnds_006$2 = [0, [1, [0, _ao_, [0, arg_060, 0]]], bnds_006$1],
     arg_058 = caml_call1(Sexplib0_Sexp_conv[23], yield_057),
     bnds_006$3 = [0, [1, [0, _ap_, [0, arg_058, 0]]], bnds_006$2];
    function _cP_(param){
     function _cZ_(_c0_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _cZ_);
    }
    var
     arg_056 = caml_call2(Core[454], _cP_, event_added_hook_055),
     bnds_006$4 = [0, [1, [0, _aq_, [0, arg_056, 0]]], bnds_006$3];
    function _cQ_(param){
     function _cX_(_cY_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _cX_);
    }
    var
     arg_054 = caml_call2(Core[454], _cQ_, job_queued_hook_053),
     bnds_006$5 = [0, [1, [0, _ar_, [0, arg_054, 0]]], bnds_006$4];
    function _cR_(_cW_){return 0;}
    var
     arg_052 = caml_call1(Sexplib0_Sexp_conv[24], _cR_),
     bnds_006$6 = [0, [1, [0, _as_, [0, arg_052, 0]]], bnds_006$5],
     arg_050 =
       caml_call2
        (Thread_safe_queue[1],
         Async_kernel_External_job[1],
         external_jobs_049),
     bnds_006$7 = [0, [1, [0, _at_, [0, arg_050, 0]]], bnds_006$6],
     arg_048 =
       caml_call2
        (Async_kernel_Synchronous_time_[4][17], Core[202], time_source_047),
     bnds_006$8 = [0, [1, [0, _au_, [0, arg_048, 0]]], bnds_006$7],
     arg_046 = caml_call1(Core_Time_ns[1][10], total_cycle_time_045),
     bnds_006$9 = [0, [1, [0, _av_, [0, arg_046, 0]]], bnds_006$8],
     arg_044 = caml_call1(Core[356], last_cycle_num_jobs_043),
     bnds_006$10 = [0, [1, [0, _aw_, [0, arg_044, 0]]], bnds_006$9],
     arg_042 = caml_call1(Core_Time_ns[1][10], last_cycle_time_041),
     bnds_006$11 = [0, [1, [0, _ax_, [0, arg_042, 0]]], bnds_006$10],
     arg_040 =
       caml_call3
        (Core_Hashtbl[3],
         Async_kernel_Types[20][10],
         Sexplib0_Sexp_conv[23],
         run_every_cycle_end_state_039),
     bnds_006$12 = [0, [1, [0, _ay_, [0, arg_040, 0]]], bnds_006$11],
     arg_038 =
       caml_call2(Core[421], Sexplib0_Sexp_conv[23], run_every_cycle_end_037),
     bnds_006$13 = [0, [1, [0, _az_, [0, arg_038, 0]]], bnds_006$12],
     arg_036 =
       caml_call3
        (Core_Hashtbl[3],
         Async_kernel_Types[20][10],
         Sexplib0_Sexp_conv[23],
         run_every_cycle_start_state_03),
     bnds_006$14 = [0, [1, [0, _aA_, [0, arg_036, 0]]], bnds_006$13],
     arg_034 =
       caml_call2
        (Core[421], Sexplib0_Sexp_conv[23], run_every_cycle_start_033),
     bnds_006$15 = [0, [1, [0, _aB_, [0, arg_034, 0]]], bnds_006$14],
     arg_032 = caml_call1(Core[305], in_cycle_031),
     bnds_006$16 = [0, [1, [0, _aC_, [0, arg_032, 0]]], bnds_006$15],
     arg_030 = caml_call1(Async_kernel_Time_ns[92], cycle_start_029),
     bnds_006$17 = [0, [1, [0, _aD_, [0, arg_030, 0]]], bnds_006$16],
     arg_028 = caml_call1(Core[356], cycle_count_027),
     bnds_006$18 = [0, [1, [0, _aE_, [0, arg_028, 0]]], bnds_006$17];
    function _cS_(param){
     var
      arg1_024 = param[2],
      arg0_023 = param[1],
      res0_025 = caml_call1(Base_Exn[1], arg0_023),
      res1_026 = caml_call1(Core_Sexp[90], arg1_024);
     return [1, [0, res0_025, [0, res1_026, 0]]];
    }
    var
     arg_022 = caml_call2(Core[454], _cS_, uncaught_exn_021),
     bnds_006$19 = [0, [1, [0, _aF_, [0, arg_022, 0]]], bnds_006$18],
     arg_020 =
       caml_call1
        (Async_kernel_Execution_context[6], current_execution_context_019),
     bnds_006$20 = [0, [1, [0, _aG_, [0, arg_020, 0]]], bnds_006$19],
     arg_018 =
       caml_call1
        (Async_kernel_Execution_context[6], main_execution_context_017),
     bnds_006$21 = [0, [1, [0, _aH_, [0, arg_018, 0]]], bnds_006$20],
     arg_016 =
       caml_call2
        (Core_Deque[10],
         Very_low_priority_worker[5],
         very_low_priority_workers_015),
     bnds_006$22 = [0, [1, [0, _aI_, [0, arg_016, 0]]], bnds_006$21],
     arg_014 = caml_call1(Async_kernel_Job_queue[1], low_priority_jobs_013),
     bnds_006$23 = [0, [1, [0, _aJ_, [0, arg_014, 0]]], bnds_006$22],
     arg_012 = caml_call1(Async_kernel_Job_queue[1], normal_priority_jobs_011),
     bnds_006$24 = [0, [1, [0, _aK_, [0, arg_012, 0]]], bnds_006$23],
     arg_010 = caml_call1(Async_kernel_Job_pool[2], job_pool_009),
     bnds_006$25 = [0, [1, [0, _aL_, [0, arg_010, 0]]], bnds_006$24];
    function _cT_(param){
     function _cU_(_cV_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _cU_);
    }
    var
     arg_008 = caml_call2(Core[454], _cT_, check_access_007),
     bnds_006$26 = [0, [1, [0, _aM_, [0, arg_008, 0]]], bnds_006$25];
    return [1, bnds_006$26];
   }
   function uncaught_exn$0(t){
    var _cN_ = t[8];
    if(! _cN_) return 0;
    var match = _cN_[1], sexp = match[2], exn = match[1];
    function _cO_(param){
     var
      arg1_068 = param[2],
      arg0_067 = param[1],
      res0_069 = caml_call1(Base_Exn[1], arg0_067),
      res1_070 = caml_call1(Core_Sexp[90], arg1_068);
     return [1, [0, res0_069, [0, res1_070, 0]]];
    }
    return [0,
            caml_call5
             (Core_Error[17],
              0,
              0,
              cst_unhandled_exception,
              [0, exn, sexp],
              _cO_)];
   }
   function num_pending_jobs(t){
    var _cM_ = caml_call1(Async_kernel_Job_queue[8], t[4]);
    return caml_call1(Async_kernel_Job_queue[8], t[3]) + _cM_ | 0;
   }
   function num_jobs_run(t){
    var _cL_ = caml_call1(Async_kernel_Job_queue[10], t[4]);
    return caml_call1(Async_kernel_Job_queue[10], t[3]) + _cL_ | 0;
   }
   function last_cycle_num_jobs$1(t){return t[17];}
   function unordered_is_sublist(equal, small, large){
    function _cG_(acc, x){
     function _cI_(l$0){
      function _cJ_(y){return 1 - caml_call2(equal, y, x);}
      var
       _cK_ = caml_call2(Core_List[130], l$0, _cJ_),
       match = _cK_[2],
       l = _cK_[1];
      if(! match) return 0;
      var r = match[2];
      return [0, caml_call2(Core[157], l, r)];
     }
     return caml_call2(Core_Option[27], acc, _cI_);
    }
    var _cH_ = caml_call3(Core_List[10], small, [0, large], _cG_);
    return caml_call1(Core_Option[57], _cH_);
   }
   function check_hook_table_invariant(table, list){
    var _cF_ = caml_call1(Core_Hashtbl[65], table);
    if(unordered_is_sublist(Core[246], _cF_, list)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
   }
   function invariant$0(t){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, t));
        },
      _bx_ = function(_cE_){return 0;},
      _by_ = function(_cD_){return 0;},
      _bz_ = function(_cC_){return 0;},
      _bA_ = function(_cB_){return 0;},
      _bB_ = function(_cA_){return 0;},
      _bC_ = function(_cz_){return 0;},
      _bD_ = function(_cy_){return 0;},
      _bE_ = function(_cx_){return 0;},
      _bF_ = function(_cw_){return 0;},
      _bG_ =
        function(job){
         if(caml_call2(Tuple_pool[6], t[2], job)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
        },
      _bH_ = caml_call1(Async_kernel_Synchronous_time_[8][3], _bG_),
      _bI_ = function(_cv_){return check(_bH_, _cv_);},
      _bJ_ = function(_cu_){return 0;},
      _bK_ =
        function(last_cycle_num_jobs){
         if(caml_call2(Async_kernel_Import[1], last_cycle_num_jobs, 0))
          return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
        },
      _bL_ = function(_ct_){return check(_bK_, _ct_);},
      _bM_ = function(_cs_){return 0;},
      _bN_ =
        function(run_every_cycle_end_state){
         return check_hook_table_invariant(run_every_cycle_end_state, t[14]);
        },
      _bO_ = function(_cr_){return check(_bN_, _cr_);},
      _bP_ = function(_cq_){return 0;},
      _bQ_ =
        function(run_every_cycle_start_state){
         return check_hook_table_invariant(run_every_cycle_start_state, t[12]);
        },
      _bR_ = function(_cp_){return check(_bQ_, _cp_);},
      _bS_ = function(_co_){return 0;},
      _bT_ = function(_cn_){return 0;},
      _bU_ = function(_cm_){return 0;},
      _bV_ =
        function(cycle_count){
         if(caml_call2(Async_kernel_Import[1], cycle_count, 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
        },
      _bW_ = function(_cl_){return check(_bV_, _cl_);},
      _bX_ =
        function(uncaught_exn){
         var _cj_ = caml_call1(Core[243], uncaught_exn);
         if(! _cj_) return _cj_;
         var _ck_ = num_pending_jobs(t);
         if(caml_call2(Async_kernel_Import[3], _ck_, 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
        },
      _bY_ = function(_ci_){return check(_bX_, _ci_);},
      _bZ_ = Async_kernel_Execution_context[7],
      _b0_ = function(_ch_){return check(_bZ_, _ch_);},
      _b1_ = Async_kernel_Execution_context[7],
      _b2_ = function(_cg_){return check(_b1_, _cg_);},
      _b3_ =
        function(q){
         return caml_call2(Core_Deque[17], q, Very_low_priority_worker[6]);
        },
      _b4_ = function(_cf_){return check(_b3_, _cf_);},
      _b5_ = Async_kernel_Job_queue[2],
      _b6_ = function(_ce_){return check(_b5_, _ce_);},
      _b7_ = Async_kernel_Job_queue[2],
      _b8_ = function(_cd_){return check(_b7_, _cd_);},
      _b9_ = Async_kernel_Job_pool[3],
      _b__ = function(_cc_){return check(_b9_, _cc_);},
      _b$_ = function(_cb_){return 0;},
      _ca_ =
        caml_call28
         (Fields$0[33],
          _b$_,
          _b__,
          _b8_,
          _b6_,
          _b4_,
          _b2_,
          _b0_,
          _bY_,
          _bW_,
          _bU_,
          _bT_,
          _bS_,
          _bR_,
          _bP_,
          _bO_,
          _bM_,
          _bL_,
          _bJ_,
          _bI_,
          _bF_,
          _bE_,
          _bD_,
          _bC_,
          _bB_,
          _bA_,
          _bz_,
          _by_,
          _bx_);
     return _ca_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _bu_ = [0, [1, [0, _aO_, [0, sexp_of_t$1(t), 0]]], 0],
      _bv_ = [0, [1, [0, _aP_, [0, caml_call1(Core[537], exn), 0]]], _bu_],
      _bw_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_invariant_failed),
          _bv_]];
     return caml_call1(Core[253], _bw_);
    }
   }
   function free_job(t, job){return caml_call2(Tuple_pool[15], t[2], job);}
   function enqueue(t, execution_context, f, a){
    var _bs_ = caml_call1(Core[242], t[8]);
    if(_bs_){
     var priority = execution_context[2], job_queue = priority ? t[4] : t[3];
     caml_call4(Async_kernel_Job_queue[4], job_queue, execution_context, f, a);
     var match = t[22];
     if(match){var f$0 = match[1]; return caml_call1(f$0, priority);}
     var _bt_ = 0;
    }
    else
     var _bt_ = _bs_;
    return _bt_;
   }
   function enqueue_job(t, job, free_job){
    var
     job_pool = t[2],
     _bq_ = caml_call3(Tuple_pool[32], job_pool, job, Tuple_pool[2][5]),
     _br_ = caml_call3(Tuple_pool[32], job_pool, job, Tuple_pool[2][4]);
    enqueue
     (t,
      caml_call3(Tuple_pool[32], job_pool, job, Tuple_pool[2][3]),
      _br_,
      _bq_);
    return free_job ? caml_call2(Tuple_pool[15], t[2], job) : free_job;
   }
   function handle_fired(time_source, job_or_event){
    var
     k = caml_call1(Async_kernel_Synchronous_time_[4][2][5][1], job_or_event),
     match =
       caml_call2(Async_kernel_Synchronous_time_[4][2][5][2], k, job_or_event);
    return k
            ? enqueue_job(time_source[9], match, 1)
            : caml_call2
              (Async_kernel_Synchronous_time_[14], time_source, match);
   }
   function create$3(param){
    var
     now = caml_call1(Async_kernel_Time_ns[50], 0),
     t = [],
     time_source = [],
     events = caml_call2(Timing_wheel[9], Async_kernel_config[29], now),
     _a3_ = Async_kernel_config[27],
     _a4_ = Async_kernel_config[23],
     _a5_ = Async_kernel_config[16],
     _a6_ = caml_call1(Bvar[1], 0),
     _a7_ = caml_call1(Bvar[1], 0),
     _a8_ = 0,
     _a9_ = 0;
    function _a__(_bp_){return 0;}
    var
     _a$_ = caml_call1(Thread_safe_queue[3], 0),
     _ba_ = caml_call1(Async_kernel_Import[16], 0.),
     _bb_ = caml_call1(Async_kernel_Import[16], 0.),
     _bc_ = Async_kernel_Types[20],
     _bd_ =
       caml_call3(Core_Hashtbl[4], 0, 0, [0, _bc_[20], _bc_[10], _bc_[36]]),
     _be_ = Async_kernel_Types[20],
     _bf_ =
       caml_call3(Core_Hashtbl[4], 0, 0, [0, _be_[20], _be_[10], _be_[36]]),
     _bg_ = Async_kernel_Execution_context[8],
     _bh_ = Async_kernel_Execution_context[8],
     _bi_ = caml_call3(Core_Deque[31], 0, 0, 0),
     _bj_ = caml_call1(Async_kernel_Job_queue[3], 0),
     _bk_ = caml_call1(Async_kernel_Job_queue[3], 0);
    caml_update_dummy
     (t,
      [0,
       0,
       caml_call1(Async_kernel_Job_pool[4], 0),
       _bk_,
       _bj_,
       _bi_,
       _bh_,
       _bg_,
       0,
       0,
       now,
       0,
       0,
       _bf_,
       0,
       _bd_,
       _bb_,
       0,
       _ba_,
       time_source,
       _a$_,
       _a__,
       _a9_,
       _a8_,
       _a7_,
       _a6_,
       _a5_,
       _a4_,
       _a3_]);
    var _bl_ = 1;
    function _bm_(alarm){
     return handle_fired
             (time_source, caml_call2(Timing_wheel[5][5], events, alarm));
    }
    var
     _bn_ = Async_kernel_Synchronous_time_[22][3][2],
     _bo_ = Async_kernel_Synchronous_time_[22][3][2];
    caml_update_dummy
     (time_source,
      [0,
       caml_call1(Async_kernel_Types[21][45], 0),
       0,
       0,
       events,
       _bo_,
       _bn_,
       _bm_,
       _bl_,
       t]);
    return t;
   }
   function is_dead(t){return caml_call1(Core[243], t[8]);}
   function set_check_access$0(t, f){t[1] = f; return 0;}
   var match = caml_call1(Core_Result[47], create$3);
   if(0 === match[0])
    var t = match[1], t_ref = [0, t];
   else{
    var exn = match[1];
    caml_call3
     (Async_kernel_Debug[15], cst_Async_cannot_create_its_ra, exn, Core[537]);
    var t_ref = caml_call1(Core[83], 1);
   }
   function check_access$1(t){
    var match = t[1];
    if(! match) return 0;
    var f = match[1];
    return caml_call1(f, 0);
   }
   function t$0(param){var t = t_ref[1]; check_access$1(t); return t;}
   function current_execution_context$1(t){
    return t[28] ? caml_call1(Async_kernel_Execution_context[12], t[7]) : t[7];
   }
   function with_execution_context1(t, tmp_context, f, x){
    var old_context = current_execution_context$1(t);
    caml_call2(set_execution_context, t, tmp_context);
    function _a2_(param){
     return caml_call2(set_execution_context, t, old_context);
    }
    return caml_call3(Core[252], f, x, _a2_);
   }
   function with_execution_context(t, tmp_context, f){
    return with_execution_context1(t, tmp_context, f, 0);
   }
   function create_job(t, execution_context, f, a){
    if(caml_call1(Tuple_pool[14], t[2]))
     t[2] = caml_call2(Tuple_pool[13], 0, t[2]);
    return caml_call4(Tuple_pool[19], t[2], execution_context, f, a);
   }
   function got_uncaught_exn(t, exn, sexp){
    if(debug){
     var
      _a1_ =
        function(param){
         var
          arg1_072 = param[2],
          arg0_071 = param[1],
          res0_073 = caml_call1(Base_Exn[1], arg0_071),
          res1_074 = caml_call1(Core_Sexp[90], arg1_072);
         return [1, [0, res0_073, [0, res1_074, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15], cst_got_uncaught_exn, [0, exn, sexp], _a1_);
    }
    caml_call2
     (Core_List[9], [0, t[3], [0, t[4], 0]], Async_kernel_Job_queue[5]);
    t[8] = [0, [0, exn, sexp]];
    return 0;
   }
   function start_cycle(t, max_num_jobs_per_priority){
    var n = caml_call1(Async_kernel_config[5][5], max_num_jobs_per_priority);
    caml_call2(Async_kernel_Job_queue[6], t[3], n);
    return caml_call2(Async_kernel_Job_queue[6], t[4], n);
   }
   function run_jobs(t){
    for(;;){
     var e = caml_call2(Async_kernel_Job_queue[9], t[3], t);
     if(0 !== e[0]) return e;
     var e$0 = caml_call2(Async_kernel_Job_queue[9], t[4], t);
     if(0 !== e$0[0]) return e$0;
     if
      (!
       caml_call1(Async_kernel_Job_queue[7], t[3])
       && ! caml_call1(Async_kernel_Job_queue[7], t[4]))
      return _aU_;
    }
   }
   function stabilize(t){
    start_cycle(t, caml_call1(Async_kernel_config[5][4], Core_Int[41]));
    var match = run_jobs(t);
    if(0 === match[0]) return _aV_;
    var exn = match[1][1];
    return [1, exn];
   }
   function create_time_source(opt, now, param){
    if(opt)
     var sth = opt[1], timing_wheel_config = sth;
    else
     var timing_wheel_config = Async_kernel_config[29];
    var
     t = t$0(0),
     events = caml_call2(Timing_wheel[9], timing_wheel_config, now),
     time_source = [],
     _aX_ = 0;
    function _aY_(alarm){
     return handle_fired
             (time_source, caml_call2(Timing_wheel[5][5], events, alarm));
    }
    var
     _aZ_ = Async_kernel_Synchronous_time_[22][3][2],
     _a0_ = Async_kernel_Synchronous_time_[22][3][2];
    caml_update_dummy
     (time_source,
      [0,
       caml_call1(Async_kernel_Types[21][45], 0),
       0,
       0,
       events,
       _a0_,
       _aZ_,
       _aY_,
       _aX_,
       t]);
    return time_source;
   }
   function wall_clock(param){
    var _aW_ = t$0(0)[19];
    return caml_call1(Async_kernel_Synchronous_time_[13], _aW_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Scheduler1);
   var
    Async_kernel_Scheduler1 =
      [0,
       events,
       set_execution_context,
       debug,
       Ivar,
       Bvar,
       Very_low_priority_worker,
       record_backtraces,
       set_record_backtraces,
       max_num_jobs_per_priority_per_,
       set_max_num_jobs_per_priority_,
       check_invariants,
       set_check_invariants,
       yield_until_no_jobs_remain,
       set_yield_until_no_jobs_remain,
       yield$0,
       set_yield,
       event_added_hook,
       set_event_added_hook,
       job_queued_hook,
       set_job_queued_hook,
       thread_safe_external_job_hook,
       set_thread_safe_external_job_h,
       external_jobs,
       time_source,
       set_time_source,
       total_cycle_time,
       set_total_cycle_time,
       set_last_cycle_num_jobs,
       last_cycle_time,
       set_last_cycle_time,
       run_every_cycle_end_state,
       run_every_cycle_end,
       set_run_every_cycle_end,
       run_every_cycle_start_state,
       run_every_cycle_start,
       set_run_every_cycle_start,
       in_cycle,
       set_in_cycle,
       cycle_start,
       set_cycle_start,
       cycle_count,
       set_cycle_count,
       set_uncaught_exn,
       set_current_execution_context,
       main_execution_context,
       set_main_execution_context,
       very_low_priority_workers,
       low_priority_jobs,
       normal_priority_jobs,
       job_pool,
       set_job_pool,
       Fields$0,
       sexp_of_t$1,
       uncaught_exn_unwrapped,
       uncaught_exn$0,
       num_pending_jobs,
       num_jobs_run,
       last_cycle_num_jobs$1,
       unordered_is_sublist,
       check_hook_table_invariant,
       invariant$0,
       free_job,
       enqueue,
       enqueue_job,
       handle_fired,
       create$3,
       is_dead,
       set_check_access$0,
       t_ref,
       check_access$1,
       t$0,
       current_execution_context$1,
       with_execution_context1,
       with_execution_context,
       create_job,
       got_uncaught_exn,
       start_cycle,
       run_jobs,
       stabilize,
       create_time_source,
       wall_clock];
   runtime.caml_register_global
    (120, Async_kernel_Scheduler1, cst_Async_kernel_Scheduler1$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Ivar0
//# unitInfo: Requires: Assert_failure, Async_kernel__Execution_context, Async_kernel__Scheduler1, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Ivar0$0 = "Async_kernel__Ivar0",
    cst_async_kernel$0 = "async_kernel",
    cst_src_ivar0_ml = "src/ivar0.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Ivar0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_ivar0_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _q_ = [0, cst_src_ivar0_ml, 450, 21],
    _r_ = [0, cst_src_ivar0_ml, 446, 35],
    _p_ = [0, cst_src_ivar0_ml, 383, 15],
    _o_ = [0, cst_src_ivar0_ml, 362, 15],
    _n_ = [0, cst_src_ivar0_ml, 340, 15],
    _m_ = [0, cst_src_ivar0_ml, 321, 15],
    _j_ = [0, "_"],
    _k_ = [0, "t"],
    cst_Ivar_fill_of_full_ivar = "Ivar.fill of full ivar",
    _l_ = [0, cst_src_ivar0_ml, 306, 15],
    _i_ = [0, cst_src_ivar0_ml, 296, 15],
    cst_Ivar_value_exn_called_on_e = "Ivar.value_exn called on empty ivar",
    _h_ = [0, cst_src_ivar0_ml, 285, 15],
    _g_ = [0, cst_src_ivar0_ml, 277, 15],
    _e_ = [0, "Full"],
    _f_ = [0, cst_src_ivar0_ml, 269, 15],
    _d_ = [0, "Empty"],
    _c_ = [0, cst_src_ivar0_ml, 258, 15],
    _b_ = [0, "execution_context"],
    _a_ = [0, cst_src_ivar0_ml, 118, 6],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Ivar0 = cst_Async_kernel_Ivar0$0;
   function set_prev(param, x){param[3] = x; return 0;}
   function set_next(param, x){param[4] = x; return 0;}
   function create(run, execution_context){
    var t = [0, run, execution_context, 0, 0];
    set_prev(t, t);
    set_next(t, t);
    return t;
   }
   function create2(run1, execution_context1, run2, execution_context2){
    var
     t1 = [0, run1, execution_context1, 0, 0],
     t2 = [0, run2, execution_context2, t1, t1];
    set_prev(t1, t2);
    set_next(t1, t2);
    return t1;
   }
   function length(t){
    var n = [0, 1], r = [0, t[4]];
    for(;;){
     if(caml_call2(Core[246], r[1], t)) return n[1];
     n[1]++;
     r[1] = r[1][4];
    }
   }
   function enqueue(t, scheduler, v){
    return caml_call4(Async_kernel_Scheduler1[63], scheduler, t[2], t[1], v);
   }
   function schedule_jobs(t, v){
    var scheduler = caml_call1(Async_kernel_Scheduler1[71], 0);
    enqueue(t, scheduler, v);
    var r = [0, t[4]];
    for(;;){
     if(caml_call2(Core[246], r[1], t)) return 0;
     enqueue(r[1], scheduler, v);
     r[1] = r[1][4];
    }
   }
   function add(t, run, execution_context){
    var result = [0, run, execution_context, t[3], t];
    set_next(t[3], result);
    set_prev(t, result);
    return result;
   }
   function of_list(l){
    if(! l) return 0;
    var
     l$0 = l[2],
     match = l[1],
     execution_context = match[2],
     run = match[1],
     first = create(run, execution_context),
     prev = first,
     l$1 = l$0;
    for(;;){
     if(! l$1){set_prev(first, prev); return [0, first];}
     var
      l$2 = l$1[2],
      match$0 = l$1[1],
      execution_context$0 = match$0[2],
      run$0 = match$0[1],
      prev$0 = [0, run$0, execution_context$0, prev, first];
     set_next(prev, prev$0);
     var prev = prev$0, l$1 = l$2;
    }
   }
   function to_list(first){
    var t$1 = first[3], t = t$1, acc = 0;
    for(;;){
     var acc$0 = [0, [0, t[1], t[2]], acc];
     if(caml_call2(Core[246], t, first)) return acc$0;
     var t$0 = t[3], t = t$0, acc = acc$0;
    }
   }
   function sexp_of_t(param, t){
    var execution_context = t[2];
    return [1,
            [0,
             _b_,
             [0,
              caml_call1(Async_kernel_Execution_context[6], execution_context),
              0]]];
   }
   function cell_of_handler(x){return x;}
   function equal(t$0, t){return caml_call2(Core[246], t$0, t);}
   function indir(t){return [0, [3, t]];}
   var
    include = Async_kernel_Scheduler1[4],
    create_with_cell = include[1],
    create$0 = include[2],
    create_full = include[3];
   function squash(t$3){
    var match$0 = t$3[1];
    if(typeof match$0 !== "number" && 3 === match$0[0]){
     var t$4 = match$0[1], indir$1 = t$4[1];
     if(typeof indir$1 !== "number" && 3 === indir$1[0]){
      var t$5 = indir$1[1];
      a:
      {
       var indir = indir$1, t = t$5;
       for(;;){
        var indir$0 = t[1];
        if(typeof indir$0 === "number") break;
        if(3 !== indir$0[0]) break a;
        var t$0 = indir$0[1], indir = indir$0, t = t$0;
       }
      }
      var t$1 = t$3;
      for(;;){
       var match = t$1[1];
       if(typeof match !== "number" && 3 === match[0]){
        var t$2 = match[1];
        t$1[1] = indir;
        var t$1 = t$2;
        continue;
       }
       return t$1;
      }
     }
     return t$4;
    }
    return t$3;
   }
   function invariant(a_invariant, t){
    var t$0 = squash(t), handler = t$0[1];
    if(typeof handler === "number") return 0;
    switch(handler[0]){
      case 0:
       caml_call1(Async_kernel_Execution_context[7], handler[2]);
       var r = [0, handler[4]];
       for(;;){
        if(caml_call2(Core[246], r[1], handler)) return 0;
        var t1 = r[1];
        if(! caml_call2(Core[246], t1[4][3], t1))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        caml_call1(Async_kernel_Execution_context[7], t1[2]);
        r[1] = r[1][4];
       }
       break;
      case 1:
       var execution_context = handler[2];
       return caml_call1(Async_kernel_Execution_context[7], execution_context);
      case 2:
       var a = handler[1]; return caml_call1(a_invariant, a);
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    }
   }
   function sexp_of_t$0(sexp_of_a, t){
    var t$0 = squash(t), match = t$0[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 2:
        var a = match[1];
        return [1, [0, _e_, [0, caml_call1(sexp_of_a, a), 0]]];
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     }
    return _d_;
   }
   function peek(t){
    var t$0 = squash(t), match = t$0[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 2:
        var a = match[1]; return [0, a];
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     }
    return 0;
   }
   function value(t, if_empty_then_failwith){
    var t$0 = squash(t), match = t$0[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 2:
        var a = match[1]; return a;
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
     }
    return caml_call1(Core[6], if_empty_then_failwith);
   }
   function value_exn(t){return value(t, cst_Ivar_value_exn_called_on_e);}
   function is_empty(t){
    var t$0 = squash(t), _D_ = t$0[1];
    if(typeof _D_ !== "number")
     switch(_D_[0]){
       case 2:
        return 0;
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     }
    return 1;
   }
   function is_full(t){return 1 - is_empty(t);}
   function fill(t, v){
    var x_001 = squash(t), handler = x_001[1];
    if(typeof handler !== "number")
     switch(handler[0]){
       case 0:
        x_001[1] = [2, v]; return schedule_jobs(handler, v);
       case 1:
        var execution_context = handler[2], run = handler[1];
        x_001[1] = [2, v];
        var _y_ = caml_call1(Async_kernel_Scheduler1[71], 0);
        return caml_call3
                (caml_call1(Async_kernel_Scheduler1[63], _y_),
                 execution_context,
                 run,
                 v);
       case 2:
        var
         _z_ = 0,
         _A_ = 0,
         _B_ =
           [0,
            [1,
             [0,
              _k_,
              [0, sexp_of_t$0(function(param){return _j_;}, x_001), _A_]]],
            _z_],
         _C_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Ivar_fill_of_full_ivar),
             _B_]];
        return caml_call1(Core[253], _C_);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     }
    x_001[1] = [2, v];
    return 0;
   }
   function remove_handler(t, handler){
    function x(_x_){return 0;}
    handler[1] = x;
    var t$0 = squash(t), cell = t$0[1];
    if(typeof cell !== "number")
     switch(cell[0]){
       case 0:
        if(caml_call2(Core[246], handler, handler[4])){t$0[1] = 0; return 0;}
        if(caml_call2(Core[246], handler, cell)) t$0[1] = handler[4];
        set_prev(handler[4], handler[3]);
        set_next(handler[3], handler[4]);
        set_prev(handler, handler);
        return set_next(handler, handler);
       case 2:
        return 0;
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
     }
    return 0;
   }
   function add_handler(t, run, execution_context){
    var t$0 = squash(t), handler = t$0[1];
    if(typeof handler !== "number")
     switch(handler[0]){
       case 0:
        return add(handler, run, execution_context);
       case 1:
        var
         execution_context$0 = handler[2],
         run$0 = handler[1],
         handler$1 =
           create2(run, execution_context, run$0, execution_context$0);
        t$0[1] = handler$1;
        return handler$1;
       case 2:
        var
         v = handler[1],
         handler$2 = create(run, execution_context),
         run$1 = function(v){return caml_call1(handler$2[1], v);},
         _w_ = caml_call1(Async_kernel_Scheduler1[71], 0);
        caml_call3
         (caml_call1(Async_kernel_Scheduler1[63], _w_),
          execution_context,
          run$1,
          v);
        return handler$2;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
     }
    var handler$0 = create(run, execution_context);
    t$0[1] = handler$0;
    return handler$0;
   }
   function has_handlers(t){
    var t$0 = squash(t), _v_ = t$0[1];
    if(typeof _v_ !== "number")
     switch(_v_[0]){
       case 3:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
       case 2: break;
       default: return 1;
     }
    return 0;
   }
   function upon(t, run){
    var _u_ = caml_call1(Async_kernel_Scheduler1[71], 0);
    return add_handler(t, run, caml_call1(Async_kernel_Scheduler1[72], _u_));
   }
   function upon$0(t, run){
    var
     scheduler = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], scheduler),
     t$0 = squash(t),
     handler = t$0[1];
    if(typeof handler !== "number")
     switch(handler[0]){
       case 0:
        add(handler, run, execution_context); return 0;
       case 1:
        var execution_context$0 = handler[2], run$0 = handler[1];
        t$0[1] = create2(run, execution_context, run$0, execution_context$0);
        return 0;
       case 2:
        var v = handler[1];
        return caml_call4
                (Async_kernel_Scheduler1[63],
                 scheduler,
                 execution_context,
                 run,
                 v);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
     }
    t$0[1] = [1, run, execution_context];
    return 0;
   }
   function connect(bind_result, bind_rhs){
    var _s_ = 1 - caml_call2(Core[246], bind_result, bind_rhs);
    if(! _s_) return _s_;
    var bind_result$0 = squash(bind_result), indir = [3, bind_result$0];
    a:
    {
     b:
     c:
     {
      var ivar = bind_rhs;
      d:
      for(;;){
       var bind_rhs_contents = ivar[1];
       if(typeof bind_rhs_contents === "number") break c;
       switch(bind_rhs_contents[0]){
         case 2:
          break d;
         case 3:
          var ivar$0 = bind_rhs_contents[1];
          ivar[1] = indir;
          var ivar = ivar$0;
          break;
         default: break b;
       }
      }
      break a;
     }
     if(1 - caml_call2(Core[246], ivar, bind_result$0)) ivar[1] = indir;
    }
    var t1 = bind_result$0[1];
    a:
    {
     b:
     {
      if(typeof t1 !== "number")
       switch(t1[0]){
         case 0:
          if(typeof bind_rhs_contents === "number") break a;
          switch(bind_rhs_contents[0]){
            case 0:
             var last1 = t1[3], last2 = bind_rhs_contents[3];
             set_next(last1, bind_rhs_contents);
             set_next(last2, t1);
             set_prev(t1, last2);
             return set_prev(bind_rhs_contents, last1);
            case 1:
             var
              execution_context2 = bind_rhs_contents[2],
              run2 = bind_rhs_contents[1];
             add(t1, run2, execution_context2);
             return 0;
            case 2:
             var v = bind_rhs_contents[1];
             bind_result$0[1] = bind_rhs_contents;
             return schedule_jobs(t1, v);
          }
          break;
         case 1:
          var execution_context = t1[2], run = t1[1];
          if(typeof bind_rhs_contents === "number") break a;
          switch(bind_rhs_contents[0]){
            case 0:
             var handler1 = add(bind_rhs_contents, run, execution_context);
             bind_result$0[1] = handler1;
             return 0;
            case 1:
             var
              execution_context2$0 = bind_rhs_contents[2],
              run2$0 = bind_rhs_contents[1],
              handler1$0 =
                create2(run, execution_context, run2$0, execution_context2$0);
             bind_result$0[1] = handler1$0;
             return 0;
            case 2:
             var v$0 = bind_rhs_contents[1];
             bind_result$0[1] = bind_rhs_contents;
             var _t_ = caml_call1(Async_kernel_Scheduler1[71], 0);
             return caml_call3
                     (caml_call1(Async_kernel_Scheduler1[63], _t_),
                      execution_context,
                      run,
                      v$0);
          }
          break;
         case 2: break;
         default: break b;
       }
      if(typeof bind_rhs_contents !== "number" && 3 === bind_rhs_contents[0])
       break b;
      if(typeof t1 === "number") break a;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
    }
    return typeof bind_rhs_contents === "number"
            ? 0
            : (bind_result$0[1] = bind_rhs_contents, 0);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Ivar0);
   var
    Async_kernel_Ivar0 =
      [0,
       sexp_of_t$0,
       invariant,
       create$0,
       create_full,
       create_with_cell,
       peek,
       value_exn,
       value,
       is_empty,
       is_full,
       equal,
       connect,
       fill,
       [0, sexp_of_t, length, of_list, to_list],
       cell_of_handler,
       add_handler,
       remove_handler,
       has_handlers,
       upon$0,
       upon,
       indir,
       squash];
   runtime.caml_register_global
    (36, Async_kernel_Ivar0, cst_Async_kernel_Ivar0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred0
//# unitInfo: Requires: Async_kernel__Ivar0, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred0$0 = "Async_kernel__Deferred0",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Ivar0 = global_data.Async_kernel__Ivar0,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred0.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_Deferred_value_exn_called_ =
      "Deferred.value_exn called on undetermined deferred",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred0 = cst_Async_kernel_Deferred0$0;
   function of_ivar(ivar){return ivar;}
   function invariant(invariant_a, t){
    return caml_call2(Async_kernel_Ivar0[2], invariant_a, t);
   }
   function sexp_of_t(sexp_of_a, t){
    return caml_call2(Async_kernel_Ivar0[1], sexp_of_a, t);
   }
   function peek(t){return caml_call1(Async_kernel_Ivar0[6], t);}
   function return$0(a){return caml_call1(Async_kernel_Ivar0[4], a);}
   function is_determined(t){return caml_call1(Async_kernel_Ivar0[10], t);}
   function value_exn(t){
    return caml_call2
            (Async_kernel_Ivar0[8], t, cst_Deferred_value_exn_called_);
   }
   function upon(t, f){return caml_call2(Async_kernel_Ivar0[19], t, f);}
   function create(f){
    var result = caml_call1(Async_kernel_Ivar0[3], 0);
    caml_call1(f, result);
    return result;
   }
   function bind(t, f){
    var bind_result = caml_call1(Async_kernel_Ivar0[3], 0);
    upon
     (t,
      function(a){
       var _a_ = caml_call1(f, a);
       return caml_call2(Async_kernel_Ivar0[12], bind_result, _a_);
      });
    return bind_result;
   }
   function add_handler(t, f, execution_context){
    return caml_call3(Async_kernel_Ivar0[16], t, f, execution_context);
   }
   function remove_handler(t, h){
    return caml_call2(Async_kernel_Ivar0[17], t, h);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred0);
   var
    Async_kernel_Deferred0 =
      [0,
       sexp_of_t,
       invariant,
       of_ivar,
       create,
       peek,
       value_exn,
       is_determined,
       return$0,
       upon,
       bind,
       [0, Async_kernel_Ivar0[14][1]],
       add_handler,
       remove_handler];
   runtime.caml_register_global
    (13, Async_kernel_Deferred0, cst_Async_kernel_Deferred0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Ivar
//# unitInfo: Requires: Async_kernel__Deferred0, Async_kernel__Ivar0, Core__Binable, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Ivar$0 = "Async_kernel__Ivar",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Ivar0 = global_data.Async_kernel__Ivar0,
    Async_kernel_Deferred0 = global_data.Async_kernel__Deferred0,
    Core_Option = global_data.Core__Option,
    Core_Binable = global_data.Core__Binable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Ivar$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/ivar.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    sexp_of_t = Async_kernel_Ivar0[1],
    invariant = Async_kernel_Ivar0[2],
    create = Async_kernel_Ivar0[3],
    create_full = Async_kernel_Ivar0[4],
    peek = Async_kernel_Ivar0[6],
    value_exn = Async_kernel_Ivar0[7],
    is_empty = Async_kernel_Ivar0[9],
    is_full = Async_kernel_Ivar0[10],
    equal = Async_kernel_Ivar0[11],
    fill = Async_kernel_Ivar0[13],
    has_handlers = Async_kernel_Ivar0[18],
    read = Async_kernel_Deferred0[3],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Ivar = cst_Async_kernel_Ivar$0;
   function fill_if_empty(t, v){
    var _a_ = caml_call1(is_empty, t);
    return _a_ ? caml_call2(fill, t, v) : _a_;
   }
   function to_binable(t){return caml_call1(peek, t);}
   function of_binable(param){
    if(! param) return caml_call1(create, 0);
    var a = param[1];
    return caml_call1(create_full, a);
   }
   var
    include =
      caml_call1
       (caml_call1
         (Core_Binable[7],
          [0,
           Core_Option[1],
           Core_Option[2],
           Core_Option[3],
           Core_Option[4],
           Core_Option[5]]),
        [0, to_binable, of_binable]),
    bin_shape_t = include[1],
    bin_size_t = include[2],
    bin_write_t = include[3],
    bin_read_t = include[4],
    bin_read_t$0 = include[5],
    bin_writer_t = include[6],
    bin_reader_t = include[7],
    bin_t = include[8];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Ivar);
   var
    Async_kernel_Ivar =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       sexp_of_t,
       invariant,
       equal,
       create,
       create_full,
       fill,
       fill_if_empty,
       is_empty,
       is_full,
       read,
       peek,
       value_exn,
       has_handlers];
   runtime.caml_register_global
    (15, Async_kernel_Ivar, cst_Async_kernel_Ivar$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Monad_sequence
//# unitInfo: Requires: Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Monad_sequenc$0 = "Async_kernel__Monad_sequence",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Monad_sequenc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/monad_sequence.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, "Parallel"],
    _b_ = [0, "Sequential"],
    _c_ = [0, "Max_concurrent_jobs"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Monad_sequenc = cst_Async_kernel_Monad_sequenc$0;
   function sexp_of_how(param){
    if(typeof param === "number") return -676829465 <= param ? _a_ : _b_;
    var v_001 = param[2];
    return [1, [0, _c_, [0, caml_call1(Core[356], v_001), 0]]];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Monad_sequenc);
   var Async_kernel_Monad_sequence = [0, sexp_of_how];
   runtime.caml_register_global
    (15, Async_kernel_Monad_sequence, cst_Async_kernel_Monad_sequenc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred1
//# unitInfo: Requires: Assert_failure, Async_kernel__Deferred0, Async_kernel__Ivar, Async_kernel__Monad_sequence, Async_kernel__Scheduler1, Base__Monad, Core, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred1$0 = "Async_kernel__Deferred1",
    cst_async_kernel$0 = "async_kernel",
    cst_src_deferred1_ml = "src/deferred1.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Assert_failure = global_data.Assert_failure,
    Core_List = global_data.Core__List,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core = global_data.Core,
    Async_kernel_Deferred0 = global_data.Async_kernel__Deferred0,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Monad = global_data.Base__Monad,
    Async_kernel_Monad_sequence = global_data.Async_kernel__Monad_sequence;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred1$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_deferred1_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    sexp_of_t = Async_kernel_Deferred0[1],
    invariant = Async_kernel_Deferred0[2],
    of_ivar = Async_kernel_Deferred0[3],
    create = Async_kernel_Deferred0[4],
    peek = Async_kernel_Deferred0[5],
    value_exn = Async_kernel_Deferred0[6],
    is_determined = Async_kernel_Deferred0[7],
    upon = Async_kernel_Deferred0[9],
    Handler = Async_kernel_Deferred0[11],
    add_handler = Async_kernel_Deferred0[12],
    remove_handler = Async_kernel_Deferred0[13],
    _a_ = [0, cst_src_deferred1_ml, 120, 10],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred1 = cst_Async_kernel_Deferred1$0;
   function never(param){
    var _F_ = caml_call1(Async_kernel_Ivar[12], 0);
    return caml_call1(Async_kernel_Ivar[18], _F_);
   }
   var
    of_ivar$0 = Async_kernel_Deferred0[3],
    return$0 = Async_kernel_Deferred0[8],
    upon$0 = Async_kernel_Deferred0[9],
    bind = Async_kernel_Deferred0[10],
    map =
      [0,
       -198771759,
       function(t, f){
        var result = caml_call1(Async_kernel_Ivar[12], 0);
        caml_call2
         (upon$0,
          t,
          function(a){
           var _E_ = caml_call1(f, a);
           return caml_call2(Async_kernel_Ivar[14], result, _E_);
          });
        return caml_call1(of_ivar$0, result);
       }],
    M = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = M[1],
    symbol_map = M[2],
    Monad_infix = M[3],
    bind$0 = M[4],
    map$0 = M[6],
    join = M[7],
    ignore_m = M[8],
    return$1 = Async_kernel_Deferred0[8],
    include = M[11],
    symbol_bind$0 = include[2],
    symbol_map$0 = include[3],
    return$2 = Async_kernel_Deferred0[8],
    include$0 = M[11][4],
    bind$1 = include$0[2],
    map$1 = include$0[3],
    both = include$0[4],
    Open_on_rhs = include$0[5],
    return$3 = Async_kernel_Deferred0[8],
    Let_syntax = [0, bind$1, map$1, both, Open_on_rhs, return$3],
    Let_syntax$0 = [0, symbol_bind$0, symbol_map$0, return$2, Let_syntax],
    unit = caml_call1(Let_syntax$0[3], 0);
   function both$0(t1, t2){
    return caml_call1
            (create,
             function(result){
              return caml_call2
                      (upon,
                       t1,
                       function(a1){
                        return caml_call2
                                (upon,
                                 t2,
                                 function(a2){
                                  return caml_call2
                                          (Async_kernel_Ivar[14], result, [0, a1, a2]);
                                 });
                       });
             });
   }
   var
    symbol_bind$1 = Monad_infix[1],
    symbol_map$1 = Monad_infix[2],
    Infix = [0, symbol_bind$1, symbol_map$1, upon, both$0];
   function don_t_wait_for(param){return 0;}
   function map$2(param, f2){
    var f1 = param[2], t = param[1];
    return [0, t, function(x){return caml_call1(f2, caml_call1(f1, x));}];
   }
   var Choice = [0, map$2];
   function process(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var rest = param$0[3], handler = param$0[2], t = param$0[1];
     caml_call2(remove_handler, t, handler);
     var param$0 = rest;
    }
   }
   var Unregister = [0, process];
   function choice(t, f){return [0, t, f];}
   function enabled(choices){
    var result = caml_call1(Async_kernel_Ivar[12], 0), unregisters = [0, 0];
    function ready(param){
     var _A_ = caml_call1(Async_kernel_Ivar[16], result);
     if(! _A_) return _A_;
     caml_call1(Unregister[1], unregisters[1]);
     function _B_(param){
      function _C_(ac, param){
       var f = param[2], t = param[1], match = caml_call1(peek, t);
       if(! match) return ac;
       var v = match[1];
       return [0, caml_call1(f, v), ac];
      }
      var _D_ = caml_call3(Core_List[10], choices, 0, _C_);
      return caml_call1(Core_List[34], _D_);
     }
     return caml_call2(Async_kernel_Ivar[14], result, _B_);
    }
    var
     _y_ = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], _y_);
    function _z_(acc, param){
     var t = param[1];
     return [0,
             t,
             caml_call3
              (Async_kernel_Deferred0[12], t, ready, execution_context),
             acc];
    }
    unregisters[1] = caml_call3(Core_List[10], choices, 0, _z_);
    return caml_call1(Async_kernel_Ivar[18], result);
   }
   function choose_result(choices){
    var choices$0 = choices;
    for(;;){
     if(! choices$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var
      choices$1 = choices$0[2],
      match = choices$0[1],
      f = match[2],
      t = match[1],
      match$0 = caml_call1(peek, t);
     if(match$0){var v = match$0[1]; return caml_call1(f, v);}
     var choices$0 = choices$1;
    }
   }
   function choose(choices){
    var result = caml_call1(Async_kernel_Ivar[12], 0), unregisters = [0, 0];
    function ready(param){
     var _w_ = caml_call1(Async_kernel_Ivar[16], result);
     if(! _w_) return _w_;
     caml_call1(Unregister[1], unregisters[1]);
     var _x_ = choose_result(choices);
     return caml_call2(Async_kernel_Ivar[14], result, _x_);
    }
    var
     _u_ = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], _u_);
    function _v_(acc, param){
     var t = param[1];
     return [0,
             t,
             caml_call3
              (Async_kernel_Deferred0[12], t, ready, execution_context),
             acc];
    }
    unregisters[1] = caml_call3(Core_List[10], choices, 0, _v_);
    return caml_call1(Async_kernel_Ivar[18], result);
   }
   function any_f(ts, f){
    function _t_(t){return [0, t, f];}
    return choose(caml_call2(Core_List[72], ts, _t_));
   }
   function any(ts){return any_f(ts, function(_s_){return _s_;});}
   function any_unit(ts){return any_f(ts, function(_r_){return 0;});}
   function for$0(start, to, do$0){
    function loop(i){
     if(caml_call2(Core[91], i, to)) return caml_call1(Let_syntax$0[3], 0);
     function _p_(param){return loop(i + 1 | 0);}
     var _q_ = caml_call1(do$0, i);
     return caml_call2(Let_syntax$0[4][1], _q_, _p_);
    }
    return loop(start);
   }
   function repeat_until_finished(state, f){
    return caml_call1
            (create,
             function(finished){
              function loop(state){
               function _n_(param){
                if(990972795 <= param[1]){
                 var state = param[2];
                 return loop(state);
                }
                var result = param[2];
                return caml_call2(Async_kernel_Ivar[14], finished, result);
               }
               var _o_ = caml_call1(f, state);
               return caml_call2(Infix[3], _o_, _n_);
              }
              return loop(state);
             });
   }
   function forever(state, f){
    var
     _j_ = Core[159],
     _k_ =
       repeat_until_finished
        (state,
         function(state){
          function _l_(state){return [0, 990972795, state];}
          var _m_ = caml_call1(f, state);
          return caml_call2(Let_syntax$0[4][2], _m_, _l_);
         });
    return caml_call2(Infix[3], _k_, _j_);
   }
   var sexp_of_how = Async_kernel_Monad_sequence[1];
   function fold(t, init, f){
    return caml_call1
            (create,
             function(result){
              function loop(t, b){
               if(! t) return caml_call2(Async_kernel_Ivar[14], result, b);
               var xs = t[2], x = t[1];
               function _h_(b){return loop(xs, b);}
               var _i_ = caml_call2(f, b, x);
               return caml_call2(Infix[3], _i_, _h_);
              }
              return loop(t, init);
             });
   }
   function seqmap(t, f){
    var
     _d_ = Core_List[34],
     _e_ =
       fold
        (t,
         0,
         function(bs, a){
          function _f_(b){return [0, b, bs];}
          var _g_ = caml_call1(f, a);
          return caml_call2(Infix[2], _g_, _f_);
         });
    return caml_call2(Infix[2], _e_, _d_);
   }
   function all(ds){return seqmap(ds, function(_c_){return _c_;});}
   function all_unit(ds){return fold(ds, 0, function(param, d){return d;});}
   function ok(x){
    function _b_(x){return [0, x];}
    return caml_call2(Infix[2], x, _b_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred1);
   var
    Async_kernel_Deferred1 =
      [0,
       sexp_of_t,
       invariant,
       of_ivar,
       create,
       peek,
       value_exn,
       is_determined,
       upon,
       Handler,
       add_handler,
       remove_handler,
       never,
       M,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       map$0,
       join,
       ignore_m,
       return$1,
       Let_syntax$0,
       unit,
       both$0,
       Infix,
       don_t_wait_for,
       Choice,
       Unregister,
       choice,
       enabled,
       choose_result,
       choose,
       any_f,
       any,
       any_unit,
       for$0,
       repeat_until_finished,
       forever,
       sexp_of_how,
       fold,
       seqmap,
       all,
       all_unit,
       ok];
   runtime.caml_register_global
    (20, Async_kernel_Deferred1, cst_Async_kernel_Deferred1$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_std
//# unitInfo: Requires: Async_kernel__Deferred1, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_std = "Async_kernel__Deferred_std",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_std);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/deferred_std.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var
    _a_ = Async_kernel_Deferred1[25],
    symbol = _a_[3],
    ppx_both = _a_[4],
    include = Async_kernel_Deferred1[22],
    symbol_bind = include[1],
    symbol_map = include[2],
    return$0 = include[3],
    Let_syntax = include[4],
    choice = Async_kernel_Deferred1[29],
    choose = Async_kernel_Deferred1[32],
    don_t_wait_for = Async_kernel_Deferred1[26],
    never = Async_kernel_Deferred1[12],
    upon = Async_kernel_Deferred1[8];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_std);
   var
    Async_kernel_Deferred_std =
      [0,
       symbol,
       ppx_both,
       symbol_bind,
       symbol_map,
       Let_syntax,
       choice,
       choose,
       don_t_wait_for,
       never,
       return$0,
       upon];
   runtime.caml_register_global
    (12, Async_kernel_Deferred_std, cst_Async_kernel_Deferred_std);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Ivar_filler
//# unitInfo: Requires: Assert_failure, Async_kernel__Ivar, Base__Invariant, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Ivar_filler$0 = "Async_kernel__Ivar_filler",
    cst_async_kernel$0 = "async_kernel",
    cst_src_ivar_filler_ml = "src/ivar_filler.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Ivar_filler$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_ivar_filler_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_attempt_to_fill_full_ivar = "attempt to fill full ivar",
    _d_ = [0, "_"],
    _c_ = [0, cst_src_ivar_filler_ml, 15, 20],
    _e_ = [0, cst_src_ivar_filler_ml, 12, 154, 176],
    _a_ = [0, "Empty"],
    _b_ = [0, "Full"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Ivar_filler = cst_Async_kernel_Ivar_filler$0;
   function sexp_of_t(of_a_005, x_006){
    function _i_(param){
     if(! param) return _b_;
     var
      arg0_002 = param[1],
      res0_003 = caml_call2(Async_kernel_Ivar[9], of_a_005, arg0_002);
     return [1, [0, _a_, [0, res0_003, 0]]];
    }
    return caml_call2(Core[501], _i_, x_006);
   }
   function invariant(param, t){
    function _g_(param){
     var match = t[1];
     if(! match) return 0;
     var ivar = match[1];
     if(caml_call1(Async_kernel_Ivar[16], ivar)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    }
    function _h_(x_007){
     return sexp_of_t(function(param){return _d_;}, x_007);
    }
    return caml_call4(Base_Invariant[1], _e_, t, _h_, _g_);
   }
   function create(param){
    var ivar = caml_call1(Async_kernel_Ivar[12], 0), t = [0, [0, ivar]];
    return [0, t, caml_call1(Async_kernel_Ivar[18], ivar)];
   }
   function is_empty(t){return t[1] ? 1 : 0;}
   function fill(t, a){
    var match = t[1];
    if(match){
     var i = match[1];
     t[1] = 0;
     return caml_call2(Async_kernel_Ivar[14], i, a);
    }
    var
     _f_ = caml_call1(Sexplib0_Sexp_conv[7], cst_attempt_to_fill_full_ivar);
    return caml_call1(Core[253], _f_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Ivar_filler);
   var
    Async_kernel_Ivar_filler =
      [0, sexp_of_t, invariant, create, is_empty, fill];
   runtime.caml_register_global
    (22, Async_kernel_Ivar_filler, cst_Async_kernel_Ivar_filler$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Tail
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Ivar, Base__Field, Core, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Tail$0 = "Async_kernel__Tail",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core;
   global_data.Base__Field;
   var
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Tail$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/tail.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_stream_is_closed = "stream is closed",
    cst_open_tail = "<open tail>",
    cst_closed_tail = "<closed tail>",
    _a_ = [0, "..."],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Tail = cst_Async_kernel_Tail$0;
   function sexp_of_t(sexp_of_a, t){
    var d = t, ac = 0;
    for(;;){
     var match = caml_call1(Async_kernel_Deferred1[5], d);
     if(! match) return [1, caml_call1(Core_List[34], [0, _a_, ac])];
     var match$0 = match[1];
     if(! match$0) return [1, caml_call1(Core_List[34], ac)];
     var
      t$0 = match$0[2],
      a = match$0[1],
      ac$0 = [0, caml_call1(sexp_of_a, a), ac],
      d = t$0,
      ac = ac$0;
    }
   }
   function next(t){return t;}
   var Stream = [0, sexp_of_t, next];
   function sexp_of_t$0(param, t){
    var
     _d_ =
       caml_call1(Async_kernel_Ivar[16], t[1])
        ? cst_open_tail
        : cst_closed_tail;
    return [0, _d_];
   }
   function create(param){return [0, caml_call1(Async_kernel_Ivar[12], 0)];}
   function collect(t){return caml_call1(Async_kernel_Ivar[18], t[1]);}
   function is_closed(t){return caml_call1(Async_kernel_Ivar[17], t[1]);}
   function fill_exn(t, v){
    if(! is_closed(t)) return caml_call2(Async_kernel_Ivar[14], t[1], v);
    var _c_ = caml_call1(Sexplib0_Sexp_conv[7], cst_stream_is_closed);
    return caml_call1(Core[253], _c_);
   }
   function close_exn(t){return fill_exn(t, 0);}
   function close_if_open(t){
    var _b_ = 1 - is_closed(t);
    return _b_ ? caml_call2(Async_kernel_Ivar[14], t[1], 0) : _b_;
   }
   function extend(t, v){
    var next = caml_call1(Async_kernel_Ivar[12], 0);
    fill_exn(t, [0, v, caml_call1(Async_kernel_Ivar[18], next)]);
    t[1] = next;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Tail);
   var
    Async_kernel_Tail =
      [0,
       sexp_of_t$0,
       create,
       extend,
       close_exn,
       close_if_open,
       is_closed,
       Stream,
       collect];
   runtime.caml_register_global
    (23, Async_kernel_Tail, cst_Async_kernel_Tail$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Monitor
//# unitInfo: Requires: Assert_failure, Async_kernel__Debug, Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Execution_context, Async_kernel__Ivar, Async_kernel__Ivar_filler, Async_kernel__Monitor0, Async_kernel__Scheduler1, Async_kernel__Tail, Async_kernel_config, Base__Backtrace, Base__Exn, Base__Field, Base__Invariant, Core, Core__Bag, Core__Error, Core__Info, Core__List, Core__Or_error, Core__Result, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib__Conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Async_kernel_Monitor$0 = "Async_kernel__Monitor",
    cst_Caught_by_monitor = "Caught by monitor ",
    cst_async_kernel$0 = "async_kernel",
    cst_exn = "exn",
    cst_file = "file ",
    cst_src_monitor_ml = "src/monitor.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    job_queue = 'Called from file "job_queue.ml"',
    deferred0 = 'Called from file "deferred0.ml"',
    deferred1 = 'Called from file "deferred1.ml"',
    monitor = 'Called from file "monitor.ml"',
    import0 = 'Raised at file "import0.ml"',
    error = 'Called from file "error.ml"',
    Core_Error = global_data.Core__Error,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Core_Or_error = global_data.Core__Or_error,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Async_kernel_Ivar_filler = global_data.Async_kernel__Ivar_filler,
    Base_Exn = global_data.Base__Exn;
   global_data.Base__Field;
   var
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Core_Result = global_data.Core__Result,
    Async_kernel_config = global_data.Async_kernel_config,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Core_Bag = global_data.Core__Bag,
    Core_List = global_data.Core__List,
    Base_Backtrace = global_data.Base__Backtrace,
    Core_Info = global_data.Core__Info,
    Core_String = global_data.Core__String,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Monitor0 = global_data.Async_kernel__Monitor0,
    Sexplib_Conv = global_data.Sexplib__Conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Monitor$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_monitor_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    has_seen_error = Async_kernel_Monitor0[4],
    name = Async_kernel_Monitor0[14],
    Fields = Async_kernel_Monitor0[15],
    sexp_of_t = Async_kernel_Monitor0[18],
    create_with_parent = Async_kernel_Monitor0[20],
    main = Async_kernel_Monitor0[21],
    cst_Monitor_catch_got_unexpect =
      "Monitor.catch got unexpected empty stream",
    _q_ = [0, "finally_exn"],
    _r_ = [0, cst_exn],
    cst_Async_finally = "Async finally",
    _s_ = [0, 523273847],
    _t_ = [0, 0],
    _u_ = [0, "finally"],
    cst_Monitor_protect = "Monitor.protect",
    cst_try_with_join_or_error = "try_with_join_or_error",
    cst_try_with_or_error = "try_with_or_error",
    _p_ = [0, 3903734],
    _o_ = [0, cst_src_monitor_ml, 422, 17],
    _n_ = [0, cst_exn],
    cst_failed_to_set_Monitor_Expe =
      "failed to set [Monitor.Expert.try_with_log_exn]",
    _l_ = [0, 3553398],
    _m_ = [1, 0],
    cst_Monitor_send_exn_found_lis =
      "Monitor.send_exn found listening monitor",
    cst_Monitor_send_exn = "Monitor.send_exn",
    cst_monitor_ml_Error = "monitor.ml.Error",
    _k_ = [0, cst_src_monitor_ml, 199, 6],
    _d_ =
      [0,
       [11, cst_file, [3, 0, [11, ", line LINE, characters C1-C2", 0]]],
       "file %S, line LINE, characters C1-C2"],
    _i_ =
      [0,
       [11,
        cst_file,
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11, ", characters ", [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]]]]]],
       "file %S, line %d, characters %d-%d"],
    _e_ =
      [0,
       [11, cst_Caught_by_monitor, [2, 0, [11, " at ", [2, 0, 0]]]],
       "Caught by monitor %s at %s"],
    _g_ =
      [0, [11, "Caught by monitor at ", [2, 0, 0]], "Caught by monitor at %s"],
    _h_ = [0, [11, cst_Caught_by_monitor, [2, 0, 0]], "Caught by monitor %s"],
    _f_ = [0, "backtrace_history"],
    _c_ = [0, cst_src_monitor_ml, 46, 23],
    _a_ = [0, cst_src_monitor_ml, 20, 44],
    _b_ = [0, cst_src_monitor_ml, 13, 226, 248],
    cst_Async_kernel_Monitor_Monit = "Async_kernel__Monitor.Monitor_exn",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Monitor = cst_Async_kernel_Monitor$0;
   function invariant(t){
    function _ax_(param){
     function _az_(_aM_){return 0;}
     function _aA_(_aL_){return 0;}
     function _aB_(_aK_){return 0;}
     function _aC_(_aJ_){return 0;}
     function f(next_error){
      if(caml_call1(Async_kernel_Ivar[16], next_error)) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     }
     var _ay_ = caml_call2(Base_Invariant[2], t, f);
     function _aD_(_aI_){return 0;}
     function _aE_(_aH_){return 0;}
     function _aF_(_aG_){return 0;}
     return caml_call8
             (Fields[13], _aF_, _aE_, _aD_, _ay_, _aC_, _aB_, _aA_, _az_);
    }
    return caml_call4(Base_Invariant[1], _b_, t, sexp_of_t, _ax_);
   }
   function current_execution_context(param){
    var _aw_ = caml_call1(Async_kernel_Scheduler1[71], 0);
    return caml_call1(Async_kernel_Scheduler1[72], _aw_);
   }
   function current(param){
    var _av_ = current_execution_context(0);
    return caml_call1(Async_kernel_Execution_context[4], _av_);
   }
   function detach(t){t[8] = 0; return 0;}
   function detach_and_iter_errors(t, f){
    detach(t);
    var
     scheduler = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], scheduler),
     handler_state_ref = [0, 0];
    function run_f(exn){
     var match = handler_state_ref[1];
     if(typeof match === "number"){
      if(match) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     }
     var bag_elt = match[1];
     try{var _au_ = caml_call1(f, exn); return _au_;}
     catch(inner_exn$0){
      var inner_exn = caml_wrap_exception(inner_exn$0);
      handler_state_ref[1] = 1;
      caml_call2(Core_Bag[26], t[5], bag_elt);
      throw caml_maybe_attach_backtrace(inner_exn, 0);
     }
    }
    handler_state_ref[1] =
     [0, caml_call2(Core_Bag[23], t[5], [0, execution_context, run_f])];
    return 0;
   }
   function detach_and_get_error_stream(t){
    detach(t);
    var tail = caml_call1(Async_kernel_Tail[2], 0);
    t[6] = [0, tail, t[6]];
    return caml_call1(Async_kernel_Tail[8], tail);
   }
   function get_next_error(t){return caml_call1(Async_kernel_Ivar[18], t[4]);}
   function detach_and_get_next_error(t){detach(t); return get_next_error(t);}
   function create(here, info, name, param){
    var parent = current(0);
    return caml_call4(create_with_parent, here, info, name, [0, parent]);
   }
   function backtrace(t){return t[2];}
   function extract_exn(t){return t[1];}
   var
    Monitor_exn =
      [248, cst_Async_kernel_Monitor_Monit, runtime.caml_fresh_oo_id(0)];
   function _j_(param){
    if(param[1] !== Monitor_exn)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
    var
     t = param[2],
     monitor$0 = t[4],
     backtrace_history = t[3],
     backtrace = t[2],
     exn = t[1],
     s = caml_call1(Core_Info[9], monitor$0[1]),
     name = runtime.caml_string_notequal(s, cst$1) ? [0, s] : 0,
     match$0 = monitor$0[2];
    if(match$0)
     var
      here = match$0[1],
      column = here[4] - here[3] | 0,
      _ao_ =
        Core[541]
         ? caml_call2(Core[257], _d_, here[1])
         : caml_call5(Core[257], _i_, here[1], here[2], column, column),
      pos = [0, _ao_];
    else
     var pos = 0;
    if(pos){
     var pos$0 = pos[1];
     if(name)
      var
       name$0 = name[1],
       _ap_ = [0, caml_call3(Core[257], _e_, name$0, pos$0), 0];
     else
      var _ap_ = [0, caml_call2(Core[257], _g_, pos$0), 0];
     var monitor$1 = _ap_;
    }
    else if(name)
     var
      name$1 = name[1],
      monitor$1 = [0, caml_call2(Core[257], _h_, name$1), 0];
    else
     var monitor$1 = 0;
    if(backtrace)
     var
      backtrace$0 = backtrace[1],
      backtrace$1 = caml_call1(Base_Backtrace[4], backtrace$0);
    else
     var backtrace$1 = 0;
    a:
    {
     if(backtrace$1){
      var rest = backtrace$1[2], t1 = backtrace$1[1];
      if(caml_call2(Core_String[57], t1, import0)){
       b:
       {
        if(rest){
         var rest$0 = rest[2], t2 = rest[1];
         if(caml_call2(Core_String[57], t2, error)){
          c:
          {
           if(rest$0){
            var rest$1 = rest$0[2], t3 = rest$0[1];
            if(caml_call2(Core_String[57], t3, error)){var rest$2 = rest$1; break c;}
           }
           var rest$2 = rest$0;
          }
          var rest$3 = rest$2;
          break b;
         }
        }
        var rest$3 = rest;
       }
       var traces = rest$3;
       break a;
      }
     }
     var traces = backtrace$1;
    }
    var match = caml_call1(Core_List[34], traces);
    a:
    {
     if(match){
      var rest$4 = match[2], t1$0 = match[1];
      if(caml_call2(Core_String[57], t1$0, job_queue)){
       if(rest$4){
        var rest$5 = rest$4[2], t2$0 = rest$4[1];
        if(caml_call2(Core_String[57], t2$0, job_queue)){
         b:
         if(rest$5){
          var rest$6 = rest$5[2], t2$1 = rest$5[1];
          if
           (!
            caml_call2(Core_String[57], t2$1, deferred0)
            &&
             !
             caml_call2(Core_String[57], t2$1, deferred1)
             && ! caml_call2(Core_String[57], t2$1, monitor))
           break b;
          var _aq_ = caml_call1(Core_List[34], rest$6);
          break a;
         }
         var _aq_ = caml_call1(Core_List[34], rest$5);
         break a;
        }
       }
       var _aq_ = caml_call1(Core_List[34], rest$4);
       break a;
      }
     }
     var _aq_ = traces;
    }
    var backtrace$2 = caml_call2(Core[157], _aq_, monitor$1);
    function list_if_not_empty(l){return l ? [0, l] : 0;}
    var
     match$1 = list_if_not_empty(backtrace$2),
     _ar_ = list_if_not_empty(backtrace_history),
     match$2 = 0;
    if(_ar_)
     var
      x_002 = _ar_[1],
      match$3 =
        [0,
         [1,
          [0, _f_, [0, caml_call2(Core[421], Base_Backtrace[1], x_002), 0]]],
         match$2];
    else
     var match$3 = match$2;
    if(match$1)
     var
      x_001 = match$1[1],
      _as_ = [0, caml_call2(Core[421], Core[471], x_001), match$3];
    else
     var _as_ = match$3;
    var sexp = [1, [0, caml_call1(Core[537], exn), _as_]];
    if(0 === sexp[0]) var _at_ = [0, sexp, 0]; else var l = sexp[1], _at_ = l;
    return [1,
            [0, caml_call1(Sexplib0_Sexp_conv[7], cst_monitor_ml_Error), _at_]];
   }
   caml_call4(Sexplib_Conv[70][1], 0, 0, Monitor_exn, _j_);
   function extract_exn$0(exn){
    if(exn[1] !== Monitor_exn) return exn;
    var error = exn[2];
    return error[1];
   }
   function send_exn(t, opt, exn){
    if(opt) var sth = opt[1], backtrace = sth; else var backtrace = 3553398;
    if(exn[1] === Monitor_exn)
     var exn$0 = exn;
    else{
     if(typeof backtrace === "number")
      var backtrace$0 = caml_call1(Base_Backtrace[6][5], exn);
     else
      var b = backtrace[2], backtrace$0 = [0, b];
     var
      backtrace_history = current_execution_context(0)[4],
      exn$0 = [0, Monitor_exn, [0, exn, backtrace$0, backtrace_history, t]];
    }
    if(Async_kernel_Debug[7]){
     var
      _ai_ =
        function(param){
         var
          arg1_004 = param[2],
          arg0_003 = param[1],
          res0_005 = caml_call1(sexp_of_t, arg0_003),
          res1_006 = caml_call1(Core[537], arg1_004);
         return [1, [0, res0_005, [0, res1_006, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15], cst_Monitor_send_exn, [0, t, exn$0], _ai_);
    }
    t[7] = 1;
    var scheduler = caml_call1(Async_kernel_Scheduler1[71], 0), t$0 = t;
    for(;;){
     caml_call2(Async_kernel_Ivar[14], t$0[4], exn$0);
     t$0[4] = caml_call1(Async_kernel_Ivar[12], 0);
     var match = t$0[8];
     if(typeof match === "number") break;
     var parent = match[1], t$0 = parent;
    }
    if(match){
     var
      _aj_ = caml_call1(Async_kernel_config[31][1], 0),
      _ak_ = caml_call1(Async_kernel_Scheduler1[71], 0);
     return caml_call2
             (caml_call1(Async_kernel_Scheduler1[76], _ak_), exn$0, _aj_);
    }
    if(Async_kernel_Debug[7]){
     var
      _al_ =
        function(param){
         var
          arg1_008 = param[2],
          arg0_007 = param[1],
          res0_009 = caml_call1(sexp_of_t, arg0_007),
          res1_010 = caml_call1(Core[537], arg1_008);
         return [1, [0, res0_009, [0, res1_010, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Monitor_send_exn_found_lis,
       [0, t$0, exn$0],
       _al_);
    }
    function _am_(param){
     var f = param[2], execution_context = param[1];
     return caml_call4
             (Async_kernel_Scheduler1[63],
              scheduler,
              execution_context,
              f,
              exn$0);
    }
    caml_call2(Core_Bag[7], t$0[5], _am_);
    function _an_(tail){return caml_call2(Async_kernel_Tail[3], tail, exn$0);}
    return caml_call2(Core_List[9], t$0[6], _an_);
   }
   function within_context(context, f){
    function _ag_(param){
     var match = caml_call1(Core_Result[47], f);
     if(0 === match[0]){var x = match[1]; return [0, x];}
     var exn = match[1];
     send_exn
      (caml_call1(Async_kernel_Execution_context[4], context), _l_, exn);
     return _m_;
    }
    var _ah_ = caml_call1(Async_kernel_Scheduler1[71], 0);
    return caml_call2
            (caml_call1(Async_kernel_Scheduler1[74], _ah_), context, _ag_);
   }
   function within_gen(monitor, priority, f){
    var
     _af_ = current_execution_context(0),
     tmp_context =
       caml_call4
        (Async_kernel_Execution_context[9], monitor, priority, 0, _af_);
    return within_context(tmp_context, f);
   }
   function within(monitor, priority, f){
    var match = within_gen(monitor, priority, f);
    if(0 !== match[0]) return caml_call1(Async_kernel_Deferred1[12], 0);
    var d = match[1];
    return d;
   }
   function within_v(monitor, priority, f){
    var match = within_gen(monitor, priority, f);
    if(0 !== match[0]) return 0;
    var x = match[1];
    return [0, x];
   }
   function within$0(monitor, priority, f){
    return 0 === within_gen(monitor, priority, f)[0] ? 0 : 0;
   }
   function schedule_with_data(monitor, priority, work, x){
    var
     scheduler = caml_call1(Async_kernel_Scheduler1[71], 0),
     _ad_ = caml_call1(Async_kernel_Scheduler1[72], scheduler),
     _ae_ =
       caml_call4
        (Async_kernel_Execution_context[9], monitor, priority, 0, _ad_);
    return caml_call4(Async_kernel_Scheduler1[63], scheduler, _ae_, work, x);
   }
   function schedule(monitor, priority, work){
    return schedule_with_data(monitor, priority, work, 0);
   }
   function upon_work_fill_i(param){
    var i = param[2], work = param[1];
    function _ab_(a){return caml_call2(Async_kernel_Ivar[14], i, a);}
    var _ac_ = caml_call1(work, 0);
    return caml_call2(Async_kernel_Deferred_std[11], _ac_, _ab_);
   }
   function schedule$0(monitor, priority, work){
    var i = caml_call1(Async_kernel_Ivar[12], 0);
    schedule_with_data(monitor, priority, upon_work_fill_i, [0, work, i]);
    return caml_call1(Async_kernel_Ivar[18], i);
   }
   function preserve_execution_context(f){
    var
     scheduler = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], scheduler);
    function _aa_(a){
     return caml_call4
             (Async_kernel_Scheduler1[63], scheduler, execution_context, f, a);
    }
    return caml_call1(Core[258], _aa_);
   }
   function preserve_execution_context$0(f){
    var
     scheduler = caml_call1(Async_kernel_Scheduler1[71], 0),
     execution_context = caml_call1(Async_kernel_Scheduler1[72], scheduler);
    function call_and_fill(param){
     var i = param[3], a = param[2], f = param[1];
     function ___(r){return caml_call2(Async_kernel_Ivar[14], i, r);}
     var _$_ = caml_call1(f, a);
     return caml_call2(Async_kernel_Deferred_std[11], _$_, ___);
    }
    function _Y_(a){
     function _Z_(i){
      return caml_call4
              (Async_kernel_Scheduler1[63],
               scheduler,
               execution_context,
               call_and_fill,
               [0, f, a, i]);
     }
     return caml_call1(Async_kernel_Deferred1[4], _Z_);
    }
    return caml_call1(Core[258], _Y_);
   }
   function stream_iter(stream, f){
    function loop(stream){
     function _W_(param){
      if(! param) return 0;
      var stream = param[2], v = param[1];
      loop(stream);
      return caml_call1(f, v);
     }
     var _X_ = caml_call1(Async_kernel_Tail[7][2], stream);
     return caml_call2(Async_kernel_Deferred_std[1], _X_, _W_);
    }
    return loop(stream);
   }
   function create$0(here, info, name, run, f){
    var
     monitor = caml_call4(create_with_parent, here, info, name, 0),
     exns = detach_and_get_error_stream(monitor),
     ok =
       523273847 <= run
        ? schedule$0([0, monitor], 0, f)
        : within([0, monitor], 0, f);
    return [0, ok, exns];
   }
   function fill_result_and_handle_backgro
   (result_filler, result, exns, handle_exns_after_result){
    var _V_ = caml_call1(Async_kernel_Ivar_filler[4], result_filler);
    return _V_
            ? (caml_call2
               (Async_kernel_Ivar_filler[5], result_filler, result),
              caml_call1(handle_exns_after_result, exns))
            : _V_;
   }
   var
    try_with_log_exn =
      [0,
       function(exn){
        var
         _T_ = [0, [1, [0, _n_, [0, caml_call1(Base_Exn[1], exn), 0]]], 0],
         _U_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_failed_to_set_Monitor_Expe),
             _T_]];
        return caml_call1(Core[253], _U_);
       }],
    Expert = [0, try_with_log_exn];
   function try_with(here, info, opt, _O_, _N_, _M_, f$0){
    if(opt) var sth = opt[1], name = sth; else var name = cst$0;
    if(_O_)
     var sth$0 = _O_[1], do_extract_exn = sth$0;
    else
     var do_extract_exn = 0;
    if(_N_) var sth$1 = _N_[1], run = sth$1; else var run = 3903734;
    if(_M_) var sth$2 = _M_[1], rest = sth$2; else var rest = -146189108;
    var
     match = create$0(here, info, [0, name], run, f$0),
     exns = match[2],
     ok = match[1];
    if(typeof rest === "number")
     if(3804260 <= rest)
      var handle_exn = Expert[1][1];
     else
      var
       parent = current(0),
       handle_exn = function(exn){return send_exn(parent, 0, exn);};
    else
     var
      f = rest[2],
      parent$0 = current(0),
      handle_exn =
        function(exn){
         return within$0
                 ([0, parent$0],
                  0,
                  function(param){return caml_call1(f, exn);});
        };
    function handle_exns_after_result(exns){return stream_iter(exns, handle_exn);
    }
    return within
            ([0, main],
             0,
             function(param){
              if(caml_call1(Async_kernel_Deferred1[7], ok)){
               handle_exns_after_result(exns);
               var _P_ = [0, caml_call1(Async_kernel_Deferred1[6], ok)];
               return caml_call1(Async_kernel_Deferred_std[10], _P_);
              }
              var
               match = caml_call1(Async_kernel_Ivar_filler[3], 0),
               result = match[2],
               result_filler = match[1];
              function _Q_(res){
               return fill_result_and_handle_backgro
                       (result_filler, [0, res], exns, handle_exns_after_result);
              }
              caml_call2(Async_kernel_Deferred_std[11], ok, _Q_);
              function _R_(param){
               if(! param)
                throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
               var
                exns = param[2],
                exn = param[1],
                exn$0 = do_extract_exn ? extract_exn$0(exn) : exn;
               return fill_result_and_handle_backgro
                       (result_filler, [1, exn$0], exns, handle_exns_after_result);
              }
              var _S_ = caml_call1(Async_kernel_Tail[7][2], exns);
              caml_call2(Async_kernel_Deferred_std[11], _S_, _R_);
              return result;
             });
   }
   function try_with_or_error(here, info, opt, extract_exn, rest, f){
    if(opt)
     var sth = opt[1], name = sth;
    else
     var name = cst_try_with_or_error;
    var arg = Core_Or_error[38];
    function _K_(eta){return caml_call2(arg, 0, eta);}
    var _L_ = try_with(here, info, [0, name], extract_exn, _p_, rest, f);
    return caml_call2(Async_kernel_Deferred_std[4], _L_, _K_);
   }
   function try_with_join_or_error(here, info, opt, extract_exn, rest, f){
    if(opt)
     var sth = opt[1], name = sth;
    else
     var name = cst_try_with_join_or_error;
    var
     _I_ = Core_Or_error[27],
     _J_ = try_with_or_error(here, info, [0, name], extract_exn, rest, f);
    return caml_call2(Async_kernel_Deferred_std[4], _J_, _I_);
   }
   function protect(here, info, opt, extract_exn, run, rest, f, finally$0){
    if(opt) var sth = opt[1], name = sth; else var name = cst_Monitor_protect;
    function _B_(r){
     function _D_(fr){
      if(0 === r[0]){
       var r$0 = r[1];
       if(0 === fr[0]) return r$0;
       var e = fr[1];
      }
      else{
       var exn = r[1];
       if(0 !== fr[0]){
        var
         finally_exn = fr[1],
         _F_ =
           [0, [1, [0, _q_, [0, caml_call1(Core[537], finally_exn), 0]]], 0],
         _G_ = [0, [1, [0, _r_, [0, caml_call1(Core[537], exn), 0]]], _F_],
         _H_ =
           [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Async_finally), _G_]];
        return caml_call1(Core[253], _H_);
       }
       var e = exn;
      }
      throw caml_maybe_attach_backtrace(e, 0);
     }
     var _E_ = try_with(here, info, _u_, _t_, _s_, rest, finally$0);
     return caml_call2(Async_kernel_Deferred_std[5][2], _E_, _D_);
    }
    var _C_ = try_with(here, info, [0, name], extract_exn, run, rest, f);
    return caml_call2(Async_kernel_Deferred_std[5][1], _C_, _B_);
   }
   function handle_errors(here, info, name, f, handler){
    var
     match = create$0(here, info, name, 3903734, f),
     exns = match[2],
     ok = match[1];
    stream_iter(exns, handler);
    return ok;
   }
   function catch_stream(here, info, name, f){
    var
     exns =
       create$0
         (here,
          info,
          name,
          3903734,
          function(param){
           caml_call1(f, 0);
           return caml_call1(Async_kernel_Deferred_std[10], 0);
          })
        [2];
    return exns;
   }
   function catch$0(here, info, name, f){
    function _x_(param){
     if(param){var x = param[1]; return x;}
     var
      _A_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Monitor_catch_got_unexpect);
     return caml_call1(Core[253], _A_);
    }
    var
     _y_ = catch_stream(here, info, name, f),
     _z_ = caml_call1(Async_kernel_Tail[7][2], _y_);
    return caml_call2(Async_kernel_Deferred_std[5][2], _z_, _x_);
   }
   function catch_error(here, info, name, f){
    var arg = Core_Error[25];
    function _v_(eta){return caml_call2(arg, 0, eta);}
    var _w_ = catch$0(here, info, name, f);
    return caml_call2(Async_kernel_Deferred_std[4], _w_, _v_);
   }
   function parent(t){
    var match = t[8];
    if(typeof match === "number") return match ? 0 : 0;
    var parent = match[1];
    return [0, parent];
   }
   function depth(t){
    var t$0 = t, n = 0;
    for(;;){
     var match = parent(t$0);
     if(! match) return n;
     var t$1 = match[1], n$0 = n + 1 | 0, t$0 = t$1, n = n$0;
    }
   }
   var For_tests = [0, parent, depth];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Monitor);
   var
    Async_kernel_Monitor =
      [0,
       sexp_of_t,
       invariant,
       create,
       name,
       current,
       detach,
       detach_and_iter_errors,
       detach_and_get_next_error,
       detach_and_get_error_stream,
       get_next_error,
       [0, extract_exn, backtrace],
       Monitor_exn,
       extract_exn$0,
       has_seen_error,
       send_exn,
       try_with,
       try_with_or_error,
       try_with_join_or_error,
       handle_errors,
       catch_stream,
       catch$0,
       catch_error,
       protect,
       main,
       Expert,
       [0,
        within,
        within$0,
        within_v,
        schedule$0,
        schedule,
        within_context,
        preserve_execution_context,
        preserve_execution_context$0],
       For_tests];
   runtime.caml_register_global
    (79, Async_kernel_Monitor, cst_Async_kernel_Monitor$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_stream
//# unitInfo: Requires: Assert_failure, Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Tail, Core, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_stream$0 = "Async_kernel__Async_stream",
    cst_async_kernel$0 = "async_kernel",
    cst_src_async_stream_ml = "src/async_stream.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_stream$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_async_stream_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    include = Async_kernel_Tail[7],
    sexp_of_t = include[1],
    next = include[2],
    _b_ = [0, -146189108],
    _c_ = [0, 523273847],
    _a_ = [0, cst_src_async_stream_ml, 179, 18],
    cst_Stream_first_of_empty_stre = "Stream.first of empty stream",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Async_stream = cst_Async_kernel_Async_stream$0;
   function first_exn(t){
    function _aD_(param){
     if(param){var x = param[1]; return x;}
     var
      _aF_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Stream_first_of_empty_stre);
     return caml_call1(Core[253], _aF_);
    }
    var _aE_ = caml_call1(next, t);
    return caml_call2(Async_kernel_Deferred_std[5][2], _aE_, _aD_);
   }
   function fold(t, init, f){
    function _ax_(result){
     function loop(t, b){
      function _ay_(param){
       if(! param) return caml_call2(Async_kernel_Ivar[14], result, b);
       var t = param[2], v = param[1];
       function _aA_(_aC_){return loop(t, _aC_);}
       var _aB_ = caml_call2(f, b, v);
       return caml_call2(Async_kernel_Deferred_std[11], _aB_, _aA_);
      }
      var _az_ = caml_call1(next, t);
      return caml_call2(Async_kernel_Deferred_std[11], _az_, _ay_);
     }
     return loop(t, init);
    }
    return caml_call1(Async_kernel_Deferred1[4], _ax_);
   }
   function fold$0(t, init, f){
    function _as_(result){
     function loop$0(counter, t, b){
      var
       _au_ = caml_call1(next, t),
       match = caml_call1(Async_kernel_Deferred1[5], _au_);
      if(! match){
       var
        _av_ = function(next){return loop_next(next, b);},
        _aw_ = caml_call1(next, t);
       return caml_call2(Async_kernel_Deferred_std[11], _aw_, _av_);
      }
      var next$0 = match[1];
      if(counter >= 50)
       return caml_trampoline_return(loop_next$0, [0, next$0, b]);
      var counter$0 = counter + 1 | 0;
      return loop_next$0(counter$0, next$0, b);
     }
     function loop_next$0(counter, next, b){
      if(! next) return caml_call2(Async_kernel_Ivar[14], result, b);
      var t = next[2], v = next[1], _at_ = caml_call2(f, b, v);
      if(counter >= 50) return caml_trampoline_return(loop$0, [0, t, _at_]);
      var counter$0 = counter + 1 | 0;
      return loop$0(counter$0, t, _at_);
     }
     function loop(t, b){return caml_trampoline(loop$0(0, t, b));}
     function loop_next(next, b){
      return caml_trampoline(loop_next$0(0, next, b));
     }
     return loop(t, init);
    }
    return caml_call1(Async_kernel_Deferred1[4], _as_);
   }
   function length(t){
    return fold$0(t, 0, function(n, param){return n + 1 | 0;});
   }
   function iter(t, f){
    return fold(t, 0, function(param, v){return caml_call1(f, v);});
   }
   function closed(t){
    var
     _ar_ = caml_call1(next, t),
     match = caml_call1(Async_kernel_Deferred1[5], _ar_);
    if(match && ! match[1])
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    return iter
            (t,
             function(param){
              return caml_call1(Async_kernel_Deferred_std[10], 0);
             });
   }
   function iter$0(t, f){
    var
     _aq_ =
       iter
        (t,
         function(a){
          caml_call1(f, a);
          return caml_call1(Async_kernel_Deferred_std[10], 0);
         });
    return caml_call1(Async_kernel_Deferred_std[8], _aq_);
   }
   function create(f){
    var
     tail = caml_call1(Async_kernel_Tail[2], 0),
     t = caml_call1(Async_kernel_Tail[8], tail);
    caml_call1(f, tail);
    return t;
   }
   function unfold(b, f){
    return create
            (function(tail){
              function loop(b){
               function _ao_(param){
                if(! param) return caml_call1(Async_kernel_Tail[4], tail);
                var match = param[1], b = match[2], a = match[1];
                caml_call2(Async_kernel_Tail[3], tail, a);
                return loop(b);
               }
               var _ap_ = caml_call1(f, b);
               return caml_call2(Async_kernel_Deferred_std[11], _ap_, _ao_);
              }
              return loop(b);
             });
   }
   function of_list(l){
    return create
            (function(tail){
              function _an_(x){
               return caml_call2(Async_kernel_Tail[3], tail, x);
              }
              caml_call2(Core_List[9], l, _an_);
              return caml_call1(Async_kernel_Tail[4], tail);
             });
   }
   function to_list(s){
    var
     _al_ = Core_List[34],
     _am_ =
       fold
        (s,
         0,
         function(b, a){
          return caml_call1(Async_kernel_Deferred_std[10], [0, a, b]);
         });
    return caml_call2(Async_kernel_Deferred_std[4], _am_, _al_);
   }
   function copy_to_tail(t, tail){
    return iter
            (t,
             function(a){
              var _ak_ = caml_call2(Async_kernel_Tail[3], tail, a);
              return caml_call1(Async_kernel_Deferred_std[10], _ak_);
             });
   }
   function append(t1, t2){
    return create
            (function(tail){
              function _ag_(param){
               function _ai_(param){
                return caml_call1(Async_kernel_Tail[4], tail);
               }
               var _aj_ = copy_to_tail(t2, tail);
               return caml_call2(Async_kernel_Deferred_std[11], _aj_, _ai_);
              }
              var _ah_ = copy_to_tail(t1, tail);
              return caml_call2(Async_kernel_Deferred_std[11], _ah_, _ag_);
             });
   }
   function concat(t){
    return create
            (function(tail){
              function _ae_(param){
               return caml_call1(Async_kernel_Tail[4], tail);
              }
              var _af_ = iter(t, function(t){return copy_to_tail(t, tail);});
              return caml_call2(Async_kernel_Deferred_std[11], _af_, _ae_);
             });
   }
   function filter_deprecated(t, f){
    return create
            (function(tail){
              function _$_(param){
               return caml_call1(Async_kernel_Tail[4], tail);
              }
              var
               _aa_ =
                 iter
                  (t,
                   function(v){
                    function _ab_(param){
                     return param ? caml_call2(Async_kernel_Tail[3], tail, v) : 0;
                    }
                    var
                     _ac_ = caml_call1(f, v),
                     _ad_ = caml_call1(Async_kernel_Deferred_std[10], _ac_);
                    return caml_call2
                            (Async_kernel_Deferred_std[5][2], _ad_, _ab_);
                   });
              return caml_call2(Async_kernel_Deferred_std[11], _aa_, _$_);
             });
   }
   function filter_map_deprecated(t, f){
    return create
            (function(tail){
              function _W_(param){
               return caml_call1(Async_kernel_Tail[4], tail);
              }
              var
               _X_ =
                 iter
                  (t,
                   function(v){
                    function _Y_(param){
                     if(! param) return 0;
                     var v = param[1];
                     return caml_call2(Async_kernel_Tail[3], tail, v);
                    }
                    var
                     _Z_ = caml_call1(f, v),
                     ___ = caml_call1(Async_kernel_Deferred_std[10], _Z_);
                    return caml_call2(Async_kernel_Deferred_std[5][2], ___, _Y_);
                   });
              return caml_call2(Async_kernel_Deferred_std[11], _X_, _W_);
             });
   }
   function map(t, f){
    return create
            (function(tail){
              function _S_(param){
               return caml_call1(Async_kernel_Tail[4], tail);
              }
              var
               _T_ =
                 iter
                  (t,
                   function(v){
                    var
                     _U_ = caml_call1(Async_kernel_Tail[3], tail),
                     _V_ = caml_call1(f, v);
                    return caml_call2(Async_kernel_Deferred_std[4], _V_, _U_);
                   });
              return caml_call2(Async_kernel_Deferred_std[11], _T_, _S_);
             });
   }
   function map$0(t, f){
    return map
            (t,
             function(a){
              var _R_ = caml_call1(f, a);
              return caml_call1(Async_kernel_Deferred_std[10], _R_);
             });
   }
   function first_n(s, n){
    return create
            (function(tail){
              function loop(s, n){
               if(caml_call2(Core[90], n, 0))
                return caml_call1(Async_kernel_Tail[4], tail);
               function _P_(param){
                if(! param) return caml_call1(Async_kernel_Tail[4], tail);
                var t = param[2], x = param[1];
                caml_call2(Async_kernel_Tail[3], tail, x);
                return loop(t, n - 1 | 0);
               }
               var _Q_ = caml_call1(next, s);
               return caml_call2(Async_kernel_Deferred_std[11], _Q_, _P_);
              }
              return loop(s, n);
             });
   }
   function available_now(t){
    var t$0 = t, ac = 0;
    for(;;){
     var
      _O_ = caml_call1(next, t$0),
      match = caml_call1(Async_kernel_Deferred1[5], _O_);
     if(match){
      var match$0 = match[1];
      if(match$0){
       var
        t$1 = match$0[2],
        x = match$0[1],
        ac$0 = [0, x, ac],
        t$0 = t$1,
        ac = ac$0;
       continue;
      }
     }
     return [0, caml_call1(Core_List[34], ac), t$0];
    }
   }
   function split(opt, _E_, t){
    if(opt)
     var sth = opt[1], stop = sth;
    else
     var stop = caml_call1(Async_kernel_Deferred1[12], 0);
    if(_E_)
     var sth$0 = _E_[1], f = sth$0;
    else
     var f = function(param){return 192584839;};
    var
     reason_for_stopping = caml_call1(Async_kernel_Ivar[12], 0),
     prefix = caml_call1(Async_kernel_Tail[2], 0);
    function finish(v){
     caml_call1(Async_kernel_Tail[4], prefix);
     return caml_call2(Async_kernel_Ivar[14], reason_for_stopping, v);
    }
    function loop(t){
     function _G_(param){
      if(typeof param === "number") return finish([0, 280164845, t]);
      var o = param[2];
      if(! o) return finish(1144100);
      var t$0 = o[2], a = o[1], match = caml_call1(f, a);
      if(typeof match === "number"){
       caml_call2(Async_kernel_Tail[3], prefix, a);
       return loop(t$0);
      }
      var b = match[2];
      return finish([0, 398750242, [0, b, t$0]]);
     }
     var _H_ = 0;
     function _I_(o){return [0, 870035731, o];}
     var
      _J_ = caml_call1(next, t),
      _K_ = [0, caml_call2(Async_kernel_Deferred_std[6], _J_, _I_), _H_];
     function _L_(param){return 280164845;}
     var
      _M_ = [0, caml_call2(Async_kernel_Deferred_std[6], stop, _L_), _K_],
      _N_ = caml_call1(Async_kernel_Deferred_std[7], _M_);
     return caml_call2(Async_kernel_Deferred_std[1], _N_, _G_);
    }
    loop(t);
    var _F_ = caml_call1(Async_kernel_Ivar[18], reason_for_stopping);
    return [0, caml_call1(Async_kernel_Tail[8], prefix), _F_];
   }
   function find(t, f){
    var
     found =
       split
         (0,
          [0,
           function(a){
            return caml_call1(f, a) ? [0, 398750242, a] : 192584839;
           }],
          t)
        [2];
    function _D_(x){
     if(typeof x !== "number" && 398750242 > x[1])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     return x;
    }
    return caml_call2(Async_kernel_Deferred_std[5][2], found, _D_);
   }
   function ungroup(t){
    return create
            (function(tail){
              function _A_(param){
               return caml_call1(Async_kernel_Tail[4], tail);
              }
              var
               _B_ =
                 iter
                  (t,
                   function(l){
                    function _C_(x){
                     return caml_call2(Async_kernel_Tail[3], tail, x);
                    }
                    caml_call2(Core_List[9], l, _C_);
                    return caml_call1(Async_kernel_Deferred_std[10], 0);
                   });
              return caml_call2(Async_kernel_Deferred_std[11], _B_, _A_);
             });
   }
   function interleave(ts){
    return create
            (function(tail){
              var num_open = [0, 1];
              function close(param){
               num_open[1] = num_open[1] - 1 | 0;
               var _z_ = caml_call2(Core[90], num_open[1], 0);
               return _z_ ? caml_call1(Async_kernel_Tail[4], tail) : _z_;
              }
              var
               outer_closed =
                 iter
                  (ts,
                   function(t){
                    num_open[1] = num_open[1] + 1 | 0;
                    var _y_ = copy_to_tail(t, tail);
                    caml_call2(Async_kernel_Deferred_std[11], _y_, close);
                    return caml_call1(Async_kernel_Deferred_std[10], 0);
                   });
              return caml_call2
                      (Async_kernel_Deferred_std[11], outer_closed, close);
             });
   }
   function take_until(t, d){
    return create
            (function(tail){
              function loop(t){
               function _q_(param){
                if(typeof param !== "number"){
                 var match = param[2];
                 if(match){
                  var t = match[2], x = match[1];
                  caml_call2(Async_kernel_Tail[3], tail, x);
                  return loop(t);
                 }
                }
                return caml_call1(Async_kernel_Tail[4], tail);
               }
               var _r_ = 0;
               function _s_(z){return [0, 870035731, z];}
               var
                _t_ = caml_call1(next, t),
                _u_ =
                  [0, caml_call2(Async_kernel_Deferred_std[6], _t_, _s_), _r_];
               function _v_(param){return 926227490;}
               var
                _w_ =
                  [0, caml_call2(Async_kernel_Deferred_std[6], d, _v_), _u_],
                _x_ = caml_call1(Async_kernel_Deferred_std[7], _w_);
               return caml_call2(Async_kernel_Deferred_std[11], _x_, _q_);
              }
              return loop(t);
             });
   }
   function iter_durably(t, f){
    function _j_(result){
     function loop(t){
      function _k_(param){
       if(! param) return caml_call2(Async_kernel_Ivar[14], result, 0);
       var t = param[2], x = param[1];
       function _m_(z){
        loop(t);
        if(0 === z[0]) return 0;
        var e = z[1], _p_ = caml_call1(Async_kernel_Monitor[5], 0);
        return caml_call3(Async_kernel_Monitor[15], _p_, 0, e);
       }
       function _n_(param){return caml_call1(f, x);}
       var
        _o_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _c_, _b_, _n_);
       return caml_call2(Async_kernel_Deferred_std[1], _o_, _m_);
      }
      var _l_ = caml_call1(next, t);
      return caml_call2(Async_kernel_Deferred_std[1], _l_, _k_);
     }
     return loop(t);
    }
    return caml_call1(Async_kernel_Deferred1[4], _j_);
   }
   function iter_durably_report_end(t, f){
    function _g_(result){
     function loop(t){
      function _h_(param){
       if(! param) return caml_call2(Async_kernel_Ivar[14], result, 0);
       var t = param[2], x = param[1];
       loop(t);
       return caml_call1(f, x);
      }
      var _i_ = caml_call1(next, t);
      return caml_call2(Async_kernel_Deferred_std[1], _i_, _h_);
     }
     return loop(t);
    }
    return caml_call1(Async_kernel_Deferred1[4], _g_);
   }
   function iter_durably$0(t, f){
    var _f_ = iter_durably_report_end(t, f);
    return caml_call1(Async_kernel_Deferred_std[8], _f_);
   }
   function of_fun(f){
    return unfold
            (0,
             function(param){
              function _d_(a){return [0, [0, a, 0]];}
              var _e_ = caml_call1(f, 0);
              return caml_call2(Async_kernel_Deferred_std[5][2], _e_, _d_);
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_stream);
   var
    Async_kernel_Async_stream =
      [0,
       sexp_of_t,
       create,
       next,
       first_exn,
       of_list,
       to_list,
       of_fun,
       copy_to_tail,
       append,
       concat,
       available_now,
       filter_deprecated,
       filter_map_deprecated,
       fold,
       fold$0,
       iter,
       closed,
       iter$0,
       take_until,
       iter_durably,
       iter_durably$0,
       iter_durably_report_end,
       length,
       map,
       map$0,
       first_n,
       unfold,
       split,
       find,
       ungroup,
       interleave];
   runtime.caml_register_global
    (24, Async_kernel_Async_stream, cst_Async_kernel_Async_stream$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Time_source_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Time_source_i = "Async_kernel__Time_source_intf",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Time_source_i);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/time_source_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Time_source_i);
   var Async_kernel_Time_source_intf = [0];
   runtime.caml_register_global
    (11, Async_kernel_Time_source_intf, cst_Async_kernel_Time_source_i);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Bvar
//# unitInfo: Requires: Assert_failure, Async_kernel__Ivar, Async_kernel__Scheduler1, Async_kernel__Types, Base__Field, Base__Invariant, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Bvar$0 = "Async_kernel__Bvar",
    cst_async_kernel$0 = "async_kernel",
    cst_has_any_waiters$0 = "has_any_waiters",
    cst_ivar$0 = "ivar",
    cst_src_bvar_ml = "src/bvar.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Types = global_data.Async_kernel__Types,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Bvar$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_bvar_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _k_ = [0, cst_has_any_waiters$0],
    _i_ = [0, "_"],
    _h_ = [0, cst_src_bvar_ml, 19, 47],
    _g_ = [0, cst_src_bvar_ml, 23, 11],
    _j_ = [0, cst_src_bvar_ml, 14, 287, 309],
    _e_ = [0, cst_ivar$0],
    _f_ = [0, cst_has_any_waiters$0],
    cst_ivar = cst_ivar$0,
    cst_has_any_waiters = cst_has_any_waiters$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Bvar = cst_Async_kernel_Bvar$0;
   function ivar(r){return r[2];}
   function set_ivar(r, v){r[2] = v; return 0;}
   function has_any_waiters(r){return r[1];}
   function set_has_any_waiters(r, v){r[1] = v; return 0;}
   function _a_(r, v){return [0, r[1], v];}
   var
    _b_ = [0, set_ivar],
    ivar$0 = [0, function(param){return 0;}, cst_ivar, _b_, ivar, _a_];
   function _c_(r, v){return [0, v, r[2]];}
   var
    _d_ = [0, set_has_any_waiters],
    has_any_waiters$0 =
      [0,
       function(param){return 0;},
       cst_has_any_waiters,
       _d_,
       has_any_waiters,
       _c_];
   function invariant(invariant_a, param, t){
    var repr = caml_call1(Async_kernel_Types[10][2], t);
    function _o_(param){
     function check(f){return caml_call2(Base_Invariant[2], repr, f);}
     var
      ivar_fun =
        check
         (function(ivar){
           caml_call2(Async_kernel_Ivar[10], invariant_a, ivar);
           if(caml_call1(Async_kernel_Ivar[16], ivar)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
          }),
      has_any_waiters_fun =
        check
         (function(has_any_waiters){
           var _q_ = caml_call1(Async_kernel_Ivar[21], repr[2]);
           if(! _q_) return _q_;
           if(has_any_waiters) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
          });
     caml_call1(has_any_waiters_fun, has_any_waiters$0);
     return caml_call1(ivar_fun, ivar$0);
    }
    function _p_(x_007){
     function of_a_001(param){return _i_;}
     var
      has_any_waiters_003 = x_007[1],
      ivar_005 = x_007[2],
      arg_006 = caml_call2(Async_kernel_Ivar[9], of_a_001, ivar_005),
      bnds_002 = [0, [1, [0, _e_, [0, arg_006, 0]]], 0],
      arg_004 = caml_call1(Core[305], has_any_waiters_003),
      bnds_002$0 = [0, [1, [0, _f_, [0, arg_004, 0]]], bnds_002];
     return [1, bnds_002$0];
    }
    return caml_call4(Base_Invariant[1], _j_, repr, _p_, _o_);
   }
   function sexp_of_t(param, _n_, t){
    var has_any_waiters = caml_call1(Async_kernel_Types[10][2], t)[1];
    return [1, [0, _k_, [0, caml_call1(Core[305], has_any_waiters), 0]]];
   }
   var include = Async_kernel_Scheduler1[5], create = include[1];
   function broadcast(t, a){
    var
     repr = caml_call1(Async_kernel_Types[10][2], t),
     _l_ = repr[1],
     _m_ =
       _l_
        ? (repr
           [1]
          = 0,
          caml_call2(Async_kernel_Ivar[14], repr[2], a),
          repr[2] = caml_call1(Async_kernel_Ivar[12], 0),
          0)
        : _l_;
    return _m_;
   }
   function wait(t){
    var repr = caml_call1(Async_kernel_Types[10][2], t);
    repr[1] = 1;
    return caml_call1(Async_kernel_Ivar[18], repr[2]);
   }
   function has_any_waiters$1(t){
    var repr = caml_call1(Async_kernel_Types[10][2], t);
    return repr[1];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Bvar);
   var
    Async_kernel_Bvar =
      [0, sexp_of_t, invariant, create, wait, broadcast, has_any_waiters$1];
   runtime.caml_register_global
    (28, Async_kernel_Bvar, cst_Async_kernel_Bvar$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Time_source
//# unitInfo: Requires: Assert_failure, Async_kernel__Bvar, Async_kernel__Debug, Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Import, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Scheduler1, Async_kernel__Synchronous_time_source0, Async_kernel__Tail, Async_kernel__Time_ns, Async_kernel__Types, Base__Field, Base__Invariant, Core, Core__Time_ns, Expect_test_collector, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_Async_kernel_Time_source$0 = "Async_kernel__Time_source",
    cst_Happened = "Happened",
    cst_Ok = "Ok",
    cst_Previously_aborted = "Previously_aborted",
    cst_Previously_happened = "Previously_happened",
    cst$0 = "_",
    cst_alarm$0 = "alarm",
    cst_async_kernel$0 = "async_kernel",
    cst_fired$0 = "fired",
    cst_num_fires_to_skip$0 = "num_fires_to_skip",
    cst_scheduled_at$0 = "scheduled_at",
    cst_src_time_source_ml = "src/time_source.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos = "src/time_source.ml:294:30",
    cst = "",
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Timing_wheel = global_data.Timing_wheel,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Async_kernel_Import = global_data.Async_kernel__Import,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source0;
   global_data.Base__Field;
   var
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Async_kernel_Bvar = global_data.Async_kernel__Bvar,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Types = global_data.Async_kernel__Types;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Time_source$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_time_source_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    debug = Async_kernel_Debug[1],
    upon = Async_kernel_Deferred1[8],
    choose = Async_kernel_Deferred1[32],
    choice = Async_kernel_Deferred1[29],
    include = Async_kernel_Synchronous_time_[4],
    Job_or_event = include[2],
    invariant_with_jobs = include[20],
    invariant = include[21],
    cst_Time_source_with_timeout_b$0 =
      "Time_source.with_timeout bug: should only abort once",
    cst_Time_source_with_timeout_b =
      "Time_source.with_timeout bug: both completed and timed out",
    _Q_ = [0, 1],
    _P_ = [0, "span"],
    cst_Time_source_every_got_nonp = "Time_source.every got nonpositive span",
    _N_ = [0, -146189108],
    _O_ = [0, 3903734],
    cst_Time_source_Event_run_at = "Time_source.Event.run_at",
    _M_ = [0, cst$0],
    _L_ = [0, cst$0],
    cst_Time_source_Event_reschedu = "Time_source.Event.reschedule_at",
    _I_ = [0, cst_Ok],
    _J_ = [0, cst_Previously_aborted],
    _K_ = [0, cst_Previously_happened],
    cst_Clock_Event_abort_exn_fail =
      "Clock.Event.abort_exn failed to abort event that previously aborted",
    cst_Clock_Event_abort_exn_fail$0 =
      "Clock.Event.abort_exn failed to abort event that previously happened",
    _H_ = [0, cst$0],
    _G_ = [0, cst$0],
    cst_Time_source_Event_abort = "Time_source.Event.abort",
    _D_ = [0, cst_Ok],
    _E_ = [0, cst_Previously_aborted],
    _F_ = [0, cst_Previously_happened],
    _A_ = [0, cst_Aborted],
    _B_ = [0, cst_Happened],
    _C_ = [0, "Scheduled_at"],
    _y_ = [0, cst$0],
    _x_ = [0, cst$0],
    _v_ = [0, cst_src_time_source_ml, 278, 18],
    _w_ = [0, cst_src_time_source_ml, 280, 18],
    _u_ = [0, cst_src_time_source_ml, 289, 43],
    _z_ = [0, cst_src_time_source_ml, 271, 9504, 9528],
    _o_ = [0, "time_source"],
    _p_ = [0, cst_scheduled_at$0],
    _q_ = [0, cst_num_fires_to_skip$0],
    _r_ = [0, cst_fired$0],
    _s_ = [0, "fire"],
    _t_ = [0, cst_alarm$0],
    _e_ = [0, cst_Aborted],
    _f_ = [0, cst_Happened],
    _d_ = [0, cst_src_time_source_ml, 228, 5],
    _a_ = [0, cst$0],
    cst_wall_clock = "<wall_clock>",
    _b_ = [0, "events"],
    _c_ = [0, "is_wall_clock"],
    cst_scheduled_at = cst_scheduled_at$0,
    cst_num_fires_to_skip = cst_num_fires_to_skip$0,
    cst_fired = cst_fired$0,
    cst_alarm = cst_alarm$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Time_source = cst_Async_kernel_Time_source$0;
   function sexp_of_t(param, _a4_){
    var events = _a4_[4], is_wall_clock = _a4_[8];
    if(is_wall_clock)
     return caml_call1(Sexplib0_Sexp_conv[7], cst_wall_clock);
    var _a5_ = 0, _a6_ = 0;
    function _a7_(param){return _a_;}
    var
     _a8_ =
       [0,
        [1, [0, _b_, [0, caml_call2(Timing_wheel[2], _a7_, events), _a6_]]],
        _a5_];
    return [1,
            [0,
             [1, [0, _c_, [0, caml_call1(Core[305], is_wall_clock), 0]]],
             _a8_]];
   }
   function sexp_of_t$0(x_002){return sexp_of_t(Core[202], x_002);}
   var Read_write = [0, sexp_of_t$0, invariant, invariant_with_jobs];
   function sexp_of_t$1(x_003){return sexp_of_t(Core[171], x_003);}
   function read_only(t){return t;}
   var
    create = Async_kernel_Scheduler1[80],
    wall_clock = Async_kernel_Scheduler1[81];
   function alarm_precision(t){return caml_call1(Timing_wheel[10], t[4]);}
   function is_wall_clock(t){return t[8];}
   function next_alarm_fires_at(t){return caml_call1(Timing_wheel[38], t[4]);}
   function timing_wheel_now(t){return caml_call1(Timing_wheel[11], t[4]);}
   function id(t){return t[1];}
   function now(t){
    return t[8]
            ? caml_call1(Async_kernel_Time_ns[50], 0)
            : timing_wheel_now(t);
   }
   var send_exn = [0, Async_kernel_Monitor[15]];
   function advance_directly(t, to){
    return caml_call3(Async_kernel_Synchronous_time_[27], t, to, send_exn);
   }
   function advance_directly_by(t, by){
    var _a3_ = now(t);
    return advance_directly
            (t, caml_call2(Async_kernel_Time_ns[113], _a3_, by));
   }
   function fire_past_alarms(t){
    return caml_call2(Async_kernel_Synchronous_time_[28], t, send_exn);
   }
   function yield$0(t){
    var _a2_ = caml_call1(Async_kernel_Scheduler1[15], t[9]);
    return caml_call1(Async_kernel_Bvar[4], _a2_);
   }
   function advance_by_alarms(wait_for, t, to){
    function run_queued_alarms(param){
     if(! wait_for) return yield$0(t);
     var f = wait_for[1];
     return caml_call1(f, 0);
    }
    function finish(param){
     advance_directly(t, to);
     fire_past_alarms(t);
     return run_queued_alarms(0);
    }
    function walk_alarms(param){
     for(;;){
      var match = caml_call1(Timing_wheel[35], t[4]);
      if(! match) return finish(0);
      var min_alarm_time_in_min_interval = match[1];
      if
       (caml_call2
         (Async_kernel_Time_ns[94], min_alarm_time_in_min_interval, to))
       return finish(0);
      advance_directly(t, min_alarm_time_in_min_interval);
      fire_past_alarms(t);
      var queued_alarms_ran = run_queued_alarms(0);
      if(! caml_call1(Async_kernel_Deferred1[7], queued_alarms_ran)){
       var _a1_ = function(param){return walk_alarms(0);};
       return caml_call2
               (Async_kernel_Deferred_std[5][1], queued_alarms_ran, _a1_);
      }
     }
    }
    fire_past_alarms(t);
    function _aZ_(param){return walk_alarms(0);}
    var _a0_ = run_queued_alarms(0);
    return caml_call2(Async_kernel_Deferred_std[5][1], _a0_, _aZ_);
   }
   function advance_by_max_alarms_in_each_(wait_for, t, to){
    function run_queued_alarms(param){
     if(! wait_for) return yield$0(t);
     var f = wait_for[1];
     return caml_call1(f, 0);
    }
    function finish(param){
     advance_directly(t, to);
     fire_past_alarms(t);
     return run_queued_alarms(0);
    }
    function walk_alarms(param){
     for(;;){
      var match = next_alarm_fires_at(t);
      if(! match) return finish(0);
      var next_alarm_fires_at$0 = match[1];
      if(caml_call2(Async_kernel_Time_ns[94], next_alarm_fires_at$0, to))
       return finish(0);
      advance_directly(t, caml_call1(Timing_wheel[36], t[4]));
      fire_past_alarms(t);
      var queued_alarms_ran = run_queued_alarms(0);
      if(! caml_call1(Async_kernel_Deferred1[7], queued_alarms_ran)){
       var _aY_ = function(param){return walk_alarms(0);};
       return caml_call2
               (Async_kernel_Deferred_std[5][1], queued_alarms_ran, _aY_);
      }
     }
    }
    fire_past_alarms(t);
    function _aW_(param){return walk_alarms(0);}
    var _aX_ = run_queued_alarms(0);
    return caml_call2(Async_kernel_Deferred_std[5][1], _aX_, _aW_);
   }
   function advance_by_alarms_by(wait_for, t, by){
    var _aV_ = now(t);
    return advance_by_alarms
            (wait_for, t, caml_call2(Async_kernel_Time_ns[113], _aV_, by));
   }
   function span_to_time(t, span){
    var _aU_ = now(t);
    return caml_call2(Async_kernel_Time_ns[113], _aU_, span);
   }
   function run_at_internal(t, time, f$0, a){
    var
     execution_context = caml_call1(Async_kernel_Scheduler1[72], t[9]),
     _aT_ = caml_call1(Timing_wheel[11], t[4]);
    if(! caml_call2(Async_kernel_Time_ns[97], time, _aT_)){
     caml_call4(Async_kernel_Scheduler1[63], t[9], execution_context, f$0, a);
     return caml_call1(Timing_wheel[5][2], 0);
    }
    var
     _aR_ =
       caml_call4
        (Async_kernel_Scheduler1[75], t[9], execution_context, f$0, a),
     _aS_ = caml_call1(Job_or_event[2], _aR_),
     alarm = caml_call3(Timing_wheel[25], t[4], time, _aS_),
     match = t[9][23];
    if(match){var f = match[1]; caml_call1(f, time);}
    return alarm;
   }
   function run_at(t, time, f, a){run_at_internal(t, time, f, a); return 0;}
   function run_after(t, span, f, a){
    return run_at(t, span_to_time(t, span), f, a);
   }
   function fill(result){return caml_call2(Async_kernel_Ivar[14], result, 0);}
   function at(t, time){
    var _aQ_ = caml_call1(Timing_wheel[11], t[4]);
    if(caml_call2(Async_kernel_Time_ns[95], time, _aQ_))
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    var result = caml_call1(Async_kernel_Ivar[12], 0);
    run_at_internal(t, time, fill, result);
    return caml_call1(Async_kernel_Ivar[18], result);
   }
   function after(t, span){return at(t, span_to_time(t, span));}
   function remove_alarm(t, alarm){
    var
     job_or_event = caml_call2(Timing_wheel[5][5], t[4], alarm),
     k = caml_call1(Job_or_event[5][1], job_or_event),
     match = caml_call2(Job_or_event[5][2], k, job_or_event);
    if(! k) throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    caml_call2(Async_kernel_Scheduler1[62], t[9], match);
    return caml_call2(Timing_wheel[28], t[4], alarm);
   }
   function sexp_of_t$2(of_a_008, of_h_009, param){
    if(0 === param[0]){
     var arg0_010 = param[1], res0_011 = caml_call1(of_a_008, arg0_010);
     return [1, [0, _e_, [0, res0_011, 0]]];
    }
    var arg0_012 = param[1], res0_013 = caml_call1(of_h_009, arg0_012);
    return [1, [0, _f_, [0, res0_013, 0]]];
   }
   var Fired = [0, sexp_of_t$2];
   function scheduled_at(r){return r[5];}
   function set_scheduled_at(r, v){r[5] = v; return 0;}
   function num_fires_to_skip(r){return r[4];}
   function set_num_fires_to_skip(r, v){r[4] = v; return 0;}
   function fired(r){return r[3];}
   function alarm(r){return r[1];}
   function set_alarm(r, v){r[1] = v; return 0;}
   function _g_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6]];}
   var
    _h_ = [0, set_scheduled_at],
    scheduled_at$0 =
      [0,
       function(param){return 0;},
       cst_scheduled_at,
       _h_,
       scheduled_at,
       _g_];
   function _i_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6]];}
   var
    _j_ = [0, set_num_fires_to_skip],
    num_fires_to_skip$0 =
      [0,
       function(param){return 0;},
       cst_num_fires_to_skip,
       _j_,
       num_fires_to_skip,
       _i_];
   function _k_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}
   var
    _l_ = 0,
    fired$0 = [0, function(param){return 0;}, cst_fired, _l_, fired, _k_];
   function _m_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}
   var
    _n_ = [0, set_alarm],
    alarm$0 = [0, function(param){return 0;}, cst_alarm, _n_, alarm, _m_];
   function sexp_of_t$3(of_a_016, of_h_017, param){
    var
     alarm_019 = param[1],
     fired_023 = param[3],
     num_fires_to_skip_025 = param[4],
     scheduled_at_027 = param[5],
     time_source_029 = param[6],
     arg_030 = caml_call1(Async_kernel_Synchronous_time_[5], time_source_029),
     bnds_018 = [0, [1, [0, _o_, [0, arg_030, 0]]], 0],
     arg_028 = caml_call1(Async_kernel_Time_ns[92], scheduled_at_027),
     bnds_018$0 = [0, [1, [0, _p_, [0, arg_028, 0]]], bnds_018],
     arg_026 = caml_call1(Core[356], num_fires_to_skip_025),
     bnds_018$1 = [0, [1, [0, _q_, [0, arg_026, 0]]], bnds_018$0],
     _aN_ = caml_call2(Fired[1], of_a_016, of_h_017),
     arg_024 = caml_call2(Async_kernel_Ivar[9], _aN_, fired_023),
     bnds_018$2 = [0, [1, [0, _r_, [0, arg_024, 0]]], bnds_018$1];
    function _aO_(_aP_){return 0;}
    var
     arg_022 = caml_call1(Sexplib0_Sexp_conv[24], _aO_),
     bnds_018$3 = [0, [1, [0, _s_, [0, arg_022, 0]]], bnds_018$2],
     arg_020 = caml_call2(Timing_wheel[5][1], Job_or_event[6], alarm_019),
     bnds_018$4 = [0, [1, [0, _t_, [0, arg_020, 0]]], bnds_018$3];
    return [1, bnds_018$4];
   }
   function sexp_of_t_unit(x_031){
    return sexp_of_t$3(Core[518], Core[518], x_031);
   }
   function fired$1(t){return caml_call1(Async_kernel_Ivar[18], t[3]);}
   function invariant$0(invariant_a, invariant_h, t){
    function _aG_(param){
     var events = t[6][4];
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      scheduled_at_fun =
        check
         (function(scheduled_at){
           var _aM_ = caml_call2(Timing_wheel[27], events, t[1]);
           if(! _aM_) return _aM_;
           var
            expect = caml_call2(Timing_wheel[5][3], events, t[1]),
            sexpifier = Async_kernel_Time_ns[92],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_033, b_034){
            return caml_call2(Async_kernel_Time_ns[101], a_033, b_034);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    scheduled_at);
          }),
      num_fires_to_skip_fun =
        check
         (function(num_fires_to_skip){
           if(caml_call2(Async_kernel_Import[1], num_fires_to_skip, 0))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
          }),
      fired_fun =
        check
         (function(fired){
           var
            _aL_ = caml_call1(Async_kernel_Ivar[18], fired),
            match = caml_call1(Async_kernel_Deferred1[5], _aL_);
           if(! match) return 0;
           var match$0 = match[1];
           if(0 === match$0[0]){
            var a = match$0[1];
            return caml_call1(invariant_a, a);
           }
           var h = match$0[1];
           return caml_call1(invariant_h, h);
          }),
      alarm_fun =
        check
         (function(alarm){
           if(caml_call1(Async_kernel_Ivar[17], t[3])){
            if(caml_call2(Timing_wheel[27], events, alarm))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
            return 0;
           }
           var _aJ_ = caml_call2(Timing_wheel[27], events, alarm);
           if(! _aJ_) return _aJ_;
           var _aK_ = caml_call2(Timing_wheel[5][5], events, alarm);
           if(caml_call1(Job_or_event[4], _aK_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
          });
     caml_call1(alarm_fun, alarm$0);
     caml_call1(fired_fun, fired$0);
     caml_call1(num_fires_to_skip_fun, num_fires_to_skip$0);
     caml_call1(scheduled_at_fun, scheduled_at$0);
     return 0;
    }
    function _aH_(x_032){
     function _aI_(param){return _x_;}
     return sexp_of_t$3(function(param){return _y_;}, _aI_, x_032);
    }
    return caml_call4(Base_Invariant[1], _z_, t, _aH_, _aG_);
   }
   function sexp_of_t$4(of_a_035, of_h_036, param){
    switch(param[0]){
      case 0:
       var arg0_037 = param[1], res0_038 = caml_call1(of_a_035, arg0_037);
       return [1, [0, _A_, [0, res0_038, 0]]];
      case 1:
       var arg0_039 = param[1], res0_040 = caml_call1(of_h_036, arg0_039);
       return [1, [0, _B_, [0, res0_040, 0]]];
      default:
       var
        arg0_041 = param[1],
        res0_042 = caml_call1(Async_kernel_Time_ns[92], arg0_041);
       return [1, [0, _C_, [0, res0_042, 0]]];
    }
   }
   var Status = [0, sexp_of_t$4];
   function status(t){
    var
     _aF_ = caml_call1(Async_kernel_Ivar[18], t[3]),
     match = caml_call1(Async_kernel_Deferred1[5], _aF_);
    if(! match) return [2, t[5]];
    var match$0 = match[1];
    if(0 === match$0[0]){var a = match$0[1]; return [0, a];}
    var h = match$0[1];
    return [1, h];
   }
   function sexp_of_t$5(of_a_045, of_h_046, param){
    if(typeof param === "number") return _D_;
    if(0 === param[0]){
     var arg0_047 = param[1], res0_048 = caml_call1(of_a_045, arg0_047);
     return [1, [0, _E_, [0, res0_048, 0]]];
    }
    var arg0_049 = param[1], res0_050 = caml_call1(of_h_046, arg0_049);
    return [1, [0, _F_, [0, res0_050, 0]]];
   }
   var Abort_result = [0, sexp_of_t$5];
   function abort(t, a){
    if(debug){
     var
      _aC_ =
        function(x_053){
         function _aE_(param){return _G_;}
         return sexp_of_t$3(function(param){return _H_;}, _aE_, x_053);
        };
     caml_call3(Async_kernel_Debug[15], cst_Time_source_Event_abort, t, _aC_);
    }
    var
     _aD_ = fired$1(t),
     match = caml_call1(Async_kernel_Deferred1[5], _aD_);
    if(! match){
     caml_call2(Async_kernel_Ivar[14], t[3], [0, a]);
     var alarm = t[1], t$0 = t[6];
     if(caml_call2(Timing_wheel[27], t$0[4], alarm)) remove_alarm(t$0, alarm);
     return 0;
    }
    var match$0 = match[1];
    if(0 === match$0[0]){var a$0 = match$0[1]; return [0, a$0];}
    var h = match$0[1];
    return [1, h];
   }
   function abort_exn(t, a){
    var match = abort(t, a);
    if(typeof match === "number") return 0;
    if(0 === match[0]){
     var
      _aA_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Clock_Event_abort_exn_fail);
     return caml_call1(Core[253], _aA_);
    }
    var
     _aB_ =
       caml_call1(Sexplib0_Sexp_conv[7], cst_Clock_Event_abort_exn_fail$0);
    return caml_call1(Core[253], _aB_);
   }
   function abort_if_possible(t, a){abort(t, a); return 0;}
   function schedule(t){t[1] = run_at_internal(t[6], t[5], t[2], 0); return;}
   function sexp_of_t$6(of_a_054, of_h_055, param){
    if(typeof param === "number") return _I_;
    if(0 === param[0]){
     var arg0_056 = param[1], res0_057 = caml_call1(of_a_054, arg0_056);
     return [1, [0, _J_, [0, res0_057, 0]]];
    }
    var arg0_058 = param[1], res0_059 = caml_call1(of_h_055, arg0_058);
    return [1, [0, _K_, [0, res0_059, 0]]];
   }
   var Reschedule_result = [0, sexp_of_t$6];
   function reschedule_at(t, at){
    if(debug){
     var
      _aw_ =
        function(param){
         var arg1_063 = param[2], arg0_062 = param[1];
         function _az_(param){return _L_;}
         var
          res0_064 = sexp_of_t$3(function(param){return _M_;}, _az_, arg0_062),
          res1_065 = caml_call1(Async_kernel_Time_ns[92], arg1_063);
         return [1, [0, res0_064, [0, res1_065, 0]]];
        };
     caml_call3
      (Async_kernel_Debug[15],
       cst_Time_source_Event_reschedu,
       [0, t, at],
       _aw_);
    }
    var
     _ax_ = fired$1(t),
     match = caml_call1(Async_kernel_Deferred1[5], _ax_);
    if(match){
     var match$0 = match[1];
     if(0 === match$0[0]){var a = match$0[1]; return [0, a];}
     var h = match$0[1];
     return [1, h];
    }
    var
     events = t[6][4],
     is_in_timing_wheel = caml_call2(Timing_wheel[27], events, t[1]),
     _ay_ = caml_call1(Timing_wheel[11], events),
     am_trying_to_reschedule_in_the =
       caml_call2(Async_kernel_Time_ns[97], at, _ay_);
    t[5] = at;
    if(am_trying_to_reschedule_in_the)
     if(is_in_timing_wheel)
      caml_call3(Timing_wheel[29], events, t[1], at);
     else{t[4] = t[4] + 1 | 0; schedule(t);}
    else if(is_in_timing_wheel){
     caml_call1(t[6][7], t[1]);
     caml_call2(Timing_wheel[28], events, t[1]);
    }
    return 0;
   }
   function reschedule_after(t, span){
    return reschedule_at(t, span_to_time(t[6], span));
   }
   function run_at$0(time_source, scheduled_at, f, z){
    if(debug)
     caml_call3
      (Async_kernel_Debug[15],
       cst_Time_source_Event_run_at,
       scheduled_at,
       Async_kernel_Time_ns[92]);
    var _ap_ = 0, _aq_ = caml_call1(Async_kernel_Ivar[12], 0);
    function _ar_(_av_){return 0;}
    var
     t =
       [0,
        caml_call1(Timing_wheel[5][2], 0),
        _ar_,
        _aq_,
        _ap_,
        scheduled_at,
        time_source];
    function fire(param){
     var _as_ = caml_call1(Async_kernel_Ivar[16], t[3]);
     if(_as_){
      if(caml_call2(Async_kernel_Import[4], t[4], 0)){t[4] = t[4] - 1 | 0; return 0;}
      var
       result = caml_call1(f, z),
       _at_ = caml_call1(Async_kernel_Ivar[16], t[3]);
      if(_at_) return caml_call2(Async_kernel_Ivar[14], t[3], [1, result]);
      var _au_ = _at_;
     }
     else
      var _au_ = _as_;
     return _au_;
    }
    t[2] = fire;
    schedule(t);
    return t;
   }
   function at$0(time_source, time){
    var _an_ = 0;
    return run_at$0(time_source, time, function(_ao_){return 0;}, _an_);
   }
   function run_after$0(time_source, span, f, a){
    return run_at$0(time_source, span_to_time(time_source, span), f, a);
   }
   function after$0(time_source, span){
    return at$0(time_source, span_to_time(time_source, span));
   }
   function at_times(opt, t, next_time){
    if(opt)
     var sth = opt[1], stop = sth;
    else
     var stop = caml_call1(Async_kernel_Deferred1[12], 0);
    var tail = caml_call1(Async_kernel_Tail[2], 0);
    function loop(param){
     function _aj_(param){
      return 936767357 <= param
              ? (caml_call2(Async_kernel_Tail[3], tail, 0), loop(0))
              : caml_call1(Async_kernel_Tail[4], tail);
     }
     var _ak_ = 0;
     function _al_(param){return 936767357;}
     var
      _am_ =
        [0, caml_call2(choice, at(t, caml_call1(next_time, 0)), _al_), _ak_];
     return caml_call2
             (upon,
              caml_call1
               (choose,
                [0,
                 caml_call2(choice, stop, function(param){return 926227490;}),
                 _am_]),
              _aj_);
    }
    loop(0);
    return caml_call1(Async_kernel_Tail[8], tail);
   }
   function at_varying_intervals(stop, t, compute_span){
    return at_times
            (stop,
             t,
             function(param){
              var _ah_ = caml_call1(compute_span, 0), _ai_ = now(t);
              return caml_call2(Async_kernel_Time_ns[113], _ai_, _ah_);
             });
   }
   function at_intervals(start, stop, t, interval){
    if(start) var x = start[1], start$0 = x; else var start$0 = now(t);
    return at_times
            (stop,
             t,
             function(param){
              var _ag_ = now(t);
              return caml_call5
                      (Async_kernel_Time_ns[65], 0, start$0, _ag_, interval, 0);
             });
   }
   var immediately = 0;
   function run_repeatedly(opt, stop, _aa_, _$_, time_source, f, continue$0){
    if(opt)
     var sth = opt[1], start = sth;
    else
     var start = caml_call1(Async_kernel_Deferred_std[10], 0);
    if(_aa_)
     var sth$0 = _aa_[1], continue_on_error = sth$0;
    else
     var continue_on_error = 1;
    if(_$_)
     var sth$1 = _$_[1], finished = sth$1;
    else
     var finished = caml_call1(Async_kernel_Ivar[12], 0);
    return caml_call2
            (upon,
             start,
             function(param){
              var alarm = [0, caml_call1(Timing_wheel[5][2], 0)];
              if(stop){
               var stop$0 = stop[1];
               caml_call2
                (upon,
                 stop$0,
                 function(param){
                  var
                   _af_ =
                     caml_call2(Timing_wheel[27], time_source[4], alarm[1]);
                  return _af_
                          ? (remove_alarm
                             (time_source, alarm[1]),
                            caml_call2(Async_kernel_Ivar[15], finished, 0))
                          : _af_;
                 });
               var stop$1 = stop$0;
              }
              else
               var stop$1 = caml_call1(Async_kernel_Deferred1[12], 0);
              function run_f(param){
               if(caml_call1(Async_kernel_Deferred1[7], stop$1))
                return caml_call2(Async_kernel_Ivar[15], finished, 0);
               if(continue_on_error)
                return caml_call2
                        (upon,
                         caml_call7
                          (Async_kernel_Monitor[16], 0, 0, 0, 0, _O_, _N_, f),
                         continue_try_with);
               var d = caml_call1(f, 0);
               return caml_call1(Async_kernel_Deferred1[7], d)
                       ? continue_f(0)
                       : caml_call2(upon, d, continue_f);
              }
              function continue_f(param){
               if(caml_call1(Async_kernel_Deferred1[7], stop$1))
                return caml_call2(Async_kernel_Ivar[15], finished, 0);
               var _ad_ = 0;
               if(typeof continue$0 === "number")
                var _ae_ = caml_call1(Timing_wheel[11], time_source[4]);
               else if(0 === continue$0[0])
                var
                 span = continue$0[1],
                 _ae_ = span_to_time(time_source, span);
               else
                var
                 interval = continue$0[2],
                 base = continue$0[1],
                 _ac_ = now(time_source),
                 _ae_ =
                   caml_call5
                    (Async_kernel_Time_ns[65], 0, base, _ac_, interval, 0);
               alarm[1] = run_at_internal(time_source, _ae_, run_f, _ad_);
               return 0;
              }
              function continue_try_with(or_error){
               if(0 !== or_error[0]){
                var
                 error = or_error[1],
                 _ab_ = caml_call1(Async_kernel_Monitor[5], 0);
                caml_call3(Async_kernel_Monitor[15], _ab_, 0, error);
               }
               return continue_f(0);
              }
              return run_f(0);
             });
   }
   function every(start, stop, continue_on_error, finished, t, span, f){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][75])){
     var
      _Z_ =
        [0, [1, [0, _P_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]], 0],
      ___ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Time_source_every_got_nonp),
          _Z_]];
     caml_call1(Core[253], ___);
    }
    return run_repeatedly
            (start, stop, continue_on_error, finished, t, f, [0, span]);
   }
   function every$0(start, stop, continue_on_error, t, span, f){
    return every
            (start,
             stop,
             continue_on_error,
             0,
             t,
             span,
             function(param){
              caml_call1(f, 0);
              return caml_call1(Async_kernel_Deferred_std[10], 0);
             });
   }
   function run_at_intervals(start, stop, continue_on_error, t, interval, f){
    var now$0 = now(t);
    if(start)
     var
      start$0 = start[1],
      start$1 =
        [0,
         at
          (t,
           caml_call5
            (Async_kernel_Time_ns[65], _Q_, start$0, now$0, interval, 0))],
      base = start$0;
    else
     var start$1 = 0, base = now$0;
    return run_repeatedly
            (start$1, stop, continue_on_error, 0, t, f, [1, base, interval]);
   }
   function run_at_intervals$0(start, stop, continue_on_error, t, interval, f){
    return run_at_intervals
            (start,
             stop,
             continue_on_error,
             t,
             interval,
             function(param){
              caml_call1(f, 0);
              return caml_call1(Async_kernel_Deferred_std[10], 0);
             });
   }
   function with_timeout(t, span, d){
    var timeout = after$0(t, span), _U_ = 0;
    function _V_(param){
     if(0 !== param[0]) return 642269825;
     var
      _Y_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Time_source_with_timeout_b);
     return caml_call1(Core[253], _Y_);
    }
    var _W_ = [0, caml_call2(choice, fired$1(timeout), _V_), _U_];
    return caml_call1
            (choose,
             [0,
              caml_call2
               (choice,
                d,
                function(v){
                 var match = abort(timeout, 0);
                 a:
                 if(typeof match !== "number" && 0 === match[0]){
                  var
                   _X_ =
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_Time_source_with_timeout_b$0);
                  caml_call1(Core[253], _X_);
                  break a;
                 }
                 return [0, 1025039613, v];
                }),
              _W_]);
   }
   function duration_of(t, f){
    var start = now(t);
    function _R_(result){
     var
      _T_ = now(t),
      duration = caml_call2(Async_kernel_Time_ns[57], _T_, start);
     return [0, result, duration];
    }
    var _S_ = caml_call1(f, 0);
    return caml_call2(Async_kernel_Deferred_std[5][2], _S_, _R_);
   }
   function of_synchronous(t){return t;}
   function to_synchronous(t){return t;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Time_source);
   var
    Async_kernel_Time_source =
      [0,
       [0, sexp_of_t],
       Read_write,
       Async_kernel_Types[21],
       sexp_of_t$1,
       id,
       invariant,
       invariant_with_jobs,
       read_only,
       create,
       wall_clock,
       alarm_precision,
       is_wall_clock,
       next_alarm_fires_at,
       now,
       timing_wheel_now,
       advance_directly,
       advance_directly,
       advance_directly_by,
       advance_directly_by,
       fire_past_alarms,
       advance_by_alarms,
       advance_by_max_alarms_in_each_,
       advance_by_alarms_by,
       [0, immediately],
       run_repeatedly,
       run_at,
       run_after,
       at,
       after,
       with_timeout,
       duration_of,
       [0,
        sexp_of_t$3,
        sexp_of_t_unit,
        invariant$0,
        scheduled_at,
        Status,
        status,
        run_at$0,
        run_after$0,
        Abort_result,
        abort,
        abort_exn,
        abort_if_possible,
        Fired,
        fired$1,
        Reschedule_result,
        reschedule_at,
        reschedule_after,
        at$0,
        after$0],
       at_varying_intervals,
       at_intervals,
       every,
       every$0,
       run_at_intervals,
       run_at_intervals$0,
       of_synchronous,
       to_synchronous];
   runtime.caml_register_global
    (83, Async_kernel_Time_source, cst_Async_kernel_Time_source$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Stack_or_counter
//# unitInfo: Requires: Base, Base__Stack, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Stack_or_coun$0 = "Async_kernel__Stack_or_counter",
    cst_async_kernel$0 = "async_kernel",
    cst_length = "length";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Stack = global_data.Base__Stack,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Stack_or_coun$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/stack_or_counter.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_Stack_or_counter_pop_exn_o =
      "[Stack_or_counter.pop_exn] of empty stack",
    _d_ = [0, cst_length],
    cst_Stack_or_counter_create_co =
      "[Stack_or_counter.create_counter] got negative length",
    _a_ = [0, "Stack"],
    _b_ = [0, cst_length],
    _c_ = [0, "Counter"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Stack_or_coun = cst_Async_kernel_Stack_or_coun$0;
   function sexp_of_t(of_a_002, param){
    if(0 === param[0]){
     var
      arg0_003 = param[1],
      res0_004 = caml_call2(Base_Stack[2], of_a_002, arg0_003);
     return [1, [0, _a_, [0, res0_004, 0]]];
    }
    var
     length_006 = param[1],
     arg_007 = caml_call1(Base[120], length_006),
     bnds_005 = [0, [1, [0, _b_, [0, arg_007, 0]]], 0];
    return [1, [0, _c_, bnds_005]];
   }
   function of_list(list){return [0, caml_call1(Base_Stack[22], list)];}
   function create_counter(length){
    if(length < 0){
     var
      _i_ = [0, [1, [0, _d_, [0, caml_call1(Base[120], length), 0]]], 0],
      _j_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Stack_or_counter_create_co),
          _i_]];
     caml_call1(Base[203], _j_);
    }
    return [1, length];
   }
   function length(t){
    if(0 !== t[0]) return t[1];
    var s = t[1];
    return caml_call1(Base_Stack[6], s);
   }
   function clear(t){
    if(0 === t[0]){var s = t[1]; return caml_call1(Base_Stack[30], s);}
    t[1] = 0;
    return 0;
   }
   function push(t, a){
    if(0 === t[0]){var s = t[1]; return caml_call2(Base_Stack[25], s, a);}
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function pop_exn(t){
    if(0 === t[0]){var s = t[1]; return caml_call1(Base_Stack[27], s);}
    if(0 === t[1]){
     var
      _h_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Stack_or_counter_pop_exn_o);
     caml_call1(Base[203], _h_);
    }
    t[1] = t[1] - 1 | 0;
    return 0;
   }
   function iter(t, f){
    if(0 === t[0]){var s = t[1]; return caml_call2(Base_Stack[8], s, f);}
    var _f_ = t[1], _e_ = 1;
    if(_f_ >= 1){
     var for$0 = _e_;
     for(;;){
      caml_call1(f, 0);
      var _g_ = for$0 + 1 | 0;
      if(_f_ === for$0) break;
      var for$0 = _g_;
     }
    }
    return 0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Stack_or_coun);
   var
    Async_kernel_Stack_or_counter =
      [0,
       sexp_of_t,
       clear,
       create_counter,
       iter,
       length,
       of_list,
       pop_exn,
       push];
   runtime.caml_register_global
    (20, Async_kernel_Stack_or_counter, cst_Async_kernel_Stack_or_coun$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Throttle
//# unitInfo: Requires: Assert_failure, Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Import, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Stack_or_counter, Base__Field, Core, Core__Int, Core__List, Core__Queue, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_Async_kernel_Throttle$0 = "Async_kernel__Throttle",
    cst_Ok = "Ok",
    cst_Raised = "Raised",
    cst_async_kernel$0 = "async_kernel",
    cst_capacity_available$0 = "capacity_available",
    cst_cleaned$0 = "cleaned",
    cst_job_resources_not_in_use$0 = "job_resources_not_in_use",
    cst_jobs_waiting_to_start$0 = "jobs_waiting_to_start",
    cst_max_concurrent_jobs$0 = "max_concurrent_jobs",
    cst_num_jobs_running$0 = "num_jobs_running",
    cst_num_resources_not_cleaned$0 = "num_resources_not_cleaned",
    cst_src_throttle_ml = "src/throttle.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Stack_or_counter = global_data.Async_kernel__Stack_or_counter,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Import = global_data.Async_kernel__Import,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_List = global_data.Core__List,
    Base_Field = global_data.Base__Field,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Throttle$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_throttle_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _Z_ = [0, cst_src_throttle_ml, 173, 2],
    _$_ = [0, cst_src_throttle_ml, 174, 2],
    ___ = [0, cst_src_throttle_ml, 175, 2],
    cst_enqueue_exclusive_was_call =
      "[enqueue_exclusive] was called with a very large value of [max_concurrent_jobs]. This doesn't work.",
    _ab_ = [0, cst_src_throttle_ml, 279, 2],
    cst_throttle_aborted_job = "throttle aborted job",
    _aa_ = [0, cst_max_concurrent_jobs$0],
    cst_Throttle_create_requires_p =
      "Throttle.create requires positive max_concurrent_jobs, but got",
    _L_ = [0, "_"],
    _Y_ = [0, cst_src_throttle_ml, 104, 43],
    _X_ = [0, cst_src_throttle_ml, 108, 11],
    _W_ = [0, cst_src_throttle_ml, 113, 29],
    _V_ = [0, cst_src_throttle_ml, 116, 11],
    _U_ = [0, cst_src_throttle_ml, 117, 11],
    _T_ = [0, cst_src_throttle_ml, 119, 16],
    _S_ = [0, cst_src_throttle_ml, 123, 26],
    _R_ = [0, cst_src_throttle_ml, 128, 11],
    _Q_ = [0, cst_src_throttle_ml, 129, 11],
    _P_ = [0, cst_src_throttle_ml, 130, 69],
    _O_ = [0, cst_src_throttle_ml, 133, 40],
    _M_ = [0, "t"],
    _N_ = [0, "exn"],
    cst_Throttle_invariant_failed = "Throttle.invariant failed",
    _B_ = [0, cst_cleaned$0],
    _C_ = [0, cst_num_resources_not_cleaned$0],
    _D_ = [0, "cleans"],
    _E_ = [0, "is_dead"],
    _F_ = [0, cst_capacity_available$0],
    _G_ = [0, cst_num_jobs_running$0],
    _H_ = [0, cst_jobs_waiting_to_start$0],
    _I_ = [0, cst_job_resources_not_in_use$0],
    _J_ = [0, cst_max_concurrent_jobs$0],
    _K_ = [0, "continue_on_error"],
    _m_ = [0, cst_src_throttle_ml, 58, 18],
    _k_ = [0, 3804260],
    _l_ = [0, 523273847],
    _h_ = [0, "Abort"],
    _i_ = [0, "Start"],
    _e_ = [0, cst_Ok],
    _f_ = [0, cst_Raised],
    _d_ = [0, cst_Aborted],
    _g_ = [0, "outcome"],
    _j_ = [0, "start"],
    _a_ = [0, cst_Aborted],
    _b_ = [0, cst_Ok],
    _c_ = [0, cst_Raised],
    cst_cleaned = cst_cleaned$0,
    cst_num_resources_not_cleaned = cst_num_resources_not_cleaned$0,
    cst_capacity_available = cst_capacity_available$0,
    cst_num_jobs_running = cst_num_jobs_running$0,
    cst_jobs_waiting_to_start = cst_jobs_waiting_to_start$0,
    cst_job_resources_not_in_use = cst_job_resources_not_in_use$0,
    cst_max_concurrent_jobs = cst_max_concurrent_jobs$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Throttle = cst_Async_kernel_Throttle$0;
   function sexp_of_outcome(of_a_001, param){
    if(typeof param === "number") return _a_;
    if(17724 <= param[1]){
     var v_002 = param[2];
     return [1, [0, _b_, [0, caml_call1(of_a_001, v_002), 0]]];
    }
    var v_003 = param[2];
    return [1, [0, _c_, [0, caml_call1(Core[537], v_003), 0]]];
   }
   function abort(t){
    return caml_call2(Async_kernel_Ivar[14], t[1], 774323088);
   }
   function cleaned(r){return r[10];}
   function num_resources_not_cleaned(r){return r[9];}
   function set_num_resources_not_cleaned(r, v){r[9] = v; return 0;}
   function is_dead(r){return r[7];}
   function capacity_available(r){return r[6];}
   function set_capacity_available(r, v){r[6] = v; return 0;}
   function num_jobs_running(r){return r[5];}
   function set_num_jobs_running(r, v){r[5] = v; return 0;}
   function jobs_waiting_to_start(r){return r[4];}
   function job_resources_not_in_use(r){return r[3];}
   function max_concurrent_jobs(r){return r[2];}
   function _n_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], v];
   }
   var
    _o_ = 0,
    cleaned$0 =
      [0, function(param){return 0;}, cst_cleaned, _o_, cleaned, _n_];
   function _p_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], v, r[10]];
   }
   var
    _q_ = [0, set_num_resources_not_cleaned],
    num_resources_not_cleaned$0 =
      [0,
       function(param){return 0;},
       cst_num_resources_not_cleaned,
       _q_,
       num_resources_not_cleaned,
       _p_];
   function _r_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8], r[9], r[10]];
   }
   var
    _s_ = [0, set_capacity_available],
    capacity_available$0 =
      [0,
       function(param){return 0;},
       cst_capacity_available,
       _s_,
       capacity_available,
       _r_];
   function _t_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _u_ = [0, set_num_jobs_running],
    num_jobs_running$0 =
      [0,
       function(param){return 0;},
       cst_num_jobs_running,
       _u_,
       num_jobs_running,
       _t_];
   function _v_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _w_ = 0,
    jobs_waiting_to_start$0 =
      [0,
       function(param){return 0;},
       cst_jobs_waiting_to_start,
       _w_,
       jobs_waiting_to_start,
       _v_];
   function _x_(r, v){
    return [0, r[1], r[2], v, r[4], r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _y_ = 0,
    job_resources_not_in_use$0 =
      [0,
       function(param){return 0;},
       cst_job_resources_not_in_use,
       _y_,
       job_resources_not_in_use,
       _x_];
   function _z_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10]];
   }
   var
    _A_ = 0,
    max_concurrent_jobs$0 =
      [0,
       function(param){return 0;},
       cst_max_concurrent_jobs,
       _A_,
       max_concurrent_jobs,
       _z_];
   function sexp_of_t(of_a_011, param){
    var
     jobs_waiting_to_start_019 = param[4],
     job_resources_not_in_use_017 = param[3],
     max_concurrent_jobs_015 = param[2],
     continue_on_error_013 = param[1],
     num_jobs_running_021 = param[5],
     capacity_available_023 = param[6],
     is_dead_025 = param[7],
     cleans_027 = param[8],
     num_resources_not_cleaned_029 = param[9],
     cleaned_031 = param[10],
     arg_032 = caml_call2(Async_kernel_Ivar[9], Core[518], cleaned_031),
     bnds_012 = [0, [1, [0, _B_, [0, arg_032, 0]]], 0],
     arg_030 = caml_call1(Core[356], num_resources_not_cleaned_029),
     bnds_012$0 = [0, [1, [0, _C_, [0, arg_030, 0]]], bnds_012];
    function _a3_(param){
     function _a8_(_a9_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _a8_);
    }
    var
     arg_028 = caml_call2(Core[421], _a3_, cleans_027),
     bnds_012$1 = [0, [1, [0, _D_, [0, arg_028, 0]]], bnds_012$0],
     arg_026 = caml_call1(Core[305], is_dead_025),
     bnds_012$2 = [0, [1, [0, _E_, [0, arg_026, 0]]], bnds_012$1],
     _a4_ = caml_call1(Async_kernel_Ivar[9], Core[518]),
     arg_024 = caml_call2(Core[454], _a4_, capacity_available_023),
     bnds_012$3 = [0, [1, [0, _F_, [0, arg_024, 0]]], bnds_012$2],
     arg_022 = caml_call1(Core[356], num_jobs_running_021),
     bnds_012$4 = [0, [1, [0, _G_, [0, arg_022, 0]]], bnds_012$3];
    function _a5_(param){
     var outcome_009 = param[2], start_006 = param[1], bnds_005 = 0;
     function _a6_(param){
      return -216426513 === param ? _d_ : 17724 <= param ? _e_ : _f_;
     }
     var
      arg_010 = caml_call2(Async_kernel_Deferred1[1], _a6_, outcome_009),
      bnds_005$0 = [0, [1, [0, _g_, [0, arg_010, 0]]], bnds_005];
     function _a7_(param){
      if(typeof param === "number") return _h_;
      var v_008 = param[2];
      return [1, [0, _i_, [0, caml_call1(of_a_011, v_008), 0]]];
     }
     var
      arg_007 = caml_call2(Async_kernel_Ivar[9], _a7_, start_006),
      bnds_005$1 = [0, [1, [0, _j_, [0, arg_007, 0]]], bnds_005$0];
     return [1, bnds_005$1];
    }
    var
     arg_020 = caml_call2(Core_Queue[11], _a5_, jobs_waiting_to_start_019),
     bnds_012$5 = [0, [1, [0, _H_, [0, arg_020, 0]]], bnds_012$4],
     arg_018 =
       caml_call2
        (Async_kernel_Stack_or_counter[1],
         of_a_011,
         job_resources_not_in_use_017),
     bnds_012$6 = [0, [1, [0, _I_, [0, arg_018, 0]]], bnds_012$5],
     arg_016 = caml_call1(Core[356], max_concurrent_jobs_015),
     bnds_012$7 = [0, [1, [0, _J_, [0, arg_016, 0]]], bnds_012$6],
     arg_014 = caml_call1(Core[305], continue_on_error_013),
     bnds_012$8 = [0, [1, [0, _K_, [0, arg_014, 0]]], bnds_012$7];
    return [1, bnds_012$8];
   }
   function invariant(invariant_a, x_033){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, x_033));
        },
      _aQ_ =
        function(cleaned){
         var _a2_ = caml_call1(Async_kernel_Ivar[17], cleaned);
         if(! _a2_) return _a2_;
         if(caml_call2(Async_kernel_Import[3], x_033[9], 0)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
        },
      _aR_ =
        function(num_resources_not_cleaned){
         if
          (! caml_call2(Async_kernel_Import[1], num_resources_not_cleaned, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _R_], 1);
         if
          (!
           caml_call2
            (Async_kernel_Import[2], num_resources_not_cleaned, x_033[2]))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _Q_], 1);
         var
          _a1_ =
            caml_call2
             (Async_kernel_Import[5], num_resources_not_cleaned, x_033[2]);
         if(! _a1_) return _a1_;
         if(x_033[7]) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _P_], 1);
        },
      _aS_ =
        function(param){
         if(! param) return 0;
         var ivar = param[1];
         if(caml_call1(Async_kernel_Ivar[16], ivar)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _S_], 1);
        },
      _aT_ =
        function(num_jobs_running){
         if(! caml_call2(Async_kernel_Import[1], num_jobs_running, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
         if(! caml_call2(Async_kernel_Import[2], num_jobs_running, x_033[2]))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
         var
          _a0_ =
            caml_call2(Async_kernel_Import[5], num_jobs_running, x_033[2]);
         if(! _a0_) return _a0_;
         if(caml_call1(Core_Queue[15], x_033[4])) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
        },
      _aU_ =
        function(jobs_waiting_to_start){
         var _aZ_ = x_033[7];
         if(! _aZ_) return _aZ_;
         if(caml_call1(Core_Queue[15], jobs_waiting_to_start)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
        },
      _aV_ =
        function(job_resources_not_in_use){
         caml_call2
          (Async_kernel_Stack_or_counter[4],
           job_resources_not_in_use,
           invariant_a);
         var
          _aX_ = x_033[7] ? 0 : x_033[2] - x_033[5] | 0,
          _aY_ =
            caml_call1
             (Async_kernel_Stack_or_counter[5], job_resources_not_in_use);
         if(caml_call2(Async_kernel_Import[3], _aY_, _aX_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
        };
     check
      (function(max_concurrent_jobs){
        if(caml_call2(Async_kernel_Import[4], max_concurrent_jobs, 0))
         return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
       },
       max_concurrent_jobs$0);
     check(_aV_, job_resources_not_in_use$0);
     check(_aU_, jobs_waiting_to_start$0);
     check(_aT_, num_jobs_running$0);
     check(_aS_, capacity_available$0);
     check(_aR_, num_resources_not_cleaned$0);
     var _aW_ = check(_aQ_, cleaned$0);
     return _aW_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _aL_ = 0,
      _aM_ = 0,
      _aN_ =
        [0,
         [1,
          [0, _M_, [0, sexp_of_t(function(param){return _L_;}, x_033), _aM_]]],
         _aL_],
      _aO_ = [0, [1, [0, _N_, [0, caml_call1(Core[537], exn), 0]]], _aN_],
      _aP_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Throttle_invariant_failed),
          _aO_]];
     return caml_call1(Core[253], _aP_);
    }
   }
   function sexp_of_t$0(of_a_034, of_kind_035, x_036){return sexp_of_t(of_a_034, x_036);
   }
   function invariant$0(invariant_a, param, t){return invariant(invariant_a, t);
   }
   var T2 = [0, sexp_of_t$0, invariant$0];
   function num_jobs_waiting_to_start(t){
    return caml_call1(Core_Queue[14], t[4]);
   }
   function clean_resource(t, a){
    function _aG_(param){
     t[9] = t[9] - 1 | 0;
     var _aK_ = caml_call2(Async_kernel_Import[3], t[9], 0);
     return _aK_ ? caml_call2(Async_kernel_Ivar[14], t[10], 0) : _aK_;
    }
    function _aH_(f){return caml_call1(f, a);}
    var
     _aI_ = caml_call2(Core_List[72], t[8], _aH_),
     _aJ_ = caml_call1(Async_kernel_Deferred1[43], _aI_);
    return caml_call2(Async_kernel_Deferred_std[1], _aJ_, _aG_);
   }
   function kill(t){
    var _aE_ = 1 - t[7];
    if(! _aE_) return _aE_;
    t[7] = 1;
    caml_call2(Core_Queue[16], t[4], abort);
    caml_call1(Core_Queue[47], t[4]);
    function _aF_(a){return clean_resource(t, a);}
    caml_call2(Async_kernel_Stack_or_counter[4], t[3], _aF_);
    return caml_call1(Async_kernel_Stack_or_counter[2], t[3]);
   }
   function at_kill(t, f){
    var
     _aD_ = caml_call1(Async_kernel_Monitor[26][8], f),
     f$0 = caml_call1(Core[259], _aD_);
    t[8] = [0, f$0, t[8]];
    return 0;
   }
   function cleaned$1(t){return caml_call1(Async_kernel_Ivar[18], t[10]);}
   function start_job(t){
    if(t[7]) throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
    if(! caml_call2(Async_kernel_Import[5], t[5], t[2]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
    if(caml_call1(Core_Queue[15], t[4]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, ___], 1);
    var job = caml_call1(Core_Queue[44], t[4]);
    t[5] = t[5] + 1 | 0;
    var job_resource = caml_call1(Async_kernel_Stack_or_counter[7], t[3]);
    function _aC_(res){
     t[5] = t[5] - 1 | 0;
     if(17724 > res && 1 - t[1]) kill(t);
     if(t[7]) return clean_resource(t, job_resource);
     caml_call2(Async_kernel_Stack_or_counter[8], t[3], job_resource);
     if(! caml_call1(Core_Queue[15], t[4])) return start_job(t);
     var match = t[6];
     if(! match) return 0;
     var ivar = match[1];
     caml_call2(Async_kernel_Ivar[14], ivar, 0);
     t[6] = 0;
     return 0;
    }
    caml_call2(Async_kernel_Ivar[14], job[1], [0, 389604418, job_resource]);
    function _aA_(x){
     if(-216426513 === x)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
     return x;
    }
    var _aB_ = caml_call2(Async_kernel_Deferred_std[5][2], job[2], _aA_);
    return caml_call2(Async_kernel_Deferred_std[1], _aB_, _aC_);
   }
   function create_internal(continue_on_error, job_resources){
    var
     max_concurrent_jobs =
       caml_call1(Async_kernel_Stack_or_counter[5], job_resources),
     _az_ = caml_call1(Async_kernel_Ivar[12], 0);
    return [0,
            continue_on_error,
            max_concurrent_jobs,
            job_resources,
            caml_call2(Core_Queue[61], 0, 0),
            0,
            0,
            0,
            0,
            max_concurrent_jobs,
            _az_];
   }
   function create_with(continue_on_error, job_resources){
    return create_internal
            (continue_on_error,
             caml_call1(Async_kernel_Stack_or_counter[6], job_resources));
   }
   function create(opt, a){
    if(opt)
     var sth = opt[1], continue_on_error = sth;
    else
     var continue_on_error = 0;
    return create_with(continue_on_error, [0, a, 0]);
   }
   var Sequencer = [0, sexp_of_t, create];
   function create$0(continue_on_error, max_concurrent_jobs){
    if(caml_call2(Async_kernel_Import[2], max_concurrent_jobs, 0)){
     var
      _ax_ =
        [0,
         [1, [0, _aa_, [0, caml_call1(Core[356], max_concurrent_jobs), 0]]],
         0],
      _ay_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Throttle_create_requires_p),
          _ax_]];
     caml_call1(Core[253], _ay_);
    }
    return create_internal
            (continue_on_error,
             caml_call1(Async_kernel_Stack_or_counter[3], max_concurrent_jobs));
   }
   function enqueue(t, work){
    var start = caml_call1(Async_kernel_Ivar[12], 0);
    function _ar_(param){
     if(typeof param === "number")
      return caml_call1(Async_kernel_Deferred_std[10], -216426513);
     var a = param[2];
     function _au_(param){
      if(0 === param[0]){var a = param[1]; return [0, 17724, a];}
      var exn = param[1];
      return [0, -387916264, exn];
     }
     function _av_(param){return caml_call1(work, a);}
     var
      _aw_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _l_, _k_, _av_);
     return caml_call2(Async_kernel_Deferred_std[5][2], _aw_, _au_);
    }
    var
     _as_ = caml_call1(Async_kernel_Ivar[18], start),
     result = caml_call2(Async_kernel_Deferred_std[5][1], _as_, _ar_);
    function _at_(param){
     return typeof param === "number"
             ? -216426513
             : 17724 <= param[1] ? 17724 : -387916264;
    }
    var
     outcome = caml_call2(Async_kernel_Deferred_std[5][2], result, _at_),
     internal_job = [0, start, outcome];
    if(t[7])
     abort(internal_job);
    else{
     caml_call2(Core_Queue[41], t[4], internal_job);
     if(caml_call2(Async_kernel_Import[5], t[5], t[2])) start_job(t);
    }
    return result;
   }
   function handle_enqueue_result(result){
    if(typeof result === "number"){
     var _aq_ = caml_call1(Sexplib0_Sexp_conv[7], cst_throttle_aborted_job);
     return caml_call1(Core[253], _aq_);
    }
    if(17724 <= result[1]){var a = result[2]; return a;}
    var exn = result[2];
    throw caml_maybe_attach_backtrace(exn, 0);
   }
   function enqueue$0(t, f){
    var _ap_ = enqueue(t, f);
    return caml_call2
            (Async_kernel_Deferred_std[4], _ap_, handle_enqueue_result);
   }
   function enqueue_exclusive(t, f){
    var n = t[2];
    if(caml_call2(Core_Int[84], n, 1000000)){
     var
      _ai_ = caml_call1(Sexplib0_Sexp_conv[7], cst_enqueue_exclusive_was_call);
     caml_call1(Core[253], _ai_);
    }
    var done = caml_call1(Async_kernel_Ivar[12], 0);
    if(! caml_call2(Async_kernel_Import[4], n, 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
    function f_placeholder(slot){
     return caml_call1(Async_kernel_Ivar[18], done);
    }
    var _ak_ = n - 1 | 0, _aj_ = 1;
    if(_ak_ >= 1){
     var for$0 = _aj_;
     for(;;){
      var _an_ = enqueue$0(t, f_placeholder);
      caml_call1(Async_kernel_Deferred_std[8], _an_);
      var _ao_ = for$0 + 1 | 0;
      if(_ak_ === for$0) break;
      var for$0 = _ao_;
     }
    }
    function _al_(result){
     caml_call2(Async_kernel_Ivar[14], done, 0);
     return handle_enqueue_result(result);
    }
    var _am_ = enqueue(t, function(slot){return caml_call1(f, 0);});
    return caml_call2(Async_kernel_Deferred_std[5][2], _am_, _al_);
   }
   function monad_sequence_how(how, f){
    a:
    {
     if(typeof how === "number" && -676829465 <= how){var f$0 = f; break a;}
     if(typeof how === "number")
      var max_concurrent_jobs = 1;
     else
      var
       max_concurrent_jobs$0 = how[2],
       max_concurrent_jobs = max_concurrent_jobs$0;
     var
      t = create$0(0, max_concurrent_jobs),
      f$0 =
        function(a){
         return enqueue$0(t, function(param){return caml_call1(f, a);});
        };
    }
    return caml_call1(Core[258], f$0);
   }
   function monad_sequence_how2(how, f){
    a:
    {
     if(typeof how === "number" && -676829465 <= how){var f$0 = f; break a;}
     if(typeof how === "number")
      var max_concurrent_jobs = 1;
     else
      var
       max_concurrent_jobs$0 = how[2],
       max_concurrent_jobs = max_concurrent_jobs$0;
     var
      t = create$0(0, max_concurrent_jobs),
      f$0 =
        function(a1, a2){
         return enqueue$0(t, function(param){return caml_call2(f, a1, a2);});
        };
    }
    return caml_call1(Core[258], f$0);
   }
   function prior_jobs_done(t){
    function _ad_(all_dummy_jobs_running){
     var dummy_jobs_running = [0, 0], _af_ = t[2], _ae_ = 1;
     if(_af_ >= 1){
      var for$0 = _ae_;
      for(;;){
       var
        _ag_ =
          enqueue$0
           (t,
            function(param){
             dummy_jobs_running[1]++;
             if
              (caml_call2(Async_kernel_Import[3], dummy_jobs_running[1], t[2]))
              caml_call2(Async_kernel_Ivar[14], all_dummy_jobs_running, 0);
             return caml_call1(Async_kernel_Ivar[18], all_dummy_jobs_running);
            });
       caml_call1(Async_kernel_Deferred_std[8], _ag_);
       var _ah_ = for$0 + 1 | 0;
       if(_af_ === for$0) break;
       var for$0 = _ah_;
      }
     }
     return 0;
    }
    return caml_call1(Async_kernel_Deferred1[4], _ad_);
   }
   function capacity_available$1(t){
    if(caml_call2(Async_kernel_Import[5], t[5], t[2]))
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    var match = t[6];
    if(match){
     var ivar = match[1];
     return caml_call1(Async_kernel_Ivar[18], ivar);
    }
    function _ac_(ivar){t[6] = [0, ivar]; return 0;}
    return caml_call1(Async_kernel_Deferred1[4], _ac_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Throttle);
   var
    Async_kernel_Throttle =
      [0,
       T2,
       sexp_of_t,
       invariant,
       create$0,
       create_with,
       sexp_of_outcome,
       enqueue,
       enqueue$0,
       enqueue_exclusive,
       monad_sequence_how,
       monad_sequence_how2,
       prior_jobs_done,
       max_concurrent_jobs,
       num_jobs_running,
       num_jobs_waiting_to_start,
       capacity_available$1,
       kill,
       is_dead,
       at_kill,
       cleaned$1,
       Sequencer];
   runtime.caml_register_global
    (81, Async_kernel_Throttle, cst_Async_kernel_Throttle$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Synchronous_time_source
//# unitInfo: Requires: Async_kernel__Scheduler1, Async_kernel__Synchronous_time_source0, Async_kernel__Types, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Synchronous_t = "Async_kernel__Synchronous_time_source",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source0,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Async_kernel_Types = global_data.Async_kernel__Types;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Synchronous_t);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/synchronous_time_source.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var
    default_timing_wheel_config = Async_kernel_Synchronous_time_[3],
    T1 = Async_kernel_Synchronous_time_[4],
    sexp_of_t = Async_kernel_Synchronous_time_[5],
    invariant = Async_kernel_Synchronous_time_[6],
    invariant_with_jobs = Async_kernel_Synchronous_time_[7],
    Read_write = Async_kernel_Synchronous_time_[8],
    id = Async_kernel_Synchronous_time_[9],
    is_wall_clock = Async_kernel_Synchronous_time_[10],
    length = Async_kernel_Synchronous_time_[11],
    max_allowed_alarm_time = Async_kernel_Synchronous_time_[12],
    read_only = Async_kernel_Synchronous_time_[13],
    alarm_precision = Async_kernel_Synchronous_time_[15],
    next_alarm_fires_at = Async_kernel_Synchronous_time_[16],
    next_alarm_runs_at = Async_kernel_Synchronous_time_[17],
    now = Async_kernel_Synchronous_time_[18],
    timing_wheel_now = Async_kernel_Synchronous_time_[19],
    Event = Async_kernel_Synchronous_time_[22],
    run_after = Async_kernel_Synchronous_time_[23],
    run_at = Async_kernel_Synchronous_time_[24],
    run_at_intervals = Async_kernel_Synchronous_time_[25],
    advance_by_alarms = Async_kernel_Synchronous_time_[32],
    advance_by_max_alarms_in_each_ = Async_kernel_Synchronous_time_[33],
    advance_directly = Async_kernel_Synchronous_time_[34],
    duration_of = Async_kernel_Synchronous_time_[35],
    max_alarm_time_in_min_timing_w = Async_kernel_Synchronous_time_[36],
    has_events_to_run = Async_kernel_Synchronous_time_[37],
    create = Async_kernel_Scheduler1[80],
    wall_clock = Async_kernel_Scheduler1[81];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Synchronous_t);
   var
    _a_ = Event[3],
    Async_kernel_Synchronous_time_$0 =
      [0,
       [0, T1[17]],
       Read_write,
       Async_kernel_Types[21],
       sexp_of_t,
       invariant_with_jobs,
       invariant,
       id,
       read_only,
       create,
       alarm_precision,
       is_wall_clock,
       now,
       timing_wheel_now,
       run_at,
       run_after,
       run_at_intervals,
       max_allowed_alarm_time,
       duration_of,
       [0,
        Event[17],
        Event[18],
        [0,
         _a_[8],
         _a_[2],
         _a_[3],
         _a_[4],
         _a_[5],
         _a_[9],
         _a_[10],
         _a_[11],
         _a_[12],
         _a_[7]],
        Event[25],
        Event[26],
        Event[28],
        Event[29],
        Event[30],
        Event[32],
        Event[31],
        Event[33],
        Event[35],
        Event[36],
        Event[37],
        Event[38],
        Event[39],
        Event[21]],
       default_timing_wheel_config,
       wall_clock,
       length,
       next_alarm_runs_at,
       next_alarm_fires_at,
       advance_by_alarms,
       advance_by_max_alarms_in_each_,
       advance_directly,
       max_alarm_time_in_min_timing_w,
       has_events_to_run];
   runtime.caml_register_global
    (14, Async_kernel_Synchronous_time_$0, cst_Async_kernel_Synchronous_t);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Scheduler
//# unitInfo: Requires: Assert_failure, Async_kernel__Async_stream, Async_kernel__Bvar, Async_kernel__Debug, Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Execution_context, Async_kernel__Import, Async_kernel__Job_queue, Async_kernel__Monitor, Async_kernel__Scheduler1, Async_kernel__Synchronous_time_source0, Async_kernel__Tail, Async_kernel__Time_ns, Async_kernel__Types, Async_kernel_config, Base__Backtrace, Core, Core__Deque, Core__Error, Core__Gc, Core__Hashtbl, Core__Heap_block, Core__List, Core__Option, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__Gc, Thread_safe_queue, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Scheduler$0 = "Async_kernel__Scheduler",
    cst_async_kernel$0 = "async_kernel",
    cst_src_scheduler_ml = "src/scheduler.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Import = global_data.Async_kernel__Import,
    Core_Deque = global_data.Core__Deque,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Backtrace = global_data.Base__Backtrace,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Bvar = global_data.Async_kernel__Bvar,
    Async_kernel_Debug = global_data.Async_kernel__Debug,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Core_Error = global_data.Core__Error,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source0,
    Async_kernel_Job_queue = global_data.Async_kernel__Job_queue,
    Core_Heap_block = global_data.Core__Heap_block,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Stdlib = global_data.Stdlib,
    Core_Gc = global_data.Core__Gc,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Async_kernel_config = global_data.Async_kernel_config,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Async_kernel_Async_stream = global_data.Async_kernel__Async_stream,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Async_kernel_Types = global_data.Async_kernel__Types,
    Timing_wheel = global_data.Timing_wheel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Scheduler$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_scheduler_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    start_cycle = Async_kernel_Scheduler1[77],
    create_job = Async_kernel_Scheduler1[75],
    with_execution_context = Async_kernel_Scheduler1[74],
    with_execution_context1 = Async_kernel_Scheduler1[73],
    current_execution_context = Async_kernel_Scheduler1[72],
    check_access = Async_kernel_Scheduler1[70],
    t_ref = Async_kernel_Scheduler1[69],
    set_check_access = Async_kernel_Scheduler1[68],
    is_dead = Async_kernel_Scheduler1[67],
    enqueue_job = Async_kernel_Scheduler1[64],
    enqueue = Async_kernel_Scheduler1[63],
    free_job = Async_kernel_Scheduler1[62],
    invariant = Async_kernel_Scheduler1[61],
    last_cycle_num_jobs = Async_kernel_Scheduler1[58],
    num_jobs_run = Async_kernel_Scheduler1[57],
    num_pending_jobs = Async_kernel_Scheduler1[56],
    uncaught_exn = Async_kernel_Scheduler1[55],
    uncaught_exn_unwrapped = Async_kernel_Scheduler1[54],
    sexp_of_t = Async_kernel_Scheduler1[53],
    last_cycle_time = Async_kernel_Scheduler1[29],
    Very_low_priority_worker = Async_kernel_Scheduler1[6],
    debug = Async_kernel_Scheduler1[3],
    set_execution_context = Async_kernel_Scheduler1[2],
    events = Async_kernel_Scheduler1[1],
    t = Async_kernel_Scheduler1[71],
    include = Async_kernel_Monitor[26],
    within = include[1],
    within$0 = include[2],
    within_v = include[3],
    schedule = include[4],
    schedule$0 = include[5],
    within_context = include[6],
    preserve_execution_context = include[7],
    preserve_execution_context$0 = include[8],
    _c_ = [0, cst_src_scheduler_ml, 324, 4],
    _d_ = [0, 1],
    _b_ = [0, "n"],
    cst_Scheduler_yield_every_got_ =
      "Scheduler.yield_every got nonpositive count",
    cst_reset_in_forked_process = "reset_in_forked_process",
    cst_Async_scheduler_is_unusabl =
      "Async scheduler is unusable due to [make_async_unusable]",
    cst_run_cycles_until_no_jobs_r =
      "run_cycles_until_no_jobs_remain starting",
    _a_ = [0, "scheduler"],
    cst_run_cycles_until_no_jobs_r$0 =
      "run_cycles_until_no_jobs_remain cannot proceed -- scheduler is dead",
    cst_run_cycles_until_no_jobs_r$1 =
      "run_cycles_until_no_jobs_remain finished",
    cst_run_cycle_starting = "run_cycle starting",
    cst_run_cycle_finished = "run_cycle finished",
    cst_enqueueing_finalizer_using =
      "enqueueing finalizer (using 'last' semantic)",
    cst_adding_finalizer_using_las =
      "adding finalizer (using 'last' semantic)",
    cst_enqueueing_finalizer = "enqueueing finalizer",
    cst_adding_finalizer = "adding finalizer",
    cst_Attempted_to_remove_a_cycl$0 =
      "Attempted to remove a cycle end hook which has already been removed.",
    cst_Attempted_to_remove_a_cycl =
      "Attempted to remove a cycle start hook which has already been removed.",
    cst_Scheduler_remove_single_cy =
      "Scheduler.remove_single_cycle_hook called with a hook that isn't registered",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Scheduler = cst_Async_kernel_Scheduler$0;
   function find_local(key){
    var _af_ = caml_call1(current_execution_context, caml_call1(t, 0));
    return caml_call2(Async_kernel_Execution_context[10], _af_, key);
   }
   function with_local(key, value, f){
    var
     t$0 = caml_call1(t, 0),
     _ae_ = caml_call1(current_execution_context, t$0),
     execution_context =
       caml_call3(Async_kernel_Execution_context[11], _ae_, key, value);
    return caml_call3(with_execution_context, t$0, execution_context, f);
   }
   var main_execution_context = caml_call1(t, 0)[6];
   function can_run_a_job(t){
    var
     _ac_ = caml_call1(num_pending_jobs, t),
     _ad_ = caml_call2(Async_kernel_Import[4], _ac_, 0);
    return _ad_ ? _ad_ : caml_call1(Async_kernel_Bvar[6], t[24]);
   }
   function has_upcoming_event(t){
    var _ab_ = caml_call1(events, t);
    return 1 - caml_call1(Timing_wheel[13], _ab_);
   }
   function next_upcoming_event(t){
    var _aa_ = caml_call1(events, t);
    return caml_call1(Timing_wheel[38], _aa_);
   }
   function next_upcoming_event_exn(t){
    var _$_ = caml_call1(events, t);
    return caml_call1(Timing_wheel[39], _$_);
   }
   function event_precision(t){
    var ___ = caml_call1(events, t);
    return caml_call1(Timing_wheel[10], ___);
   }
   function cycle_start(t){return t[10];}
   function run_every_cycle_start(t, f){t[12] = [0, f, t[12]]; return 0;}
   function run_every_cycle_end(t, f){t[14] = [0, f, t[14]]; return 0;}
   function add_every_cycle_start_hook(t, f){
    var handle = caml_call1(Async_kernel_Types[20][45], 0);
    caml_call3(Core_Hashtbl[36], t[13], handle, f);
    run_every_cycle_start(t, f);
    return handle;
   }
   function add_every_cycle_end_hook(t, f){
    var handle = caml_call1(Async_kernel_Types[20][45], 0);
    caml_call3(Core_Hashtbl[36], t[15], handle, f);
    run_every_cycle_end(t, f);
    return handle;
   }
   function remove_single_cycle_hook(lst, f){
    var f$0 = caml_call1(Core[246], f);
    function _X_(x){return 1 - caml_call1(f$0, x);}
    var
     _Y_ = caml_call2(Core_List[130], lst, _X_),
     match = _Y_[2],
     l = _Y_[1];
    if(match)
     var r = match[2], match$0 = [0, caml_call2(Core[157], l, r)];
    else
     var match$0 = 0;
    if(match$0){var lst$0 = match$0[1]; return lst$0;}
    var
     _Z_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_remove_single_cy);
    return caml_call1(Core[253], _Z_);
   }
   function remove_every_cycle_start_hook_(t, handle){
    var match = caml_call2(Core_Hashtbl[61], t[13], handle);
    if(! match) return caml_call1(Core[6], cst_Attempted_to_remove_a_cycl);
    var f = match[1];
    t[12] = remove_single_cycle_hook(t[12], f);
    return 0;
   }
   function remove_every_cycle_end_hook_ex(t, handle){
    var match = caml_call2(Core_Hashtbl[61], t[15], handle);
    if(! match) return caml_call1(Core[6], cst_Attempted_to_remove_a_cycl$0);
    var f = match[1];
    t[14] = remove_single_cycle_hook(t[14], f);
    return 0;
   }
   function map_cycle_times(t, f){
    function _V_(tail){
     return run_every_cycle_start
             (t,
              function(param){
               var _W_ = caml_call1(f, t[16]);
               return caml_call2(Async_kernel_Tail[3], tail, _W_);
              });
    }
    return caml_call1(Async_kernel_Async_stream[2], _V_);
   }
   function long_cycles(t, at_least){
    function _T_(tail){
     return run_every_cycle_start
             (t,
              function(param){
               var _U_ = caml_call2(Core_Time_ns[1][15], t[16], at_least);
               return _U_
                       ? caml_call2(Async_kernel_Tail[3], tail, t[16])
                       : _U_;
              });
    }
    return caml_call1(Async_kernel_Async_stream[2], _T_);
   }
   function cycle_num_jobs(t){
    function _S_(tail){
     return run_every_cycle_start
             (t,
              function(param){
               return caml_call2(Async_kernel_Tail[3], tail, t[17]);
              });
    }
    return caml_call1(Async_kernel_Async_stream[2], _S_);
   }
   function cycle_count(t){return t[9];}
   function set_max_num_jobs_per_priority_(t, int$0){
    t[27] = caml_call1(Async_kernel_config[5][4], int$0);
    return 0;
   }
   function max_num_jobs_per_priority_per_(t){
    return caml_call1(Async_kernel_config[5][5], t[27]);
   }
   function set_thread_safe_external_job_h(t, f){t[21] = f; return 0;}
   function thread_safe_enqueue_external_j(t, execution_context, f, a){
    caml_call2(Thread_safe_queue[5], t[20], [0, execution_context, f, a]);
    return caml_call1(t[21], 0);
   }
   function set_event_added_hook(t, f){t[23] = [0, f]; return 0;}
   function set_job_queued_hook(t, f){t[22] = [0, f]; return 0;}
   function create_alarm(t, f){
    var execution_context = caml_call1(current_execution_context, t);
    function _R_(param){
     return thread_safe_enqueue_external_j(t, execution_context, f, 0);
    }
    return caml_call1(Core_Gc[10][6][2], _R_);
   }
   function add_finalizer(t, heap_block, f){
    var execution_context = caml_call1(current_execution_context, t);
    function finalizer(heap_block){
     if(Async_kernel_Debug[4])
      caml_call1(Async_kernel_Debug[16], cst_enqueueing_finalizer);
     return thread_safe_enqueue_external_j
             (t, execution_context, f, heap_block);
    }
    if(Async_kernel_Debug[4])
     caml_call1(Async_kernel_Debug[16], cst_adding_finalizer);
    try{var _P_ = caml_call2(Stdlib_Gc[3], finalizer, heap_block); return _P_;
    }
    catch(_Q_){
     var _O_ = caml_wrap_exception(_Q_);
     if(_O_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_O_, 0);
    }
   }
   function add_finalizer_exn(t, x, f){
    function _N_(heap_block){
     return caml_call1(f, caml_call1(Core_Heap_block[4], heap_block));
    }
    return add_finalizer(t, caml_call1(Core_Heap_block[3], x), _N_);
   }
   function add_finalizer_last(t, heap_block, f){
    var execution_context = caml_call1(current_execution_context, t);
    function finalizer(param){
     if(Async_kernel_Debug[4])
      caml_call1(Async_kernel_Debug[16], cst_enqueueing_finalizer_using);
     return thread_safe_enqueue_external_j(t, execution_context, f, 0);
    }
    if(Async_kernel_Debug[4])
     caml_call1(Async_kernel_Debug[16], cst_adding_finalizer_using_las);
    try{var _L_ = caml_call2(Stdlib_Gc[4], finalizer, heap_block); return _L_;
    }
    catch(_M_){
     var _K_ = caml_wrap_exception(_M_);
     if(_K_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_K_, 0);
    }
   }
   function add_finalizer_last_exn(t, x, f){
    return add_finalizer_last(t, caml_call1(Core_Heap_block[3], x), f);
   }
   function force_current_cycle_to_end(t){
    return caml_call2(Async_kernel_Job_queue[6], t[3], 0);
   }
   var send_exn = [0, Async_kernel_Monitor[15]];
   function advance_clock(t, now){
    return caml_call3
            (Async_kernel_Synchronous_time_[29], t[19], now, send_exn);
   }
   function run_cycle(t){
    if(debug)
     caml_call3(Async_kernel_Debug[15], cst_run_cycle_starting, t, sexp_of_t);
    var now = caml_call1(Async_kernel_Time_ns[50], 0);
    t[9] = t[9] + 1 | 0;
    t[10] = now;
    t[11] = 1;
    caml_call2(Async_kernel_Bvar[5], t[24], 0);
    var num_jobs_run_at_start_of_cycle = caml_call1(num_jobs_run, t);
    function _y_(f){return caml_call1(f, 0);}
    caml_call2(Core_List[9], t[12], _y_);
    advance_clock(t, now);
    caml_call2(start_cycle, t, t[27]);
    for(;;){
     var match = caml_call1(Async_kernel_Scheduler1[78], t);
     if(0 === match[0]) break;
     var
      match$0 = match[1],
      backtrace = match$0[2],
      exn = match$0[1],
      _z_ = caml_call1(Async_kernel_Monitor[5], 0);
     caml_call3
      (Async_kernel_Monitor[15], _z_, [0, [0, 936718974, backtrace]], exn);
    }
    var
     _A_ = t[10],
     _B_ = caml_call1(Async_kernel_Time_ns[50], 0),
     cycle_time = caml_call2(Async_kernel_Time_ns[57], _B_, _A_);
    t[16] = cycle_time;
    t[17] = caml_call1(num_jobs_run, t) - num_jobs_run_at_start_of_cycle | 0;
    t[18] = caml_call2(Core_Time_ns[1][97], t[18], cycle_time);
    var _C_ = caml_call1(Async_kernel_Bvar[6], t[25]);
    if(_C_)
     var
      _D_ = caml_call1(num_pending_jobs, t),
      _E_ = caml_call2(Async_kernel_Import[3], _D_, 0);
    else
     var _E_ = _C_;
    if(_E_) caml_call2(Async_kernel_Bvar[5], t[25], 0);
    function _F_(f){return caml_call1(f, 0);}
    caml_call2(Core_List[9], t[14], _F_);
    t[11] = 0;
    if(! debug) return debug;
    function _G_(param){
     var
      arg1_002 = param[2],
      arg0_001 = param[1],
      res0_003 = caml_call2(Core[454], Core_Error[6], arg0_001),
      res1_004 = caml_call1(Core[305], arg1_002);
     return [1, [0, res0_003, [0, res1_004, 0]]];
    }
    var
     _H_ = next_upcoming_event(t),
     _I_ = caml_call1(Core[243], _H_),
     _J_ = [0, caml_call1(uncaught_exn, t), _I_];
    return caml_call3
            (Async_kernel_Debug[15], cst_run_cycle_finished, _J_, _G_);
   }
   function run_cycles_until_no_jobs_remai(param){
    if(debug)
     caml_call1(Async_kernel_Debug[16], cst_run_cycles_until_no_jobs_r);
    var t$0 = caml_call1(t, 0);
    if(caml_call1(is_dead, t$0)){
     var
      _u_ = [0, [1, [0, _a_, [0, caml_call1(sexp_of_t, t$0), 0]]], 0],
      _v_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_run_cycles_until_no_jobs_r$0),
          _u_]];
     caml_call1(Core[253], _v_);
    }
    for(;;){
     run_cycle(t$0);
     advance_clock(t$0, caml_call1(Async_kernel_Time_ns[50], 0));
     if(! can_run_a_job(t$0)){
      caml_call2(set_execution_context, t$0, t$0[6]);
      if(debug)
       caml_call1(Async_kernel_Debug[16], cst_run_cycles_until_no_jobs_r$1);
      var _w_ = Core_Error[28], _x_ = caml_call1(uncaught_exn, t$0);
      return caml_call2(Core_Option[41], _x_, _w_);
     }
    }
   }
   function make_async_unusable(param){
    var t = t_ref[1];
    t[1] =
     [0,
      function(param){
       var
        _t_ =
          caml_call1(Sexplib0_Sexp_conv[7], cst_Async_scheduler_is_unusabl);
       return caml_call1(Core[253], _t_);
      }];
    return 0;
   }
   function reset_in_forked_process(param){
    if(debug) caml_call1(Async_kernel_Debug[16], cst_reset_in_forked_process);
    var _s_ = caml_call1(Async_kernel_Scheduler1[66], 0);
    Async_kernel_Scheduler1[69][1] = _s_;
    return 0;
   }
   function check_invariants(t){return t[26];}
   function set_check_invariants(t, b){t[26] = b; return 0;}
   function set_record_backtraces(t, b){t[28] = b; return 0;}
   function yield$0(t){return caml_call1(Async_kernel_Bvar[4], t[24]);}
   function yield_until_no_jobs_remain(opt, t){
    if(opt)
     var sth = opt[1], may_return_immediately = sth;
    else
     var may_return_immediately = 0;
    if(may_return_immediately){
     var _r_ = caml_call1(num_pending_jobs, t);
     if(caml_call2(Async_kernel_Import[3], _r_, 0))
      return caml_call1(Async_kernel_Deferred_std[10], 0);
    }
    return caml_call1(Async_kernel_Bvar[4], t[25]);
   }
   function yield_every(n){
    if(caml_call2(Async_kernel_Import[2], n, 0)){
     var
      _n_ = [0, [1, [0, _b_, [0, caml_call1(Core[356], n), 0]]], 0],
      _o_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Scheduler_yield_every_got_),
          _n_]];
     return caml_call1(Core[253], _o_);
    }
    if(caml_call2(Async_kernel_Import[3], n, 1)){
     var _p_ = function(t){return yield$0(t);};
     return caml_call1(Core[258], _p_);
    }
    var count_until_yield = [0, n];
    function _q_(t){
     count_until_yield[1] += -1;
     return caml_call2(Async_kernel_Import[4], count_until_yield[1], 0)
             ? caml_call1(Async_kernel_Deferred_std[10], 0)
             : (count_until_yield[1] = n, yield$0(t));
    }
    return caml_call1(Core[258], _q_);
   }
   function total_cycle_time(t){
    if(! t[11]) return t[18];
    var
     _l_ = t[10],
     _m_ = caml_call1(Async_kernel_Time_ns[50], 0),
     this_cycle_time = caml_call2(Async_kernel_Time_ns[57], _m_, _l_);
    return caml_call2(Core_Time_ns[1][97], t[18], this_cycle_time);
   }
   function run(t){
    var num_execs_before_yielding = 1000;
    for(;;){
     if(caml_call2(Async_kernel_Import[3], num_execs_before_yielding, 0))
      return yield_then_run(t);
     var _j_ = 1 - caml_call1(Core_Deque[16], t[5]);
     if(! _j_) return _j_;
     var worker = caml_call1(Core_Deque[61], t[5]);
     caml_call2(set_execution_context, t, worker[1]);
     a:
     {
      var num_execs_before_yielding$0 = num_execs_before_yielding;
      for(;;){
       if(! caml_call2(Core[246], t[7], worker[1]))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       if(caml_call2(Async_kernel_Import[3], num_execs_before_yielding$0, 0)){caml_call2(Core_Deque[52], t[5], worker); return yield_then_run(t);}
       var num_execs_before_yielding$1 = num_execs_before_yielding$0 - 1 | 0;
       try{var val = caml_call1(worker[2], 0);}
       catch(exn$0){var exn = caml_wrap_exception(exn$0); break;}
       if(! val) break a;
       var num_execs_before_yielding$0 = num_execs_before_yielding$1;
      }
      var
       bt = caml_call1(Base_Backtrace[6][4], 0),
       _k_ = caml_call1(Async_kernel_Monitor[5], 0);
      caml_call3(Async_kernel_Monitor[15], _k_, [0, [0, 936718974, bt]], exn);
      var num_execs_before_yielding = num_execs_before_yielding$1;
      continue;
     }
     var num_execs_before_yielding = num_execs_before_yielding$1;
    }
   }
   function yield_then_run(t){
    var _g_ = 1 - caml_call1(Core_Deque[16], t[5]);
    if(! _g_) return _g_;
    function _h_(param){return run(t);}
    var _i_ = yield$0(t);
    return caml_call2(Async_kernel_Deferred1[8], _i_, _h_);
   }
   function enqueue$0(f){
    var
     t$0 = caml_call1(t, 0),
     queue = t$0[5],
     running = 1 - caml_call1(Core_Deque[16], queue),
     _e_ = caml_call1(current_execution_context, t$0),
     execution_context =
       caml_call4(Async_kernel_Execution_context[9], 0, _d_, 0, _e_);
    caml_call2(Core_Deque[53], queue, [0, execution_context, f]);
    var _f_ = 1 - running;
    return _f_ ? caml_call4(enqueue, t$0, execution_context, run, t$0) : _f_;
   }
   var For_bench = [0, advance_clock];
   function in_cycle(t){return t[11];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Scheduler);
   var
    Async_kernel_Scheduler =
      [0,
       sexp_of_t,
       t,
       invariant,
       current_execution_context,
       with_execution_context,
       with_execution_context1,
       set_execution_context,
       enqueue,
       create_job,
       enqueue_job,
       free_job,
       main_execution_context,
       cycle_start,
       run_cycle,
       run_cycles_until_no_jobs_remai,
       has_upcoming_event,
       next_upcoming_event,
       next_upcoming_event_exn,
       event_precision,
       uncaught_exn,
       uncaught_exn_unwrapped,
       num_pending_jobs,
       num_jobs_run,
       last_cycle_num_jobs,
       map_cycle_times,
       cycle_num_jobs,
       cycle_count,
       total_cycle_time,
       max_num_jobs_per_priority_per_,
       set_max_num_jobs_per_priority_,
       set_check_access,
       check_access,
       check_invariants,
       set_check_invariants,
       set_record_backtraces,
       run_every_cycle_start,
       run_every_cycle_end,
       add_every_cycle_start_hook,
       add_every_cycle_end_hook,
       remove_every_cycle_start_hook_,
       remove_every_cycle_end_hook_ex,
       last_cycle_time,
       long_cycles,
       can_run_a_job,
       create_alarm,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       set_thread_safe_external_job_h,
       set_job_queued_hook,
       set_event_added_hook,
       thread_safe_enqueue_external_j,
       force_current_cycle_to_end,
       within,
       within$0,
       within_v,
       schedule,
       schedule$0,
       preserve_execution_context,
       preserve_execution_context$0,
       within_context,
       find_local,
       with_local,
       make_async_unusable,
       reset_in_forked_process,
       yield$0,
       yield_every,
       yield_until_no_jobs_remain,
       [0, Very_low_priority_worker[1], enqueue$0],
       For_bench,
       in_cycle];
   runtime.caml_register_global
    (61, Async_kernel_Scheduler, cst_Async_kernel_Scheduler$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Cycle_hook
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Cycle_hook = "Async_kernel__Cycle_hook",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Cycle_hook);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/cycle_hook.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var Handle = [0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Cycle_hook);
   var Async_kernel_Cycle_hook = [0, Handle];
   runtime.caml_register_global
    (11, Async_kernel_Cycle_hook, cst_Async_kernel_Cycle_hook);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_kernel_scheduler
//# unitInfo: Requires: Async_kernel__Scheduler, Async_kernel__Time_ns, Base__Staged, Core, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_kernel_$0 = "Async_kernel__Async_kernel_scheduler",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Staged = global_data.Base__Staged,
    Core = global_data.Core,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_kernel_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/async_kernel_scheduler.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    t = Async_kernel_Scheduler[2],
    with_execution_context = Async_kernel_Scheduler[5],
    with_execution_context1 = Async_kernel_Scheduler[6],
    enqueue = Async_kernel_Scheduler[8],
    run_cycles_until_no_jobs_remai = Async_kernel_Scheduler[15],
    last_cycle_num_jobs = Async_kernel_Scheduler[24],
    map_cycle_times = Async_kernel_Scheduler[25],
    run_every_cycle_start = Async_kernel_Scheduler[36],
    run_every_cycle_end = Async_kernel_Scheduler[37],
    add_every_cycle_start_hook = Async_kernel_Scheduler[38],
    add_every_cycle_end_hook = Async_kernel_Scheduler[39],
    remove_every_cycle_start_hook_ = Async_kernel_Scheduler[40],
    remove_every_cycle_end_hook_ex = Async_kernel_Scheduler[41],
    thread_safe_enqueue_external_j = Async_kernel_Scheduler[53],
    within = Async_kernel_Scheduler[55],
    within$0 = Async_kernel_Scheduler[56],
    within_v = Async_kernel_Scheduler[57],
    schedule = Async_kernel_Scheduler[58],
    schedule$0 = Async_kernel_Scheduler[59],
    preserve_execution_context = Async_kernel_Scheduler[60],
    preserve_execution_context$0 = Async_kernel_Scheduler[61],
    within_context = Async_kernel_Scheduler[62],
    find_local = Async_kernel_Scheduler[63],
    with_local = Async_kernel_Scheduler[64],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Async_kernel_ = cst_Async_kernel_Async_kernel_$0,
    _a_ = Async_kernel_Scheduler[4],
    _b_ = Async_kernel_Scheduler[13],
    _c_ = Async_kernel_Scheduler[19],
    _d_ = Async_kernel_Scheduler[22],
    _e_ = Async_kernel_Scheduler[23],
    _f_ = Async_kernel_Scheduler[27],
    _g_ = Async_kernel_Scheduler[28],
    _h_ = Async_kernel_Scheduler[29],
    _i_ = Async_kernel_Scheduler[30],
    _j_ = Async_kernel_Scheduler[35],
    _k_ = Async_kernel_Scheduler[42],
    _l_ = Async_kernel_Scheduler[43],
    _m_ = Async_kernel_Scheduler[54],
    _n_ = Async_kernel_Scheduler[67],
    _o_ = Async_kernel_Scheduler[68],
    _p_ = Async_kernel_Scheduler[69];
   function enqueue_job(execution_context, f, a){
    return caml_call4(enqueue, caml_call1(t, 0), execution_context, f, a);
   }
   function thread_safe_enqueue_job(execution_context, f, a){
    return caml_call4
            (thread_safe_enqueue_external_j,
             caml_call1(t, 0),
             execution_context,
             f,
             a);
   }
   function current_execution_context(param){
    return caml_call1(_a_, caml_call1(t, 0));
   }
   function cycle_count(param){return caml_call1(_f_, caml_call1(t, 0));}
   function cycle_start_ns(param){return caml_call1(_b_, caml_call1(t, 0));}
   function cycle_start(param){
    var _w_ = cycle_start_ns(0);
    return caml_call1(Async_kernel_Time_ns[70], _w_);
   }
   function cycle_times_ns(param){
    function _u_(_v_){return _v_;}
    return caml_call2(map_cycle_times, caml_call1(t, 0), _u_);
   }
   function cycle_times(param){
    var _t_ = Core_Time_ns[1][134];
    return caml_call2(map_cycle_times, caml_call1(t, 0), _t_);
   }
   function total_cycle_time(param){return caml_call1(_g_, caml_call1(t, 0));}
   function last_cycle_time(param){return caml_call1(_k_, caml_call1(t, 0));}
   function long_cycles(at_least){
    return caml_call2(_l_, caml_call1(t, 0), at_least);
   }
   function event_precision_ns(param){
    return caml_call1(_c_, caml_call1(t, 0));
   }
   function event_precision(param){
    var _s_ = event_precision_ns(0);
    return caml_call1(Core_Time_ns[1][134], _s_);
   }
   function set_max_num_jobs_per_priority_(i){
    return caml_call2(_i_, caml_call1(t, 0), i);
   }
   function max_num_jobs_per_priority_per_(param){return caml_call1(_h_, caml_call1(t, 0));
   }
   function set_record_backtraces(bool){
    return caml_call2(_j_, caml_call1(t, 0), bool);
   }
   function force_current_cycle_to_end(param){return caml_call1(_m_, caml_call1(t, 0));
   }
   function yield$0(param){return caml_call1(_n_, caml_call1(t, 0));}
   function yield_until_no_jobs_remain(may_return_immediately, param){return caml_call2(_p_, may_return_immediately, caml_call1(t, 0));
   }
   function yield_every(n){
    var
     _q_ = caml_call1(_o_, n),
     yield_every = caml_call1(Base_Staged[2], _q_),
     t$0 = caml_call1(t, 0);
    function _r_(param){return caml_call1(yield_every, t$0);}
    return caml_call1(Core[258], _r_);
   }
   function num_jobs_run(param){return caml_call1(_e_, caml_call1(t, 0));}
   function num_pending_jobs(param){return caml_call1(_d_, caml_call1(t, 0));}
   function last_cycle_num_jobs$0(param){
    return caml_call1(last_cycle_num_jobs, caml_call1(t, 0));
   }
   function run_every_cycle_start$0(f){
    return caml_call2(run_every_cycle_start, caml_call1(t, 0), f);
   }
   function run_every_cycle_end$0(f){
    return caml_call2(run_every_cycle_end, caml_call1(t, 0), f);
   }
   function add_every_cycle_start_hook$0(f){
    return caml_call2(add_every_cycle_start_hook, caml_call1(t, 0), f);
   }
   function add_every_cycle_end_hook$0(f){
    return caml_call2(add_every_cycle_end_hook, caml_call1(t, 0), f);
   }
   function remove_every_cycle_start_hook_$0(handle){
    return caml_call2
            (remove_every_cycle_start_hook_, caml_call1(t, 0), handle);
   }
   function remove_every_cycle_end_hook_ex$0(handle){
    return caml_call2
            (remove_every_cycle_end_hook_ex, caml_call1(t, 0), handle);
   }
   function with_execution_context$0(execution_context, f){
    return caml_call3
            (with_execution_context, caml_call1(t, 0), execution_context, f);
   }
   function with_execution_context1$0(execution_context, f, x){
    return caml_call4
            (with_execution_context1,
             caml_call1(t, 0),
             execution_context,
             f,
             x);
   }
   var
    Expert =
      [0,
       run_cycles_until_no_jobs_remai,
       last_cycle_num_jobs$0,
       run_every_cycle_start$0,
       run_every_cycle_end$0,
       add_every_cycle_start_hook$0,
       add_every_cycle_end_hook$0,
       remove_every_cycle_start_hook_$0,
       remove_every_cycle_end_hook_ex$0,
       with_execution_context$0,
       with_execution_context1$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_kernel_);
   var
    Async_kernel_Async_kernel_sche =
      [0,
       current_execution_context,
       within_context,
       within,
       within$0,
       within_v,
       with_local,
       find_local,
       schedule,
       schedule$0,
       enqueue_job,
       thread_safe_enqueue_job,
       preserve_execution_context,
       preserve_execution_context$0,
       cycle_start,
       cycle_start_ns,
       cycle_times,
       cycle_times_ns,
       last_cycle_time,
       long_cycles,
       cycle_count,
       total_cycle_time,
       event_precision,
       event_precision_ns,
       force_current_cycle_to_end,
       set_max_num_jobs_per_priority_,
       max_num_jobs_per_priority_per_,
       set_record_backtraces,
       yield$0,
       yield_until_no_jobs_remain,
       yield_every,
       num_jobs_run,
       num_pending_jobs,
       Expert];
   runtime.caml_register_global
    (16, Async_kernel_Async_kernel_sche, cst_Async_kernel_Async_kernel_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Clock_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Clock_intf$0 = "Async_kernel__Clock_intf",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Clock_intf$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/clock_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, "Timeout"],
    _b_ = [0, "Result"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Clock_intf = cst_Async_kernel_Clock_intf$0;
   function compare(cmp_a, a_001, b_002){
    if(caml_call2(Ppx_compare_lib[1], a_001, b_002)) return 0;
    if(typeof a_001 === "number"){
     if(typeof b_002 === "number" && 642269825 === b_002) return 0;
    }
    else if(typeof b_002 !== "number" && 1025039613 === b_002[1]){
     var right_004 = b_002[2], left_003 = a_001[2];
     return caml_call2(cmp_a, left_003, right_004);
    }
    return runtime.caml_compare(a_001, b_002);
   }
   function sexp_of_t(of_a_005, param){
    if(typeof param === "number") return _a_;
    var v_006 = param[2];
    return [1, [0, _b_, [0, caml_call1(of_a_005, v_006), 0]]];
   }
   var Or_timeout = [0, compare, sexp_of_t];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Clock_intf);
   var Async_kernel_Clock_intf = [0, Or_timeout];
   runtime.caml_register_global
    (14, Async_kernel_Clock_intf, cst_Async_kernel_Clock_intf$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Clock_ns
//# unitInfo: Requires: Async_kernel__Scheduler1, Async_kernel__Time_source, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Clock_ns$0 = "Async_kernel__Clock_ns",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Async_kernel_Scheduler1 = global_data.Async_kernel__Scheduler1,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Clock_ns$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/clock_ns.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Clock_ns = cst_Async_kernel_Clock_ns$0;
   function time_source(param){
    var _q_ = caml_call1(Async_kernel_Scheduler1[71], 0)[19];
    return caml_call1(Async_kernel_Time_source[39], _q_);
   }
   function after(span){
    var _p_ = time_source(0);
    return caml_call2(Async_kernel_Time_source[29], _p_, span);
   }
   function at(time){
    var _o_ = time_source(0);
    return caml_call2(Async_kernel_Time_source[28], _o_, time);
   }
   function at_varying_intervals(stop, compute_span){
    var _n_ = time_source(0);
    return caml_call3(Async_kernel_Time_source[33], stop, _n_, compute_span);
   }
   function at_intervals(start, stop, interval){
    var _m_ = time_source(0);
    return caml_call4
            (Async_kernel_Time_source[34], start, stop, _m_, interval);
   }
   function every(start, stop, continue_on_error, finished, span, f){
    var _l_ = time_source(0);
    return caml_call7
            (Async_kernel_Time_source[35],
             start,
             stop,
             continue_on_error,
             finished,
             _l_,
             span,
             f);
   }
   function every$0(start, stop, continue_on_error, span, f){
    var _k_ = time_source(0);
    return caml_call6
            (Async_kernel_Time_source[36],
             start,
             stop,
             continue_on_error,
             _k_,
             span,
             f);
   }
   function run_after(span, f, a){
    var _j_ = time_source(0);
    return caml_call4(Async_kernel_Time_source[27], _j_, span, f, a);
   }
   function run_at(time, f, a){
    var _i_ = time_source(0);
    return caml_call4(Async_kernel_Time_source[26], _i_, time, f, a);
   }
   function run_at_intervals(start, stop, continue_on_error, interval, f){
    var _h_ = time_source(0);
    return caml_call6
            (Async_kernel_Time_source[38],
             start,
             stop,
             continue_on_error,
             _h_,
             interval,
             f);
   }
   function run_at_intervals$0(start, stop, continue_on_error, interval, f){
    var _g_ = time_source(0);
    return caml_call6
            (Async_kernel_Time_source[37],
             start,
             stop,
             continue_on_error,
             _g_,
             interval,
             f);
   }
   function with_timeout(span, d){
    var _f_ = time_source(0);
    return caml_call3(Async_kernel_Time_source[30], _f_, span, d);
   }
   function duration_of(f){
    var _e_ = time_source(0);
    return caml_call2(Async_kernel_Time_source[31], _e_, f);
   }
   var
    include = Async_kernel_Time_source[32],
    sexp_of_t = include[1],
    sexp_of_t_unit = include[2],
    invariant = include[3],
    scheduled_at = include[4],
    Status = include[5],
    status = include[6],
    abort = include[10],
    abort_exn = include[11],
    abort_if_possible = include[12],
    fired = include[14],
    reschedule_at = include[16],
    reschedule_after = include[17],
    _a_ = include[7],
    _b_ = include[8],
    _c_ = include[18],
    _d_ = include[19];
   function after$0(span){return caml_call2(_d_, time_source(0), span);}
   function run_after$0(span, f, a){
    return caml_call4(_b_, time_source(0), span, f, a);
   }
   function at$0(time){return caml_call2(_c_, time_source(0), time);}
   function run_at$0(time, f, z){
    return caml_call4(_a_, time_source(0), time, f, z);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Clock_ns);
   var
    Async_kernel_Clock_ns =
      [0,
       run_at,
       run_after,
       at,
       after,
       with_timeout,
       [0,
        sexp_of_t,
        sexp_of_t_unit,
        invariant,
        scheduled_at,
        Status,
        status,
        run_at$0,
        run_after$0,
        abort,
        abort_exn,
        abort_if_possible,
        fired,
        reschedule_at,
        reschedule_after,
        at$0,
        after$0],
       at_varying_intervals,
       at_intervals,
       every,
       every$0,
       run_at_intervals$0,
       run_at_intervals,
       duration_of];
   runtime.caml_register_global
    (13, Async_kernel_Clock_ns, cst_Async_kernel_Clock_ns$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_array
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Ivar, Async_kernel__Throttle, Core, Core__Array, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_arra$0 = "Async_kernel__Deferred_array",
    cst_async_kernel$0 = "async_kernel",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Array = global_data.Core__Array,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Core = global_data.Core,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core_List = global_data.Core__List,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_arra$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_array.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_arra = cst_Async_kernel_Deferred_arra$0;
   function foldi(t, init, f){
    function _L_(result){
     function loop(i, b){
      if(caml_call2(Core[90], i, t.length - 1))
       return caml_call2(Async_kernel_Ivar[14], result, b);
      function _M_(b){return loop(i + 1 | 0, b);}
      var _N_ = caml_call3(f, i, b, caml_check_bound(t, i)[1 + i]);
      return caml_call2(Async_kernel_Deferred_std[1], _N_, _M_);
     }
     return loop(0, init);
    }
    return caml_call1(Async_kernel_Deferred1[4], _L_);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function seqmapi(t, f){
    function _G_(bs){
     var _K_ = caml_call1(Core_List[34], bs);
     return caml_call1(Core_Array[52], _K_);
    }
    var
     _H_ =
       foldi
        (t,
         0,
         function(i, bs, a){
          function _I_(b){return [0, b, bs];}
          var _J_ = caml_call2(f, i, a);
          return caml_call2(Async_kernel_Deferred_std[4], _J_, _I_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _H_, _G_);
   }
   function all(ds){return seqmapi(ds, function(param, x){return x;});}
   function all_unit(ds){
    var _F_ = fold(ds, 0, function(param, d){return d;});
    return caml_call1(Async_kernel_Deferred1[20], _F_);
   }
   function iteri(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _D_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _E_ = caml_call1(Core[259], _D_);
    return all_unit(caml_call2(Core_Array[59], t, _E_));
   }
   function mapi(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how) return seqmapi(t, f);
    var
     _B_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _C_ = caml_call1(Core[259], _B_);
    return all(caml_call2(Core_Array[59], t, _C_));
   }
   function filteri(how, t, f){
    function _x_(bools){
     function _z_(ac, x, b){return b ? [0, x, ac] : ac;}
     var _A_ = caml_call4(Core_Array[82], t, bools, 0, _z_);
     return caml_call1(Core_Array[90], _A_);
    }
    var _y_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[5][2], _y_, _x_);
   }
   function filter_mapi(how, t, f){
    var _v_ = Core_Array[74], _w_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[4], _w_, _v_);
   }
   function concat_mapi(how, t, f){
    function _s_(t){
     var _u_ = caml_call1(Core_Array[32], t);
     return caml_call1(Core_Array[44], _u_);
    }
    var _t_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[5][2], _t_, _s_);
   }
   function find_mapi(t, f){
    function aux(i){
     if(caml_call2(Core[90], i, t.length - 1))
      return caml_call1(Async_kernel_Deferred_std[10], 0);
     function _q_(some){
      return some
              ? caml_call1(Async_kernel_Deferred_std[10], some)
              : aux(i + 1 | 0);
     }
     var _r_ = caml_call2(f, i, caml_check_bound(t, i)[1 + i]);
     return caml_call2(Async_kernel_Deferred_std[5][1], _r_, _q_);
    }
    return aux(0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _o_(b){return b ? [0, [0, i, elt]] : 0;}
              var _p_ = caml_call2(f, i, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _p_, _o_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _m_(b){return b ? [0, elt] : 0;}
              var _n_ = caml_call1(f, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _n_, _m_);
             });
   }
   function existsi(t, f){
    function _i_(param){return param ? 1 : 0;}
    var
     _j_ =
       find_mapi
        (t,
         function(i, elt){
          function _k_(b){return b ? _a_ : 0;}
          var _l_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _l_, _k_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _j_, _i_);
   }
   function for_alli(t, f){
    function _e_(param){return param ? 0 : 1;}
    var
     _f_ =
       find_mapi
        (t,
         function(i, elt){
          function _g_(b){return b ? 0 : _b_;}
          var _h_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _h_, _g_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _f_, _e_);
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _c_(_d_){return _d_;}
    return map(how, caml_call2(Core_Array[40], n, _c_), f);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_arra);
   var
    Async_kernel_Deferred_array =
      [0,
       foldi,
       fold,
       find,
       findi,
       find_map,
       find_mapi,
       exists,
       existsi,
       for_all,
       for_alli,
       all,
       all_unit,
       init,
       iter,
       iteri,
       map,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
   runtime.caml_register_global
    (20, Async_kernel_Deferred_array, cst_Async_kernel_Deferred_arra$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_list
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Deferred_std, Async_kernel__Ivar, Async_kernel__Throttle, Core, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_list$0 = "Async_kernel__Deferred_list",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_List = global_data.Core__List,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_list$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_list.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_list = cst_Async_kernel_Deferred_list$0;
   function foldi(t, init, f){
    function _J_(result){
     function loop(t, i, b){
      if(! t) return caml_call2(Async_kernel_Ivar[14], result, b);
      var xs = t[2], x = t[1];
      function _K_(b){return loop(xs, i + 1 | 0, b);}
      var _L_ = caml_call3(f, i, b, x);
      return caml_call2(Async_kernel_Deferred_std[1], _L_, _K_);
     }
     return loop(t, 0, init);
    }
    return caml_call1(Async_kernel_Deferred1[4], _J_);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function seqmapi(t, f){
    var
     _F_ = Core_List[34],
     _G_ =
       foldi
        (t,
         0,
         function(i, bs, a){
          function _H_(b){return [0, b, bs];}
          var _I_ = caml_call2(f, i, a);
          return caml_call2(Async_kernel_Deferred_std[5][2], _I_, _H_);
         });
    return caml_call2(Async_kernel_Deferred_std[4], _G_, _F_);
   }
   function all(ds){return seqmapi(ds, function(param, x){return x;});}
   function all_unit(ds){
    var _E_ = fold(ds, 0, function(param, d){return d;});
    return caml_call1(Async_kernel_Deferred1[20], _E_);
   }
   function iteri(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _C_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _D_ = caml_call1(Core[259], _C_);
    return all_unit(caml_call2(Core_List[92], t, _D_));
   }
   function mapi(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how) return seqmapi(t, f);
    var
     _A_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _B_ = caml_call1(Core[259], _A_);
    return all(caml_call2(Core_List[92], t, _B_));
   }
   function filteri(how, t, f){
    function _w_(bools){
     function _y_(ac, x, b){return b ? [0, x, ac] : ac;}
     var _z_ = caml_call4(Core_List[42], t, bools, 0, _y_);
     return caml_call1(Core_List[34], _z_);
    }
    var _x_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[5][2], _x_, _w_);
   }
   function filter_mapi(how, t, f){
    var _u_ = Core_List[124], _v_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[4], _v_, _u_);
   }
   function concat_mapi(how, t, f){
    var _s_ = Core_List[133], _t_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[4], _t_, _s_);
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(Async_kernel_Deferred_std[10], 0);
     var tl = t[2], hd = t[1];
     function _q_(some){
      return some
              ? caml_call1(Async_kernel_Deferred_std[10], some)
              : find_mapi(tl, f, i + 1 | 0);
     }
     var _r_ = caml_call2(f, i, hd);
     return caml_call2(Async_kernel_Deferred_std[5][1], _r_, _q_);
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _o_(b){return b ? [0, [0, i, elt]] : 0;}
              var _p_ = caml_call2(f, i, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _p_, _o_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _m_(b){return b ? [0, elt] : 0;}
              var _n_ = caml_call1(f, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _n_, _m_);
             });
   }
   function existsi(t, f){
    function _i_(param){return param ? 1 : 0;}
    var
     _j_ =
       find_mapi
        (t,
         function(i, elt){
          function _k_(b){return b ? _a_ : 0;}
          var _l_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _l_, _k_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _j_, _i_);
   }
   function for_alli(t, f){
    function _e_(param){return param ? 0 : 1;}
    var
     _f_ =
       find_mapi
        (t,
         function(i, elt){
          function _g_(b){return b ? 0 : _b_;}
          var _h_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _h_, _g_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _f_, _e_);
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _c_(_d_){return _d_;}
    return map(how, caml_call2(Core_List[119], n, _c_), f);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_list);
   var
    Async_kernel_Deferred_list =
      [0,
       foldi,
       fold,
       find,
       findi,
       find_map,
       find_mapi,
       exists,
       existsi,
       for_all,
       for_alli,
       all,
       all_unit,
       init,
       iter,
       iteri,
       map,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
   runtime.caml_register_global
    (19, Async_kernel_Deferred_list, cst_Async_kernel_Deferred_list$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_map
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Deferred_list, Async_kernel__Deferred_std, Async_kernel__Ivar, Base__Field, Base__List, Base__Map, Core__Map, Core__Sequence, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_map$0 = "Async_kernel__Deferred_map",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Map = global_data.Core__Map,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Base_List = global_data.Base__List,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Base_Map = global_data.Base__Map,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Sequence = global_data.Core__Sequence,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_map.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, -542431297],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_map = cst_Async_kernel_Deferred_map$0;
   function change(t, k, f){
    function _K_(opt){
     function _M_(param){return opt;}
     return caml_call3(Core_Map[36], t, k, _M_);
    }
    var _L_ = caml_call1(f, caml_call2(Core_Map[38], t, k));
    return caml_call2(Async_kernel_Deferred_std[5][2], _L_, _K_);
   }
   function update(t, k, f){
    function _I_(data){return caml_call3(Core_Map[32], t, k, data);}
    var _J_ = caml_call1(f, caml_call2(Core_Map[38], t, k));
    return caml_call2(Async_kernel_Deferred_std[5][2], _J_, _I_);
   }
   function iter_keys(how, t, f){
    var _H_ = caml_call1(Core_Map[72], t);
    return caml_call3(Async_kernel_Deferred_list[14], how, _H_, f);
   }
   function iter(how, t, f){
    var _G_ = caml_call1(Core_Map[73], t);
    return caml_call3(Async_kernel_Deferred_list[14], how, _G_, f);
   }
   function iteri(how, t, f){
    function _E_(param){
     var data = param[2], key = param[1];
     return caml_call2(f, key, data);
    }
    var _F_ = caml_call2(Core_Map[74], 0, t);
    return caml_call3(Async_kernel_Deferred_list[14], how, _F_, _E_);
   }
   function fold(t, init, f){
    function _C_(key, data, alist){return [0, [0, key, data], alist];}
    var alist_in_increasing_key_order = caml_call3(Core_Map[57], t, 0, _C_);
    function _D_(ac, param){
     var data = param[2], key = param[1];
     return caml_call3(f, key, data, ac);
    }
    return caml_call3
            (Async_kernel_Deferred_list[2],
             alist_in_increasing_key_order,
             init,
             _D_);
   }
   function fold_right(t, init, f){
    function _A_(key, data, alist){return [0, [0, key, data], alist];}
    var alist_in_decreasing_key_order = caml_call3(Core_Map[55], t, 0, _A_);
    function _B_(ac, param){
     var data = param[2], key = param[1];
     return caml_call3(f, key, data, ac);
    }
    return caml_call3
            (Async_kernel_Deferred_list[2],
             alist_in_decreasing_key_order,
             init,
             _B_);
   }
   function result(r){return r[3];}
   function filter_mapi(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how){
     var
      comparator = caml_call1(Core_Map[2], t),
      sequence = caml_call4(Core_Map[101], _a_, 0, 0, t),
      _m_ =
        function(ivar){
         function _u_(x){
          var
           _y_ = caml_call1(Base_Map[104][3][96][3], x),
           _z_ = caml_call2(Core_Map[110][23], comparator, _y_);
          return caml_call2(Async_kernel_Ivar[14], ivar, _z_);
         }
         function _v_(s, param, k){
          var data = param[2], key = param[1];
          function _w_(param){
           if(! param) return caml_call1(k, s);
           var
            data = param[1],
            s$0 =
              caml_call4(Base_Map[104][3][96][2], s, comparator, key, data);
           return caml_call1(k, s$0);
          }
          var _x_ = caml_call2(f, key, data);
          return caml_call2(Async_kernel_Deferred_std[11], _x_, _w_);
         }
         return caml_call4
                 (Core_Sequence[105],
                  sequence,
                  Base_Map[104][3][96][1],
                  _v_,
                  _u_);
        };
     return caml_call1(Async_kernel_Deferred1[4], _m_);
    }
    var jobs = [0, 0];
    function _n_(key, data){
     var job = [0, key, data, 0];
     jobs[1] = [0, job, jobs[1]];
     return job;
    }
    var job_map = caml_call2(Core_Map[52], t, _n_);
    function _o_(param){return caml_call2(Core_Map[62], job_map, result);}
    function _p_(job){
     var data = job[2], key = job[1];
     function _s_(x){job[3] = x; return 0;}
     var _t_ = caml_call2(f, key, data);
     return caml_call2(Async_kernel_Deferred_std[5][2], _t_, _s_);
    }
    var
     _q_ = caml_call1(Base_List[38], jobs[1]),
     _r_ = caml_call3(Async_kernel_Deferred_list[14], [0, how], _q_, _p_);
    return caml_call2(Async_kernel_Deferred_std[5][2], _r_, _o_);
   }
   function filter_map(how, t, f){
    return filter_mapi
            (how, t, function(param, data){return caml_call1(f, data);});
   }
   function filter_keys(how, t, f){
    return filter_mapi
            (how,
             t,
             function(key, data){
              function _k_(b){return b ? [0, data] : 0;}
              var _l_ = caml_call1(f, key);
              return caml_call2(Async_kernel_Deferred_std[5][2], _l_, _k_);
             });
   }
   function filter(how, t, f){
    return filter_mapi
            (how,
             t,
             function(param, data){
              function _i_(b){return b ? [0, data] : 0;}
              var _j_ = caml_call1(f, data);
              return caml_call2(Async_kernel_Deferred_std[5][2], _j_, _i_);
             });
   }
   function filteri(how, t, f){
    return filter_mapi
            (how,
             t,
             function(key, data){
              function _g_(b){return b ? [0, data] : 0;}
              var _h_ = caml_call2(f, key, data);
              return caml_call2(Async_kernel_Deferred_std[5][2], _h_, _g_);
             });
   }
   function mapi(how, t, f){
    return filter_mapi
            (how,
             t,
             function(key, data){
              function _e_(z){return [0, z];}
              var _f_ = caml_call2(f, key, data);
              return caml_call2(Async_kernel_Deferred_std[5][2], _f_, _e_);
             });
   }
   function map(how, t, f){
    return mapi(how, t, function(param, data){return caml_call1(f, data);});
   }
   function merge(how, t1, t2, f){
    function _c_(thunk){return caml_call1(thunk, 0);}
    function _d_(key, z){
     return [0, function(param){return caml_call2(f, key, z);}];
    }
    return filter_map(how, caml_call3(Core_Map[77], t1, t2, _d_), _c_);
   }
   function all(t){return map(0, t, function(_b_){return _b_;});}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_map);
   var
    Async_kernel_Deferred_map =
      [0,
       change,
       update,
       iter_keys,
       iter,
       iteri,
       map,
       mapi,
       fold,
       fold_right,
       filter_keys,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       merge,
       all];
   runtime.caml_register_global
    (25, Async_kernel_Deferred_map, cst_Async_kernel_Deferred_map$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_memo
//# unitInfo: Requires: Async_kernel__Deferred_std, Async_kernel__Monitor, Base__Exn, Base__Staged, Core__Memo, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_memo$0 = "Async_kernel__Deferred_memo",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Memo = global_data.Core__Memo,
    Base_Staged = global_data.Base__Staged,
    Base_Exn = global_data.Base__Exn,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_memo$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_memo.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _c_ = [0, 3804260],
    _d_ = [0, 3903734],
    _a_ = [0, 3804260],
    _b_ = [0, 3903734],
    cst_caught_exception_in_memoiz = "caught exception in memoized function",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_memo = cst_Async_kernel_Deferred_memo$0;
   function reraise(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var exn = param[1];
    return caml_call2(Base_Exn[8], exn, cst_caught_exception_in_memoiz);
   }
   function general(hashable, f){
    function _h_(a){
     function _k_(param){return caml_call1(f, a);}
     return caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _b_, _a_, _k_);
    }
    var f$0 = caml_call3(Core_Memo[1], [0, hashable[4]], 0, _h_);
    function _i_(a){
     var _j_ = caml_call1(f$0, a);
     return caml_call2(Async_kernel_Deferred_std[4], _j_, reraise);
    }
    return caml_call1(Base_Staged[1], _i_);
   }
   function unit(f){
    function _e_(param){
     return caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _d_, _c_, f);
    }
    var f$0 = caml_call1(Core_Memo[3], _e_);
    function _f_(param){
     var _g_ = caml_call1(f$0, 0);
     return caml_call2(Async_kernel_Deferred_std[4], _g_, reraise);
    }
    return caml_call1(Base_Staged[1], _f_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_memo);
   var Async_kernel_Deferred_memo = [0, general, unit];
   runtime.caml_register_global
    (21, Async_kernel_Deferred_memo, cst_Async_kernel_Deferred_memo$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_option
//# unitInfo: Requires: Async_kernel__Deferred1, Base__Monad, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_opti$0 = "Async_kernel__Deferred_option",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_opti$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_option.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_opti = cst_Async_kernel_Deferred_opti$0;
   function return$0(a){
    return caml_call1(Async_kernel_Deferred1[21], [0, a]);
   }
   function bind(t, f){
    function _b_(param){
     if(! param) return caml_call1(Async_kernel_Deferred1[21], 0);
     var a = param[1];
     return caml_call1(f, a);
    }
    return caml_call2(Async_kernel_Deferred1[17], t, _b_);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        function _a_(r){return caml_call2(Core_Option[29], r, f);}
        return caml_call2(Async_kernel_Deferred1[18], t, _a_);
       }],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_opti);
   var
    Async_kernel_Deferred_option =
      [0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax];
   runtime.caml_register_global
    (14, Async_kernel_Deferred_option, cst_Async_kernel_Deferred_opti$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_result
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Deferred_std, Base__Monad, Core__Printf, Core__Result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_resu$0 = "Async_kernel__Deferred_result",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core_Printf = global_data.Core__Printf,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_resu$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_result.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_resu = cst_Async_kernel_Deferred_resu$0;
   function combine(t1, t2, ok, err){
    function _d_(param){
     var t2 = param[2], t1 = param[1];
     return caml_call4(Core_Result[40], t1, t2, ok, err);
    }
    var _e_ = caml_call2(Async_kernel_Deferred_std[5][3], t1, t2);
    return caml_call2(Async_kernel_Deferred_std[5][2], _e_, _d_);
   }
   function return$0(a){
    return caml_call1(Async_kernel_Deferred1[21], [0, a]);
   }
   function bind(t, f){
    function _c_(error){
     if(0 !== error[0]) return caml_call1(Async_kernel_Deferred1[21], error);
     var a = error[1];
     return caml_call1(f, a);
    }
    return caml_call2(Async_kernel_Deferred1[17], t, _c_);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        function _b_(r){return caml_call2(Core_Result[38], r, f);}
        return caml_call2(Async_kernel_Deferred1[18], t, _b_);
       }],
    include = caml_call1(Base_Monad[2], [0, bind, map, return$0]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Let_syntax = include[3],
    Monad_infix = include[4],
    bind$0 = include[5],
    return$1 = include[6],
    map$0 = include[7],
    join = include[8],
    ignore_m = include[9],
    all = include[10],
    all_unit = include[11];
   function fail(x){return caml_call1(Async_kernel_Deferred1[21], [1, x]);}
   function failf(format){return caml_call2(Core_Printf[4], fail, format);}
   function map_error(t, f){
    function _a_(r){return caml_call2(Core_Result[39], r, f);}
    return caml_call2(Async_kernel_Deferred1[18], t, _a_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_resu);
   var
    Async_kernel_Deferred_result =
      [0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       fail,
       failf,
       map_error,
       combine];
   runtime.caml_register_global
    (16, Async_kernel_Deferred_result, cst_Async_kernel_Deferred_resu$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_or_error
//# unitInfo: Requires: Async_kernel__Deferred1, Async_kernel__Deferred_result, Async_kernel__Monitor, Async_kernel__Throttle, Base__Applicative, Core, Core__Error, Core__List, Core__Or_error, Core__Result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_or_e$0 = "Async_kernel__Deferred_or_error",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_List = global_data.Core__List,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1,
    Core_Error = global_data.Core__Error,
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred_result = global_data.Async_kernel__Deferred_result,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_or_e$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_or_error.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    try_with = Async_kernel_Monitor[16],
    ignore_m = Async_kernel_Deferred_result[9],
    join = Async_kernel_Deferred_result[8],
    return$0 = Async_kernel_Deferred_result[6],
    bind = Async_kernel_Deferred_result[5],
    Monad_infix = Async_kernel_Deferred_result[4],
    symbol_bind = Async_kernel_Deferred_result[1],
    _c_ = [0, 0],
    _b_ = [0, 0],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_or_e = cst_Async_kernel_Deferred_or_e$0,
    _a_ = Async_kernel_Deferred_result[7];
   function apply(f, x){
    function _aa_(e1, e2){
     return caml_call2(Core_Error[24], 0, [0, e1, [0, e2, 0]]);
    }
    function _ab_(f, x){return caml_call1(f, x);}
    return caml_call4(Async_kernel_Deferred_result[15], f, x, _ab_, _aa_);
   }
   var
    map = [0, -198771759, _a_],
    include = caml_call1(Base_Applicative[5], [0, return$0, apply, map]),
    return$1 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply$0 = include[8],
    map2 = include[9],
    map3 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13],
    symbol_bind$0 = Monad_infix[1],
    symbol_map$0 = Monad_infix[2],
    Open_on_rhs = [0];
   function fail(error){
    var _$_ = caml_call1(Core_Result[27], error);
    return caml_call1(Async_kernel_Deferred1[21], _$_);
   }
   function ok_exn(t){
    return caml_call2(Async_kernel_Deferred1[18], t, Core_Or_error[36]);
   }
   function of_exn(exn){
    var ___ = caml_call2(Core_Or_error[37], 0, exn);
    return caml_call1(Async_kernel_Deferred1[21], ___);
   }
   function of_exn_result(t){
    var arg = Core_Or_error[38];
    function _Z_(eta){return caml_call2(arg, 0, eta);}
    return caml_call2(Async_kernel_Deferred1[18], t, _Z_);
   }
   function error(msg, v, sexp_of){
    var _Y_ = caml_call5(Core_Or_error[39], 0, 0, msg, v, sexp_of);
    return caml_call1(Async_kernel_Deferred1[21], _Y_);
   }
   function error_s(sexp){
    var _X_ = caml_call1(Core_Or_error[40], sexp);
    return caml_call1(Async_kernel_Deferred1[21], _X_);
   }
   function error_string(msg){
    var _W_ = caml_call1(Core_Or_error[41], msg);
    return caml_call1(Async_kernel_Deferred1[21], _W_);
   }
   function errorf(format){
    return caml_call2(Core[244], error_string, format);
   }
   function tag(t, tag){
    var _T_ = Core_Or_error[43];
    function _U_(_V_){return caml_call2(_T_, _V_, tag);}
    return caml_call2(Async_kernel_Deferred1[18], t, _U_);
   }
   function tag_s(t, tag){
    var _Q_ = Core_Or_error[44];
    function _R_(_S_){return caml_call2(_Q_, _S_, tag);}
    return caml_call2(Async_kernel_Deferred1[18], t, _R_);
   }
   function tag_s_lazy(t, tag){
    var _N_ = Core_Or_error[45];
    function _O_(_P_){return caml_call2(_N_, _P_, tag);}
    return caml_call2(Async_kernel_Deferred1[18], t, _O_);
   }
   function tag_arg(t, message, a, sexp_of_a){
    function _M_(t){
     return caml_call4(Core_Or_error[46], t, message, a, sexp_of_a);
    }
    return caml_call2(Async_kernel_Deferred1[18], t, _M_);
   }
   function unimplemented(msg){
    var _L_ = caml_call1(Core_Or_error[47], msg);
    return caml_call1(Async_kernel_Deferred1[21], _L_);
   }
   function combine_errors(l){
    var
     _J_ = Core_Or_error[51],
     _K_ = caml_call1(Async_kernel_Deferred1[42], l);
    return caml_call2(Async_kernel_Deferred1[18], _K_, _J_);
   }
   function combine_errors_unit(l){
    var
     _H_ = Core_Or_error[52],
     _I_ = caml_call1(Async_kernel_Deferred1[42], l);
    return caml_call2(Async_kernel_Deferred1[18], _I_, _H_);
   }
   function filter_ok_at_least_one(l){
    var
     _F_ = Core_Or_error[53],
     _G_ = caml_call1(Async_kernel_Deferred1[42], l);
    return caml_call2(Async_kernel_Deferred1[18], _G_, _F_);
   }
   function find_map_ok(l, f){
    function _B_(param){
     var errors = param[2], l = param[1];
     if(l){
      var
       tl = l[2],
       hd = l[1],
       _C_ =
         function(param){
          if(0 === param[0]){
           var result = param[1];
           return [0, -289386606, [0, result]];
          }
          var current_error = param[1];
          return [0, 990972795, [0, tl, [0, current_error, errors]]];
         },
       _D_ = caml_call1(f, hd);
      return caml_call2(Async_kernel_Deferred1[18], _D_, _C_);
     }
     var
      _E_ = caml_call1(Core_List[34], errors),
      errors$0 = caml_call2(Core_Error[24], 0, _E_);
     return caml_call1
             (Async_kernel_Deferred1[21], [0, -289386606, [1, errors$0]]);
    }
    return caml_call2(Async_kernel_Deferred1[37], [0, l, 0], _B_);
   }
   var ok_unit = caml_call1(return$1, 0);
   function try_with$0(extract_exn, run, rest, here, name, f){
    function _z_(ok){
     if(0 === ok[0]) return ok;
     var exn = ok[1];
     return [1, caml_call2(Core_Error[25], 0, exn)];
    }
    var _A_ = caml_call7(try_with, here, 0, name, extract_exn, run, rest, f);
    return caml_call2(Async_kernel_Deferred1[18], _A_, _z_);
   }
   function try_with_join(extract_exn, run, rest, here, name, f){
    var
     _x_ = Core_Or_error[27],
     _y_ = try_with$0(extract_exn, run, rest, here, name, f);
    return caml_call2(Async_kernel_Deferred1[18], _y_, _x_);
   }
   function foldi(list, acc, f){
    function loop(i, acc, param){
     if(! param) return caml_call1(return$1, acc);
     var tl = param[2], hd = param[1];
     function _w_(acc){return loop(i + 1 | 0, acc, tl);}
     return caml_call2(bind, caml_call3(f, i, acc, hd), _w_);
    }
    return loop(0, acc, list);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function iteri(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _u_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _v_ = caml_call1(Core[259], _u_);
    return caml_call1(all_unit, caml_call2(Core_List[92], t, _v_));
   }
   function mapi(opt, t, f){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    if(typeof how === "number" && -676829465 > how){
     var _q_ = Core_List[34];
     return caml_call2
             (symbol_map$0,
              foldi
               (t,
                0,
                function(i, bs, a){
                 function _t_(b){return [0, b, bs];}
                 return caml_call2(map$0, caml_call2(f, i, a), _t_);
                }),
              _q_);
    }
    var
     _r_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _s_ = caml_call1(Core[259], _r_);
    return caml_call1(all, caml_call2(Core_List[92], t, _s_));
   }
   function filter_mapi(how, t, f){
    var _p_ = Core_List[124];
    return caml_call2(symbol_map$0, mapi(how, t, f), _p_);
   }
   function concat_mapi(how, t, f){
    var _o_ = Core_List[133];
    return caml_call2(symbol_map$0, mapi(how, t, f), _o_);
   }
   function filteri(how, t, f){
    return filter_mapi
            (how,
             t,
             function(i, x){
              function _n_(b){return b ? [0, x] : 0;}
              return caml_call2(map$0, caml_call2(f, i, x), _n_);
             });
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(return$1, 0);
     var tl = t[2], hd = t[1];
     function _m_(some){
      return some ? caml_call1(return$1, some) : find_mapi(tl, f, i + 1 | 0);
     }
     return caml_call2(bind, caml_call2(f, i, hd), _m_);
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _l_(b){return b ? [0, [0, i, elt]] : 0;}
              return caml_call2(map$0, caml_call2(f, i, elt), _l_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _k_(b){return b ? [0, elt] : 0;}
              return caml_call2(map$0, caml_call1(f, elt), _k_);
             });
   }
   function existsi(t, f){
    function _i_(param){return param ? 1 : 0;}
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                function _j_(b){return b ? _b_ : 0;}
                return caml_call2(map$0, caml_call2(f, i, elt), _j_);
               }),
             _i_);
   }
   function for_alli(t, f){
    function _g_(param){return param ? 0 : 1;}
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                function _h_(b){return b ? 0 : _c_;}
                return caml_call2(map$0, caml_call2(f, i, elt), _h_);
               }),
             _g_);
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map$1(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _e_(_f_){return _f_;}
    return map$1(how, caml_call2(Core_List[119], n, _e_), f);
   }
   function repeat_until_finished(state, f){
    function _d_(param){
     if(990972795 <= param[1]){
      var state = param[2];
      return repeat_until_finished(state, f);
     }
     var state$0 = param[2];
     return caml_call1(return$1, state$0);
    }
    return caml_call2(bind, caml_call1(f, state), _d_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_or_e);
   var
    Async_kernel_Deferred_or_error =
      [0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply$0,
       map2,
       map3,
       Applicative_infix,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       [0,
        return$1,
        symbol_bind$0,
        symbol_map$0,
        [0, return$1, bind, map$0, both, Open_on_rhs]],
       fail,
       ok_exn,
       of_exn,
       of_exn_result,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       find_map_ok,
       ok_unit,
       try_with$0,
       try_with_join,
       [0,
        foldi,
        fold,
        find,
        findi,
        find_map,
        find_mapi,
        exists,
        existsi,
        for_all,
        for_alli,
        all,
        all_unit,
        init,
        iter,
        iteri,
        map$1,
        mapi,
        filter,
        filteri,
        filter_map,
        filter_mapi,
        concat_map,
        concat_mapi],
       repeat_until_finished];
   runtime.caml_register_global
    (23, Async_kernel_Deferred_or_error, cst_Async_kernel_Deferred_or_e$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_queue
//# unitInfo: Requires: Async_kernel__Deferred_list, Async_kernel__Deferred_std, Core__Queue, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_queu$0 = "Async_kernel__Deferred_queue",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_queu$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_queue.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_queu = cst_Async_kernel_Deferred_queu$0;
   function foldi(t, init, f){
    var _V_ = caml_call1(Core_Queue[26], t);
    return caml_call3(Async_kernel_Deferred_list[1], _V_, init, f);
   }
   function fold(t, init, f){
    var _U_ = caml_call1(Core_Queue[26], t);
    return caml_call3(Async_kernel_Deferred_list[2], _U_, init, f);
   }
   function all(t){
    var
     _R_ = Core_Queue[38],
     _S_ = caml_call1(Core_Queue[26], t),
     _T_ = caml_call1(Async_kernel_Deferred_list[11], _S_);
    return caml_call2(Async_kernel_Deferred_std[4], _T_, _R_);
   }
   function all_unit(t){
    var _Q_ = caml_call1(Core_Queue[26], t);
    return caml_call1(Async_kernel_Deferred_list[12], _Q_);
   }
   function iter(how, t, f){
    var _P_ = caml_call1(Core_Queue[26], t);
    return caml_call3(Async_kernel_Deferred_list[14], how, _P_, f);
   }
   function iteri(how, t, f){
    var _O_ = caml_call1(Core_Queue[26], t);
    return caml_call3(Async_kernel_Deferred_list[15], how, _O_, f);
   }
   function map(how, t, f){
    var
     _L_ = Core_Queue[38],
     _M_ = caml_call1(Core_Queue[26], t),
     _N_ = caml_call3(Async_kernel_Deferred_list[16], how, _M_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _N_, _L_);
   }
   function mapi(how, t, f){
    var
     _I_ = Core_Queue[38],
     _J_ = caml_call1(Core_Queue[26], t),
     _K_ = caml_call3(Async_kernel_Deferred_list[17], how, _J_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _K_, _I_);
   }
   function init(how, n, f){
    var
     _G_ = Core_Queue[38],
     _H_ = caml_call3(Async_kernel_Deferred_list[13], how, n, f);
    return caml_call2(Async_kernel_Deferred_std[4], _H_, _G_);
   }
   function filter(how, t, f){
    var
     _D_ = Core_Queue[38],
     _E_ = caml_call1(Core_Queue[26], t),
     _F_ = caml_call3(Async_kernel_Deferred_list[18], how, _E_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _F_, _D_);
   }
   function filteri(how, t, f){
    var
     _A_ = Core_Queue[38],
     _B_ = caml_call1(Core_Queue[26], t),
     _C_ = caml_call3(Async_kernel_Deferred_list[19], how, _B_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _C_, _A_);
   }
   function filter_map(how, t, f){
    var
     _x_ = Core_Queue[38],
     _y_ = caml_call1(Core_Queue[26], t),
     _z_ = caml_call3(Async_kernel_Deferred_list[20], how, _y_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _z_, _x_);
   }
   function filter_mapi(how, t, f){
    var
     _u_ = Core_Queue[38],
     _v_ = caml_call1(Core_Queue[26], t),
     _w_ = caml_call3(Async_kernel_Deferred_list[21], how, _v_, f);
    return caml_call2(Async_kernel_Deferred_std[4], _w_, _u_);
   }
   function concat_map(how, t, f){
    var _o_ = Core_Queue[38];
    function _p_(x){
     var _s_ = Core_Queue[26], _t_ = caml_call1(f, x);
     return caml_call2(Async_kernel_Deferred_std[4], _t_, _s_);
    }
    var
     _q_ = caml_call1(Core_Queue[26], t),
     _r_ = caml_call3(Async_kernel_Deferred_list[22], how, _q_, _p_);
    return caml_call2(Async_kernel_Deferred_std[4], _r_, _o_);
   }
   function concat_mapi(how, t, f){
    var _i_ = Core_Queue[38];
    function _j_(i, x){
     var _m_ = Core_Queue[26], _n_ = caml_call2(f, i, x);
     return caml_call2(Async_kernel_Deferred_std[4], _n_, _m_);
    }
    var
     _k_ = caml_call1(Core_Queue[26], t),
     _l_ = caml_call3(Async_kernel_Deferred_list[23], how, _k_, _j_);
    return caml_call2(Async_kernel_Deferred_std[4], _l_, _i_);
   }
   function find_map(t, f){
    var _h_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[5], _h_, f);
   }
   function find_mapi(t, f){
    var _g_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[6], _g_, f);
   }
   function find(t, f){
    var _f_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[3], _f_, f);
   }
   function findi(t, f){
    var _e_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[4], _e_, f);
   }
   function for_all(t, f){
    var _d_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[9], _d_, f);
   }
   function for_alli(t, f){
    var _c_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[10], _c_, f);
   }
   function exists(t, f){
    var _b_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[7], _b_, f);
   }
   function existsi(t, f){
    var _a_ = caml_call1(Core_Queue[26], t);
    return caml_call2(Async_kernel_Deferred_list[8], _a_, f);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_queu);
   var
    Async_kernel_Deferred_queue =
      [0,
       foldi,
       fold,
       find,
       findi,
       find_map,
       find_mapi,
       exists,
       existsi,
       for_all,
       for_alli,
       all,
       all_unit,
       init,
       iter,
       iteri,
       map,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
   runtime.caml_register_global
    (14, Async_kernel_Deferred_queue, cst_Async_kernel_Deferred_queu$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred_sequence
//# unitInfo: Requires: Async_kernel__Deferred_std, Async_kernel__Throttle, Core__List, Core__Sequence, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred_sequ$0 = "Async_kernel__Deferred_sequence",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Sequence = global_data.Core__Sequence,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Core_List = global_data.Core__List,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred_sequ$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/deferred_sequence.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Deferred_sequ = cst_Async_kernel_Deferred_sequ$0;
   function fold_mapi(opt, t){
    if(opt) var sth = opt[1], how = sth; else var how = -686623969;
    return function(init, mapi_f, fold_f){
     if(typeof how !== "number"){
      var
       max_concurrent_jobs = how[2],
       throttle = caml_call2(Async_kernel_Throttle[4], 0, max_concurrent_jobs),
       loop$0 =
         function(i, t, c){
          function _Y_(param){
           var match = caml_call1(Core_Sequence[47], t);
           if(! match) return c;
           var match$0 = match[1], t$0 = match$0[2], a = match$0[1];
           function ___(b){
            function _ab_(c){return caml_call2(fold_f, c, b);}
            return caml_call2(Async_kernel_Deferred_std[5][2], c, _ab_);
           }
           function _$_(param){return caml_call2(mapi_f, i, a);}
           var _aa_ = caml_call2(Async_kernel_Throttle[8], throttle, _$_);
           return loop$0
                   (i + 1 | 0,
                    t$0,
                    caml_call2(Async_kernel_Deferred_std[5][1], _aa_, ___));
          }
          var _Z_ = caml_call1(Async_kernel_Throttle[16], throttle);
          return caml_call2(Async_kernel_Deferred_std[5][1], _Z_, _Y_);
         };
      return loop$0(0, t, caml_call1(Async_kernel_Deferred_std[10], init));
     }
     if(-676829465 > how){
      var
       loop =
         function(i, t, c){
          var match = caml_call1(Core_Sequence[47], t);
          if(! match) return caml_call1(Async_kernel_Deferred_std[10], c);
          var match$0 = match[1], t$0 = match$0[2], a = match$0[1];
          function _W_(b){
           return loop(i + 1 | 0, t$0, caml_call2(fold_f, c, b));
          }
          var _X_ = caml_call2(mapi_f, i, a);
          return caml_call2(Async_kernel_Deferred_std[5][1], _X_, _W_);
         };
      return loop(0, t, init);
     }
     var
      c$1 = caml_call1(Async_kernel_Deferred_std[10], init),
      i = 0,
      t$0 = t,
      c = c$1;
     for(;;){
      var match = caml_call1(Core_Sequence[47], t$0);
      if(! match) return c;
      var
       match$0 = match[1],
       t$1 = match$0[2],
       a = match$0[1],
       _T_ =
         function(c){
           return function(b){
            function _V_(c){return caml_call2(fold_f, c, b);}
            return caml_call2(Async_kernel_Deferred_std[5][2], c, _V_);};
          }
          (c),
       _U_ = caml_call2(mapi_f, i, a),
       c$0 = caml_call2(Async_kernel_Deferred_std[5][1], _U_, _T_),
       i$0 = i + 1 | 0,
       i = i$0,
       t$0 = t$1,
       c = c$0;
     }};
   }
   function foldi(t, init, f){
    function _P_(param){
     var b = param[2];
     return caml_call1(Async_kernel_Deferred_std[10], b);
    }
    function _Q_(param, a, k){
     var b = param[2], i = param[1];
     function _R_(b){return caml_call1(k, [0, i + 1 | 0, b]);}
     var _S_ = caml_call3(f, i, b, a);
     return caml_call2(Async_kernel_Deferred_std[5][1], _S_, _R_);
    }
    return caml_call4(Core_Sequence[105], t, [0, 0, init], _Q_, _P_);
   }
   function fold(t, init, f){
    var _M_ = Async_kernel_Deferred_std[10];
    function _N_(b, a, k){
     var _O_ = caml_call2(f, b, a);
     return caml_call2(Async_kernel_Deferred_std[3], _O_, k);
    }
    return caml_call4(Core_Sequence[105], t, init, _N_, _M_);
   }
   function all(t){
    function _I_(res){
     var _L_ = caml_call1(Core_List[34], res);
     return caml_call1(Core_Sequence[109], _L_);
    }
    var
     _J_ =
       fold
        (t,
         0,
         function(accum, d){
          function _K_(a){return [0, a, accum];}
          return caml_call2(Async_kernel_Deferred_std[5][2], d, _K_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _J_, _I_);
   }
   function all_unit(t){return fold(t, 0, function(param, v){return v;});}
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     var match = caml_call1(Core_Sequence[47], t);
     if(! match) return caml_call1(Async_kernel_Deferred_std[10], 0);
     var match$0 = match[1], rest = match$0[2], v = match$0[1];
     function _G_(some){
      return some
              ? caml_call1(Async_kernel_Deferred_std[10], some)
              : find_mapi(rest, f, i + 1 | 0);
     }
     var _H_ = caml_call2(f, i, v);
     return caml_call2(Async_kernel_Deferred_std[5][1], _H_, _G_);
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              function _E_(b){return b ? [0, [0, i, elt]] : 0;}
              var _F_ = caml_call2(f, i, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _F_, _E_);
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              function _C_(b){return b ? [0, elt] : 0;}
              var _D_ = caml_call1(f, elt);
              return caml_call2(Async_kernel_Deferred_std[5][2], _D_, _C_);
             });
   }
   function existsi(t, f){
    function _y_(param){return param ? 1 : 0;}
    var
     _z_ =
       find_mapi
        (t,
         function(i, elt){
          function _A_(b){return b ? _a_ : 0;}
          var _B_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _B_, _A_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _z_, _y_);
   }
   function for_alli(t, f){
    function _u_(param){return param ? 0 : 1;}
    var
     _v_ =
       find_mapi
        (t,
         function(i, elt){
          function _w_(b){return b ? 0 : _b_;}
          var _x_ = caml_call2(f, i, elt);
          return caml_call2(Async_kernel_Deferred_std[5][2], _x_, _w_);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _v_, _u_);
   }
   function iteri(how, t, f){
    function _s_(param, _t_){return 0;}
    return fold_mapi(how, t)(0, f, _s_);
   }
   function mapi(how, t, f){
    function _n_(bs){
     var _r_ = caml_call1(Core_List[34], bs);
     return caml_call1(Core_Sequence[109], _r_);
    }
    function _o_(bs, b){return [0, b, bs];}
    function _p_(i, a){return caml_call2(f, i, a);}
    var _q_ = fold_mapi(how, t)(0, _p_, _o_);
    return caml_call2(Async_kernel_Deferred_std[5][2], _q_, _n_);
   }
   function filter_mapi(how, t, f){
    function _i_(bs){
     var _m_ = caml_call1(Core_List[34], bs);
     return caml_call1(Core_Sequence[109], _m_);
    }
    function _j_(bs, maybe_v){
     if(! maybe_v) return bs;
     var b = maybe_v[1];
     return [0, b, bs];
    }
    function _k_(i, a){return caml_call2(f, i, a);}
    var _l_ = fold_mapi(how, t)(0, _k_, _j_);
    return caml_call2(Async_kernel_Deferred_std[5][2], _l_, _i_);
   }
   function concat_mapi(how, t, f){
    var _g_ = Core_Sequence[70], _h_ = mapi(how, t, f);
    return caml_call2(Async_kernel_Deferred_std[4], _h_, _g_);
   }
   function filteri(how, t, f){
    return filter_mapi
            (how,
             t,
             function(i, a){
              function _e_(param){return param ? [0, a] : 0;}
              var _f_ = caml_call2(f, i, a);
              return caml_call2(Async_kernel_Deferred_std[5][2], _f_, _e_);
             });
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    function _c_(_d_){return _d_;}
    return map(how, caml_call2(Core_Sequence[83], n, _c_), f);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred_sequ);
   var
    Async_kernel_Deferred_sequence =
      [0,
       foldi,
       fold,
       find,
       findi,
       find_map,
       find_mapi,
       exists,
       existsi,
       for_all,
       for_alli,
       all,
       all_unit,
       init,
       iter,
       iteri,
       map,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
   runtime.caml_register_global
    (17, Async_kernel_Deferred_sequence, cst_Async_kernel_Deferred_sequ$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Deferred
//# unitInfo: Requires: Async_kernel__Deferred1, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Deferred = "Async_kernel__Deferred",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Deferred1 = global_data.Async_kernel__Deferred1;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Deferred);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/deferred.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var
    sexp_of_t = Async_kernel_Deferred1[1],
    invariant = Async_kernel_Deferred1[2],
    create = Async_kernel_Deferred1[4],
    peek = Async_kernel_Deferred1[5],
    value_exn = Async_kernel_Deferred1[6],
    is_determined = Async_kernel_Deferred1[7],
    upon = Async_kernel_Deferred1[8],
    never = Async_kernel_Deferred1[12],
    symbol_bind = Async_kernel_Deferred1[14],
    symbol_map = Async_kernel_Deferred1[15],
    Monad_infix = Async_kernel_Deferred1[16],
    bind = Async_kernel_Deferred1[17],
    map = Async_kernel_Deferred1[18],
    join = Async_kernel_Deferred1[19],
    ignore_m = Async_kernel_Deferred1[20],
    return$0 = Async_kernel_Deferred1[21],
    Let_syntax = Async_kernel_Deferred1[22],
    unit = Async_kernel_Deferred1[23],
    both = Async_kernel_Deferred1[24],
    Infix = Async_kernel_Deferred1[25],
    don_t_wait_for = Async_kernel_Deferred1[26],
    Choice = Async_kernel_Deferred1[27],
    choice = Async_kernel_Deferred1[29],
    enabled = Async_kernel_Deferred1[30],
    choose = Async_kernel_Deferred1[32],
    any = Async_kernel_Deferred1[34],
    any_unit = Async_kernel_Deferred1[35],
    for$0 = Async_kernel_Deferred1[36],
    repeat_until_finished = Async_kernel_Deferred1[37],
    forever = Async_kernel_Deferred1[38],
    all = Async_kernel_Deferred1[42],
    all_unit = Async_kernel_Deferred1[43],
    ok = Async_kernel_Deferred1[44];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Deferred);
   var
    _a_ = Let_syntax[4],
    Async_kernel_Deferred =
      [0,
       sexp_of_t,
       invariant,
       create,
       upon,
       peek,
       value_exn,
       is_determined,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       [0,
        Let_syntax[3],
        Let_syntax[1],
        Let_syntax[2],
        [0, _a_[5], _a_[1], _a_[2], _a_[3], _a_[4]]],
       [0, Infix[1], Infix[2], Infix[3]],
       unit,
       never,
       both,
       all,
       all_unit,
       any,
       any_unit,
       don_t_wait_for,
       Choice,
       choice,
       enabled,
       choose,
       for$0,
       repeat_until_finished,
       forever,
       ok];
   runtime.caml_register_global
    (12, Async_kernel_Deferred, cst_Async_kernel_Deferred);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Require_explicit_time_source
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Async_kernel__Clock_ns, Async_kernel__Time_ns, Core__Date, Core__Time_float, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Require_expli =
      "Async_kernel__Require_explicit_time_source",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Core_Date = global_data.Core__Date,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Core_Time_float = global_data.Core__Time_float,
    Async_kernel_Time_ns = global_data.Async_kernel__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Require_expli);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1
    (Expect_test_collector[5][1], "src/require_explicit_time_source.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var
    after = Async_kernel_Clock_ns[4],
    at = Async_kernel_Clock_ns[3],
    every = Async_kernel_Clock_ns[10],
    with_timeout = Async_kernel_Clock_ns[5];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Require_expli);
   var
    Async_kernel_Require_explicit_ =
      [0,
       Async_kernel_Clock_ns,
       [0,
        Async_kernel_Time_ns[1],
        Async_kernel_Time_ns[2],
        Async_kernel_Time_ns[3],
        Async_kernel_Time_ns[4],
        Async_kernel_Time_ns[5],
        Async_kernel_Time_ns[6],
        Async_kernel_Time_ns[7],
        Async_kernel_Time_ns[8],
        Async_kernel_Time_ns[9],
        Async_kernel_Time_ns[10],
        Async_kernel_Time_ns[11],
        Async_kernel_Time_ns[12],
        Async_kernel_Time_ns[13],
        Async_kernel_Time_ns[14],
        Async_kernel_Time_ns[15],
        Async_kernel_Time_ns[16],
        Async_kernel_Time_ns[17],
        Async_kernel_Time_ns[18],
        Async_kernel_Time_ns[19],
        Async_kernel_Time_ns[20],
        Async_kernel_Time_ns[21],
        Async_kernel_Time_ns[22],
        Async_kernel_Time_ns[23],
        Async_kernel_Time_ns[24],
        Async_kernel_Time_ns[25],
        Async_kernel_Time_ns[26],
        Async_kernel_Time_ns[27],
        Async_kernel_Time_ns[28],
        Async_kernel_Time_ns[29],
        Async_kernel_Time_ns[30],
        Async_kernel_Time_ns[31],
        Async_kernel_Time_ns[32],
        Async_kernel_Time_ns[33],
        Async_kernel_Time_ns[34],
        Async_kernel_Time_ns[35],
        Async_kernel_Time_ns[36],
        Async_kernel_Time_ns[37],
        Async_kernel_Time_ns[38],
        Async_kernel_Time_ns[39],
        Async_kernel_Time_ns[40],
        Async_kernel_Time_ns[41],
        Async_kernel_Time_ns[42],
        Async_kernel_Time_ns[43],
        Async_kernel_Time_ns[44],
        Async_kernel_Time_ns[45],
        Async_kernel_Time_ns[46],
        Async_kernel_Time_ns[47],
        Async_kernel_Time_ns[48],
        Async_kernel_Time_ns[49],
        Async_kernel_Time_ns[51],
        Async_kernel_Time_ns[52],
        Async_kernel_Time_ns[53],
        Async_kernel_Time_ns[54],
        Async_kernel_Time_ns[55],
        Async_kernel_Time_ns[56],
        Async_kernel_Time_ns[57],
        Async_kernel_Time_ns[58],
        Async_kernel_Time_ns[59],
        Async_kernel_Time_ns[60],
        Async_kernel_Time_ns[61],
        Async_kernel_Time_ns[62],
        Async_kernel_Time_ns[63],
        Async_kernel_Time_ns[64],
        Async_kernel_Time_ns[65],
        Async_kernel_Time_ns[66],
        Async_kernel_Time_ns[67],
        Async_kernel_Time_ns[68],
        Async_kernel_Time_ns[69],
        Async_kernel_Time_ns[70],
        Async_kernel_Time_ns[71],
        Async_kernel_Time_ns[72],
        Async_kernel_Time_ns[73],
        Async_kernel_Time_ns[74],
        Async_kernel_Time_ns[75],
        Async_kernel_Time_ns[76],
        Async_kernel_Time_ns[77],
        Async_kernel_Time_ns[78],
        Async_kernel_Time_ns[79],
        Async_kernel_Time_ns[80],
        Async_kernel_Time_ns[81],
        Async_kernel_Time_ns[82],
        Async_kernel_Time_ns[83],
        Async_kernel_Time_ns[84],
        Async_kernel_Time_ns[85],
        Async_kernel_Time_ns[86],
        Async_kernel_Time_ns[87],
        Async_kernel_Time_ns[88],
        Async_kernel_Time_ns[89],
        Async_kernel_Time_ns[90],
        Async_kernel_Time_ns[91],
        Async_kernel_Time_ns[92],
        Async_kernel_Time_ns[93],
        Async_kernel_Time_ns[94],
        Async_kernel_Time_ns[95],
        Async_kernel_Time_ns[96],
        Async_kernel_Time_ns[97],
        Async_kernel_Time_ns[98],
        Async_kernel_Time_ns[99],
        Async_kernel_Time_ns[100],
        Async_kernel_Time_ns[101],
        Async_kernel_Time_ns[102],
        Async_kernel_Time_ns[103],
        Async_kernel_Time_ns[104],
        Async_kernel_Time_ns[105],
        Async_kernel_Time_ns[106],
        Async_kernel_Time_ns[107],
        Async_kernel_Time_ns[108],
        Async_kernel_Time_ns[109],
        Async_kernel_Time_ns[110],
        Async_kernel_Time_ns[111],
        Async_kernel_Time_ns[112],
        Async_kernel_Time_ns[113],
        Async_kernel_Time_ns[50]],
       [0,
        Core_Time_float[1],
        Core_Time_float[2],
        Core_Time_float[3],
        Core_Time_float[4],
        Core_Time_float[5],
        Core_Time_float[6],
        Core_Time_float[7],
        Core_Time_float[8],
        Core_Time_float[9],
        Core_Time_float[10],
        Core_Time_float[11],
        Core_Time_float[12],
        Core_Time_float[14],
        Core_Time_float[15],
        Core_Time_float[16],
        Core_Time_float[17],
        Core_Time_float[18],
        Core_Time_float[19],
        Core_Time_float[20],
        Core_Time_float[21],
        Core_Time_float[22],
        Core_Time_float[23],
        Core_Time_float[24],
        Core_Time_float[25],
        Core_Time_float[26],
        Core_Time_float[27],
        Core_Time_float[28],
        Core_Time_float[29],
        Core_Time_float[30],
        Core_Time_float[31],
        Core_Time_float[32],
        Core_Time_float[33],
        Core_Time_float[34],
        Core_Time_float[35],
        Core_Time_float[36],
        Core_Time_float[37],
        Core_Time_float[38],
        Core_Time_float[39],
        Core_Time_float[40],
        Core_Time_float[41],
        Core_Time_float[42],
        Core_Time_float[43],
        Core_Time_float[45],
        Core_Time_float[46],
        Core_Time_float[48],
        Core_Time_float[49],
        Core_Time_float[50],
        Core_Time_float[51],
        Core_Time_float[52],
        Core_Time_float[53],
        Core_Time_float[54],
        Core_Time_float[55],
        Core_Time_float[56],
        Core_Time_float[57],
        Core_Time_float[58],
        Core_Time_float[59],
        Core_Time_float[60],
        Core_Time_float[61],
        Core_Time_float[62],
        Core_Time_float[63],
        Core_Time_float[64],
        Core_Time_float[65],
        Core_Time_float[66],
        Core_Time_float[67],
        Core_Time_float[68],
        Core_Time_float[69],
        Core_Time_float[70],
        Core_Time_float[71],
        Core_Time_float[72],
        Core_Time_float[73],
        Core_Time_float[74],
        Core_Time_float[75],
        Core_Time_float[76],
        Core_Time_float[77],
        Core_Time_float[78],
        Core_Time_float[79],
        Core_Time_float[80],
        Core_Time_float[81],
        Core_Time_float[82],
        Core_Time_float[93],
        Core_Time_float[94],
        Core_Time_float[95],
        Core_Time_float[96],
        Core_Time_float[97],
        Core_Time_float[98],
        Core_Time_float[99],
        Core_Time_float[100],
        Core_Time_float[101],
        Core_Time_float[102],
        Core_Time_float[103],
        Core_Time_float[104],
        Core_Time_float[105],
        Core_Time_float[106],
        Core_Time_float[107],
        Core_Time_float[108],
        Core_Time_float[109],
        Core_Time_float[110],
        Core_Time_float[111],
        Core_Time_float[112],
        Core_Time_float[113],
        Core_Time_float[114],
        Core_Time_float[115],
        Core_Time_float[47]],
       [0,
        Async_kernel_Async_kernel_sche[1],
        Async_kernel_Async_kernel_sche[2],
        Async_kernel_Async_kernel_sche[3],
        Async_kernel_Async_kernel_sche[4],
        Async_kernel_Async_kernel_sche[5],
        Async_kernel_Async_kernel_sche[6],
        Async_kernel_Async_kernel_sche[7],
        Async_kernel_Async_kernel_sche[8],
        Async_kernel_Async_kernel_sche[9],
        Async_kernel_Async_kernel_sche[10],
        Async_kernel_Async_kernel_sche[11],
        Async_kernel_Async_kernel_sche[12],
        Async_kernel_Async_kernel_sche[13],
        Async_kernel_Async_kernel_sche[16],
        Async_kernel_Async_kernel_sche[17],
        Async_kernel_Async_kernel_sche[18],
        Async_kernel_Async_kernel_sche[19],
        Async_kernel_Async_kernel_sche[20],
        Async_kernel_Async_kernel_sche[21],
        Async_kernel_Async_kernel_sche[22],
        Async_kernel_Async_kernel_sche[23],
        Async_kernel_Async_kernel_sche[24],
        Async_kernel_Async_kernel_sche[25],
        Async_kernel_Async_kernel_sche[26],
        Async_kernel_Async_kernel_sche[27],
        Async_kernel_Async_kernel_sche[28],
        Async_kernel_Async_kernel_sche[29],
        Async_kernel_Async_kernel_sche[30],
        Async_kernel_Async_kernel_sche[31],
        Async_kernel_Async_kernel_sche[32],
        Async_kernel_Async_kernel_sche[14],
        Async_kernel_Async_kernel_sche[15]],
       [0,
        Core_Date[1],
        Core_Date[2],
        Core_Date[3],
        Core_Date[4],
        Core_Date[5],
        Core_Date[6],
        Core_Date[7],
        Core_Date[8],
        Core_Date[9],
        Core_Date[10],
        Core_Date[11],
        Core_Date[12],
        Core_Date[13],
        Core_Date[14],
        Core_Date[15],
        Core_Date[16],
        Core_Date[20],
        Core_Date[21],
        Core_Date[22],
        Core_Date[23],
        Core_Date[24],
        Core_Date[25],
        Core_Date[26],
        Core_Date[27],
        Core_Date[28],
        Core_Date[29],
        Core_Date[30],
        Core_Date[31],
        Core_Date[32],
        Core_Date[33],
        Core_Date[34],
        Core_Date[35],
        Core_Date[36],
        Core_Date[37],
        Core_Date[38],
        Core_Date[39],
        Core_Date[41],
        Core_Date[44],
        Core_Date[45],
        Core_Date[46],
        Core_Date[47],
        Core_Date[48],
        Core_Date[49],
        Core_Date[50],
        Core_Date[51],
        Core_Date[52],
        Core_Date[53],
        Core_Date[54],
        Core_Date[55],
        Core_Date[56],
        Core_Date[57],
        Core_Date[58],
        Core_Date[59],
        Core_Date[60],
        Core_Date[61],
        Core_Date[62],
        Core_Date[63],
        Core_Date[64],
        Core_Date[65],
        Core_Date[66],
        Core_Date[67],
        Core_Date[68],
        Core_Date[69],
        Core_Date[70],
        Core_Date[71],
        Core_Date[72],
        Core_Date[73],
        Core_Date[74],
        Core_Date[75],
        Core_Date[76],
        Core_Date[77],
        Core_Date[78],
        Core_Date[79],
        Core_Date[80],
        Core_Date[81],
        Core_Date[82],
        Core_Date[83],
        Core_Date[84],
        Core_Date[85],
        Core_Date[86],
        Core_Date[92],
        Core_Date[94],
        Core_Date[95],
        Core_Date[96],
        Core_Date[93]],
       at,
       after,
       every,
       with_timeout];
   runtime.caml_register_global
    (16, Async_kernel_Require_explicit_, cst_Async_kernel_Require_expli);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Pipe
//# unitInfo: Requires: Assert_failure, Async_kernel__Async_stream, Async_kernel__Deferred, Async_kernel__Deferred_list, Async_kernel__Deferred_queue, Async_kernel__Deferred_std, Async_kernel__Import, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Tail, Base__Field, Core, Core__Bag, Core__Bool, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Queue, Core__Sequence, Core__Sexp, Core__Source_code_position, Expect_test_collector, Pairing_heap, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexp_hidden_in_test, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Pipe$0 = "Async_kernel__Pipe",
    cst_Eof = "Eof",
    cst_Ok = "Ok",
    cst_Reader_closed = "Reader_closed",
    cst$0 = "_",
    cst_async_kernel$0 = "async_kernel",
    cst_blocked_flushes$0 = "blocked_flushes",
    cst_blocked_reads$0 = "blocked_reads",
    cst_consumer$0 = "consumer",
    cst_consumers$0 = "consumers",
    cst_exn = "exn",
    cst_pipe = "pipe",
    cst_pushback$0 = "pushback",
    cst_size_budget$0 = "size_budget",
    cst_src_pipe_ml = "src/pipe.ml",
    cst_values_read$0 = "values_read",
    cst_wants$0 = "wants",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_List = global_data.Core__List,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Deferred_list = global_data.Async_kernel__Deferred_list,
    Pairing_heap = global_data.Pairing_heap,
    Async_kernel_Import = global_data.Async_kernel__Import,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Sequence = global_data.Core__Sequence,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred_queue = global_data.Async_kernel__Deferred_queue,
    Core_Sexp = global_data.Core__Sexp,
    Core_Option = global_data.Core__Option,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Async_stream = global_data.Async_kernel__Async_stream,
    Async_kernel_Tail = global_data.Async_kernel__Tail,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Core_Bag = global_data.Core__Bag,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Bool = global_data.Core__Bool,
    Base_Field = global_data.Base__Field,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Sexp_hidden_in_test = global_data.Sexp_hidden_in_test,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Pipe$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_pipe_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    show_debug_messages = [0, 0],
    check_invariant = [0, 0],
    cst_Pipe_interleave = "Pipe.interleave",
    _a0_ = [0, "Mapped"],
    _aZ_ = [0, cst_src_pipe_ml, 949, 4],
    _aY_ = [0, "max_iterations_per_job"],
    cst_iter_without_pushback_got_ =
      "iter_without_pushback got non-positive max_iterations_per_job",
    _aW_ = [0, 3804260],
    _aX_ = [0, 523273847],
    _aT_ = [0, "When_value_read"],
    _aU_ = [0, "When_value_processed"],
    _aV_ = [0, "Consumer"],
    _aS_ = [0, cst_src_pipe_ml, 674, 6],
    cst_read_exactly = "read_exactly",
    _aR_ = [0, "num_values"],
    cst_Pipe_read_exactly_got_num_ = "Pipe.read_exactly got num_values <= 0",
    _aQ_ = [0, "here"],
    cst_Pipe_read_choice_single_co =
      "Pipe.read_choice_single_consumer_exn: choice was enabled but pipe is empty; this is likely due to a race condition with one or more other consumers",
    cst_values_available = "values_available",
    cst_Pipe_read_exn_received_EOF = "Pipe.read_exn: received EOF",
    cst_read$0 = "read",
    _aP_ = [0, cst_src_pipe_ml, 623, 4],
    cst_read = "read'",
    _aO_ = [0, "max_queue_length"],
    cst_max_queue_length_0 = "max_queue_length <= 0",
    cst_read_now = "read_now",
    _aN_ = [0, cst_src_pipe_ml, 574, 4],
    _aM_ = [0, cst$0],
    _aL_ = [0, cst$0],
    _aI_ = [0, cst$0],
    _aJ_ = [0, cst_pipe],
    _aK_ = [0, cst_consumer$0],
    cst_Attempt_to_use_consumer_wi = "Attempt to use consumer with wrong pipe",
    _aG_ = [0, cst$0],
    _aF_ = [0, cst$0],
    _aE_ = [0, cst$0],
    _aD_ = [0, cst$0],
    cst_write = "write",
    _aH_ = [0, cst_pipe],
    cst_write_to_closed_pipe = "write to closed pipe",
    _aC_ = [0, cst_src_pipe_ml, 465, 2],
    _aB_ = [0, cst_src_pipe_ml, 456, 2],
    _az_ = [0, 3804260],
    _aA_ = [0, 523273847],
    _ax_ = [0, 3804260],
    _ay_ = [0, 523273847],
    _aw_ = [0, cst$0],
    _av_ = [0, cst$0],
    cst_close_read = "close_read",
    _au_ = [0, cst$0],
    _at_ = [0, cst$0],
    cst_close = "close",
    _as_ = [0, cst_size_budget$0],
    cst_negative_size_budget = "negative size_budget",
    _ar_ = [0, cst_src_pipe_ml, 307, 2],
    _aq_ = [0, cst_src_pipe_ml, 300, 2],
    _ae_ = [0, cst$0],
    _ad_ = [0, cst$0],
    _ap_ = [0, cst_src_pipe_ml, 258, 46],
    _ao_ = [0, cst_src_pipe_ml, 261, 11],
    _al_ = [0, cst_src_pipe_ml, 269, 13],
    _an_ = [0, cst_src_pipe_ml, 270, 11],
    _am_ = [0, cst_src_pipe_ml, 276, 30],
    _ai_ = [0, cst_src_pipe_ml, 284, 13],
    _ak_ = [0, cst_src_pipe_ml, 281, 36],
    _aj_ = [0, cst_src_pipe_ml, 286, 31],
    _ah_ = [0, cst_src_pipe_ml, 293, 13],
    _af_ = [0, cst_pipe],
    _ag_ = [0, cst_exn],
    cst_Pipe_invariant_failed = "Pipe.invariant failed",
    _T_ = [0, "upstream_flusheds"],
    _U_ = [0, cst_consumers$0],
    _V_ = [0, "read_closed"],
    _W_ = [0, "closed"],
    _X_ = [0, cst_blocked_reads$0],
    _Y_ = [0, cst_blocked_flushes$0],
    _Z_ = [0, "num_values_read"],
    ___ = [0, cst_pushback$0],
    _$_ = [0, cst_size_budget$0],
    _aa_ = [0, "buffer"],
    _ab_ = [0, "info"],
    _ac_ = [0, "id"],
    _F_ = [0, cst_Ok],
    _G_ = [0, cst_Reader_closed],
    _H_ = [0, "ready"],
    _I_ = [0, "fill_when_num_values_read"],
    _B_ = [0, cst$0],
    _E_ = [0, cst_src_pipe_ml, 140, 33],
    _C_ = [0, cst_pipe],
    _D_ = [0, cst_exn],
    cst_Pipe_Blocked_read_invarian = "Pipe.Blocked_read.invariant failed",
    _z_ = [0, cst_consumer$0],
    _A_ = [0, cst_wants$0],
    _s_ = [0, cst_Eof],
    _t_ = [0, cst_Ok],
    _p_ = [0, cst_Eof],
    _q_ = [0, cst_Ok],
    _m_ = [0, cst_Eof],
    _n_ = [0, cst_Ok],
    _o_ = [0, "Zero"],
    _r_ = [0, "One"],
    _u_ = [0, "At_most"],
    _l_ = [0, cst_src_pipe_ml, 79, 54],
    _j_ = [0, cst_pipe],
    _k_ = [0, cst_exn],
    cst_Pipe_Consumer_invariant_fa = "Pipe.Consumer.invariant failed",
    _e_ = [0, "downstream_flushed"],
    _f_ = [0, "Have_been_sent_downstream"],
    _i_ = [0, "Have_not_been_sent_downstream"],
    _g_ = [0, cst_values_read$0],
    _h_ = [0, "pipe_id"],
    _a_ = [0, cst_Ok],
    _b_ = [0, cst_Reader_closed],
    cst_values_read = cst_values_read$0,
    cst_consumer = cst_consumer$0,
    cst_wants = cst_wants$0,
    cst_consumers = cst_consumers$0,
    cst_blocked_reads = cst_blocked_reads$0,
    cst_blocked_flushes = cst_blocked_flushes$0,
    cst_pushback = cst_pushback$0,
    cst_size_budget = cst_size_budget$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Pipe = cst_Async_kernel_Pipe$0;
   function compare(a_001, b_002){
    if(caml_call2(Ppx_compare_lib[1], a_001, b_002)) return 0;
    if(17724 <= a_001){
     if(typeof b_002 === "number" && 17724 === b_002) return 0;
    }
    else if(typeof b_002 === "number" && -402004920 === b_002) return 0;
    return runtime.caml_int_compare(a_001, b_002);
   }
   function sexp_of_t(param){return 17724 <= param ? _a_ : _b_;}
   function equal(x_003, x_004){return 0 === compare(x_003, x_004) ? 1 : 0;}
   function combine(l){
    function _eZ_(l){
     return caml_call3(Core_List[6], l, -402004920, equal)
             ? -402004920
             : 17724;
    }
    var _e0_ = caml_call1(Async_kernel_Deferred[21], l);
    return caml_call2(Async_kernel_Deferred_std[5][2], _e0_, _eZ_);
   }
   function values_read(r){return r[2];}
   function set_values_read(r, v){r[2] = v; return 0;}
   function _c_(r, v){return [0, r[1], v, r[3]];}
   var
    _d_ = [0, set_values_read],
    values_read$0 =
      [0, function(param){return 0;}, cst_values_read, _d_, values_read, _c_];
   function sexp_of_t$0(param){
    var pipe_id_009 = param[1], values_read_011 = param[2], bnds_008 = 0;
    function _eX_(_eY_){return 0;}
    var
     arg_015 = caml_call1(Sexplib0_Sexp_conv[24], _eX_),
     bnds_008$0 = [0, [1, [0, _e_, [0, arg_015, 0]]], bnds_008];
    if(typeof values_read_011 === "number")
     var arg_012 = _f_;
    else
     var
      v_013 = values_read_011[2],
      arg_012 =
        [1,
         [0, _i_, [0, caml_call2(Async_kernel_Ivar[9], Core[518], v_013), 0]]];
    var
     bnds_008$1 = [0, [1, [0, _g_, [0, arg_012, 0]]], bnds_008$0],
     arg_010 = caml_call1(Core[356], pipe_id_009),
     bnds_008$2 = [0, [1, [0, _h_, [0, arg_010, 0]]], bnds_008$1];
    return [1, bnds_008$2];
   }
   function invariant(t){
    try{
     var param = caml_call2(Base_Field[3], values_read$0, t);
     if(typeof param !== "number"){
      var ivar = param[2];
      if(! caml_call1(Async_kernel_Ivar[16], ivar))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     }
     var _eT_ = 0;
     return _eT_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _eU_ = [0, [1, [0, _j_, [0, sexp_of_t$0(t), 0]]], 0],
      _eV_ = [0, [1, [0, _k_, [0, caml_call1(Core[537], exn), 0]]], _eU_],
      _eW_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_Consumer_invariant_fa),
          _eV_]];
     return caml_call1(Core[253], _eW_);
    }
   }
   function start(t){
    return typeof t[2] === "number"
            ? (t
               [2]
              = [0, -122467239, caml_call1(Async_kernel_Ivar[12], 0)],
              0)
            : 0;
   }
   function values_sent_downstream(t){
    var match = t[2];
    if(typeof match === "number") return 0;
    var ivar = match[2];
    caml_call2(Async_kernel_Ivar[14], ivar, 0);
    t[2] = -758792467;
    return 0;
   }
   function values_sent_downstream_and_flu(t){
    var match = t[2];
    if(typeof match === "number") return caml_call1(t[3], 0);
    var when_sent_downstream = match[2];
    function _eR_(param){return caml_call1(t[3], 0);}
    var _eS_ = caml_call1(Async_kernel_Ivar[18], when_sent_downstream);
    return caml_call2(Async_kernel_Deferred_std[5][1], _eS_, _eR_);
   }
   function consumer(r){return r[2];}
   function wants(r){return r[1];}
   function _v_(r, v){return [0, r[1], v];}
   var
    _w_ = 0,
    consumer$0 =
      [0, function(param){return 0;}, cst_consumer, _w_, consumer, _v_];
   function _x_(r, v){return [0, v, r[2]];}
   var
    _y_ = 0,
    wants$0 = [0, function(param){return 0;}, cst_wants, _y_, wants, _x_];
   function sexp_of_t$1(of_a_029, param){
    var
     consumer_033 = param[2],
     wants_031 = param[1],
     arg_034 = caml_call2(Core[454], sexp_of_t$0, consumer_033),
     bnds_030 = [0, [1, [0, _z_, [0, arg_034, 0]]], 0];
    switch(wants_031[0]){
      case 0:
       var
        arg0_018 = wants_031[1],
        _eO_ = function(param){return 3456156 <= param ? _m_ : _n_;},
        res0_019 = caml_call2(Async_kernel_Ivar[9], _eO_, arg0_018),
        arg_032 = [1, [0, _o_, [0, res0_019, 0]]];
       break;
      case 1:
       var
        arg0_021 = wants_031[1],
        _eP_ =
          function(param){
           if(typeof param === "number") return _p_;
           var v_020 = param[2];
           return [1, [0, _q_, [0, caml_call1(of_a_029, v_020), 0]]];
          },
        res0_022 = caml_call2(Async_kernel_Ivar[9], _eP_, arg0_021),
        arg_032 = [1, [0, _r_, [0, res0_022, 0]]];
       break;
      default:
       var
        arg1_025 = wants_031[2],
        arg0_024 = wants_031[1],
        res0_026 = caml_call1(Core[356], arg0_024),
        _eQ_ =
          function(param){
           if(typeof param === "number") return _s_;
           var v_023 = param[2];
           return [1,
                   [0,
                    _t_,
                    [0, caml_call2(Core_Queue[11], of_a_029, v_023), 0]]];
          },
        res1_027 = caml_call2(Async_kernel_Ivar[9], _eQ_, arg1_025),
        arg_032 = [1, [0, _u_, [0, res0_026, [0, res1_027, 0]]]];
    }
    var bnds_030$0 = [0, [1, [0, _A_, [0, arg_032, 0]]], bnds_030];
    return [1, bnds_030$0];
   }
   function fill_with_eof(t){
    var match = t[1];
    switch(match[0]){
      case 0:
       var i = match[1]; return caml_call2(Async_kernel_Ivar[14], i, 3456156);
      case 1:
       var i$0 = match[1];
       return caml_call2(Async_kernel_Ivar[14], i$0, 3456156);
      default:
       var i$1 = match[2];
       return caml_call2(Async_kernel_Ivar[14], i$1, 3456156);
    }
   }
   function fill_when_num_values_read(r){return r[1];}
   function sexp_of_t$2(param){
    var
     ready_039 = param[2],
     fill_when_num_values_read_037 = param[1],
     bnds_036 = 0;
    function _eN_(param){return 17724 <= param ? _F_ : _G_;}
    var
     arg_040 = caml_call2(Async_kernel_Ivar[9], _eN_, ready_039),
     bnds_036$0 = [0, [1, [0, _H_, [0, arg_040, 0]]], bnds_036],
     arg_038 = caml_call1(Core[356], fill_when_num_values_read_037),
     bnds_036$1 = [0, [1, [0, _I_, [0, arg_038, 0]]], bnds_036$0];
    return [1, bnds_036$1];
   }
   function fill(t, v){return caml_call2(Async_kernel_Ivar[14], t[2], v);}
   function consumers(r){return r[11];}
   function set_consumers(r, v){r[11] = v; return 0;}
   function blocked_reads(r){return r[8];}
   function blocked_flushes(r){return r[7];}
   function pushback(r){return r[5];}
   function set_pushback(r, v){r[5] = v; return 0;}
   function size_budget(r){return r[4];}
   function set_size_budget(r, v){r[4] = v; return 0;}
   function _J_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12]];
   }
   var
    _K_ = [0, set_consumers],
    consumers$0 =
      [0, function(param){return 0;}, cst_consumers, _K_, consumers, _J_];
   function _L_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12]];
   }
   var
    _M_ = 0,
    blocked_reads$0 =
      [0,
       function(param){return 0;},
       cst_blocked_reads,
       _M_,
       blocked_reads,
       _L_];
   function _N_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12]];
   }
   var
    _O_ = 0,
    blocked_flushes$0 =
      [0,
       function(param){return 0;},
       cst_blocked_flushes,
       _O_,
       blocked_flushes,
       _N_];
   function _P_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12]];
   }
   var
    _Q_ = [0, set_pushback],
    pushback$0 =
      [0, function(param){return 0;}, cst_pushback, _Q_, pushback, _P_];
   function _R_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12]];
   }
   var
    _S_ = [0, set_size_budget],
    size_budget$0 =
      [0, function(param){return 0;}, cst_size_budget, _S_, size_budget, _R_];
   function sexp_of_pipe(of_a_041, of_phantom_042, param){
    var
     id_044 = param[1],
     info_046 = param[2],
     buffer_050 = param[3],
     size_budget_052 = param[4],
     pushback_054 = param[5],
     num_values_read_056 = param[6],
     read_closed_064 = param[10],
     closed_062 = param[9],
     blocked_reads_060 = param[8],
     blocked_flushes_058 = param[7],
     consumers_066 = param[11],
     upstream_flusheds_068 = param[12],
     bnds_043 = 0;
    function _eI_(param){
     function _eL_(_eM_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _eL_);
    }
    var
     arg_069 = caml_call2(Core_Bag[3], _eI_, upstream_flusheds_068),
     bnds_043$0 = [0, [1, [0, _T_, [0, arg_069, 0]]], bnds_043],
     arg_067 = caml_call2(Core[421], sexp_of_t$0, consumers_066),
     bnds_043$1 = [0, [1, [0, _U_, [0, arg_067, 0]]], bnds_043$0],
     arg_065 = caml_call2(Async_kernel_Ivar[9], Core[518], read_closed_064),
     bnds_043$2 = [0, [1, [0, _V_, [0, arg_065, 0]]], bnds_043$1],
     arg_063 = caml_call2(Async_kernel_Ivar[9], Core[518], closed_062),
     bnds_043$3 = [0, [1, [0, _W_, [0, arg_063, 0]]], bnds_043$2];
    function _eJ_(_eK_){return sexp_of_t$1(of_a_041, _eK_);}
    var
     arg_061 = caml_call2(Core_Queue[11], _eJ_, blocked_reads_060),
     bnds_043$4 = [0, [1, [0, _X_, [0, arg_061, 0]]], bnds_043$3],
     arg_059 = caml_call2(Core_Queue[11], sexp_of_t$2, blocked_flushes_058),
     bnds_043$5 = [0, [1, [0, _Y_, [0, arg_059, 0]]], bnds_043$4],
     arg_057 = caml_call1(Core[356], num_values_read_056),
     bnds_043$6 = [0, [1, [0, _Z_, [0, arg_057, 0]]], bnds_043$5],
     arg_055 = caml_call2(Async_kernel_Ivar[9], Core[518], pushback_054),
     bnds_043$7 = [0, [1, [0, ___, [0, arg_055, 0]]], bnds_043$6],
     arg_053 = caml_call1(Core[356], size_budget_052),
     bnds_043$8 = [0, [1, [0, _$_, [0, arg_053, 0]]], bnds_043$7],
     arg_051 = caml_call2(Core_Queue[11], of_a_041, buffer_050),
     bnds_043$9 = [0, [1, [0, _aa_, [0, arg_051, 0]]], bnds_043$8];
    if(info_046)
     var
      v_047 = info_046[1],
      arg_049 = caml_call1(Core_Sexp[90], v_047),
      bnd_048 = [1, [0, _ab_, [0, arg_049, 0]]],
      bnds_043$10 = [0, bnd_048, bnds_043$9];
    else
     var bnds_043$10 = bnds_043$9;
    var
     arg_045 = caml_call2(Sexp_hidden_in_test[10], Core[356], id_044),
     bnds_043$11 = [0, [1, [0, _ac_, [0, arg_045, 0]]], bnds_043$10];
    return [1, bnds_043$11];
   }
   function hash(t){return caml_call1(Core_Hashtbl[1], t[1]);}
   function equal$0(t1, t2){return caml_call2(Core[246], t1, t2);}
   function compare$0(t1, t2){return caml_call2(Core_Int[91], t1[1], t2[1]);}
   function is_closed(t){return caml_call1(Async_kernel_Ivar[17], t[9]);}
   function is_read_closed(t){
    return caml_call1(Async_kernel_Ivar[17], t[10]);
   }
   function closed(t){return caml_call1(Async_kernel_Ivar[18], t[9]);}
   function pushback$1(t){return caml_call1(Async_kernel_Ivar[18], t[5]);}
   function length(t){return caml_call1(Core_Queue[14], t[3]);}
   function is_empty(t){
    var _eH_ = length(t);
    return caml_call2(Async_kernel_Import[3], _eH_, 0);
   }
   function invariant$0(x_073){
    try{
     var
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, x_073));
        },
      _ej_ =
        function(l){
         function _eG_(consumer){
          invariant(consumer);
          if(caml_call2(Async_kernel_Import[3], consumer[1], x_073[1]))
           return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ah_], 1);
         }
         return caml_call2(Core_List[9], l, _eG_);
        },
      _ek_ =
        function(blocked_reads){
         if
          (1 - is_empty(x_073) && ! caml_call1(Core_Queue[15], blocked_reads))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ak_], 1);
         function _ex_(x_035){
          try{
           var
            check =
              function(f, field){
               return caml_call1(f, caml_call2(Base_Field[3], field, x_035));
              },
            _eE_ =
              function(param){
               if(! param) return 0;
               var consumer = param[1];
               return invariant(consumer);
              };
           check
            (function(param){
              if(2 !== param[0]) return 0;
              var i = param[1];
              if(caml_call2(Async_kernel_Import[4], i, 0)) return 0;
              throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
             },
             wants$0);
           check(_eE_, consumer$0);
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _ez_ = 0,
            _eA_ = 0,
            _eB_ =
              [0,
               [1,
                [0,
                 _C_,
                 [0, sexp_of_t$1(function(param){return _B_;}, x_035), _eA_]]],
               _ez_],
            _eC_ =
              [0, [1, [0, _D_, [0, caml_call1(Core[537], exn), 0]]], _eB_],
            _eD_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Pipe_Blocked_read_invarian),
                _eC_]];
           caml_call1(Core[253], _eD_);
          }
          var match = x_035[1];
          switch(match[0]){
            case 0:
             var i = match[1], _eF_ = caml_call1(Async_kernel_Ivar[16], i);
             break;
            case 1:
             var
              i$0 = match[1],
              _eF_ = caml_call1(Async_kernel_Ivar[16], i$0);
             break;
            default:
             var
              i$1 = match[2],
              _eF_ = caml_call1(Async_kernel_Ivar[16], i$1);
          }
          if(_eF_) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ai_], 1);
         }
         caml_call2(Core_Queue[16], blocked_reads, _ex_);
         var _ey_ = is_closed(x_073);
         if(! _ey_) return _ey_;
         if(caml_call1(Core_Queue[15], blocked_reads)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aj_], 1);
        },
      _el_ =
        function(blocked_flushes){
         function _es_(f){
          if(caml_call2(Async_kernel_Import[4], f[1], x_073[6])) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _al_], 1);
         }
         caml_call2(Core_Queue[16], blocked_flushes, _es_);
         var
          _et_ = Core_Int[91],
          _eu_ = caml_call1(Core_Queue[26], blocked_flushes),
          _ev_ = caml_call2(Core_List[72], _eu_, fill_when_num_values_read);
         if(! caml_call2(Core_List[140], _ev_, _et_))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
         var _ew_ = is_empty(x_073);
         if(! _ew_) return _ew_;
         if(caml_call1(Core_Queue[15], blocked_flushes)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _am_], 1);
        },
      _em_ =
        function(pushback){
         var
          _en_ = x_073[4],
          _eo_ = length(x_073),
          _ep_ = caml_call2(Async_kernel_Import[2], _eo_, _en_),
          _eq_ = _ep_ || is_closed(x_073),
          _er_ = caml_call1(Async_kernel_Ivar[17], pushback);
         if(caml_call2(Core_Bool[27], _er_, _eq_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ao_], 1);
        };
     check
      (function(size_budget){
        if(caml_call2(Async_kernel_Import[1], size_budget, 0)) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ap_], 1);
       },
       size_budget$0);
     check(_em_, pushback$0);
     check(_el_, blocked_flushes$0);
     check(_ek_, blocked_reads$0);
     check(_ej_, consumers$0);
     var _ec_ = 0;
     return _ec_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _ed_ = 0,
      _ee_ = 0,
      _ef_ = function(param){return _ad_;},
      _eg_ =
        [0,
         [1,
          [0,
           _af_,
           [0, sexp_of_pipe(function(param){return _ae_;}, _ef_, x_073), _ee_]]],
         _ed_],
      _eh_ = [0, [1, [0, _ag_, [0, caml_call1(Core[537], exn), 0]]], _eg_],
      _ei_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_invariant_failed),
          _eh_]];
     return caml_call1(Core[253], _ei_);
    }
   }
   function sexp_of_phantom(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aq_], 1);
   }
   function sexp_of_t$3(of_a_074, x_075){
    return sexp_of_pipe(of_a_074, sexp_of_phantom, x_075);
   }
   function sexp_of_phantom$0(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ar_], 1);
   }
   function sexp_of_t$4(of_a_076, x_077){
    return sexp_of_pipe(of_a_076, sexp_of_phantom$0, x_077);
   }
   var id_ref = [0, 0];
   function create_internal(size_budget, info, initial_buffer){
    id_ref[1]++;
    var
     _d8_ = caml_call1(Core_Bag[22], 0),
     _d9_ = caml_call1(Async_kernel_Ivar[12], 0),
     _d__ = caml_call1(Async_kernel_Ivar[12], 0),
     _d$_ = caml_call2(Core_Queue[61], 0, 0),
     _ea_ = caml_call2(Core_Queue[61], 0, 0),
     _eb_ = caml_call1(Async_kernel_Ivar[12], 0),
     t =
       [0,
        id_ref[1],
        info,
        initial_buffer,
        size_budget,
        _eb_,
        0,
        _ea_,
        _d$_,
        _d__,
        _d9_,
        0,
        _d8_];
    return t;
   }
   function validate_size_budget(size_budget){
    if(! caml_call2(Async_kernel_Import[5], size_budget, 0))
     return size_budget;
    var
     _d6_ = [0, [1, [0, _as_, [0, caml_call1(Core[356], size_budget), 0]]], 0],
     _d7_ =
       [1,
        [0, caml_call1(Sexplib0_Sexp_conv[7], cst_negative_size_budget), _d6_]];
    return caml_call1(Core[253], _d7_);
   }
   function create(size_budget, info, param){
    if(size_budget)
     var v = size_budget[1], size_budget$0 = validate_size_budget(v);
    else
     var size_budget$0 = 0;
    var
     t =
       create_internal(size_budget$0, info, caml_call2(Core_Queue[61], 0, 0));
    caml_call2(Async_kernel_Ivar[14], t[5], 0);
    if(check_invariant[1]) invariant$0(t);
    return [0, t, t];
   }
   function update_pushback(t){
    var _d2_ = t[4], _d3_ = length(t);
    if(! caml_call2(Async_kernel_Import[2], _d3_, _d2_) && ! is_closed(t)){
     var
      _d4_ = caml_call1(Async_kernel_Ivar[17], t[5]),
      _d5_ = _d4_ ? (t[5] = caml_call1(Async_kernel_Ivar[12], 0), 0) : _d4_;
     return _d5_;
    }
    return caml_call2(Async_kernel_Ivar[15], t[5], 0);
   }
   function close(t){
    if(show_debug_messages[1]){
     var
      _dZ_ =
        function(x_078){
         function _d1_(param){return _at_;}
         return sexp_of_pipe(function(param){return _au_;}, _d1_, x_078);
        };
     caml_call3(Async_kernel_Import[14], cst_close, t, _dZ_);
    }
    if(check_invariant[1]) invariant$0(t);
    var _d0_ = 1 - is_closed(t);
    if(! _d0_) return _d0_;
    caml_call2(Async_kernel_Ivar[14], t[9], 0);
    if(is_empty(t)){
     caml_call2(Core_Queue[16], t[8], fill_with_eof);
     caml_call1(Core_Queue[47], t[8]);
    }
    return update_pushback(t);
   }
   function close_read(t){
    if(show_debug_messages[1]){
     var
      _dV_ =
        function(x_079){
         function _dY_(param){return _av_;}
         return sexp_of_pipe(function(param){return _aw_;}, _dY_, x_079);
        };
     caml_call3(Async_kernel_Import[14], cst_close_read, t, _dV_);
    }
    if(check_invariant[1]) invariant$0(t);
    var _dW_ = 1 - is_read_closed(t);
    if(! _dW_) return _dW_;
    caml_call2(Async_kernel_Ivar[14], t[10], 0);
    function _dX_(flush){return fill(flush, -402004920);}
    caml_call2(Core_Queue[16], t[7], _dX_);
    caml_call1(Core_Queue[47], t[7]);
    caml_call1(Core_Queue[47], t[3]);
    update_pushback(t);
    return close(t);
   }
   function create_reader_not_close_on_exc(size_budget, f){
    var match = create(size_budget, 0, 0), w = match[2], r = match[1];
    function _dT_(param){return close(w);}
    var _dU_ = caml_call1(f, w);
    caml_call2(Async_kernel_Deferred_std[11], _dU_, _dT_);
    return r;
   }
   function create_reader(size_budget, close_on_exception, f){
    if(! close_on_exception)
     return create_reader_not_close_on_exc(size_budget, f);
    var match = create(size_budget, 0, 0), w = match[2], r = match[1];
    function _dQ_(param){
     close(w);
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    }
    function _dR_(param){return caml_call1(f, w);}
    var
     _dS_ =
       caml_call8
        (Async_kernel_Monitor[23], 0, 0, 0, 0, _ay_, _ax_, _dR_, _dQ_);
    caml_call1(Async_kernel_Deferred_std[8], _dS_);
    return r;
   }
   function create_writer(size_budget, f){
    var match = create(size_budget, 0, 0), w = match[2], r = match[1];
    function _dN_(param){
     close_read(r);
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    }
    function _dO_(param){return caml_call1(f, r);}
    var
     _dP_ =
       caml_call8
        (Async_kernel_Monitor[23], 0, 0, 0, 0, _aA_, _az_, _dO_, _dN_);
    caml_call1(Async_kernel_Deferred_std[8], _dP_);
    return w;
   }
   function values_were_read(t, consumer){
    caml_call2(Core_Option[41], consumer, start);
    for(;;){
     var match = caml_call1(Core_Queue[45], t[7]);
     if(! match) return;
     var
      flush = match[1],
      _dK_ = caml_call2(Async_kernel_Import[1], t[6], flush[1]);
     if(! _dK_) return _dK_;
     caml_call1(Core_Queue[44], t[7]);
     if(consumer){
      var
       consumer$0 = consumer[1],
       _dL_ =
         function(flush){
           return function(flush_result){return fill(flush, flush_result);};
          }
          (flush),
       _dM_ = values_sent_downstream_and_flu(consumer$0);
      caml_call2(Async_kernel_Deferred_std[11], _dM_, _dL_);
     }
     else
      fill(flush, 17724);
    }
   }
   function consume_one(t, consumer){
    var _dJ_ = length(t);
    if(! caml_call2(Async_kernel_Import[1], _dJ_, 1))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
    var result = caml_call1(Core_Queue[44], t[3]);
    t[6] = t[6] + 1 | 0;
    values_were_read(t, consumer);
    update_pushback(t);
    return result;
   }
   function consume(t, max_queue_length, consumer){
    if(! caml_call2(Async_kernel_Import[1], max_queue_length, 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aC_], 1);
    var _dI_ = length(t);
    if(caml_call2(Async_kernel_Import[1], max_queue_length, _dI_)){
     var result = t[3];
     t[3] = caml_call2(Core_Queue[61], 0, 0);
     var _dH_ = caml_call1(Core_Queue[14], result);
     t[6] = t[6] + _dH_ | 0;
     values_were_read(t, consumer);
     update_pushback(t);
     return result;
    }
    t[6] = t[6] + max_queue_length | 0;
    values_were_read(t, consumer);
    var result$0 = caml_call2(Core_Queue[61], [0, max_queue_length], 0);
    caml_call4(Core_Queue[64], t[3], result$0, [0, max_queue_length], 0);
    update_pushback(t);
    return result$0;
   }
   function set_size_budget$0(t, size_budget){
    var size_budget$0 = validate_size_budget(size_budget);
    t[4] = size_budget$0;
    return update_pushback(t);
   }
   function start_write(x_081){
    if(show_debug_messages[1]){
     var
      _dz_ =
        function(x_080){
         function _dG_(param){return _aD_;}
         return sexp_of_pipe(function(param){return _aE_;}, _dG_, x_080);
        };
     caml_call3(Async_kernel_Import[14], cst_write, x_081, _dz_);
    }
    if(check_invariant[1]) invariant$0(x_081);
    var _dA_ = is_closed(x_081);
    if(! _dA_) return _dA_;
    var _dB_ = 0, _dC_ = 0;
    function _dD_(param){return _aF_;}
    var
     _dE_ =
       [0,
        [1,
         [0,
          _aH_,
          [0, sexp_of_pipe(function(param){return _aG_;}, _dD_, x_081), _dC_]]],
        _dB_],
     _dF_ =
       [1,
        [0, caml_call1(Sexplib0_Sexp_conv[7], cst_write_to_closed_pipe), _dE_]];
    return caml_call1(Core[253], _dF_);
   }
   function finish_write(t){
    for(;;){
     if(! caml_call1(Core_Queue[15], t[8]) && ! is_empty(t)){
      var
       blocked_read = caml_call1(Core_Queue[44], t[8]),
       consumer = blocked_read[2],
       match = blocked_read[1];
      switch(match[0]){
        case 0:
         var ivar = match[1];
         caml_call2(Async_kernel_Ivar[14], ivar, 17724);
         break;
        case 1:
         var ivar$0 = match[1], _dx_ = [0, 17724, consume_one(t, consumer)];
         caml_call2(Async_kernel_Ivar[14], ivar$0, _dx_);
         break;
        default:
         var
          ivar$1 = match[2],
          max_queue_length = match[1],
          _dy_ = [0, 17724, consume(t, max_queue_length, consumer)];
         caml_call2(Async_kernel_Ivar[14], ivar$1, _dy_);
      }
      continue;
     }
     return update_pushback(t);
    }
   }
   function transfer_in_without_pushback(t, from){
    start_write(t);
    caml_call4(Core_Queue[64], from, t[3], 0, 0);
    return finish_write(t);
   }
   function transfer_in(t, from){
    transfer_in_without_pushback(t, from);
    return pushback$1(t);
   }
   function write(t, q){return transfer_in(t, q);}
   function write_without_pushback(t, value){
    start_write(t);
    caml_call2(Core_Queue[41], t[3], value);
    return finish_write(t);
   }
   function write$0(t, value){
    write_without_pushback(t, value);
    return pushback$1(t);
   }
   function write_when_ready(t, f){
    function _dv_(param){
     return is_closed(t)
             ? -1025106484
             : [0,
               17724,
               caml_call1
                (f, function(x){return write_without_pushback(t, x);})];
    }
    var _dw_ = pushback$1(t);
    return caml_call2(Async_kernel_Deferred_std[5][2], _dw_, _dv_);
   }
   function write_if_open(t, x){
    return is_closed(t)
            ? caml_call1(Async_kernel_Deferred_std[10], 0)
            : write$0(t, x);
   }
   function write_without_pushback_if_open(t, x){
    var _du_ = 1 - is_closed(t);
    return _du_ ? write_without_pushback(t, x) : _du_;
   }
   function ensure_consumer_matches(consumer, x_083){
    if(! consumer) return;
    var
     consumer$0 = consumer[1],
     _do_ = caml_call2(Async_kernel_Import[6], x_083[1], consumer$0[1]);
    if(! _do_) return _do_;
    var
     _dp_ = 0,
     _dq_ = 0,
     _dr_ =
       [0,
        [1,
         [0,
          _aJ_,
          [0, sexp_of_t$3(function(param){return _aI_;}, x_083), _dq_]]],
        _dp_],
     _ds_ = [0, [1, [0, _aK_, [0, sexp_of_t$0(consumer$0), 0]]], _dr_],
     _dt_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Attempt_to_use_consumer_wi),
         _ds_]];
    return caml_call1(Core[253], _dt_);
   }
   function start_read(consumer, t, label){
    if(show_debug_messages[1]){
     var
      _dm_ =
        function(x_084){
         function _dn_(param){return _aL_;}
         return sexp_of_pipe(function(param){return _aM_;}, _dn_, x_084);
        };
     caml_call3(Async_kernel_Import[14], label, t, _dm_);
    }
    if(check_invariant[1]) invariant$0(t);
    return ensure_consumer_matches(consumer, t);
   }
   function gen_read_now(consumer, t, consume){
    start_read(consumer, t, cst_read_now);
    if(is_empty(t)) return is_closed(t) ? 3456156 : -445537353;
    if(caml_call1(Core_Queue[15], t[8]))
     return [0, 17724, caml_call2(consume, t, consumer)];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
   }
   function get_max_queue_length(max_queue_length){
    if(! max_queue_length) return Core_Int[41];
    var max_queue_length$0 = max_queue_length[1];
    if(caml_call2(Async_kernel_Import[2], max_queue_length$0, 0)){
     var
      _dk_ =
        [0,
         [1, [0, _aO_, [0, caml_call1(Core[356], max_queue_length$0), 0]]],
         0],
      _dl_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_max_queue_length_0), _dk_]];
     caml_call1(Core[253], _dl_);
    }
    return max_queue_length$0;
   }
   function read_now(consumer, max_queue_length, t){
    var max_queue_length$0 = get_max_queue_length(max_queue_length);
    return gen_read_now
            (consumer,
             t,
             function(t, consumer){
              return consume(t, max_queue_length$0, consumer);
             });
   }
   function read_now$0(consumer, t){
    return gen_read_now(consumer, t, consume_one);
   }
   function peek(t){return caml_call1(Core_Queue[45], t[3]);}
   function clear(t){read_now(0, 0, t); return 0;}
   function read(consumer, max_queue_length, t){
    var max_queue_length$0 = get_max_queue_length(max_queue_length);
    start_read(consumer, t, cst_read);
    var r = read_now(consumer, [0, max_queue_length$0], t);
    if(typeof r === "number" && 3456156 > r){
     var
      _dj_ =
        function(ivar){
         return caml_call2
                 (Core_Queue[41],
                  t[8],
                  [0, [2, max_queue_length$0, ivar], consumer]);
        };
     return caml_call1(Async_kernel_Deferred[3], _dj_);
    }
    return caml_call1(Async_kernel_Deferred_std[10], r);
   }
   function read$0(consumer, t){
    start_read(consumer, t, cst_read$0);
    if(is_empty(t)){
     if(is_closed(t))
      return caml_call1(Async_kernel_Deferred_std[10], 3456156);
     var
      _dh_ =
        function(ivar){
         return caml_call2(Core_Queue[41], t[8], [0, [1, ivar], consumer]);
        };
     return caml_call1(Async_kernel_Deferred[3], _dh_);
    }
    if(! caml_call1(Core_Queue[15], t[8]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
    var _di_ = [0, 17724, consume_one(t, consumer)];
    return caml_call1(Async_kernel_Deferred_std[10], _di_);
   }
   function read_exn(consumer, t){
    function _de_(param){
     if(typeof param === "number"){
      var
       _dg_ =
         caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_read_exn_received_EOF);
      return caml_call1(Core[253], _dg_);
     }
     var value = param[2];
     return value;
    }
    var _df_ = read$0(consumer, t);
    return caml_call2(Async_kernel_Deferred_std[5][2], _df_, _de_);
   }
   function values_available(t){
    start_read(0, t, cst_values_available);
    if(! is_empty(t)) return caml_call1(Async_kernel_Deferred_std[10], 17724);
    if(is_closed(t))
     return caml_call1(Async_kernel_Deferred_std[10], 3456156);
    var match = caml_call1(Core_Queue[62], t[8]);
    if(match){
     var _db_ = match[1], _dc_ = _db_[1];
     if(0 === _dc_[0] && ! _db_[2]){
      var ivar = _dc_[1];
      return caml_call1(Async_kernel_Ivar[18], ivar);
     }
    }
    function _dd_(ivar){
     return caml_call2(Core_Queue[41], t[8], [0, [0, ivar], 0]);
    }
    return caml_call1(Async_kernel_Deferred[3], _dd_);
   }
   function read_choice(t){
    function _c$_(param){return read_now$0(0, t);}
    var _da_ = values_available(t);
    return caml_call2(Async_kernel_Deferred_std[6], _da_, _c$_);
   }
   function read_choice_single_consumer_ex(t, here){
    function _c7_(x){
     if(typeof x === "number" && 3456156 > x){
      var
       _c9_ =
         [0,
          [1,
           [0, _aQ_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
          0],
       _c__ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_read_choice_single_co),
           _c9_]];
      return caml_call1(Core[253], _c__);
     }
     return x;
    }
    var _c8_ = read_choice(t);
    return caml_call2(Async_kernel_Deferred[26][1], _c8_, _c7_);
   }
   function read_exactly(consumer, t, num_values){
    start_read(consumer, t, cst_read_exactly);
    if(caml_call2(Async_kernel_Import[2], num_values, 0)){
     var
      _c1_ = [0, [1, [0, _aR_, [0, caml_call1(Core[356], num_values), 0]]], 0],
      _c2_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_read_exactly_got_num_),
          _c1_]];
     caml_call1(Core[253], _c2_);
    }
    function _c3_(finish){
     var result = caml_call2(Core_Queue[61], 0, 0);
     function loop(param){
      var already_read = caml_call1(Core_Queue[14], result);
      if(! caml_call2(Async_kernel_Import[2], already_read, num_values))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
      if(caml_call2(Async_kernel_Import[3], already_read, num_values))
       return caml_call2
               (Async_kernel_Ivar[14], finish, [0, -876407060, result]);
      function _c4_(param){
       if(typeof param === "number"){
        var
         _c6_ =
           caml_call2(Async_kernel_Import[3], already_read, 0)
            ? 3456156
            : [0, 287952037, result];
        return caml_call2(Async_kernel_Ivar[14], finish, _c6_);
       }
       var q = param[2];
       caml_call4(Core_Queue[64], q, result, 0, 0);
       return loop(0);
      }
      var _c5_ = read(consumer, [0, num_values - already_read | 0], t);
      return caml_call2(Async_kernel_Deferred_std[1], _c5_, _c4_);
     }
     return loop(0);
    }
    return caml_call1(Async_kernel_Deferred[3], _c3_);
   }
   function downstream_flushed(t){
    if(is_empty(t))
     return caml_call1(Core_List[8], t[11])
             ? caml_call1(Async_kernel_Deferred_std[10], 17724)
             : combine
               (caml_call2
                 (Core_List[72], t[11], values_sent_downstream_and_flu));
    function _cZ_(ready){
     var _c0_ = length(t);
     return caml_call2(Core_Queue[41], t[7], [0, t[6] + _c0_ | 0, ready]);
    }
    return caml_call1(Async_kernel_Deferred[3], _cZ_);
   }
   function upstream_flushed(t){
    if(caml_call1(Core_Bag[6], t[12])) return downstream_flushed(t);
    function _cX_(f){return caml_call1(f, 0);}
    var _cY_ = caml_call1(Core_Bag[17], t[12]);
    return combine(caml_call2(Core_List[72], _cY_, _cX_));
   }
   function add_consumer(t, downstream_flushed){
    var
     pipe_id = t[1],
     consumer = [0, pipe_id, -758792467, downstream_flushed];
    t[11] = [0, consumer, t[11]];
    return consumer;
   }
   function consumer$1(param){var t = param[1]; return t[2];}
   function create$0(upstream, downstream){
    function upstream_flushed$0(param){return upstream_flushed(upstream);}
    var _cW_ = caml_call2(Core_Bag[23], downstream[12], upstream_flushed$0);
    return [0,
            [0,
             downstream,
             add_consumer
              (upstream,
               function(param){return downstream_flushed(downstream);}),
             _cW_]];
   }
   function sexp_of_t$5(param){
    if(typeof param === "number") return param ? _aT_ : _aU_;
    var arg0_085 = param[1], res0_086 = sexp_of_t$0(arg0_085);
    return [1, [0, _aV_, [0, res0_086, 0]]];
   }
   var Flushed = [0, sexp_of_t$5];
   function fold_gen(read_now, opt, t, init, f){
    if(opt) var sth = opt[1], flushed = sth; else var flushed = 1;
    if(typeof flushed === "number")
     var
      consumer =
        flushed
         ? 0
         : [0,
           add_consumer
            (t,
             function(param){
              return caml_call1(Async_kernel_Deferred_std[10], 17724);
             })];
    else
     var consumer$0 = flushed[1], consumer = [0, consumer$0];
    if(check_invariant[1]) invariant$0(t);
    ensure_consumer_matches(consumer, t);
    function _cR_(finished){
     function _cS_(param){
      function loop(b){
       var match = caml_call2(read_now, consumer, t);
       if(typeof match !== "number"){
        var v = match[2];
        return caml_call3(f, b, v, continue$0);
       }
       if(3456156 <= match)
        return caml_call2(Async_kernel_Ivar[14], finished, b);
       function _cU_(param){return loop(b);}
       var _cV_ = values_available(t);
       return caml_call2(Async_kernel_Deferred_std[1], _cV_, _cU_);
      }
      function continue$0(b){
       caml_call2(Core_Option[41], consumer, values_sent_downstream);
       return loop(b);
      }
      return loop(init);
     }
     var _cT_ = caml_call1(Async_kernel_Deferred_std[10], 0);
     return caml_call2(Async_kernel_Deferred_std[1], _cT_, _cS_);
    }
    return caml_call1(Async_kernel_Deferred[3], _cR_);
   }
   function fold(flushed, max_queue_length, t, init, f){
    function _cN_(b, q, loop){
     var _cQ_ = caml_call2(f, b, q);
     return caml_call2(Async_kernel_Deferred_std[1], _cQ_, loop);
    }
    return fold_gen
            (function(_cO_){
              return function(_cP_){
               return read_now(_cO_, max_queue_length, _cP_);};
             },
             flushed,
             t,
             init,
             _cN_);
   }
   function fold$0(flushed, t, init, f){
    return fold_gen
            (read_now$0,
             flushed,
             t,
             init,
             function(b, a, loop){
              var _cM_ = caml_call2(f, b, a);
              return caml_call2(Async_kernel_Deferred_std[1], _cM_, loop);
             });
   }
   function fold_without_pushback(consumer, t, init, f){
    function _cK_(b, a, loop){return caml_call1(loop, caml_call2(f, b, a));}
    if(consumer) var c = consumer[1], _cL_ = [0, [0, c]]; else var _cL_ = 0;
    return fold_gen(read_now$0, _cL_, t, init, _cK_);
   }
   function with_error_to_current_monitor(opt, f, a){
    if(opt)
     var sth = opt[1], continue_on_error = sth;
    else
     var continue_on_error = 0;
    if(! continue_on_error) return caml_call1(f, a);
    function _cF_(param){
     if(0 === param[0]) return 0;
     var
      exn = param[1],
      _cI_ = caml_call1(Async_kernel_Monitor[13], exn),
      _cJ_ = caml_call1(Async_kernel_Monitor[5], 0);
     return caml_call3(Async_kernel_Monitor[15], _cJ_, 0, _cI_);
    }
    function _cG_(param){return caml_call1(f, a);}
    var
     _cH_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _aX_, _aW_, _cG_);
    return caml_call2(Async_kernel_Deferred_std[5][2], _cH_, _cF_);
   }
   function iter(continue_on_error, flushed, max_queue_length, t, f){
    return fold
            (flushed,
             max_queue_length,
             t,
             0,
             function(param, q){
              return with_error_to_current_monitor(continue_on_error, f, q);
             });
   }
   function iter$0(continue_on_error, flushed, t, f){
    return fold_gen
            (read_now$0,
             flushed,
             t,
             0,
             function(param, a, loop){
              function _cD_(param){return caml_call1(loop, 0);}
              var
               _cE_ = with_error_to_current_monitor(continue_on_error, f, a);
              return caml_call2(Async_kernel_Deferred_std[1], _cE_, _cD_);
             });
   }
   function iter_without_pushback(consumer, opt, max_iterations_per_job, t, f){
    if(opt)
     var sth = opt[1], continue_on_error = sth;
    else
     var continue_on_error = 0;
    ensure_consumer_matches(consumer, t);
    if(max_iterations_per_job){
     var max_iterations_per_job$0 = max_iterations_per_job[1];
     if(caml_call2(Async_kernel_Import[2], max_iterations_per_job$0, 0)){
      var
       _ct_ =
         [0,
          [1,
           [0, _aY_, [0, caml_call1(Core[356], max_iterations_per_job$0), 0]]],
          0],
       _cu_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_iter_without_pushback_got_),
           _ct_]];
      caml_call1(Core[253], _cu_);
     }
     var max_iterations_per_job$1 = max_iterations_per_job$0;
    }
    else
     var max_iterations_per_job$1 = Core_Int[41];
    var
     f$0 =
       continue_on_error
        ? function
         (a){
          try{caml_call1(f, a); return;}
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _cC_ = caml_call1(Async_kernel_Monitor[5], 0);
           return caml_call3(Async_kernel_Monitor[15], _cC_, 0, exn);
          }
         }
        : f;
    function _cv_(finished){
     function _cw_(param){
      function start(param){
       var remaining = max_iterations_per_job$1;
       for(;;){
        if(caml_call2(Async_kernel_Import[3], remaining, 0)){
         var
          _cy_ = function(param){return start(0);},
          _cz_ = caml_call1(Async_kernel_Deferred_std[10], 0);
         return caml_call2(Async_kernel_Deferred_std[1], _cz_, _cy_);
        }
        var match = read_now$0(consumer, t);
        if(typeof match === "number"){
         if(3456156 <= match)
          return caml_call2(Async_kernel_Ivar[14], finished, 0);
         var
          _cA_ = function(param){return start(0);},
          _cB_ = values_available(t);
         return caml_call2(Async_kernel_Deferred_std[1], _cB_, _cA_);
        }
        var a = match[2];
        caml_call1(f$0, a);
        var remaining$0 = remaining - 1 | 0, remaining = remaining$0;
       }
      }
      return start(0);
     }
     var _cx_ = caml_call1(Async_kernel_Deferred_std[10], 0);
     return caml_call2(Async_kernel_Deferred_std[1], _cx_, _cw_);
    }
    return caml_call1(Async_kernel_Deferred[3], _cv_);
   }
   function drain(t){
    return iter
            (0,
             0,
             0,
             t,
             function(param){
              return caml_call1(Async_kernel_Deferred_std[10], 0);
             });
   }
   function drain_and_count(t){
    return fold
            (0,
             0,
             t,
             0,
             function(sum, q){
              var _cs_ = sum + caml_call1(Core_Queue[14], q) | 0;
              return caml_call1(Async_kernel_Deferred_std[10], _cs_);
             });
   }
   function read_all(input){
    var result = caml_call2(Core_Queue[61], 0, 0);
    function _cq_(param){return result;}
    var
     _cr_ =
       iter
        (0,
         0,
         0,
         input,
         function(q){
          caml_call4(Core_Queue[64], q, result, 0, 0);
          return caml_call1(Async_kernel_Deferred_std[10], 0);
         });
    return caml_call2(Async_kernel_Deferred_std[5][2], _cr_, _cq_);
   }
   function to_list(r){
    var _co_ = Core_Queue[26], _cp_ = read_all(r);
    return caml_call2(Async_kernel_Deferred_std[4], _cp_, _co_);
   }
   function to_stream_deprecated(t){
    function _cl_(tail){
     function _cm_(param){return caml_call1(Async_kernel_Tail[4], tail);}
     var
      _cn_ =
        iter_without_pushback
         (0,
          0,
          0,
          t,
          function(x){return caml_call2(Async_kernel_Tail[3], tail, x);});
     return caml_call2(Async_kernel_Deferred_std[1], _cn_, _cm_);
    }
    return caml_call1(Async_kernel_Async_stream[2], _cl_);
   }
   function of_stream_deprecated(s){
    var
     match = create(0, 0, 0),
     w = match[2],
     r = match[1],
     q = caml_call2(Core_Queue[61], 0, 0);
    function transfer(param){
     var _cj_ = 1 - caml_call1(Core_Queue[15], q);
     if(! _cj_) return _cj_;
     var _ck_ = write(w, q);
     return caml_call1(Async_kernel_Deferred_std[8], _ck_);
    }
    function loop$0(counter, s){
     if(is_closed(w))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
     var
      next_deferred = caml_call1(Async_kernel_Async_stream[3], s),
      match = caml_call1(Async_kernel_Deferred[5], next_deferred);
     if(! match){
      transfer(0);
      return caml_call2
              (Async_kernel_Deferred_std[11],
               next_deferred,
               check_closed_loop_next);
     }
     var next = match[1];
     if(counter >= 50) return caml_trampoline_return(loop_next$0, [0, next]);
     var counter$0 = counter + 1 | 0;
     return loop_next$0(counter$0, next);
    }
    function loop_next$0(counter, param){
     if(! param){transfer(0); return close(w);}
     var s = param[2], x = param[1];
     caml_call2(Core_Queue[41], q, x);
     if(counter >= 50) return caml_trampoline_return(loop$0, [0, s]);
     var counter$0 = counter + 1 | 0;
     return loop$0(counter$0, s);
    }
    function loop(s){return caml_trampoline(loop$0(0, s));}
    function loop_next(param){return caml_trampoline(loop_next$0(0, param));}
    function check_closed_loop_next(next){
     var _ci_ = 1 - is_closed(w);
     return _ci_ ? loop_next(next) : _ci_;
    }
    loop(s);
    return r;
   }
   function transfer_gen(read_now, write, input, output, f){
    if(check_invariant[1]){invariant$0(input); invariant$0(output);}
    var link = create$0(input, output), consumer = consumer$1(link);
    function unlink(param){
     var t = link[1];
     return caml_call2(Core_Bag[26], t[1][12], t[3]);
    }
    function _b5_(result){
     function _b6_(param){
      function output_closed(param){
       close_read(input);
       unlink(0);
       return caml_call2(Async_kernel_Ivar[14], result, 0);
      }
      function loop(param){
       if(is_closed(output)) return output_closed(0);
       var match = caml_call2(read_now, [0, consumer], input);
       if(typeof match !== "number"){
        var x = match[2];
        return caml_call2(f, x, continue$0);
       }
       if(3456156 <= match){
        unlink(0);
        return caml_call2(Async_kernel_Ivar[14], result, 0);
       }
       function _b9_(param){return loop(0);}
       var _b__ = 0;
       function _b$_(_ch_){return 0;}
       var
        _ca_ = closed(output),
        _cb_ = [0, caml_call2(Async_kernel_Deferred_std[6], _ca_, _b$_), _b__];
       function _cc_(_cg_){return 0;}
       var
        _cd_ = values_available(input),
        _ce_ = [0, caml_call2(Async_kernel_Deferred_std[6], _cd_, _cc_), _cb_],
        _cf_ = caml_call1(Async_kernel_Deferred_std[7], _ce_);
       return caml_call2(Async_kernel_Deferred_std[1], _cf_, _b9_);
      }
      function continue$0(y){
       if(is_closed(output)) return output_closed(0);
       var pushback = caml_call2(write, output, y);
       values_sent_downstream(consumer);
       function _b8_(param){return loop(0);}
       return caml_call2(Async_kernel_Deferred_std[1], pushback, _b8_);
      }
      return loop(0);
     }
     var _b7_ = caml_call1(Async_kernel_Deferred_std[10], 0);
     return caml_call2(Async_kernel_Deferred_std[1], _b7_, _b6_);
    }
    return caml_call1(Async_kernel_Deferred[3], _b5_);
   }
   function transfer(max_queue_length, input, output, f){
    function _b1_(q, k){
     var _b4_ = caml_call1(f, q);
     return caml_call2(Async_kernel_Deferred_std[1], _b4_, k);
    }
    return transfer_gen
            (function(_b2_){
              return function(_b3_){
               return read_now(_b2_, max_queue_length, _b3_);};
             },
             write,
             input,
             output,
             _b1_);
   }
   function transfer$0(input, output, f){
    return transfer_gen
            (read_now$0,
             write$0,
             input,
             output,
             function(a, k){return caml_call1(k, caml_call1(f, a));});
   }
   function transfer_id(max_queue_length, input, output){
    function _bY_(q, k){return caml_call1(k, q);}
    return transfer_gen
            (function(_bZ_){
              return function(_b0_){
               return read_now(_bZ_, max_queue_length, _b0_);};
             },
             write,
             input,
             output,
             _bY_);
   }
   function map_gen(read, write, input, f){
    function _bV_(info){
     return [1, [0, _a0_, [0, caml_call1(Core_Sexp[90], info), 0]]];
    }
    var
     info = caml_call2(Core_Option[29], input[2], _bV_),
     match = create(0, info, 0),
     output = match[2],
     result = match[1];
    function _bW_(param){return close(output);}
    var _bX_ = transfer_gen(read, write, input, output, f);
    caml_call2(Async_kernel_Deferred_std[11], _bX_, _bW_);
    return result;
   }
   function map(max_queue_length, input, f){
    function _bR_(q, k){
     var _bU_ = caml_call1(f, q);
     return caml_call2(Async_kernel_Deferred_std[1], _bU_, k);
    }
    return map_gen
            (function(_bS_){
              return function(_bT_){
               return read_now(_bS_, max_queue_length, _bT_);};
             },
             write,
             input,
             _bR_);
   }
   function map$0(input, f){
    return map_gen
            (read_now$0,
             write$0,
             input,
             function(a, k){return caml_call1(k, caml_call1(f, a));});
   }
   function concat_map_list(max_queue_length, input, f){
    function _bO_(q, k){
     return caml_call1(k, caml_call2(Core_Queue[51], q, f));
    }
    return map_gen
            (function(_bP_){
              return function(_bQ_){
               return read_now(_bP_, max_queue_length, _bQ_);};
             },
             write,
             input,
             _bO_);
   }
   function filter_map(max_queue_length, input, f){
    return map
            (max_queue_length,
             input,
             function(q){
              return caml_call3(Async_kernel_Deferred_queue[20], 0, q, f);
             });
   }
   function filter_map$0(max_queue_length, input, f){
    function _bK_(q, k){
     function _bN_(x){return is_read_closed(input) ? 0 : caml_call1(f, x);}
     return caml_call1(k, caml_call2(Core_Queue[53], q, _bN_));
    }
    return map_gen
            (function(_bL_){
              return function(_bM_){
               return read_now(_bL_, max_queue_length, _bM_);};
             },
             write,
             input,
             _bK_);
   }
   function folding_filter_map(max_queue_length, input, init, f){
    var accum = [0, init];
    return filter_map
            (max_queue_length,
             input,
             function(x){
              function _bI_(param){
               var x = param[2], a = param[1];
               accum[1] = a;
               return x;
              }
              var _bJ_ = caml_call2(f, accum[1], x);
              return caml_call2(Async_kernel_Deferred_std[5][2], _bJ_, _bI_);
             });
   }
   function folding_filter_map$0(max_queue_length, input, init, f){
    var accum = [0, init];
    return filter_map$0
            (max_queue_length,
             input,
             function(x){
              var
               match = caml_call2(f, accum[1], x),
               x$0 = match[2],
               a = match[1];
              accum[1] = a;
              return x$0;
             });
   }
   function folding_map(max_queue_length, input, init, f){
    return folding_filter_map$0
            (max_queue_length,
             input,
             init,
             function(accum, a){
              var
               match = caml_call2(f, accum, a),
               b = match[2],
               accum$0 = match[1];
              return [0, accum$0, [0, b]];
             });
   }
   function filter(input, f){
    return filter_map$0
            (0, input, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function of_list(l){
    var t = create_internal(0, 0, caml_call1(Core_Queue[38], l));
    caml_call2(Async_kernel_Ivar[14], t[9], 0);
    update_pushback(t);
    return t;
   }
   function empty(param){return of_list(0);}
   function singleton(x){
    var match = create(0, 0, 0), writer = match[2], reader = match[1];
    write_without_pushback(writer, x);
    close(writer);
    return reader;
   }
   function unfold(s, f){
    function symbol(d, f){
     var match = caml_call1(Async_kernel_Deferred[5], d);
     if(! match) return caml_call2(Async_kernel_Deferred_std[3], d, f);
     var x = match[1];
     return caml_call1(f, x);
    }
    return create_reader
            (0,
             0,
             function(writer){
              function loop(s){
               function _bG_(param){
                if(! param)
                 return caml_call1(Async_kernel_Deferred_std[10], 0);
                var match = param[1], s = match[2], a = match[1];
                if(is_closed(writer))
                 return caml_call1(Async_kernel_Deferred_std[10], 0);
                function _bH_(param){return loop(s);}
                return symbol(write$0(writer, a), _bH_);
               }
               return symbol(caml_call1(f, s), _bG_);
              }
              return loop(s);
             });
   }
   function of_sequence(sequence){
    return create_reader
            (0,
             0,
             function(writer){
              function loop(sequence$1){
               if
                (!
                 is_closed(writer)
                 && ! caml_call1(Core_Sequence[16], sequence$1)){
                start_write(writer);
                var
                 _bD_ = length(writer),
                 i$1 = (1 + writer[4] | 0) - _bD_ | 0,
                 sequence = sequence$1,
                 i = i$1;
                for(;;){
                 if(! caml_call2(Async_kernel_Import[2], i, 0)){
                  var match = caml_call1(Core_Sequence[47], sequence);
                  if(match){
                   var
                    match$0 = match[1],
                    sequence$0 = match$0[2],
                    a = match$0[1];
                   caml_call2(Core_Queue[41], writer[3], a);
                   var i$0 = i - 1 | 0, sequence = sequence$0, i = i$0;
                   continue;
                  }
                 }
                 finish_write(writer);
                 var
                  _bE_ = function(param){return loop(sequence);},
                  _bF_ = pushback$1(writer);
                 return caml_call2
                         (Async_kernel_Deferred_std[5][1], _bF_, _bE_);
                }
               }
               return caml_call1(Async_kernel_Deferred_std[10], 0);
              }
              return loop(sequence);
             });
   }
   function to_sequence(t){
    function _bC_(param){
     var match = read_now$0(0, t);
     if(typeof match === "number")
      return 3456156 <= match ? 0 : [0, [0, [1, values_available(t)], 0]];
     var a = match[2];
     return [0, [0, [0, a], 0]];
    }
    return caml_call2(Core_Sequence[49], 0, _bC_);
   }
   function interleave_pipe(inputs){
    var
     match =
       create
        (0, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Pipe_interleave)], 0),
     output_writer = match[2],
     output = match[1],
     num_pipes_remaining = [0, 1];
    function decr_num_pipes_remaining(param){
     num_pipes_remaining[1] += -1;
     var _bB_ = caml_call2(Async_kernel_Import[3], num_pipes_remaining[1], 0);
     return _bB_ ? close(output_writer) : _bB_;
    }
    function _bv_(param){return decr_num_pipes_remaining(0);}
    var
     _bw_ =
       iter_without_pushback
        (0,
         0,
         0,
         inputs,
         function(input){
          num_pipes_remaining[1]++;
          function _by_(param){return decr_num_pipes_remaining(0);}
          var
           _bz_ = transfer_id(0, input, output_writer),
           _bA_ = caml_call2(Async_kernel_Deferred_std[5][2], _bz_, _by_);
          return caml_call1(Async_kernel_Deferred_std[8], _bA_);
         }),
     _bx_ = caml_call2(Async_kernel_Deferred_std[5][2], _bw_, _bv_);
    caml_call1(Async_kernel_Deferred_std[8], _bx_);
    return output;
   }
   function interleave(inputs){
    if(check_invariant[1]) caml_call2(Core_List[9], inputs, invariant$0);
    return interleave_pipe(of_list(inputs));
   }
   function merge(inputs, compare){
    if(! inputs) return empty(0);
    if(inputs[2]){
     var
      match = create(0, 0, 0),
      w = match[2],
      r = match[1],
      _bf_ =
        function(param){return caml_call2(Core_List[9], inputs, close_read);},
      _bg_ = closed(w);
     caml_call2(Async_kernel_Deferred_std[11], _bg_, _bf_);
     var
      _bh_ = 0,
      _bi_ =
        function(param, _bu_){
         var a2 = _bu_[1], a1 = param[1];
         return caml_call2(compare, a1, a2);
        },
      heap = caml_call3(Pairing_heap[20], 0, _bi_, _bh_),
      handle_read =
        function(input, eof_or_ok){
         if(typeof eof_or_ok === "number") return 0;
         var v = eof_or_ok[2];
         return caml_call2(Pairing_heap[25], heap, [0, v, input]);
        },
      pop_heap_and_loop =
        function(param){
         for(;;){
          var match = caml_call1(Pairing_heap[28], heap);
          if(! match) return close(w);
          var
           match$0 = match[1],
           input = match$0[2],
           v = match$0[1],
           _bm_ = 1 - is_closed(w);
          if(! _bm_) return _bm_;
          write_without_pushback(w, v);
          var _bn_ = caml_call1(Pairing_heap[3], heap);
          if(caml_call2(Async_kernel_Import[3], _bn_, 0)){
           var
            _bo_ = function(param){return close(w);},
            _bp_ = transfer_id(0, input, w);
           return caml_call2(Async_kernel_Deferred_std[11], _bp_, _bo_);
          }
          var x = read_now$0(0, input);
          if(typeof x === "number" && 3456156 > x){
           var
            _bq_ =
              function(param){
               function _bs_(x){
                handle_read(input, x);
                return pop_heap_and_loop(0);
               }
               var _bt_ = read$0(0, input);
               return caml_call2(Async_kernel_Deferred_std[1], _bt_, _bs_);
              },
            _br_ = pushback$1(w);
           return caml_call2(Async_kernel_Deferred_std[1], _br_, _bq_);
          }
          handle_read(input, x);
         }
        },
      _bj_ =
        function(input){
         function _bk_(x){return handle_read(input, x);}
         var _bl_ = read$0(0, input);
         return caml_call2(Async_kernel_Deferred_std[5][2], _bl_, _bk_);
        },
      initial_push =
        caml_call3(Async_kernel_Deferred_list[14], 0, inputs, _bj_);
     caml_call2
      (Async_kernel_Deferred_std[11], initial_push, pop_heap_and_loop);
     return r;
    }
    var input = inputs[1];
    return input;
   }
   function concat_pipe(inputs){
    var
     r =
       create_reader_not_close_on_exc
        (0,
         function(w){
          var link = create$0(inputs, w), consumer = consumer$1(link);
          return iter$0
                  (0,
                   [0, [0, consumer]],
                   inputs,
                   function(input){return transfer_id(0, input, w);});
         });
    function _bd_(param){return close(inputs);}
    var _be_ = closed(r);
    caml_call2(Async_kernel_Deferred_std[11], _be_, _bd_);
    return r;
   }
   function concat(inputs){
    return create_reader_not_close_on_exc
            (0,
             function(w){
              function _bc_(input){return transfer_id(0, input, w);}
              return caml_call3
                      (Async_kernel_Deferred_list[14], 0, inputs, _bc_);
             });
   }
   function fork(t, pushback_uses){
    var
     match = create(0, 0, 0),
     writer0 = match[2],
     reader0 = match[1],
     match$0 = create(0, 0, 0),
     writer1 = match$0[2],
     reader1 = match$0[1],
     some_reader_was_closed = [0, 0],
     consumer =
       add_consumer
        (t,
         function(param){
          var some_reader_was_closed$0 = some_reader_was_closed[1];
          function _a$_(param){
           return 17724 <= param
                   ? some_reader_was_closed$0 ? -402004920 : 17724
                   : -402004920;
          }
          var
           _ba_ = [0, downstream_flushed(writer1), 0],
           _bb_ = combine([0, downstream_flushed(writer0), _ba_]);
          return caml_call2(Async_kernel_Deferred_std[5][2], _bb_, _a$_);
         }),
     still_open = [0, writer0, [0, writer1, 0]];
    function filter_open(still_open){
     if(! caml_call2(Core_List[13], still_open, is_closed)) return still_open;
     some_reader_was_closed[1] = 1;
     function _a__(w){return 1 - is_closed(w);}
     var still_open$0 = caml_call2(Core_List[50], still_open, _a__);
     if(caml_call1(Core_List[8], still_open$0)) close(t);
     return still_open$0;
    }
    function _a1_(still_open){
     caml_call2(Core_List[9], still_open, close);
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    }
    var
     _a2_ =
       fold
        ([0, [0, consumer]],
         0,
         t,
         still_open,
         function(still_open, queue){
          var still_open$0 = filter_open(still_open);
          if(caml_call1(Core_List[8], still_open$0))
           return caml_call1(Async_kernel_Deferred_std[10], 0);
          function _a4_(param){
           var still_open = filter_open(still_open$0);
           function _a8_(w){
            start_write(w);
            function _a9_(x){return caml_call2(Core_Queue[41], w[3], x);}
            caml_call2(Core_Queue[16], queue, _a9_);
            return finish_write(w);
           }
           caml_call2(Core_List[9], still_open, _a8_);
           return still_open;
          }
          if(-648027566 <= pushback_uses)
           var
            _a5_ = caml_call2(Core_List[72], still_open$0, pushback$1),
            _a6_ = caml_call1(Async_kernel_Deferred[23], _a5_);
          else
           var
            _a7_ = caml_call2(Core_List[72], still_open$0, pushback$1),
            _a6_ = caml_call1(Async_kernel_Deferred[22], _a7_);
          return caml_call2(Async_kernel_Deferred_std[5][2], _a6_, _a4_);
         }),
     _a3_ = caml_call2(Async_kernel_Deferred_std[5][1], _a2_, _a1_);
    caml_call1(Async_kernel_Deferred_std[8], _a3_);
    return [0, reader0, reader1];
   }
   function set_info(t, info){var v = [0, info]; t[2] = v; return 0;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Pipe);
   var
    Async_kernel_Pipe =
      [0,
       sexp_of_pipe,
       sexp_of_pipe,
       [0, sexp_of_t$4, invariant$0],
       [0, sexp_of_t$3, invariant$0],
       create_reader,
       create_writer,
       create,
       empty,
       of_list,
       singleton,
       unfold,
       of_sequence,
       to_sequence,
       close,
       close_read,
       is_closed,
       closed,
       [0, compare, sexp_of_t],
       upstream_flushed,
       downstream_flushed,
       [0, values_sent_downstream],
       add_consumer,
       length,
       is_empty,
       pushback$1,
       write$0,
       write_without_pushback,
       transfer_in,
       transfer_in_without_pushback,
       write_when_ready,
       write_if_open,
       write_without_pushback_if_open,
       read,
       read$0,
       read_exn,
       read_exactly,
       read_now,
       read_now$0,
       peek,
       clear,
       read_all,
       values_available,
       read_choice,
       read_choice_single_consumer_ex,
       Flushed,
       fold,
       fold$0,
       fold_without_pushback,
       iter,
       iter$0,
       iter_without_pushback,
       transfer,
       transfer$0,
       transfer_id,
       map,
       map$0,
       concat_map_list,
       folding_map,
       filter_map,
       filter_map$0,
       folding_filter_map,
       folding_filter_map$0,
       filter,
       interleave,
       interleave_pipe,
       merge,
       concat,
       concat_pipe,
       fork,
       to_stream_deprecated,
       of_stream_deprecated,
       drain,
       drain_and_count,
       to_list,
       hash,
       equal$0,
       compare$0,
       size_budget,
       set_size_budget$0,
       show_debug_messages,
       check_invariant,
       set_info];
   runtime.caml_register_global
    (171, Async_kernel_Pipe, cst_Async_kernel_Pipe$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Mvar
//# unitInfo: Requires: Assert_failure, Async_kernel__Bvar, Async_kernel__Deferred_std, Async_kernel__Ivar, Async_kernel__Pipe, Base__Field, Base__Invariant, Core, Core__Unit, Expect_test_collector, Moption, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Mvar$0 = "Async_kernel__Mvar",
    cst_async_kernel$0 = "async_kernel",
    cst_current_value$0 = "current_value",
    cst_src_mvar_ml = "src/mvar.ml",
    cst_taken$0 = "taken",
    cst_value_available$0 = "value_available",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/mvar.ml:23:26",
    cst = "",
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Bvar = global_data.Async_kernel__Bvar,
    Moption = global_data.Moption,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Unit = global_data.Core__Unit;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Mvar$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_mvar_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    cst_Mvar_take_exn_called_on_em = "Mvar.take_exn called on empty mvar",
    _l_ = [0, cst_src_mvar_ml, 60, 2],
    cst_Mvar_peek_exn_called_on_em = "Mvar.peek_exn called on empty mvar",
    _j_ = [0, "_"],
    _k_ = [0, cst_src_mvar_ml, 16, 357, 379],
    _g_ = [0, cst_value_available$0],
    _h_ = [0, cst_taken$0],
    _i_ = [0, cst_current_value$0],
    cst_value_available = cst_value_available$0,
    cst_taken = cst_taken$0,
    cst_current_value = cst_current_value$0,
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Mvar = cst_Async_kernel_Mvar$0;
   function value_available(r){return r[3];}
   function set_value_available(r, v){r[3] = v; return 0;}
   function taken(r){return r[2];}
   function current_value(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], v];}
   var
    _b_ = [0, set_value_available],
    value_available$0 =
      [0,
       function(param){return 0;},
       cst_value_available,
       _b_,
       value_available,
       _a_];
   function _c_(r, v){return [0, r[1], v, r[3]];}
   var
    _d_ = 0,
    taken$0 = [0, function(param){return 0;}, cst_taken, _d_, taken, _c_];
   function _e_(r, v){return [0, v, r[2], r[3]];}
   var
    _f_ = 0,
    current_value$0 =
      [0,
       function(param){return 0;},
       cst_current_value,
       _f_,
       current_value,
       _e_];
   function value_available$1(t){
    return caml_call1(Async_kernel_Ivar[18], t[3]);
   }
   function is_empty(t){return caml_call1(Moption[5], t[1]);}
   function invariant(invariant_a, param, t){
    function _C_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      value_available_fun =
        check
         (function(value_available){
           var
            got = caml_call1(Async_kernel_Ivar[17], value_available),
            expect = caml_call1(Moption[6], t[1]),
            sexpifier = Core[305],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_011, b_012){
            return caml_call2(Core[301], a_011, b_012);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    got);
          });
     function _E_(_F_){return 0;}
     var
      taken_fun = check(caml_call2(Async_kernel_Bvar[2], Core_Unit[5], _E_)),
      current_value_fun = check(caml_call1(Moption[2], invariant_a));
     caml_call1(current_value_fun, current_value$0);
     caml_call1(taken_fun, taken$0);
     return caml_call1(value_available_fun, value_available$0);
    }
    function _D_(x_010){
     function of_a_001(param){return _j_;}
     var
      taken_006 = x_010[2],
      current_value_004 = x_010[1],
      value_available_008 = x_010[3],
      arg_009 =
        caml_call2(Async_kernel_Ivar[9], Core[518], value_available_008),
      bnds_003 = [0, [1, [0, _g_, [0, arg_009, 0]]], 0],
      arg_007 =
        caml_call3(Async_kernel_Bvar[1], Core[518], Core[202], taken_006),
      bnds_003$0 = [0, [1, [0, _h_, [0, arg_007, 0]]], bnds_003],
      arg_005 = caml_call2(Moption[1], of_a_001, current_value_004),
      bnds_003$1 = [0, [1, [0, _i_, [0, arg_005, 0]]], bnds_003$0];
     return [1, bnds_003$1];
    }
    return caml_call4(Base_Invariant[1], _k_, t, _D_, _C_);
   }
   function peek(t){return caml_call1(Moption[7], t[1]);}
   function peek_exn(t){
    if(is_empty(t)){
     var
      _B_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Mvar_peek_exn_called_on_em);
     caml_call1(Core[253], _B_);
    }
    return caml_call1(Moption[8], t[1]);
   }
   function sexp_of_t(sexp_of_a, param, t){
    var x_013 = peek(t);
    return caml_call2(Core[454], sexp_of_a, x_013);
   }
   function sexp_of_t$0(of_a_014, x_015){
    return sexp_of_t(of_a_014, Core[202], x_015);
   }
   function invariant$0(invariant_a, t){
    return invariant(invariant_a, function(_A_){return 0;}, t);
   }
   var Read_write = [0, sexp_of_t$0, invariant$0];
   function sexp_of_t$1(of_a_016, x_017){
    return sexp_of_t(of_a_016, Core[171], x_017);
   }
   function invariant$1(invariant_a, t){
    return invariant(invariant_a, function(_z_){return 0;}, t);
   }
   var Read_only = [0, sexp_of_t$1, invariant$1];
   function read_only(t){return t;}
   function write_only(t){return t;}
   function create(param){
    var
     _x_ = caml_call1(Async_kernel_Ivar[12], 0),
     _y_ = caml_call1(Async_kernel_Bvar[3], 0);
    return [0, caml_call1(Moption[4], 0), _y_, _x_];
   }
   function take_nonempty(t){
    if(is_empty(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    var r = caml_call1(Moption[8], t[1]);
    caml_call1(Moption[11], t[1]);
    caml_call2(Async_kernel_Bvar[5], t[2], 0);
    t[3] = caml_call1(Async_kernel_Ivar[12], 0);
    return r;
   }
   function take_now_exn(t){
    if(is_empty(t)){
     var
      _w_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Mvar_take_exn_called_on_em);
     caml_call1(Core[253], _w_);
    }
    return take_nonempty(t);
   }
   function take_now(t){return is_empty(t) ? 0 : [0, take_nonempty(t)];}
   function take(t){
    if(is_empty(t)){
     var _t_ = function(param){return take(t);}, _u_ = value_available$1(t);
     return caml_call2(Async_kernel_Deferred_std[5][1], _u_, _t_);
    }
    var _v_ = take_nonempty(t);
    return caml_call1(Async_kernel_Deferred_std[10], _v_);
   }
   function set(t, v){
    caml_call2(Moption[12], t[1], v);
    return caml_call2(Async_kernel_Ivar[15], t[3], 0);
   }
   function update(t, f){return set(t, caml_call1(f, peek(t)));}
   function update_exn(t, f){return set(t, caml_call1(f, peek_exn(t)));}
   function taken$1(t){return caml_call1(Async_kernel_Bvar[4], t[2]);}
   function put(t, v){
    if(is_empty(t)){
     set(t, v);
     return caml_call1(Async_kernel_Deferred_std[10], 0);
    }
    function _r_(param){return put(t, v);}
    var _s_ = taken$1(t);
    return caml_call2(Async_kernel_Deferred_std[5][1], _s_, _r_);
   }
   function pipe_when_ready(t){
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     w = match[2],
     r = match[1];
    function loop(param){
     function _n_(param){
      if(caml_call1(Async_kernel_Pipe[16], w))
       return caml_call1(Async_kernel_Deferred_std[10], 0);
      var match = take_now(t);
      if(! match) return loop(0);
      var x = match[1];
      function _p_(param){return loop(0);}
      var _q_ = caml_call2(Async_kernel_Pipe[26], w, x);
      return caml_call2(Async_kernel_Deferred_std[5][1], _q_, _p_);
     }
     var _o_ = value_available$1(t);
     return caml_call2(Async_kernel_Deferred_std[5][1], _o_, _n_);
    }
    var _m_ = loop(0);
    caml_call1(Async_kernel_Deferred_std[8], _m_);
    return r;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Mvar);
   var
    Async_kernel_Mvar =
      [0,
       sexp_of_t,
       Read_write,
       Read_only,
       create,
       is_empty,
       put,
       set,
       update,
       update_exn,
       read_only,
       write_only,
       value_available$1,
       take,
       take_now,
       take_now_exn,
       taken$1,
       peek,
       peek_exn,
       pipe_when_ready];
   runtime.caml_register_global
    (37, Async_kernel_Mvar, cst_Async_kernel_Mvar$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Lazy_deferred
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_std, Async_kernel__Ivar, Async_kernel__Monitor, Base__Monad, Core, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Lazy_deferred$0 = "Async_kernel__Lazy_deferred",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred_std = global_data.Async_kernel__Deferred_std,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Lazy_deferred$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/lazy_deferred.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _b_ = [0, 3804260],
    _a_ = [0, 3804260],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Lazy_deferred = cst_Async_kernel_Lazy_deferred$0;
   function create(f){
    var start = caml_call1(Async_kernel_Ivar[12], 0);
    function _l_(param){
     return caml_call6(Async_kernel_Monitor[17], 0, 0, 0, 0, _a_, f);
    }
    var _m_ = caml_call1(Async_kernel_Ivar[18], start);
    return [0, start, caml_call2(Async_kernel_Deferred_std[5][1], _m_, _l_)];
   }
   function create_or_error(f){
    var start = caml_call1(Async_kernel_Ivar[12], 0);
    function _j_(param){
     return caml_call6(Async_kernel_Monitor[18], 0, 0, 0, 0, _b_, f);
    }
    var _k_ = caml_call1(Async_kernel_Ivar[18], start);
    return [0, start, caml_call2(Async_kernel_Deferred_std[5][1], _k_, _j_)];
   }
   function wait(t){return t[2];}
   function wait_exn(t){
    return caml_call2(Async_kernel_Deferred_std[4], t[2], Core[245]);
   }
   function force(t){caml_call2(Async_kernel_Ivar[15], t[1], 0); return t[2];}
   function force_exn(t){
    var _h_ = Core[245], _i_ = force(t);
    return caml_call2(Async_kernel_Deferred_std[4], _i_, _h_);
   }
   function return$0(a){
    return create
            (function(param){
              return caml_call1(Async_kernel_Deferred_std[10], a);
             });
   }
   function bind(t, f){
    return create
            (function(param){
              function _f_(a){return force_exn(caml_call1(f, a));}
              var _g_ = force_exn(t);
              return caml_call2(Async_kernel_Deferred_std[5][1], _g_, _f_);
             });
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return create
                (function(param){
                  var _e_ = force_exn(t);
                  return caml_call2(Async_kernel_Deferred_std[4], _e_, f);
                 });
       }],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   function bind$1(t, f){
    return caml_call2
            (bind$0,
             t,
             function(a){
              return create(function(param){return caml_call1(f, a);});
             });
   }
   function is_forced(t){return caml_call1(Async_kernel_Ivar[17], t[1]);}
   function is_determined(t){
    return caml_call1(Async_kernel_Deferred[7], t[2]);
   }
   function peek(t){return caml_call1(Async_kernel_Deferred[5], t[2]);}
   function peek_exn(t){
    var _c_ = Core[245], _d_ = peek(t);
    return caml_call2(Core_Option[29], _d_, _c_);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Lazy_deferred);
   var
    Async_kernel_Lazy_deferred =
      [0,
       create,
       create_or_error,
       force,
       force_exn,
       wait,
       wait_exn,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       bind$1,
       peek,
       peek_exn,
       is_determined,
       is_forced];
   runtime.caml_register_global
    (20, Async_kernel_Lazy_deferred, cst_Async_kernel_Lazy_deferred$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_condition
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Core__Option, Core__Queue, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_conditi$0 = "Async_kernel__Async_condition",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_conditi$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/async_condition.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    _a_ = [0, "waits"],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Async_conditi = cst_Async_kernel_Async_conditi$0;
   function sexp_of_t(of_a_001, param){
    var
     waits_003 = param[1],
     _f_ = caml_call1(Async_kernel_Ivar[9], of_a_001),
     arg_004 = caml_call2(Core_Queue[11], _f_, waits_003),
     bnds_002 = [0, [1, [0, _a_, [0, arg_004, 0]]], 0];
    return [1, bnds_002];
   }
   function create(param){return [0, caml_call2(Core_Queue[61], 0, 0)];}
   function wait(t){
    function _e_(ivar){return caml_call2(Core_Queue[41], t[1], ivar);}
    return caml_call1(Async_kernel_Deferred[3], _e_);
   }
   function signal(t, a){
    function _c_(ivar){return caml_call2(Async_kernel_Ivar[14], ivar, a);}
    var _d_ = caml_call1(Core_Queue[43], t[1]);
    return caml_call2(Core_Option[41], _d_, _c_);
   }
   function broadcast(t, a){
    function _b_(ivar){return caml_call2(Async_kernel_Ivar[14], ivar, a);}
    caml_call2(Core_Queue[16], t[1], _b_);
    return caml_call1(Core_Queue[47], t[1]);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_conditi);
   var
    Async_kernel_Async_condition =
      [0, sexp_of_t, create, signal, broadcast, wait];
   runtime.caml_register_global
    (16, Async_kernel_Async_condition, cst_Async_kernel_Async_conditi$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_gc
//# unitInfo: Requires: Async_kernel__Scheduler, Core__Gc, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_gc$0 = "Async_kernel__Async_gc",
    cst_async_kernel$0 = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Gc = global_data.Core__Gc;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_gc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/async_gc.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    Stat = Core_Gc[1],
    Control = Core_Gc[2],
    print_stat = Core_Gc[3],
    allocated_bytes = Core_Gc[4],
    keep_alive = Core_Gc[5],
    Allocation_policy = Core_Gc[6],
    tune = Core_Gc[7],
    disable_compaction = Core_Gc[8],
    For_testing = Core_Gc[9],
    Stable = Core_Gc[11],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Async_gc = cst_Async_kernel_Async_gc$0;
   function add_finalizer(heap_block, f){
    var _e_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call2
            (caml_call1(Async_kernel_Scheduler[46], _e_), heap_block, f);
   }
   function add_finalizer_exn(heap_block, f){
    var _d_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call2
            (caml_call1(Async_kernel_Scheduler[47], _d_), heap_block, f);
   }
   function add_finalizer_last(heap_block, f){
    var _c_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call2
            (caml_call1(Async_kernel_Scheduler[48], _c_), heap_block, f);
   }
   function add_finalizer_last_exn(heap_block, f){
    var _b_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call2
            (caml_call1(Async_kernel_Scheduler[49], _b_), heap_block, f);
   }
   var sexp_of_t = Core_Gc[10][6][1];
   function create(f){
    var _a_ = caml_call1(Async_kernel_Scheduler[2], 0);
    return caml_call1(caml_call1(Async_kernel_Scheduler[45], _a_), f);
   }
   var delete$0 = Core_Gc[10][6][3], Alarm = [0, sexp_of_t, create, delete$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_gc);
   var
    Async_kernel_Async_gc =
      [0,
       Stat,
       Control,
       print_stat,
       allocated_bytes,
       keep_alive,
       Allocation_policy,
       tune,
       disable_compaction,
       For_testing,
       Stable,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       Alarm];
   runtime.caml_register_global
    (13, Async_kernel_Async_gc, cst_Async_kernel_Async_gc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_invariant_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_invaria = "Async_kernel__Async_invariant_intf",
    cst_async_kernel = "async_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_invaria);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel);
   caml_call1(Expect_test_collector[5][1], "src/async_invariant_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel, cst);
   var Async = [0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_invaria);
   var Async_kernel_Async_invariant_i = [0, Async];
   runtime.caml_register_global
    (11, Async_kernel_Async_invariant_i, cst_Async_kernel_Async_invaria);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel__Async_invariant
//# unitInfo: Requires: Async_kernel__Async_invariant_intf, Async_kernel__Deferred, Async_kernel__Monitor, Base__Field, Base__Invariant, Core, Core__Source_code_position, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel_Async_invaria$0 = "Async_kernel__Async_invariant",
    cst_async_kernel$0 = "async_kernel",
    cst_exn = "exn";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Field = global_data.Base__Field,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_Async_invaria$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], "src/async_invariant.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    invariant = Base_Invariant[1],
    check_field = Base_Invariant[2],
    _e_ = [0, cst_exn],
    _f_ = [0, "field"],
    cst_problem_with_field = "problem with field",
    _g_ = [0, 3804260],
    _h_ = [0, 523273847],
    _i_ = [0, 1],
    _a_ = [0, cst_exn],
    cst_invariant_failed = "invariant failed",
    _b_ = [0, 3804260],
    _c_ = [0, 523273847],
    _d_ = [0, 1],
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel_Async_invaria = cst_Async_kernel_Async_invaria$0;
   function invariant$0(here, t, sexp_of_t, f){
    function _r_(param){
     if(0 === param[0]) return 0;
     var
      exn = param[1],
      _t_ = [0, caml_call1(sexp_of_t, t), 0],
      _u_ = [0, [1, [0, _a_, [0, caml_call1(Core[537], exn), 0]]], _t_],
      _v_ = [0, caml_call1(Core_Source_code_position[1], here), _u_],
      _w_ =
        [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_invariant_failed), _v_]];
     return caml_call1(Core[253], _w_);
    }
    var _s_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, _d_, _c_, _b_, f);
    return caml_call2(Async_kernel_Deferred[16][4][3], _s_, _r_);
   }
   function check_field$0(t, f, wait_for_previous, field){
    function _j_(param){
     function _k_(param){
      if(0 === param[0]) return 0;
      var
       exn = param[1],
       _n_ = [0, [1, [0, _e_, [0, caml_call1(Core[537], exn), 0]]], 0],
       _o_ = caml_call1(Base_Field[2], field),
       _p_ = [0, [1, [0, _f_, [0, caml_call1(Core[471], _o_), 0]]], _n_],
       _q_ =
         [1,
          [0, caml_call1(Sexplib0_Sexp_conv[7], cst_problem_with_field), _p_]];
      return caml_call1(Core[253], _q_);
     }
     function _l_(param){
      return caml_call1(f, caml_call2(Base_Field[3], field, t));
     }
     var
      _m_ = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, _i_, _h_, _g_, _l_);
     return caml_call2(Async_kernel_Deferred[16][4][3], _m_, _k_);
    }
    return caml_call2(Async_kernel_Deferred[16][4][2], wait_for_previous, _j_);
   }
   var Async = [0, invariant$0, check_field$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_Async_invaria);
   var Async_kernel_Async_invariant = [0, invariant, check_field, Async];
   runtime.caml_register_global
    (29, Async_kernel_Async_invariant, cst_Async_kernel_Async_invaria$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_kernel
//# unitInfo: Requires: Async_kernel__Async_gc, Async_kernel__Clock_ns, Async_kernel__Deferred, Async_kernel__Deferred_result, Async_kernel__Monitor, Async_kernel__Scheduler, Core, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_kernel$0 = "Async_kernel",
    cst_async_kernel$0 = "async_kernel",
    cst_src_async_kernel_ml$0 = "src/async_kernel.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/async_kernel.ml:94:17",
    cst = "",
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Async_kernel_Clock_ns = global_data.Async_kernel__Clock_ns,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Async_kernel_Deferred_result = global_data.Async_kernel__Deferred_result,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel$0);
   caml_call1(Expect_test_collector[5][1], cst_src_async_kernel_ml$0);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_async_kernel$0, cst);
   var
    after = Async_kernel_Clock_ns[4],
    at = Async_kernel_Clock_ns[3],
    catch$0 = Async_kernel_Monitor[21],
    choice = Async_kernel_Deferred[27],
    choose = Async_kernel_Deferred[29],
    don_t_wait_for = Async_kernel_Deferred[25],
    every = Async_kernel_Clock_ns[10],
    never = Async_kernel_Deferred[19],
    schedule = Async_kernel_Scheduler[59],
    schedule$0 = Async_kernel_Scheduler[58],
    try_with = Async_kernel_Monitor[16],
    upon = Async_kernel_Deferred[4],
    with_timeout = Async_kernel_Clock_ns[5],
    within = Async_kernel_Scheduler[56],
    within$0 = Async_kernel_Scheduler[55],
    symbol = Async_kernel_Deferred[17][3],
    symbol$0 = Async_kernel_Deferred_result[1],
    symbol$1 = Async_kernel_Deferred_result[2],
    include = Async_kernel_Deferred[16],
    return$0 = include[1],
    symbol_bind = include[2],
    symbol_map = include[3],
    Let_syntax = include[4],
    Async_kernel_private = [0],
    cst_src_async_kernel_ml = cst_src_async_kernel_ml$0,
    cst_return_does_not_allocate = "[return ()] does not allocate",
    cst_async_kernel = cst_async_kernel$0,
    cst_Async_kernel = cst_Async_kernel$0;
   function _a_(param){
    var expect = runtime.core_gc_minor_words(0);
    caml_call1(return$0, 0);
    caml_call1(Async_kernel_Deferred[12], 0);
    caml_call1(Async_kernel_Deferred[16][1], 0);
    caml_call1(Async_kernel_Deferred[16][4][1], 0);
    var
     got = runtime.core_gc_minor_words(0),
     sexpifier = Core[356],
     equal = 0,
     message = 0,
     here = 0;
    function comparator(a_001, b_002){
     return caml_call2(Core[352], a_001, b_002);
    }
    caml_call8
     (Ppx_assert_lib_Runtime[3],
      pos,
      sexpifier,
      comparator,
      here,
      message,
      equal,
      expect,
      got);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[5],
     Inline_test_config,
     cst_return_does_not_allocate,
     0,
     cst_src_async_kernel_ml,
     87,
     0,
     443,
     _a_);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_async_kernel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel);
   var
    Async_kernel =
      [0,
       after,
       at,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       every,
       never,
       schedule,
       schedule$0,
       try_with,
       upon,
       with_timeout,
       within,
       within$0,
       symbol,
       symbol$0,
       symbol$1,
       return$0,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Async_kernel_private];
   runtime.caml_register_global(22, Async_kernel, cst_Async_kernel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
