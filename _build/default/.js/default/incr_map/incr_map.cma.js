// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incr_map__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Incr_map = [0];
   runtime.caml_register_global(0, Incr_map, "Incr_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map__Incr_map_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map_Incr_map_intf = "Incr_map__Incr_map_intf",
    cst_incr_map = "incr_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map_Incr_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Expect_test_collector[5][1], "src/incr_map_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incr_map, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incr_map);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map_Incr_map_intf);
   var Incr_map_Incr_map_intf = [0];
   runtime.caml_register_global
    (11, Incr_map_Incr_map_intf, cst_Incr_map_Incr_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Core, Core__Bool, Core__Info, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Maybe_bound, Core__Option, Core__Sequence, Core__Set, Core__Tuple, Expect_test_collector, Incr_map__Incr_map_intf, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map$0 = "Incr_map",
    cst_incr_map$0 = "incr_map",
    cst_src_incr_map_ml = "src/incr_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Core_Info = global_data.Core__Info,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Bool = global_data.Core__Bool,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Maybe_bound = global_data.Core__Maybe_bound,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Core_Lazy = global_data.Core__Lazy,
    Core_Set = global_data.Core__Set,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map$0);
   caml_call1(Expect_test_collector[5][1], cst_src_incr_map_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incr_map$0, cst);
   var
    _F_ = [0, "entries"],
    _G_ = [0, "actual_value"],
    _H_ = [0, "key"],
    _A_ = [0, "node_is_unnecessary"],
    _B_ = [0, "node_is_invalid"],
    _C_ = [0, "node_is_const"],
    _D_ = [0, "node_info"],
    _E_ = [0, "saved_value"],
    _z_ = [0, 1],
    _y_ = [0, 1],
    _x_ = [0, 1],
    _w_ = [0, 1],
    _v_ = [0, 1],
    _u_ = [0, cst_src_incr_map_ml, 1210, 6],
    _t_ = [0, cst_src_incr_map_ml, 1210, 6],
    _s_ = [0, cst_src_incr_map_ml, 1210, 6],
    _r_ = [0, cst_src_incr_map_ml, 1210, 6],
    _q_ = [0, cst_src_incr_map_ml, 1210, 6],
    _p_ = [0, cst_src_incr_map_ml, 1210, 6],
    _o_ = [0, cst_src_incr_map_ml, 1210, 6],
    _n_ = [0, cst_src_incr_map_ml, 1210, 6],
    _l_ = [0, cst_src_incr_map_ml, 1210, 6],
    _m_ = [0, [0, 0, 0]],
    _g_ = [0, "to_"],
    _h_ = [0, "from"],
    cst_Invalid_indices = "Invalid indices",
    _i_ = [0, 0, 0],
    _k_ = [0, cst_src_incr_map_ml, 1194, 10],
    _j_ = [0, cst_src_incr_map_ml, 1195, 10],
    cst_BUG_Hit_supposedly_impossi =
      "BUG: Hit supposedly impossible case in Incr_map.index_by",
    _f_ = [0, 1],
    _e_ = [0, 1],
    cst_impossible_case_BUG_in_inc =
      "impossible case: BUG in incr_map.ml subrange",
    _d_ = [0, 1],
    _c_ = [0, 1],
    _b_ = [0, cst_src_incr_map_ml, 311, 12],
    _a_ = [0, cst_src_incr_map_ml, 238, 11],
    cst_incr_map = cst_incr_map$0,
    cst_Incr_map = cst_Incr_map$0;
   function with_old(i, f){
    var old = [0, 0];
    function _ep_(a){
     var b = caml_call2(f, old[1], a);
     old[1] = [0, [0, a, b]];
     return b;
    }
    return caml_call2(Incremental[76][3][5], i, _ep_);
   }
   function unordered_fold
   (opt, update, specialized_initial, _el_, map, init, add, remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    if(_el_)
     var sth$0 = _el_[1], revert_to_init_when_empty = sth$0;
    else
     var revert_to_init_when_empty = 0;
    function default$0(key, old_data, new_data, acc){
     return caml_call3
             (add, key, new_data, caml_call3(remove, key, old_data, acc));
    }
    var update$0 = caml_call2(Core_Option[34], update, default$0);
    return with_old
            (map,
             function(old, new_in){
              if(! old){
               if(! specialized_initial)
                return caml_call3(Core_Map[55], new_in, init, add);
               var initial = specialized_initial[1];
               return caml_call2(initial, init, new_in);
              }
              var match = old[1], old_out = match[2], old_in = match[1];
              if(revert_to_init_when_empty){
               var _em_ = caml_call1(Core_Map[29], new_in);
               if(caml_call2(Core[90], _em_, 0)) return init;
              }
              function _en_(acc, param){
               var change = param[2], key = param[1], _eo_ = change[1];
               if(847852583 === _eo_){
                var old = change[2];
                return caml_call3(remove, key, old, acc);
               }
               if(1013247643 <= _eo_){
                var match = change[2], new$0 = match[2], old$0 = match[1];
                return caml_call4(update$0, key, old$0, new$0, acc);
               }
               var new$1 = change[2];
               return caml_call3(add, key, new$1, acc);
              }
              return caml_call5
                      (Core_Map[81], old_in, new_in, data_equal, old_out, _en_);
             });
   }
   function unordered_fold_nested_maps
   (opt, revert_to_init_when_empty, update, incr_map, init, add, remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    if(update)
     var update$0 = update[1], update$1 = update$0;
    else
     var
      update$1 =
        function(outer_key, inner_key, old_data, new_data, acc){
         return caml_call4
                 (add,
                  outer_key,
                  inner_key,
                  new_data,
                  caml_call4(remove, outer_key, inner_key, old_data, acc));
        };
    function _ee_(outer_key, inner_map, acc){
     function _ek_(inner_key, data, acc){
      return caml_call4(remove, outer_key, inner_key, data, acc);
     }
     return caml_call3(Core_Map[55], inner_map, acc, _ek_);
    }
    function _ef_(outer_key, inner_map, acc){
     function _ej_(inner_key, data, acc){
      return caml_call4(add, outer_key, inner_key, data, acc);
     }
     return caml_call3(Core_Map[55], inner_map, acc, _ej_);
    }
    var _eg_ = 0;
    return unordered_fold
            (0,
             [0,
              function(outer_key, old_inner_map, new_inner_map, acc){
               function _eh_(acc, param){
                var diff = param[2], inner_key = param[1], _ei_ = diff[1];
                if(847852583 === _ei_){
                 var data_removed = diff[2];
                 return caml_call4
                         (remove, outer_key, inner_key, data_removed, acc);
                }
                if(1013247643 <= _ei_){
                 var
                  match = diff[2],
                  new_data = match[2],
                  old_data = match[1];
                 return caml_call5
                         (update$1, outer_key, inner_key, old_data, new_data, acc);
                }
                var data_added = diff[2];
                return caml_call4(add, outer_key, inner_key, data_added, acc);
               }
               return caml_call2
                       (caml_call3
                         (Core_Map[81], old_inner_map, new_inner_map, data_equal),
                        acc,
                        _eh_);
              }],
             _eg_,
             revert_to_init_when_empty,
             incr_map,
             init,
             _ef_,
             _ee_);
   }
   function with_comparator(get_comparator, x, f){
    var
     _ec_ = caml_call2(Incremental[10], x, get_comparator),
     _ed_ = caml_call2(Incremental[34], 0, _ec_);
    return caml_call2(Incremental[26], _ed_, f);
   }
   function with_comparator$0(map, f){
    return with_comparator(Core_Map[2], map, f);
   }
   function of_set(set){
    function _d9_(comparator){
     var
      old_input = [0, caml_call1(Core_Set[3][1], comparator)],
      old_output = [0, caml_call1(Core_Map[110][1], comparator)];
     function _d__(new_input){
      function _d$_(output, param){
       if(0 === param[0]){
        var k = param[1];
        return caml_call2(Core_Map[41], output, k);
       }
       var k$0 = param[1];
       return caml_call3(Core_Map[31], output, k$0, 0);
      }
      var
       _ea_ = old_output[1],
       _eb_ = caml_call2(Core_Set[17], old_input[1], new_input),
       new_output = caml_call3(Core_Sequence[18], _eb_, _ea_, _d$_);
      old_input[1] = new_input;
      old_output[1] = new_output;
      return new_output;
     }
     return caml_call2(Incremental[10], set, _d__);
    }
    return with_comparator(Core_Set[5], set, _d9_);
   }
   function generic_mapi(witness, opt, map){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(f){
     return with_old
             (map,
              function(old, input){
               if(0 !== caml_call1(Core_Map[29], input) && old){
                var
                 match = old[1],
                 old_output = match[2],
                 old_input = match[1],
                 _d7_ =
                   function(output, param){
                    var change = param[2], key = param[1], _d8_ = change[1];
                    if(847852583 === _d8_)
                     return caml_call2(Core_Map[41], output, key);
                    var
                     new_data = 1013247643 <= _d8_ ? change[2][2] : change[2],
                     res = caml_call2(f, key, new_data);
                    if(! witness)
                     return caml_call3(Core_Map[32], output, key, res);
                    if(! res) return caml_call2(Core_Map[41], output, key);
                    var output_data = res[1];
                    return caml_call3(Core_Map[32], output, key, output_data);
                   };
                return caml_call5
                        (Core_Map[81],
                         old_input,
                         input,
                         data_equal,
                         old_output,
                         _d7_);
               }
               return witness
                       ? caml_call2(Core_Map[63], input, f)
                       : caml_call2(Core_Map[52], input, f);
              });};
   }
   function mapi(data_equal, map, f){
    return generic_mapi(0, data_equal, map)(f);
   }
   function filter_mapi(data_equal, map, f){
    return generic_mapi(1, data_equal, map)(f);
   }
   function map(data_equal, map, f){
    return mapi
            (data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map(data_equal, map, f){
    return filter_mapi
            (data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function with_old2(i1, i2, f){
    var old = [0, 0];
    function _d6_(a1, a2){
     var b = caml_call3(f, old[1], a1, a2);
     old[1] = [0, [0, a1, a2, b]];
     return b;
    }
    return caml_call3(Incremental[12], i1, i2, _d6_);
   }
   function mapi_count(opt, input, comparator){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(f){
     function add(new_key, acc){
      function _d5_(param){
       if(! param) return 1;
       var n = param[1];
       return n + 1 | 0;
      }
      return caml_call3(Core_Map[37], acc, new_key, _d5_);
     }
     function remove(new_key, acc){
      function _d4_(param){
       if(! param) return 0;
       var n = param[1];
       return 1 === n ? 0 : [0, n - 1 | 0];
      }
      return caml_call3(Core_Map[36], acc, new_key, _d4_);
     }
     function _dY_(key, data, acc){
      return remove(caml_call2(f, key, data), acc);
     }
     function _dZ_(key, data, acc){return add(caml_call2(f, key, data), acc);}
     var _d0_ = caml_call1(Core_Map[4], comparator), _d1_ = 0, _d2_ = 0;
     return unordered_fold
             ([0, data_equal],
              [0,
               function(key, old_data, new_data, acc){
                var
                 prev_key = caml_call2(f, key, old_data),
                 new_key = caml_call2(f, key, new_data),
                 _d3_ = caml_call2(comparator[1][1], prev_key, new_key);
                return caml_call2(Core[90], _d3_, 0)
                        ? acc
                        : add(new_key, remove(prev_key, acc));
               }],
              _d2_,
              _d1_,
              input,
              _d0_,
              _dZ_,
              _dY_);};
   }
   function map_count(data_equal, input, comparator, f){
    function _dX_(param, data){return caml_call1(f, data);}
    return mapi_count(data_equal, input, comparator)(_dX_);
   }
   function min_helper(map){
    var match = caml_call1(Core_Map[82], map);
    if(! match) return 0;
    var min = match[1][1];
    return [0, min];
   }
   function max_helper(map){
    var match = caml_call1(Core_Map[84], map);
    if(! match) return 0;
    var max = match[1][1];
    return [0, max];
   }
   function bounds_helper(map){
    var
     match = caml_call1(Core_Map[82], map),
     match$0 = caml_call1(Core_Map[84], map);
    if(match){
     if(match$0){
      var max = match$0[1][1], min = match[1][1];
      return [0, [0, min, max]];
     }
    }
    else if(! match$0) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function mapi_min(data_equal, input, comparator, f){
    var _dW_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _dW_, min_helper);
   }
   function mapi_max(data_equal, input, comparator, f){
    var _dV_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _dV_, max_helper);
   }
   function mapi_bounds(data_equal, input, comparator, f){
    var _dU_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _dU_, bounds_helper);
   }
   function mapi_mn(data_equal, input, comparator, f){
    return mapi_min
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function map_max(data_equal, input, comparator, f){
    return mapi_max
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_value(data_equal, input, comparator){
    return mapi_mn
            (data_equal, input, comparator, function(_dT_){return _dT_;});
   }
   function max_value(data_equal, input, comparator){
    return map_max
            (data_equal, input, comparator, function(_dS_){return _dS_;});
   }
   function map_bounds(data_equal, input, comparator, f){
    return mapi_bounds
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function value_bounds(data_equal, input, comparator){
    return map_bounds
            (data_equal, input, comparator, function(_dR_){return _dR_;});
   }
   function merge(opt, _dJ_, left_map, right_map, f){
    if(opt)
     var sth = opt[1], data_equal_left = sth;
    else
     var data_equal_left = Core[246];
    if(_dJ_)
     var sth$0 = _dJ_[1], data_equal_right = sth$0;
    else
     var data_equal_right = Core[246];
    return with_old2
            (left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              var comparator = caml_call1(Core_Map[2], new_left_map);
              if(old)
               var
                x = old[1],
                old_output = x[3],
                old_right_map = x[2],
                old_left_map = x[1];
              else
               var
                old_left_map$0 = caml_call1(Core_Map[110][1], comparator),
                old_output = old_left_map$0,
                old_right_map = old_left_map$0,
                old_left_map = old_left_map$0;
              var
               left_diff =
                 caml_call3
                  (Core_Map[80], old_left_map, new_left_map, data_equal_left),
               right_diff =
                 caml_call3
                  (Core_Map[80],
                   old_right_map,
                   new_right_map,
                   data_equal_right);
              function _dK_(output, diff_element){
               if(2 === diff_element[0]){
                var
                 right_key = diff_element[2][1],
                 left_key = diff_element[1][1],
                 _dP_ = caml_call2(comparator[1], left_key, right_key);
                if(! caml_call2(Core[90], _dP_, 0))
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _b_], 1);
                var key$0 = left_key;
               }
               else
                var key = diff_element[1][1], key$0 = key;
               function new_data(param){
                var _dQ_ = param[1];
                if(847852583 === _dQ_) return 0;
                var x = 1013247643 <= _dQ_ ? param[2][2] : param[2];
                return [0, x];
               }
               switch(diff_element[0]){
                 case 0:
                  var
                   left_diff = diff_element[1][2],
                   right_data_opt =
                     caml_call2(Core_Map[38], new_right_map, key$0),
                   right_data_opt$0 = right_data_opt,
                   left_data_opt = new_data(left_diff);
                  break;
                 case 1:
                  var
                   right_diff = diff_element[1][2],
                   right_data_opt$1 = new_data(right_diff),
                   right_data_opt$0 = right_data_opt$1,
                   left_data_opt =
                     caml_call2(Core_Map[38], new_left_map, key$0);
                  break;
                 default:
                  var
                   right_diff$0 = diff_element[2][2],
                   left_diff$0 = diff_element[1][2],
                   right_data_opt$2 = new_data(right_diff$0),
                   left_data_opt$0 = new_data(left_diff$0),
                   right_data_opt$0 = right_data_opt$2,
                   left_data_opt = left_data_opt$0;
               }
               if(left_data_opt){
                var x = left_data_opt[1];
                if(right_data_opt$0)
                 var
                  y = right_data_opt$0[1],
                  _dO_ = caml_call2(f, key$0, [0, 737457313, [0, x, y]]);
                else
                 var _dO_ = caml_call2(f, key$0, [0, 847852583, x]);
                var output_data_opt = _dO_;
               }
               else if(right_data_opt$0)
                var
                 y$0 = right_data_opt$0[1],
                 output_data_opt = caml_call2(f, key$0, [0, -57574468, y$0]);
               else
                var output_data_opt = 0;
               if(! output_data_opt)
                return caml_call2(Core_Map[41], output, key$0);
               var data = output_data_opt[1];
               return caml_call3(Core_Map[32], output, key$0, data);
              }
              function _dL_(param, _dN_){
               var right_key = _dN_[1], left_key = param[1];
               return caml_call2(comparator[1], left_key, right_key);
              }
              var
               _dM_ =
                 caml_call3(Core_Sequence[62], left_diff, right_diff, _dL_);
              return caml_call3(Core_Sequence[18], _dM_, old_output, _dK_);
             });
   }
   function generic_mapi_with_comparator(witness, cutoff, opt, lhs){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(comparator, f){
     var
      incremental_state = caml_call1(Incremental[4], lhs),
      empty_map = caml_call1(Core_Map[110][1], comparator),
      prev_map = [0, empty_map],
      prev_nodes = [0, empty_map],
      acc = [0, empty_map];
     function _dt_(param){return acc[1];}
     var
      result = caml_call3(Incremental[79][2][2], incremental_state, 0, _dt_),
      on_inner_change =
        witness
         ? function
          (key, opt){
           var old = acc[1];
           if(opt)
            var
             data = opt[1],
             _dI_ = caml_call3(Core_Map[32], old, key, data);
           else
            var _dI_ = caml_call2(Core_Map[41], old, key);
           acc[1] = _dI_;
           return 0;
          }
         : function
          (key, data){
           acc[1] = caml_call3(Core_Map[32], acc[1], key, data);
           return 0;
          },
      lhs_change = [];
     caml_update_dummy
      (lhs_change,
       [246,
        function(_dw_){
         function _dx_(map){
          function _dy_(nodes, param){
           var changed = param[2], key = param[1], _dz_ = changed[1];
           if(847852583 === _dz_){
            var
             match = caml_call2(Core_Map[39], nodes, key),
             dep = match[2],
             node = match[1],
             nodes$0 = caml_call2(Core_Map[41], nodes, key);
            caml_call2(Incremental[79][2][7], result, dep);
            acc[1] = caml_call2(Core_Map[41], acc[1], key);
            caml_call1(Incremental[79][2][5], node);
            return nodes$0;
           }
           if(1013247643 <= _dz_){
            var node$0 = caml_call2(Core_Map[39], nodes, key)[1];
            caml_call1(Incremental[79][2][4], node$0);
            return nodes;
           }
           function _dA_(param){
            return caml_call2(Core_Map[39], prev_map[1], key);
           }
           var
            node$1 =
              caml_call3(Incremental[79][2][2], incremental_state, 0, _dA_);
           function _dB_(c){
            var _dH_ = caml_call1(Incremental[79][2][3], node$1);
            return caml_call2(Incremental[59], _dH_, c);
           }
           caml_call2(Core_Option[41], cutoff, _dB_);
           var
            _dC_ = caml_call1(Core[237], lhs_change),
            _dD_ = caml_call2(Incremental[79][1][2], 0, _dC_);
           caml_call2(Incremental[79][2][6], node$1, _dD_);
           var
            _dE_ =
              caml_call2(f, key, caml_call1(Incremental[79][2][3], node$1)),
            _dF_ = [0, function(_dG_){return on_inner_change(key, _dG_);}],
            user_function_dep = caml_call2(Incremental[79][1][2], _dF_, _dE_);
           caml_call2(Incremental[79][2][6], result, user_function_dep);
           return caml_call3
                   (Core_Map[32], nodes, key, [0, node$1, user_function_dep]);
          }
          var
           new_nodes =
             caml_call5
              (Core_Map[81],
               prev_map[1],
               map,
               data_equal,
               prev_nodes[1],
               _dy_);
          prev_nodes[1] = new_nodes;
          prev_map[1] = map;
          return 0;
         }
         return caml_call2(Incremental[10], lhs, _dx_);
        }]);
     var
      _du_ = caml_call1(Core[237], lhs_change),
      _dv_ = caml_call2(Incremental[79][1][2], 0, _du_);
     caml_call2(Incremental[79][2][6], result, _dv_);
     return caml_call1(Incremental[79][2][3], result);};
   }
   function filter_mapi$0(cutoff, data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator(1, cutoff, data_equal, map)
                      (comparator, f);
             });
   }
   function mapi$0(cutoff, data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator(0, cutoff, data_equal, map)
                      (comparator, f);
             });
   }
   function map$0(cutoff, data_equal, map, f){
    return mapi$0
            (cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map$0(cutoff, data_equal, map, f){
    return filter_mapi$0
            (cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function merge$0(cutoff, data_equal_left, data_equal_right, map1, map2, f){
    function _ds_(key, diff){return caml_call2(f, key, diff);}
    return filter_mapi$0
            (cutoff,
             0,
             merge
              (data_equal_left,
               data_equal_right,
               map1,
               map2,
               function(param, diff){return [0, diff];}),
             _ds_);
   }
   function unzip_mapi
   (data_equal, left_result_equal, right_result_equal, input, f){
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var data_equal$0 = Core[246];
          if(left_result_equal)
           var sth$0 = left_result_equal[1], left_result_equal$0 = sth$0;
          else
           var left_result_equal$0 = Core[246];
          if(right_result_equal)
           var sth$1 = right_result_equal[1], right_result_equal$0 = sth$1;
          else
           var right_result_equal$0 = Core[246];
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[110][1], comparator),
           left_acc = [0, empty_map];
          function _dd_(param){return left_acc[1];}
          var
           left_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _dd_),
           right_acc = [0, empty_map];
          function _de_(param){return right_acc[1];}
          var
           right_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _de_),
           prev_map = [0, empty_map];
          function _df_(map){
           var
            match = caml_call1(Core_Map[28], prev_map[1]),
            match$0 = caml_call1(Core_Map[28], map);
           a:
           {
            if(match){
             if(! match$0){
              var
               _dk_ =
                 function(key, data){
                  var l = caml_call2(f, key, data)[1];
                  return l;
                 },
               left$0 = caml_call2(Core_Map[52], map, _dk_),
               _dl_ =
                 function(key, data){
                  var r = caml_call2(f, key, data)[2];
                  return r;
                 },
               right$0 = caml_call2(Core_Map[52], map, _dl_),
               right = right$0,
               left = left$0;
              break a;
             }
            }
            else if(! match$0){
             var
              _dm_ =
                function(param, _do_){
                 var
                  changed = _do_[2],
                  key = _do_[1],
                  right = param[2],
                  left = param[1],
                  _dp_ = changed[1];
                 if(847852583 === _dp_){
                  var _dq_ = caml_call2(Core_Map[41], right, key);
                  return [0, caml_call2(Core_Map[41], left, key), _dq_];
                 }
                 if(1013247643 <= _dp_){
                  var
                   match = changed[2],
                   new$0 = match[2],
                   prev = match[1],
                   match$0 = caml_call2(f, key, prev),
                   prev_b = match$0[2],
                   prev_a = match$0[1],
                   match$1 = caml_call2(f, key, new$0),
                   new_b = match$1[2],
                   new_a = match$1[1],
                   left$0 =
                     caml_call2(left_result_equal$0, prev_a, new_a)
                      ? left
                      : caml_call3(Core_Map[32], left, key, new_a),
                   right$0 =
                     caml_call2(right_result_equal$0, prev_b, new_b)
                      ? right
                      : caml_call3(Core_Map[32], right, key, new_b);
                  return [0, left$0, right$0];
                 }
                 var
                  element = changed[2],
                  match$2 = caml_call2(f, key, element),
                  b = match$2[2],
                  a = match$2[1],
                  _dr_ = caml_call3(Core_Map[32], right, key, b);
                 return [0, caml_call3(Core_Map[32], left, key, a), _dr_];
                },
              _dn_ =
                caml_call5
                 (Core_Map[81],
                  prev_map[1],
                  map,
                  data_equal$0,
                  [0, left_acc[1], right_acc[1]],
                  _dm_),
              right = _dn_[2],
              left = _dn_[1];
             break a;
            }
            var right = empty_map, left = empty_map;
           }
           if(1 - caml_call2(Core[246], left_acc[1], left))
            caml_call1(Incremental[79][2][4], left_result);
           if(1 - caml_call2(Core[246], right_acc[1], right))
            caml_call1(Incremental[79][2][4], right_result);
           left_acc[1] = left;
           right_acc[1] = right;
           prev_map[1] = map;
           return 0;
          }
          var
           input_change = caml_call2(Incremental[10], input, _df_),
           _dg_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], left_result, _dg_);
          var _dh_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], right_result, _dh_);
          var
           _di_ = caml_call1(Incremental[79][2][3], right_result),
           _dj_ = [0, caml_call1(Incremental[79][2][3], left_result), _di_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _dj_);
         });
    function _c__(_dc_){return _dc_[2];}
    var _c$_ = caml_call2(Incremental[10], pair, _c__);
    function _da_(_db_){return _db_[1];}
    return [0, caml_call2(Incremental[10], pair, _da_), _c$_];
   }
   function unzip(left_result_equal, right_result_equal, input){
    function _c9_(l, r){return caml_call2(Core_Tuple[1][10], l, r);}
    var
     data_equal =
       caml_call3
        (Core_Option[23], left_result_equal, right_result_equal, _c9_);
    return unzip_mapi
            (data_equal,
             left_result_equal,
             right_result_equal,
             input,
             function(param, data){return data;});
   }
   function unzip_mapi$0(cutoff, data_equal, input, f){
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var data_equal$0 = Core[246];
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[110][1], comparator),
           prev_map = [0, empty_map],
           prev_nodes = [0, empty_map],
           left_acc = [0, empty_map];
          function _cQ_(param){return left_acc[1];}
          var
           left_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _cQ_),
           right_acc = [0, empty_map];
          function _cR_(param){return right_acc[1];}
          var
           right_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _cR_),
           input_change = [];
          caml_update_dummy
           (input_change,
            [246,
             function(_cY_){
              function _cZ_(map){
               function _c0_(nodes, param){
                var changed = param[2], key = param[1], _c1_ = changed[1];
                if(847852583 === _c1_){
                 var
                  match = caml_call2(Core_Map[39], nodes, key),
                  right_dep = match[3],
                  left_dep = match[2],
                  node = match[1],
                  nodes$0 = caml_call2(Core_Map[41], nodes, key);
                 caml_call2(Incremental[79][2][7], left_result, left_dep);
                 caml_call2(Incremental[79][2][7], right_result, right_dep);
                 left_acc[1] = caml_call2(Core_Map[41], left_acc[1], key);
                 right_acc[1] = caml_call2(Core_Map[41], right_acc[1], key);
                 caml_call1(Incremental[79][2][5], node);
                 return nodes$0;
                }
                if(1013247643 <= _c1_){
                 var node$0 = caml_call2(Core_Map[39], nodes, key)[1];
                 caml_call1(Incremental[79][2][4], node$0);
                 return nodes;
                }
                function _c2_(param){
                 return caml_call2(Core_Map[39], prev_map[1], key);
                }
                var
                 node$1 =
                   caml_call3
                    (Incremental[79][2][2], incremental_state, 0, _c2_);
                function _c3_(c){
                 var _c8_ = caml_call1(Incremental[79][2][3], node$1);
                 return caml_call2(Incremental[59], _c8_, c);
                }
                caml_call2(Core_Option[41], cutoff, _c3_);
                var
                 _c4_ = caml_call1(Core[237], input_change),
                 _c5_ = caml_call2(Incremental[79][1][2], 0, _c4_);
                caml_call2(Incremental[79][2][6], node$1, _c5_);
                var
                 match$0 =
                   caml_call2
                    (f, key, caml_call1(Incremental[79][2][3], node$1)),
                 right_incr = match$0[2],
                 left_incr = match$0[1],
                 _c6_ =
                   [0,
                    function(data){
                     left_acc[1] =
                      caml_call3(Core_Map[32], left_acc[1], key, data);
                     return 0;
                    }],
                 left_user_function_dep =
                   caml_call2(Incremental[79][1][2], _c6_, left_incr),
                 _c7_ =
                   [0,
                    function(data){
                     right_acc[1] =
                      caml_call3(Core_Map[32], right_acc[1], key, data);
                     return 0;
                    }],
                 right_user_function_dep =
                   caml_call2(Incremental[79][1][2], _c7_, right_incr);
                caml_call2
                 (Incremental[79][2][6], left_result, left_user_function_dep);
                caml_call2
                 (Incremental[79][2][6],
                  right_result,
                  right_user_function_dep);
                return caml_call3
                        (Core_Map[32],
                         nodes,
                         key,
                         [0, node$1, left_user_function_dep, right_user_function_dep]);
               }
               var
                new_nodes =
                  caml_call5
                   (Core_Map[81],
                    prev_map[1],
                    map,
                    data_equal$0,
                    prev_nodes[1],
                    _c0_);
               prev_nodes[1] = new_nodes;
               prev_map[1] = map;
               return 0;
              }
              return caml_call2(Incremental[10], input, _cZ_);
             }]);
          var
           _cS_ = caml_call1(Core[237], input_change),
           _cT_ = caml_call2(Incremental[79][1][2], 0, _cS_);
          caml_call2(Incremental[79][2][6], left_result, _cT_);
          var
           _cU_ = caml_call1(Core[237], input_change),
           _cV_ = caml_call2(Incremental[79][1][2], 0, _cU_);
          caml_call2(Incremental[79][2][6], right_result, _cV_);
          var
           _cW_ = caml_call1(Incremental[79][2][3], right_result),
           _cX_ = [0, caml_call1(Incremental[79][2][3], left_result), _cW_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _cX_);
         });
    function _cL_(_cP_){return _cP_[2];}
    var _cM_ = caml_call2(Incremental[10], pair, _cL_);
    function _cN_(_cO_){return _cO_[1];}
    return [0, caml_call2(Incremental[10], pair, _cN_), _cM_];
   }
   function keys(map){
    return with_comparator$0
            (map,
             function(comparator){
              function add(key, param, acc){
               return caml_call2(Core_Set[11], acc, key);
              }
              function remove(key, param, acc){
               return caml_call2(Core_Set[12], acc, key);
              }
              function data_equal(param, _cK_){return 1;}
              return unordered_fold
                      ([0, data_equal],
                       0,
                       0,
                       _c_,
                       map,
                       caml_call1(Core_Set[3][1], comparator),
                       add,
                       remove);
             });
   }
   function partition_mapi(data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              var empty = caml_call1(Core_Map[110][1], comparator);
              function _cB_(key, param, _cI_){
               var
                second = _cI_[2],
                first = _cI_[1],
                _cJ_ = caml_call2(Core_Map[41], second, key);
               return [0, caml_call2(Core_Map[41], first, key), _cJ_];
              }
              function _cC_(key, data, param){
               var
                second = param[2],
                first = param[1],
                match = caml_call2(f, key, data);
               if(0 === match[0]){
                var data$0 = match[1];
                return [0,
                        caml_call3(Core_Map[31], first, key, data$0),
                        second];
               }
               var data$1 = match[1];
               return [0,
                       first,
                       caml_call3(Core_Map[31], second, key, data$1)];
              }
              var _cD_ = [0, empty, empty], _cE_ = 0;
              return unordered_fold
                      (data_equal,
                       [0,
                        function(key, param, data, _cF_){
                         var
                          second = _cF_[2],
                          first = _cF_[1],
                          match = caml_call2(f, key, data);
                         if(0 === match[0]){
                          var
                           data$0 = match[1],
                           _cG_ = caml_call2(Core_Map[41], second, key);
                          return [0,
                                  caml_call3(Core_Map[32], first, key, data$0),
                                  _cG_];
                         }
                         var
                          data$1 = match[1],
                          _cH_ = caml_call3(Core_Map[32], second, key, data$1);
                         return [0, caml_call2(Core_Map[41], first, key), _cH_];
                        }],
                       _cE_,
                       _d_,
                       map,
                       _cD_,
                       _cC_,
                       _cB_);
             });
   }
   function flatten(state, map){
    var
     _cw_ = caml_call1(Core_Map[2], map),
     result = [0, caml_call1(Core_Map[110][1], _cw_)];
    function _cx_(param){return result[1];}
    var node = caml_call3(Incremental[79][2][2], state, 0, _cx_);
    function _cy_(key, incr){
     var
      _cz_ =
        [0,
         function(a){
          result[1] = caml_call3(Core_Map[32], result[1], key, a);
          return 0;
         }],
      _cA_ = caml_call2(Incremental[79][1][2], _cz_, incr);
     return caml_call2(Incremental[79][2][6], node, _cA_);
    }
    caml_call2(Core_Map[45], map, _cy_);
    return caml_call1(Incremental[79][2][3], node);
   }
   function join(map_incr){
    return with_comparator$0
            (map_incr,
             function(comparator){
              var
               incremental_state = caml_call1(Incremental[4], map_incr),
               empty_map = caml_call1(Core_Map[110][1], comparator),
               result_map = [0, empty_map],
               old_map_of_incrs = [0, empty_map],
               current_dependencies = [0, empty_map];
              function _cq_(param){return result_map[1];}
              var
               result =
                 caml_call3(Incremental[79][2][2], incremental_state, 0, _cq_);
              function add_subnode(current_dependencies, key, data_node){
               var
                _cv_ =
                  [0,
                   function(data){
                    result_map[1] =
                     caml_call3(Core_Map[32], result_map[1], key, data);
                    return 0;
                   }],
                new_dep = caml_call2(Incremental[79][1][2], _cv_, data_node);
               caml_call2(Incremental[79][2][6], result, new_dep);
               return caml_call3
                       (Core_Map[32], current_dependencies, key, new_dep);
              }
              function remove_subnode(current_dependencies, key){
               var dep = caml_call2(Core_Map[39], current_dependencies, key);
               caml_call2(Incremental[79][2][7], result, dep);
               result_map[1] = caml_call2(Core_Map[41], result_map[1], key);
               return caml_call2(Core_Map[41], current_dependencies, key);
              }
              function _cr_(map_of_incrs){
               function _ct_(current_dependencies, param){
                var diff = param[2], key = param[1], _cu_ = diff[1];
                if(847852583 === _cu_)
                 return remove_subnode(current_dependencies, key);
                if(1013247643 <= _cu_){
                 var data_node = diff[2][2];
                 return add_subnode
                         (remove_subnode(current_dependencies, key), key, data_node);
                }
                var data_node$0 = diff[2];
                return add_subnode(current_dependencies, key, data_node$0);
               }
               var
                new_dependency_map =
                  caml_call5
                   (Core_Map[81],
                    old_map_of_incrs[1],
                    map_of_incrs,
                    Core[246],
                    current_dependencies[1],
                    _ct_);
               current_dependencies[1] = new_dependency_map;
               old_map_of_incrs[1] = map_of_incrs;
               return 0;
              }
              var
               lhs_change = caml_call2(Incremental[10], map_incr, _cr_),
               _cs_ = caml_call2(Incremental[79][1][2], 0, lhs_change);
              caml_call2(Incremental[79][2][6], result, _cs_);
              return caml_call1(Incremental[79][2][3], result);
             });
   }
   function separate(input_map, data_equal){
    var incremental_state = caml_call1(Incremental[4], input_map);
    return with_comparator$0
            (input_map,
             function(comparator){
              var
               empty = caml_call1(Core_Map[110][1], comparator),
               state = [0, empty, empty, empty];
              function _ce_(param){return state[3];}
              var
               output_map_node =
                 caml_call3(Incremental[79][2][2], incremental_state, 0, _ce_);
              function make_node_depend_on_input_map_(node, input_map_changed){
               var
                _cp_ = caml_call1(Core_Lazy[32], input_map_changed),
                dependency = caml_call2(Incremental[79][1][2], 0, _cp_);
               return caml_call2(Incremental[79][2][6], node, dependency);
              }
              var input_map_changed = [];
              caml_update_dummy
               (input_map_changed,
                [246,
                 function(_cf_){
                  function _cg_(input_map){
                   var prev_input_map = state[1];
                   function _ch_(param, _cj_){
                    var
                     change = _cj_[2],
                     key = _cj_[1],
                     output_map = param[2],
                     expert_nodes = param[1],
                     _ck_ = change[1];
                    if(847852583 === _ck_){
                     var old_node = caml_call2(Core_Map[39], expert_nodes, key);
                     caml_call1(Incremental[79][2][5], old_node);
                     caml_call1(Incremental[79][2][4], output_map_node);
                     var _cl_ = caml_call2(Core_Map[41], output_map, key);
                     return [0,
                             caml_call2(Core_Map[41], expert_nodes, key),
                             _cl_];
                    }
                    if(1013247643 <= _ck_){
                     var _cm_ = caml_call2(Core_Map[39], expert_nodes, key);
                     caml_call1(Incremental[79][2][4], _cm_);
                     return [0, expert_nodes, output_map];
                    }
                    function _ci_(param){
                     return caml_call2(Core_Map[39], state[1], key);
                    }
                    var
                     node =
                       caml_call3
                        (Incremental[79][2][2], incremental_state, 0, _ci_);
                    make_node_depend_on_input_map_(node, input_map_changed);
                    caml_call1(Incremental[79][2][4], output_map_node);
                    var
                     _cn_ = caml_call1(Incremental[79][2][3], node),
                     _co_ = caml_call3(Core_Map[31], output_map, key, _cn_);
                    return [0,
                            caml_call3(Core_Map[31], expert_nodes, key, node),
                            _co_];
                   }
                   var
                    match =
                      caml_call5
                       (Core_Map[81],
                        prev_input_map,
                        input_map,
                        data_equal,
                        [0, state[2], state[3]],
                        _ch_),
                    output_map = match[2],
                    expert_nodes = match[1];
                   state[1] = input_map;
                   state[2] = expert_nodes;
                   state[3] = output_map;
                   return 0;
                  }
                  return caml_call2(Incremental[10], input_map, _cg_);
                 }]);
              make_node_depend_on_input_map_
               (output_map_node, input_map_changed);
              return caml_call1(Incremental[79][2][3], output_map_node);
             });
   }
   function subrange(opt, map_incr){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(range){
     return with_old2
             (map_incr,
              range,
              function(old, map, range){
               var compare = caml_call1(Core_Map[2], map)[1];
               function equal(l, r){
                var _cd_ = caml_call2(compare, l, r);
                return caml_call2(Core[90], _cd_, 0);
               }
               function maybe_bound_equal(a_002, b_003){
                if(caml_call2(Ppx_compare_lib[1], a_002, b_003)) return 1;
                if(typeof a_002 === "number"){
                 if(typeof b_003 === "number") return 1;
                 if(1 === b_003[0]) return 0;
                }
                else{
                 if(0 === a_002[0]){
                  var a_004 = a_002[1];
                  if(typeof b_003 !== "number" && 0 === b_003[0]){
                   var b_005 = b_003[1];
                   return equal(a_004, b_005);
                  }
                  return 0;
                 }
                 var a_006 = a_002[1];
                 if(typeof b_003 === "number") return 0;
                 if(0 !== b_003[0]){
                  var b_007 = b_003[1];
                  return equal(a_006, b_007);
                 }
                }
                return 0;
               }
               function range_is_empty(min, max){
                a:
                if(typeof min !== "number"){
                 if(0 === min[0]){
                  var min$0 = min[1];
                  if(typeof max === "number") break a;
                  if(0 === max[0]){
                   var
                    max$0 = max[1],
                    _ca_ = caml_call2(compare, min$0, max$0);
                   return caml_call2(Core[91], _ca_, 0);
                  }
                  var max$1 = max[1], min$1 = min$0;
                 }
                 else{
                  var _cc_ = min[1];
                  if(typeof max === "number") break a;
                  var max$1 = max[1], min$1 = _cc_;
                 }
                 var _cb_ = caml_call2(compare, min$1, max$1);
                 return caml_call2(Core[88], _cb_, 0);
                }
                return 0;
               }
               function range_includes(min, max, key){
                var
                 _b$_ = caml_call3(Core_Maybe_bound[17], min, key, compare);
                return _b$_
                        ? caml_call3(Core_Maybe_bound[18], max, key, compare)
                        : _b$_;
               }
               if(! range){
                var _b4_ = caml_call1(Core_Map[2], map);
                return caml_call1(Core_Map[110][1], _b4_);
               }
               var range$0 = range[1], max = range$0[2], min = range$0[1];
               function from_scratch(param){
                return caml_call3(Core_Map[94], map, min, max);
               }
               if(old){
                var _b2_ = old[1], match = _b2_[2];
                if(match){
                 var
                  old_range = match[1],
                  old_min = old_range[1],
                  old_map = _b2_[1],
                  old_max = old_range[2];
                 if
                  (!
                   range_is_empty(old_min, old_max)
                   &&
                    !
                    range_is_empty(min, old_max)
                    && ! range_is_empty(old_min, max)){
                  var
                   old_res = _b2_[3],
                   old_max$0 = old_range[2],
                   _b3_ =
                     function(param){
                      function apply_diff_in_intersection(param$0, _b8_){
                       var
                        data = _b8_[2],
                        key = _b8_[1],
                        map = param$0[2],
                        outside = param$0[1],
                        _b7_ = range_includes(min, max, key),
                        _b9_ = _b7_ ? range_includes(old_min, old_max$0, key) : _b7_;
                       if(! _b9_){
                        var outside$0 = outside - 1 | 0;
                        return 0 <= outside$0
                                ? [0, outside$0, caml_call2(Core_Map[41], map, key)]
                                : caml_call1(param, from_scratch(0));
                       }
                       var _b__ = data[1];
                       if(847852583 === _b__)
                        return [0, outside, caml_call2(Core_Map[41], map, key)];
                       var data$0 = 1013247643 <= _b__ ? data[2][2] : data[2];
                       return [0,
                               outside,
                               caml_call3(Core_Map[32], map, key, data$0)];
                      }
                      var
                       outside_cutoff = caml_call1(Core_Map[29], old_res) / 4 | 0,
                       with_updated_values_in_interse =
                         caml_call5
                           (Core_Map[81],
                            old_map,
                            map,
                            data_equal,
                            [0, outside_cutoff, old_res],
                            apply_diff_in_intersection)
                          [2];
                      if
                       (caml_call4
                         (Core_Tuple[1][10],
                          maybe_bound_equal,
                          maybe_bound_equal,
                          old_range,
                          range$0))
                       return with_updated_values_in_interse;
                      var
                       without_keys_out_of_range =
                         caml_call3
                          (Core_Map[94], with_updated_values_in_interse, min, max);
                      function map_append_exn(lower_part, upper_part){
                       var
                        match = caml_call2(Core_Map[93], lower_part, upper_part);
                       if(typeof match === "number")
                        return caml_call1(Core[6], cst_impossible_case_BUG_in_inc);
                       var map = match[2];
                       return map;
                      }
                      if(typeof old_min === "number")
                       var
                        _b5_ = caml_call1(Core_Map[2], map),
                        lower_part = caml_call1(Core_Map[110][1], _b5_);
                      else if(0 === old_min[0])
                       var
                        old_min$0 = old_min[1],
                        lower_part =
                          caml_call3(Core_Map[94], map, min, [1, old_min$0]);
                      else
                       var
                        old_min$1 = old_min[1],
                        lower_part =
                          caml_call3(Core_Map[94], map, min, [0, old_min$1]);
                      if(typeof old_max$0 === "number")
                       var
                        _b6_ = caml_call1(Core_Map[2], map),
                        upper_part = caml_call1(Core_Map[110][1], _b6_);
                      else if(0 === old_max$0[0])
                       var
                        old_max = old_max$0[1],
                        upper_part =
                          caml_call3(Core_Map[94], map, [1, old_max], max);
                      else
                       var
                        old_max$1 = old_max$0[1],
                        upper_part =
                          caml_call3(Core_Map[94], map, [0, old_max$1], max);
                      var
                       with_new_keys_now_in_range =
                         map_append_exn
                          (lower_part,
                           map_append_exn(without_keys_out_of_range, upper_part));
                      return with_new_keys_now_in_range;
                     };
                  return caml_call1(Core[260], _b3_);
                 }
                 return from_scratch(0);
                }
               }
               return from_scratch(0);
              });};
   }
   function rekey(data_equal, map_incr, outer_comparator, f){
    function _bU_(key, data, output){
     var _b1_ = caml_call2(f, key, data);
     return caml_call2(Core_Map[41], output, _b1_);
    }
    function _bV_(key, data, output){
     var _b0_ = caml_call2(f, key, data);
     return caml_call3(Core_Map[31], output, _b0_, data);
    }
    var _bW_ = caml_call1(Core_Map[4], outer_comparator), _bX_ = 0;
    return unordered_fold
            (data_equal,
             [0,
              function(key, old_data, new_data, output){
               var
                prev_key = caml_call2(f, key, old_data),
                new_key = caml_call2(f, key, new_data),
                _bY_ =
                  caml_call2
                   (caml_call1(Core_Map[2], output)[1], prev_key, new_key);
               if(caml_call2(Core[90], _bY_, 0))
                return caml_call3(Core_Map[32], output, new_key, new_data);
               var _bZ_ = caml_call2(Core_Map[41], output, prev_key);
               return caml_call3(Core_Map[31], _bZ_, new_key, new_data);
              }],
             _bX_,
             _e_,
             map_incr,
             _bW_,
             _bV_,
             _bU_);
   }
   function index_byi(data_equal, map_incr, outer_comparator, index){
    return with_comparator$0
            (map_incr,
             function(inner_comparator){
              function _bQ_(inner_key, data, outer_map){
               var match = caml_call2(index, inner_key, data);
               if(! match) return outer_map;
               var outer_key = match[1];
               function _bT_(param){
                if(! param)
                 return caml_call1(Core[6], cst_BUG_Hit_supposedly_impossi);
                var
                 inner_map = param[1],
                 inner_map$0 = caml_call2(Core_Map[41], inner_map, inner_key);
                return caml_call1(Core_Map[28], inner_map$0)
                        ? 0
                        : [0, inner_map$0];
               }
               return caml_call3(Core_Map[36], outer_map, outer_key, _bT_);
              }
              function _bR_(inner_key, data, outer_map){
               var match = caml_call2(index, inner_key, data);
               if(! match) return outer_map;
               var outer_key = match[1];
               function _bS_(param){
                if(! param)
                 return caml_call3
                         (Core_Map[110][2], inner_comparator, inner_key, data);
                var inner_map = param[1];
                return caml_call3(Core_Map[31], inner_map, inner_key, data);
               }
               return caml_call3(Core_Map[37], outer_map, outer_key, _bS_);
              }
              return unordered_fold
                      (data_equal,
                       0,
                       0,
                       _f_,
                       map_incr,
                       caml_call1(Core_Map[4], outer_comparator),
                       _bR_,
                       _bQ_);
             });
   }
   function index_by(data_equal, map_incr, comparator, index){
    return index_byi
            (data_equal,
             map_incr,
             comparator,
             function(param, data){return caml_call1(index, data);});
   }
   function is_known(param){
    if(typeof param === "number" && param) return 0;
    return 1;
   }
   function to_option(param){
    if(typeof param === "number") return 0;
    var k = param[1];
    return [0, k];
   }
   function find_key_range_linear(from, to, map){
    var
     len = caml_call1(Core_Map[29], map),
     begin_key = caml_call2(Core_Int[84], from, len) ? 0 : 1,
     end_key = caml_call2(Core_Int[84], to, len) ? 0 : 1;
    function find_keys(fold, start_pos, advance_pos){
     function _bO_(param){
      return caml_call3
              (fold,
               map,
               [0, begin_key, end_key, start_pos],
               function(key, param$0, _bP_){
                var
                 pos = _bP_[3],
                 end_key = _bP_[2],
                 begin_key = _bP_[1],
                 begin_key$0 =
                   caml_call2(Core_Int[86], pos, from) ? [0, key] : begin_key,
                 end_key$0 =
                   caml_call2(Core_Int[86], pos, to) ? [0, key] : end_key;
                if(is_known(begin_key$0) && is_known(end_key$0))
                 return caml_call1(param, [0, begin_key$0, end_key$0, pos]);
                return [0,
                        begin_key$0,
                        end_key$0,
                        caml_call1(advance_pos, pos)];
               });
     }
     return caml_call1(Core[260], _bO_);
    }
    if(caml_call2(Core[92], to, len - from | 0))
     var
      _bK_ = function(pos){return pos + 1 | 0;},
      match = find_keys(Core_Map[55], 0, _bK_);
    else
     var
      _bN_ = function(pos){return pos - 1 | 0;},
      match = find_keys(Core_Map[57], len - 1 | 0, _bN_);
    var end_key$0 = match[2], begin_key$0 = match[1];
    function _bL_(begin_key){return [0, begin_key, to_option(end_key$0)];}
    var _bM_ = to_option(begin_key$0);
    return caml_call2(Core_Option[29], _bM_, _bL_);
   }
   function rank(map, key){
    return with_comparator$0
            (map,
             function(comparator){
              var compare_key = comparator[1];
              function same_key(a, b){
               var _bJ_ = caml_call2(compare_key, a, b);
               return caml_call2(Core[90], _bJ_, 0);
              }
              function process(old, new_map, new_key){
               var old$0 = old;
               for(;;){
                if(! caml_call2(Core_Map[42], new_map, new_key)) return 0;
                if(old$0){
                 var
                  match = old$0[1],
                  old_rank = match[3],
                  old_key = match[2],
                  old_map = match[1];
                 if
                  (caml_call2(Core[246], new_map, old_map)
                   && same_key(old_key, new_key))
                  return old_rank;
                 if(old_rank){
                  var old_rank$0 = old_rank[1];
                  if(caml_call2(Core[246], new_map, old_map)){
                   var _bB_ = caml_call2(compare_key, new_key, old_key);
                   if(caml_call2(Core[92], _bB_, 0))
                    var
                     upper_bound = [1, old_key],
                     lower_bound = [1, new_key],
                     subrange =
                       caml_call3(Core_Map[94], new_map, lower_bound, upper_bound),
                     _bE_ =
                       (old_rank$0 - caml_call1(Core_Map[29], subrange) | 0) - 1
                       | 0;
                   else
                    var
                     upper_bound$0 = [1, new_key],
                     lower_bound$0 = [1, old_key],
                     subrange$0 =
                       caml_call3
                        (Core_Map[94], new_map, lower_bound$0, upper_bound$0),
                     _bE_ =
                       (old_rank$0 + caml_call1(Core_Map[29], subrange$0) | 0) + 1
                       | 0;
                   return [0, _bE_];
                  }
                  if(same_key(new_key, old_key)){
                   var
                    _bC_ =
                      function(acc, param){
                       var diff = param[2], diff_key = param[1];
                       if(typeof diff !== "number"){
                        var _bG_ = diff[1];
                        if(-57574468 === _bG_){
                         var _bH_ = caml_call2(compare_key, diff_key, new_key);
                         if(caml_call2(Core[92], _bH_, 0)) return acc + 1 | 0;
                        }
                        else if(847852583 === _bG_){
                         var _bI_ = caml_call2(compare_key, diff_key, new_key);
                         if(caml_call2(Core[92], _bI_, 0)) return acc - 1 | 0;
                        }
                       }
                       return acc;
                      },
                    _bD_ = function(param, _bF_){return 1;};
                   return [0,
                           caml_call5
                            (Core_Map[81], old_map, new_map, _bD_, old_rank$0, _bC_)];
                  }
                  var
                   old_rank$1 =
                     process
                      ([0, [0, old_map, old_key, [0, old_rank$0]]],
                       new_map,
                       old_key),
                   old$1 = [0, [0, new_map, old_key, old_rank$1]],
                   old$0 = old$1;
                  continue;
                 }
                }
                return caml_call2(Core_Map[100], new_map, new_key);
               }
              }
              return with_old2(map, key, process);
             });
   }
   function subrange_by_rank(data_equal, map, range){
    function find_key_range(range){
     return with_old2
             (map,
              range,
              function(old, map, param){
               var
                to = param[2],
                from = param[1],
                _bi_ = caml_call2(Core_Int[88], to, from),
                _bj_ = _bi_ || caml_call2(Core_Int[88], from, 0);
               if(_bj_){
                var
                 _bk_ =
                   [0, [1, [0, _g_, [0, caml_call1(Core[356], to), 0]]], 0],
                 _bl_ =
                   [0,
                    [1, [0, _h_, [0, caml_call1(Core[356], from), 0]]],
                    _bk_],
                 _bm_ =
                   [1,
                    [0,
                     caml_call1(Sexplib0_Sexp_conv[7], cst_Invalid_indices),
                     _bl_]];
                caml_call1(Core[253], _bm_);
               }
               if(old){
                var _bn_ = old[1], _bo_ = _bn_[3];
                if(_bo_){
                 var
                  _bp_ = _bo_[1],
                  end_key_opt$0 = _bp_[2],
                  begin_key = _bp_[1],
                  match = _bn_[2],
                  old_to = match[2],
                  old_from = match[1],
                  old_map = _bn_[1],
                  compare = caml_call1(Core_Map[2], map)[1],
                  find_offset =
                    function(key, changed_key, change){
                     var _bz_ = caml_call2(compare, changed_key, key);
                     if(! caml_call2(Core_Int[88], _bz_, 0)) return 0;
                     if(typeof change !== "number"){
                      var _bA_ = change[1];
                      if(-57574468 === _bA_) return -1;
                      if(847852583 === _bA_) return 1;
                     }
                     return 0;
                    },
                  range_offset_begin = from - old_from | 0,
                  range_offset_end = to - old_to | 0,
                  adjust_and_offset =
                    function(by$1, key$1){
                     a:
                     {
                      if
                       (caml_call2(Core[88], by$1, 0)
                        && ! caml_call2(Core_Map[42], map, key$1)){var _by_ = 1; break a;}
                      var _by_ = 0;
                     }
                     var by$2 = by$1 + _by_ | 0, key = key$1, by = by$2;
                     for(;;){
                      if(caml_call2(Core_Int[86], by, 0)) return [0, key];
                      if(caml_call2(Core_Int[88], by, 0))
                       var add = 1, closest_dir = -640801497;
                      else
                       var add = -1, closest_dir = -779285466;
                      var match = caml_call3(Core_Map[97], map, closest_dir, key);
                      if(! match) return 0;
                      var
                       key$0 = match[1][1],
                       by$0 = by + add | 0,
                       key = key$0,
                       by = by$0;
                     }
                    },
                  diff =
                    function(init, f){
                     function _bw_(param, _bx_){return 1;}
                     return caml_call5(Core_Map[81], old_map, map, _bw_, init, f);
                    };
                 if(end_key_opt$0)
                  var
                   end_key = end_key_opt$0[1],
                   match$0 =
                     diff
                      (_i_,
                       function(param, _bt_){
                        var
                         change = _bt_[2],
                         key = _bt_[1],
                         offset_end = param[2],
                         offset_begin = param[1],
                         _bu_ = offset_end + find_offset(end_key, key, change) | 0;
                        return [0,
                                offset_begin + find_offset(begin_key, key, change) | 0,
                                _bu_];
                       }),
                   map_offset_end = match$0[2],
                   map_offset_begin = match$0[1],
                   end_key_opt$1 =
                     adjust_and_offset
                      (map_offset_end + range_offset_end | 0, end_key),
                   end_key_opt$2 = end_key_opt$1,
                   begin_key_opt =
                     adjust_and_offset
                      (map_offset_begin + range_offset_begin | 0, begin_key);
                 else
                  var
                   map_offset_begin$0 =
                     diff
                      (0,
                       function(offset_begin, param){
                        var change = param[2], key = param[1];
                        return offset_begin + find_offset(begin_key, key, change)
                               | 0;
                       }),
                   _bg_ = function(_bv_){return _bv_[1];},
                   _bh_ = find_key_range_linear(to, to, map),
                   end_key_opt = caml_call2(Core_Option[29], _bh_, _bg_),
                   begin_key_opt$0 =
                     adjust_and_offset
                      (map_offset_begin$0 + range_offset_begin | 0, begin_key),
                   end_key_opt$2 = end_key_opt,
                   begin_key_opt = begin_key_opt$0;
                 var _bq_ = caml_call1(Core_Map[42], map);
                 if(! caml_call2(Core_Option[43], begin_key_opt, _bq_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _k_], 1);
                 var _br_ = caml_call1(Core_Map[42], map);
                 if(! caml_call2(Core_Option[43], end_key_opt$2, _br_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _j_], 1);
                 var
                  _bs_ =
                    function(begin_key){return [0, begin_key, end_key_opt$2];};
                 return caml_call2(Core_Option[29], begin_key_opt, _bs_);
                }
               }
               return find_key_range_linear(from, to, map);
              });
    }
    function symbol(new$0, bound){
     function _bf_(param){return new$0;}
     return caml_call2(Core_Maybe_bound[16], bound, _bf_);
    }
    var
     _aU_ = caml_call1(Incremental[4], map),
     return$0 = caml_call1(Incremental[9], _aU_);
    function _aV_(param){
     if(3 < param >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     switch(param){
       case 0:
        return caml_call1(return$0, _m_);
       case 1:
        var
         _aY_ =
           function(param){
            var _be_ = param[1];
            if(typeof _be_ !== "number"){
             var pattern_syntax_008 = _be_[1];
             if(typeof param[2] !== "number") return pattern_syntax_008;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
           },
         l = caml_call2(Incremental[76][3][5], range, _aY_),
         _aZ_ =
           function(param){
            var pattern_syntax_009 = param[1];
            if
             (typeof pattern_syntax_009 !== "number"
              && typeof param[2] !== "number")
             return pattern_syntax_009;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
           },
         lb = caml_call2(Incremental[76][3][5], range, _aZ_),
         _a0_ =
           function(param){
            if(typeof param[1] !== "number"){
             var match = param[2];
             if(typeof match !== "number"){
              var pattern_syntax_010 = match[1];
              return pattern_syntax_010;
             }
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
           },
         u = caml_call2(Incremental[76][3][5], range, _a0_),
         _a1_ =
           function(param){
            if(typeof param[1] !== "number"){
             var pattern_syntax_011 = param[2];
             if(typeof pattern_syntax_011 !== "number")
              return pattern_syntax_011;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
           },
         ub = caml_call2(Incremental[76][3][5], range, _a1_),
         let_syntax_016 = find_key_range(caml_call2(Incremental[40], l, u)),
         _a2_ =
           function(param){
            var
             match = param[2],
             ub = match[2],
             lb = match[1],
             key_range = param[1];
            if(! key_range) return 0;
            var _bc_ = key_range[1], match$0 = _bc_[2], begin_key = _bc_[1];
            if(! match$0) return [0, [0, symbol(begin_key, lb), 0]];
            var end_key = match$0[1], _bd_ = symbol(end_key, ub);
            return [0, [0, symbol(begin_key, lb), _bd_]];
           },
         _a3_ = caml_call2(Incremental[76][3][20], lb, ub),
         _a4_ = caml_call2(Incremental[76][3][20], let_syntax_016, _a3_);
        return caml_call2(Incremental[76][3][5], _a4_, _a2_);
       case 2:
        var
         _a5_ =
           function(param){
            var _bb_ = param[1];
            if(typeof _bb_ !== "number"){
             var pattern_syntax_012 = _bb_[1];
             if(typeof param[2] === "number") return pattern_syntax_012;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
           },
         l$0 = caml_call2(Incremental[76][3][5], range, _a5_),
         _a6_ =
           function(param){
            var pattern_syntax_013 = param[1];
            if
             (typeof pattern_syntax_013 !== "number"
              && typeof param[2] === "number")
             return pattern_syntax_013;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
           },
         lb$0 = caml_call2(Incremental[76][3][5], range, _a6_),
         let_syntax_020 =
           find_key_range(caml_call2(Incremental[40], l$0, l$0)),
         _a7_ =
           function(param){
            var lb = param[2], key_range = param[1];
            if(! key_range) return 0;
            var key = key_range[1][1];
            return [0, [0, symbol(key, lb), 0]];
           },
         _a8_ = caml_call2(Incremental[76][3][20], let_syntax_020, lb$0);
        return caml_call2(Incremental[76][3][5], _a8_, _a7_);
       default:
        var
         _a9_ =
           function(param){
            if(typeof param[1] === "number"){
             var match = param[2];
             if(typeof match !== "number"){
              var pattern_syntax_014 = match[1];
              return pattern_syntax_014;
             }
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
           },
         u$0 = caml_call2(Incremental[76][3][5], range, _a9_),
         _a__ =
           function(param){
            if(typeof param[1] === "number"){
             var pattern_syntax_015 = param[2];
             if(typeof pattern_syntax_015 !== "number")
              return pattern_syntax_015;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
           },
         ub$0 = caml_call2(Incremental[76][3][5], range, _a__),
         let_syntax_023 =
           find_key_range(caml_call2(Incremental[40], u$0, u$0)),
         _a$_ =
           function(param){
            var ub = param[2], key_range = param[1];
            if(! key_range) return 0;
            var key = key_range[1][1];
            return [0, [0, 0, symbol(key, ub)]];
           },
         _ba_ = caml_call2(Incremental[76][3][20], let_syntax_023, ub$0);
        return caml_call2(Incremental[76][3][5], _ba_, _a$_);
     }
    }
    function _aW_(param){
     return typeof param[1] === "number"
             ? typeof param[2] === "number" ? 0 : 3
             : typeof param[2] === "number" ? 2 : 1;
    }
    var
     _aX_ = caml_call2(Incremental[76][3][5], range, _aW_),
     key_range = caml_call2(Incremental[76][3][1], _aX_, _aV_);
    return subrange(data_equal, map)(key_range);
   }
   function transpose(opt, k2_comparator, m){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return with_comparator$0
            (m,
             function(k1_comparator){
              function update(k1, old_data, new_data, acc){
               function _aO_(acc, param){
                var diff = param[2], k2 = param[1], _aP_ = diff[1];
                if(847852583 === _aP_)
                 var value = 0;
                else
                 var
                  x = 1013247643 <= _aP_ ? diff[2][2] : diff[2],
                  value = [0, x];
                function _aQ_(acc_inner){
                 function _aR_(param){return value;}
                 var
                  _aS_ = caml_call1(Core_Map[110][1], k1_comparator),
                  _aT_ = caml_call2(Core_Option[34], acc_inner, _aS_),
                  acc_inner$0 = caml_call3(Core_Map[36], _aT_, k1, _aR_);
                 return caml_call1(Core_Map[28], acc_inner$0)
                         ? 0
                         : [0, acc_inner$0];
                }
                return caml_call3(Core_Map[36], acc, k2, _aQ_);
               }
               return caml_call5
                       (Core_Map[81], old_data, new_data, data_equal, acc, _aO_);
              }
              function add(key, data){
               var _aM_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_aN_){return update(key, _aM_, data, _aN_);};
              }
              function remove(key, data){
               var _aK_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_aL_){return update(key, data, _aK_, _aL_);};
              }
              return unordered_fold
                      (0,
                       [0, update],
                       0,
                       _v_,
                       m,
                       caml_call1(Core_Map[4], k2_comparator),
                       add,
                       remove);
             });
   }
   function collapse_by(data_equal, map_incr, merge_keys, comparator){
    function _aE_(outer_key, inner_key, param, acc){
     var _aJ_ = caml_call2(merge_keys, outer_key, inner_key);
     return caml_call2(Core_Map[41], acc, _aJ_);
    }
    function _aF_(outer_key, inner_key, data, acc){
     var _aI_ = caml_call2(merge_keys, outer_key, inner_key);
     return caml_call3(Core_Map[31], acc, _aI_, data);
    }
    var _aG_ = caml_call1(Core_Map[4], comparator);
    return unordered_fold_nested_maps
            (data_equal,
             _w_,
             [0,
              function(outer_key, inner_key, param, new_data, acc){
               var _aH_ = caml_call2(merge_keys, outer_key, inner_key);
               return caml_call3(Core_Map[32], acc, _aH_, new_data);
              }],
             map_incr,
             _aG_,
             _aF_,
             _aE_);
   }
   function collapse(data_equal, map_incr, inner_comparator){
    return with_comparator$0
            (map_incr,
             function(outer_comparator){
              var
               inner_comparator$0 = inner_comparator[1],
               comparator =
                 caml_call2
                  (Core_Tuple[1][5], outer_comparator, inner_comparator$0);
              return collapse_by
                      (data_equal, map_incr, Core_Tuple[1][6], [0, comparator]);
             });
   }
   function expand(data_equal, map_incr, outer_comparator, inner_comparator){
    function _au_(param, _aB_, acc){
     var inner_key = param[2], outer_key = param[1];
     function _aC_(param){
      if(! param) return 0;
      var
       map = param[1],
       map$0 = caml_call2(Core_Map[41], map, inner_key),
       _aD_ = 1 - caml_call1(Core_Map[28], map$0);
      return caml_call2(Core_Option[55], _aD_, map$0);
     }
     return caml_call3(Core_Map[36], acc, outer_key, _aC_);
    }
    function _av_(param, data, acc){
     var inner_key = param[2], outer_key = param[1];
     function _aA_(param){
      if(! param)
       return caml_call3(Core_Map[5], inner_comparator, inner_key, data);
      var map = param[1];
      return caml_call3(Core_Map[31], map, inner_key, data);
     }
     return caml_call3(Core_Map[37], acc, outer_key, _aA_);
    }
    var _aw_ = caml_call1(Core_Map[4], outer_comparator), _ax_ = 0;
    return unordered_fold
            (data_equal,
             [0,
              function(param, _ay_, new_data, acc){
               var inner_key = param[2], outer_key = param[1];
               function _az_(param){
                if(! param)
                 return caml_call3
                         (Core_Map[5], inner_comparator, inner_key, new_data);
                var map = param[1];
                return caml_call3(Core_Map[32], map, inner_key, new_data);
               }
               return caml_call3(Core_Map[37], acc, outer_key, _az_);
              }],
             _ax_,
             _x_,
             map_incr,
             _aw_,
             _av_,
             _au_);
   }
   function counti(data_equal, map_incr, f){
    function _at_(key, data, count){
     return caml_call2(f, key, data) ? count - 1 | 0 : count;
    }
    return unordered_fold
            (data_equal,
             0,
             0,
             _y_,
             map_incr,
             0,
             function(key, data, count){
              return caml_call2(f, key, data) ? count + 1 | 0 : count;
             },
             _at_);
   }
   function count(data_equal, map_incr, f){
    return counti
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function existsi(data_equal, map_incr, f){
    function _ar_(count){return caml_call2(Core[93], count, 0);}
    var _as_ = counti(data_equal, map_incr, f);
    return caml_call2(Incremental[10], _as_, _ar_);
   }
   function exists(data_equal, map_incr, f){
    return existsi
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function sum(data_equal, map_incr, Group){
    return function(f){
     function _an_(param, v, acc){
      var _aq_ = caml_call1(f, v);
      return caml_call2(Group[3], acc, _aq_);
     }
     function _ao_(param, v, acc){
      var _ap_ = caml_call1(f, v);
      return caml_call2(Group[2], acc, _ap_);
     }
     return unordered_fold
             (data_equal, 0, 0, _z_, map_incr, Group[1], _ao_, _an_);};
   }
   function for_alli(data_equal, map_incr, f){
    function _al_(count){return caml_call2(Core[90], count, 0);}
    var
     _am_ =
       counti
        (data_equal,
         map_incr,
         function(key, data){return 1 - caml_call2(f, key, data);});
    return caml_call2(Incremental[10], _am_, _al_);
   }
   function for_all(data_equal, map_incr, f){
    return for_alli
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   var For_testing = [0, find_key_range_linear];
   function M(K){return [0];}
   function create(opt, input_map, comparator){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    var self = [];
    caml_update_dummy
     (self,
      [246,
       function(param){
        function _ad_(input_map){
         var _af_ = caml_obj_tag(self);
         a:
         if(250 === _af_)
          var self$0 = self[1];
         else{
          if(246 !== _af_ && 244 !== _af_){var self$0 = self; break a;}
          var self$0 = caml_call1(CamlinternalLazy[2], self);
         }
         function _ag_(param, _ah_){
          var
           changed_value = _ah_[2],
           key = _ah_[1],
           entries = caml_call2(Core_Map[35], self$0[2], key);
          function _ai_(entry){
           var _aj_ = changed_value[1];
           if(847852583 === _aj_)
            var _ak_ = 0;
           else
            var
             new_value =
               1013247643 <= _aj_ ? changed_value[2][2] : changed_value[2],
             _ak_ = [0, new_value];
           entry[1] = _ak_;
           return caml_call1(Incremental[79][2][4], entry[2]);
          }
          return caml_call2(Core_List[9], entries, _ai_);
         }
         caml_call5(Core_Map[81], self$0[1], input_map, data_equal, 0, _ag_);
         self$0[1] = input_map;
         return 0;
        }
        var
         updater_node = caml_call2(Incremental[10], input_map, _ad_),
         empty_map = caml_call1(Core_Map[110][1], comparator),
         _ae_ = caml_call1(Incremental[4], input_map);
        return [0,
                empty_map,
                empty_map,
                updater_node,
                caml_call2(Incremental[50][2], _ae_, 0)];
       }]);
    var _ac_ = caml_obj_tag(self);
    if(250 === _ac_) return self[1];
    if(246 !== _ac_ && 244 !== _ac_) return self;
    return caml_call1(CamlinternalLazy[2], self);
   }
   function find(t, key){
    var match = caml_call2(Core_Map[35], t[2], key);
    if(match){
     var entry = match[1];
     return caml_call1(Incremental[79][2][3], entry[2]);
    }
    var incremental_state = caml_call1(Incremental[4], t[3]);
    function _T_(param){
     var entry = [];
     caml_update_dummy
      (entry,
       [246,
        function(param){
         function _W_(param){return caml_call1(Core[237], entry)[1];}
         var
          _X_ =
            [0,
             function(is_now_observable){
              var _Z_ = caml_obj_tag(entry);
              a:
              if(250 === _Z_)
               var entry$0 = entry[1];
              else{
               if(246 !== _Z_ && 244 !== _Z_){var entry$0 = entry; break a;}
               var entry$0 = caml_call1(CamlinternalLazy[2], entry);
              }
              var
               current_entries = caml_call2(Core_Map[35], t[2], key),
               ___ = caml_call1(Core[246], entry$0),
               is_linked = caml_call2(Core_List[13], current_entries, ___);
              if(caml_call2(Core_Bool[27], is_linked, is_now_observable))
               return 0;
              if(is_now_observable){
               var
                _$_ =
                  function(param){
                   if(param){
                    var other_entries = param[1];
                    if(other_entries){
                     var other_entry = other_entries[1];
                     entry$0[1] = other_entry[1];
                     return [0, entry$0, other_entries];
                    }
                   }
                   entry$0[1] = caml_call2(Core_Map[38], t[1], key);
                   return [0, entry$0, 0];
                  };
               t[2] = caml_call3(Core_Map[37], t[2], key, _$_);
               return 0;
              }
              function _aa_(x){return 1 - caml_call2(Core[246], entry$0, x);}
              var
               new_entries = caml_call2(Core_List[50], current_entries, _aa_),
               _ab_ =
                 caml_call1(Core_List[8], new_entries)
                  ? caml_call2(Core_Map[41], t[2], key)
                  : caml_call3(Core_Map[32], t[2], key, new_entries);
              t[2] = _ab_;
              return 0;
             }],
          _Y_ = caml_call3(Incremental[79][2][2], incremental_state, _X_, _W_);
         return [0, caml_call2(Core_Map[38], t[1], key), _Y_];
        }]);
     var _U_ = caml_obj_tag(entry);
     a:
     if(250 === _U_)
      var entry$0 = entry[1];
     else{
      if(246 !== _U_ && 244 !== _U_){var entry$0 = entry; break a;}
      var entry$0 = caml_call1(CamlinternalLazy[2], entry);
     }
     var _V_ = caml_call2(Incremental[79][1][2], 0, t[3]);
     caml_call2(Incremental[79][2][6], entry$0[2], _V_);
     return caml_call1(Incremental[79][2][3], entry$0[2]);
    }
    return caml_call3(Incremental[50][3], incremental_state, t[4], _T_);
   }
   function sexp_of_t(sexp_of_key, sexp_of_value, t){
    function _I_(key, data){
     var _J_ = data[1];
     if(737457313 === _J_)
      var
       match = data[2],
       entries = match[2],
       x = match[1],
       actual_value = [0, x],
       entries$0 = entries,
       actual_value$0 = actual_value;
     else if(847852583 <= _J_)
      var x$0 = data[2], entries$0 = 0, actual_value$0 = [0, x$0];
     else
      var y = data[2], entries$0 = y, actual_value$0 = 0;
     var _K_ = 0, _L_ = 0;
     function _M_(entry){
      var
       saved_value = entry[1],
       node = entry[2],
       node$0 = caml_call1(Incremental[79][2][3], node),
       match = caml_call1(Incremental[67], node$0),
       _O_ = caml_call1(Incremental[5], node$0),
       match$0 = caml_call2(Core_Option[55], _O_, 0),
       _P_ = 1 - caml_call1(Incremental[6], node$0),
       match$1 = caml_call2(Core_Option[55], _P_, 0),
       _Q_ = 1 - caml_call1(Incremental[7], node$0),
       _R_ = caml_call2(Core_Option[55], _Q_, 0),
       match$2 = 0;
      if(_R_)
       var
        v = _R_[1],
        match$3 =
          [0, [1, [0, _A_, [0, caml_call1(Core[518], v), 0]]], match$2];
      else
       var match$3 = match$2;
      if(match$1)
       var
        v$0 = match$1[1],
        match$4 =
          [0, [1, [0, _B_, [0, caml_call1(Core[518], v$0), 0]]], match$3];
      else
       var match$4 = match$3;
      if(match$0)
       var
        v$1 = match$0[1],
        match$5 =
          [0, [1, [0, _C_, [0, caml_call1(Core[518], v$1), 0]]], match$4];
      else
       var match$5 = match$4;
      if(match)
       var
        v$2 = match[1],
        _S_ =
          [0, [1, [0, _D_, [0, caml_call1(Core_Info[6], v$2), 0]]], match$5];
      else
       var _S_ = match$5;
      return [1,
              [0,
               [1,
                [0,
                 _E_,
                 [0, caml_call2(Core[454], sexp_of_value, saved_value), 0]]],
               _S_]];
     }
     var
      match$0 =
        [0,
         [1, [0, _F_, [0, caml_call2(Core[421], _M_, entries$0), _L_]]],
         _K_];
     if(actual_value$0)
      var
       v = actual_value$0[1],
       _N_ = [0, [1, [0, _G_, [0, caml_call1(sexp_of_value, v), 0]]], match$0];
     else
      var _N_ = match$0;
     return [0,
             [1,
              [0, [1, [0, _H_, [0, caml_call1(sexp_of_key, key), 0]]], _N_]]];
    }
    var info_per_key = caml_call3(Core_Map[77], t[1], t[2], _I_);
    return [1, caml_call1(Core_Map[73], info_per_key)];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incr_map);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map);
   var
    Incr_map =
      [0,
       of_set,
       filter_mapi,
       mapi,
       filter_map,
       map,
       filter_mapi$0,
       map$0,
       filter_map$0,
       mapi$0,
       partition_mapi,
       unordered_fold,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       mapi_mn,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge$0,
       unzip,
       unzip_mapi,
       unzip_mapi$0,
       flatten,
       join,
       separate,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum,
       [0, create, find, M, [0, sexp_of_t]],
       For_testing,
       function(Incr){
        function flatten$0(x){return flatten(Incr[2][3], x);}
        function M(K){return [0];}
        return [0,
                of_set,
                filter_mapi,
                mapi,
                filter_map,
                map,
                filter_mapi$0,
                mapi$0,
                filter_map$0,
                map$0,
                partition_mapi,
                unordered_fold,
                mapi_count,
                map_count,
                mapi_min,
                mapi_max,
                mapi_mn,
                map_max,
                min_value,
                max_value,
                mapi_bounds,
                map_bounds,
                value_bounds,
                merge,
                unzip,
                unzip_mapi,
                unzip_mapi$0,
                merge$0,
                flatten$0,
                join,
                separate,
                keys,
                rank,
                subrange,
                subrange_by_rank,
                rekey,
                index_byi,
                index_by,
                unordered_fold_nested_maps,
                transpose,
                collapse,
                collapse_by,
                expand,
                counti,
                count,
                for_alli,
                for_all,
                existsi,
                exists,
                sum,
                [0, create, find, M, [0, sexp_of_t]],
                For_testing];
       }];
   runtime.caml_register_global(65, Incr_map, cst_Incr_map$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
