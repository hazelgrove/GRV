// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Timing_wheel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Timing_wheel = [0];
   runtime.caml_register_global(0, Timing_wheel, "Timing_wheel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Import = "Timing_wheel__Import",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][1], "timing_wheel/src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Import);
   var Timing_wheel_Import = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Import, cst_Timing_wheel_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Timing_wheel_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Timing_wheel_ = "Timing_wheel__Timing_wheel_intf",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Timing_wheel_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1
    (Expect_test_collector[5][1], "timing_wheel/src/timing_wheel_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Timing_wheel_);
   var Timing_wheel_Timing_wheel_intf = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Timing_wheel_intf, cst_Timing_wheel_Timing_wheel_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Base__Sexpable, Core, Core__Array, Core__Binable, Core__Int, Core__Int63, Core__List, Core__Time_ns, Core__Time_ns_alternate_sexp, Expect_test_collector, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel$0 = "Timing_wheel",
    cst_Timing_wheel_max_alarm_tim$1 =
      "Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel",
    cst$0 = "_",
    cst_alarm_precision$0 = "alarm_precision",
    cst_at = "at",
    cst_bits$0 = "bits",
    cst_bits_per_slot$0 = "bits_per_slot",
    cst_capacity = "capacity",
    cst_config$0 = "config",
    cst_diff_max_min_allowed_key$0 = "diff_max_min_allowed_key",
    cst_elt_key_lower_bound$0 = "elt_key_lower_bound",
    cst_index$0 = "index",
    cst_interval_num = "interval_num",
    cst_key = "key",
    cst_keys_per_slot$0 = "keys_per_slot",
    cst_length$1 = "length",
    cst_level_bits$0 = "level_bits",
    cst_levels$0 = "levels",
    cst_max_allowed_alarm_time$0 = "max_allowed_alarm_time",
    cst_max_allowed_key$0 = "max_allowed_key",
    cst_max_interval_num$0 = "max_interval_num",
    cst_min_allowed_key$0 = "min_allowed_key",
    cst_min_elt$0 = "min_elt",
    cst_min_key_in_same_slot_mask$0 = "min_key_in_same_slot_mask",
    cst_now$0 = "now",
    cst_now_interval_num_start$0 = "now_interval_num_start",
    cst_pool$0 = "pool",
    cst_priority_queue$0 = "priority_queue",
    cst_slots$0 = "slots",
    cst_slots_mask$0 = "slots_mask",
    cst_start$0 = "start",
    cst_timing_wheel$0 = "timing_wheel",
    cst_timing_wheel_src_timing_wh = "timing_wheel/src/timing_wheel.ml",
    cst_value = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$9 = "timing_wheel/src/timing_wheel.ml:1631:26",
    pos$8 = "timing_wheel/src/timing_wheel.ml:1628:26",
    pos$7 = "timing_wheel/src/timing_wheel.ml:1644:26",
    pos$6 = "timing_wheel/src/timing_wheel.ml:1649:26",
    arg_108 = [0, cst$0],
    pos$5 = "timing_wheel/src/timing_wheel.ml:1006:32",
    pos$4 = "timing_wheel/src/timing_wheel.ml:1003:32",
    pos$3 = "timing_wheel/src/timing_wheel.ml:902:31",
    pos$2 = "timing_wheel/src/timing_wheel.ml:909:30",
    pos$1 = "timing_wheel/src/timing_wheel.ml:921:31",
    pos$0 = "timing_wheel/src/timing_wheel.ml:939:32",
    pos = "timing_wheel/src/timing_wheel.ml:944:30",
    cst = "",
    error_source_039 = "timing_wheel/src/timing_wheel.ml.Config.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_List = global_data.Core__List;
   global_data.Base__Field;
   var
    Core_Int63 = global_data.Core__Int63,
    Core_Array = global_data.Core__Array,
    Tuple_pool = global_data.Tuple_pool,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_Binable = global_data.Core__Binable,
    Base_Sexpable = global_data.Base__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel$0);
   caml_call1(Expect_test_collector[5][1], cst_timing_wheel_src_timing_wh);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel$0, cst);
   var
    max_time = Core_Time_ns_alternate_sexp[45],
    min_time = Core_Time_ns_alternate_sexp[43],
    zero = Core_Int[55],
    to_int = Core_Int[61],
    t_of_sexp = Core_Int[79],
    sexp_of_t = Core_Int[80],
    symbol = Core_Int[84],
    symbol$0 = Core_Int[85],
    symbol$1 = Core_Int[87],
    equal = Core_Int[90],
    max_num_bits = Core_Int63[58] - 1 | 0,
    _b3_ = [0, cst$0],
    _b4_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_max_alarm_tim$0 = cst_Timing_wheel_max_alarm_tim$1,
    _b1_ = [0, cst$0],
    _b2_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_max_alarm_tim = cst_Timing_wheel_max_alarm_tim$1,
    _bZ_ = [0, cst$0],
    _b0_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_min_alarm_int =
      "Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel",
    cst_Timing_wheel_cannot_resche =
      "Timing_wheel cannot reschedule alarm not in timing wheel",
    _bX_ = [0, cst_now_interval_num_start$0],
    _bY_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu$0 =
      "Timing_wheel cannot schedule alarm before start of current interval",
    _bV_ = [0, cst_max_allowed_alarm_time$0],
    _bW_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu =
      "Timing_wheel cannot schedule alarm that far in the future",
    _bU_ = [0, cst_timing_wheel_src_timing_wh, 1707, 53],
    _bT_ = [0, cst_start$0],
    cst_Timing_wheel_create_got_st =
      "Timing_wheel.create got start before the epoch",
    _bR_ = [0, cst$0],
    _bQ_ = [0, cst_timing_wheel_src_timing_wh, 1654, 6],
    _bP_ = [0, cst_timing_wheel_src_timing_wh, 1658, 6],
    _bO_ = [0, cst_timing_wheel_src_timing_wh, 1662, 6],
    _bN_ = [0, cst_timing_wheel_src_timing_wh, 1624, 11],
    _bM_ = [0, cst_timing_wheel_src_timing_wh, 1625, 11],
    _bL_ = [0, cst_timing_wheel_src_timing_wh, 1636, 11],
    _bK_ = [0, cst_timing_wheel_src_timing_wh, 1637, 11],
    _bJ_ = [0, cst_timing_wheel_src_timing_wh, 1638, 11],
    _bS_ = [0, cst_timing_wheel_src_timing_wh, 1618, 58357, 58379],
    _bH_ = [0, "t.max_interval_num"],
    _bI_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$1 =
      "Timing_wheel.interval_num_start got too large interval_num",
    _bF_ = [0, "min_interval_num"],
    _bG_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$0 =
      "Timing_wheel.interval_num_start got too small interval_num",
    _bE_ = [0, "time"],
    cst_Timing_wheel_interval_num_ =
      "Timing_wheel.interval_num got time too far in the past",
    _bC_ = [0, cst$0],
    _bD_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_next_alarm_fi$0 =
      "Timing_wheel.next_alarm_fires_at_exn with all alarms in max interval",
    _bA_ = [0, cst$0],
    _bB_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_next_alarm_fi =
      "Timing_wheel.next_alarm_fires_at_exn of empty timing wheel",
    _bv_ = [0, "alarms"],
    _bw_ = [0, cst_now$0],
    _bx_ = [0, cst_max_interval_num$0],
    _by_ = [0, cst_start$0],
    _bz_ = [0, cst_config$0],
    _bt_ = [0, cst_value],
    _bu_ = [0, cst_at],
    _bb_ = [0, "max_allowed_alarm_interval_num"],
    _bc_ = [0, "min_allowed_alarm_interval_num"],
    _bd_ = [0, cst_interval_num],
    cst_Timing_wheel_add_at_interv =
      "Timing_wheel.add_at_interval_num got invalid interval num",
    _a__ = [0, cst$0],
    _a$_ = [0, "level"],
    _ba_ = [0, cst_key],
    cst_Priority_queue_add_elt_key$0 =
      "Priority_queue.add_elt key out of level bounds",
    _a6_ = [0, cst_priority_queue$0],
    _a7_ = [0, "max_allowed_key t"],
    _a8_ = [0, "min_allowed_key t"],
    _a9_ = [0, cst_key],
    cst_Priority_queue_add_elt_key =
      "Priority_queue.add_elt key out of bounds",
    _a4_ = [0, cst$0],
    _a1_ = [0, cst_timing_wheel_src_timing_wh, 977, 38],
    _a0_ = [0, cst_timing_wheel_src_timing_wh, 983, 15],
    _aZ_ = [0, cst_timing_wheel_src_timing_wh, 984, 15],
    _aY_ = [0, cst_timing_wheel_src_timing_wh, 987, 13],
    _aX_ = [0, cst_timing_wheel_src_timing_wh, 988, 13],
    _aW_ = [0, cst_timing_wheel_src_timing_wh, 991, 15],
    _aU_ = [0, cst_timing_wheel_src_timing_wh, 997, 15],
    _aV_ = [0, cst_timing_wheel_src_timing_wh, 995, 13],
    _a3_ = [0, cst_timing_wheel_src_timing_wh, 974, 6],
    _a2_ = [0, cst_timing_wheel_src_timing_wh, 975, 6],
    _aS_ = [0, cst$0],
    _aR_ = [0, cst_timing_wheel_src_timing_wh, 898, 38],
    _aQ_ = [0, cst_timing_wheel_src_timing_wh, 899, 36],
    _aP_ = [0, cst_timing_wheel_src_timing_wh, 906, 15],
    _aO_ = [0, cst_timing_wheel_src_timing_wh, 914, 15],
    _aN_ = [0, cst_timing_wheel_src_timing_wh, 928, 15],
    _aM_ = [0, cst_timing_wheel_src_timing_wh, 936, 15],
    _aL_ = [0, cst_timing_wheel_src_timing_wh, 957, 21],
    _aK_ = [0, cst_timing_wheel_src_timing_wh, 961, 21],
    _aJ_ = [0, cst_timing_wheel_src_timing_wh, 965, 21],
    _aI_ = [0, cst_timing_wheel_src_timing_wh, 969, 21],
    _aT_ = [0, cst_timing_wheel_src_timing_wh, 895, 31577, 31603],
    _a5_ = [0, cst_timing_wheel_src_timing_wh, 972, 34918, 34942],
    _aF_ = [0, "elts"],
    _aG_ = [0, cst_max_allowed_key$0],
    _aH_ = [0, cst_min_allowed_key$0],
    _aD_ = [0, cst_value],
    _aE_ = [0, cst_key],
    _ay_ = [0, cst_levels$0],
    _az_ = [0, cst_elt_key_lower_bound$0],
    _aA_ = [0, cst_min_elt$0],
    _aB_ = [0, cst_pool$0],
    _aC_ = [0, cst_length$1],
    _ad_ = [0, cst_slots$0],
    _ae_ = [0, cst_max_allowed_key$0],
    _af_ = [0, cst_min_allowed_key$0],
    _ag_ = [0, cst_length$1],
    _ah_ = [0, cst_diff_max_min_allowed_key$0],
    _ai_ = [0, cst_min_key_in_same_slot_mask$0],
    _aj_ = [0, cst_keys_per_slot$0],
    _ak_ = [0, cst_bits_per_slot$0],
    _al_ = [0, cst_slots_mask$0],
    _am_ = [0, cst_bits$0],
    _an_ = [0, cst_index$0],
    cst_Timing_wheel_got_invalid_a = "Timing_wheel got invalid alarm",
    _H_ = [0, cst$0],
    _G_ = [0, cst_timing_wheel_src_timing_wh, 648, 8],
    _F_ = [0, cst_timing_wheel_src_timing_wh, 651, 8],
    _E_ = [0, cst_timing_wheel_src_timing_wh, 653, 8],
    _I_ = [0, cst_timing_wheel_src_timing_wh, 647, 23049, 23075],
    _u_ = [0, 10, [0, 10, [0, 6, [0, 6, [0, 5, 0]]]]],
    _s_ = [0, cst_timing_wheel_src_timing_wh, 257, 6],
    _t_ = [0, cst_timing_wheel_src_timing_wh, 256, 8261, 8285],
    _p_ = [0, cst_capacity],
    _q_ = [0, cst_level_bits$0],
    _r_ = [0, cst_alarm_precision$0],
    _o_ = [0, cst_timing_wheel_src_timing_wh, 235, 2],
    cst_alarm_precision = cst_alarm_precision$0,
    _h_ = [0, "span"],
    cst_Alarm_precision_of_span_fl =
      "[Alarm_precision.of_span_floor_pow2_ns] got non-positive span",
    cst_Alarm_precision_to_span_of =
      "[Alarm_precision.to_span] of negative power of two nanoseconds",
    cst_Level_bits_create_exn_requ =
      "Level_bits.create_exn requires a nonempty list",
    cst_Level_bits_create_exn_got_ =
      "Level_bits.create_exn got nonpositive num bits",
    _e_ = [0, "max_num_bits"],
    _f_ = [0, "got"],
    cst_Level_bits_create_exn_got_$0 =
      "Level_bits.create_exn got too many bits",
    _d_ = [0, cst_timing_wheel_src_timing_wh, 117, 6],
    _c_ = [0, cst_timing_wheel_src_timing_wh, 114, 4],
    _b_ = [0, cst_timing_wheel_src_timing_wh, 82, 4],
    _a_ = [0, cst_timing_wheel_src_timing_wh, 83, 4],
    _g_ = [0, 11, [0, 10, [0, 10, [0, 10, [0, 10, [0, 10, [0, 1, 0]]]]]]],
    cst_level_bits = cst_level_bits$0,
    cst_slots = cst_slots$0,
    cst_max_allowed_key = cst_max_allowed_key$0,
    cst_min_allowed_key = cst_min_allowed_key$0,
    cst_length = cst_length$1,
    cst_diff_max_min_allowed_key = cst_diff_max_min_allowed_key$0,
    cst_min_key_in_same_slot_mask = cst_min_key_in_same_slot_mask$0,
    cst_keys_per_slot = cst_keys_per_slot$0,
    cst_bits_per_slot = cst_bits_per_slot$0,
    cst_slots_mask = cst_slots_mask$0,
    cst_bits = cst_bits$0,
    cst_index = cst_index$0,
    cst_levels = cst_levels$0,
    cst_elt_key_lower_bound = cst_elt_key_lower_bound$0,
    cst_min_elt = cst_min_elt$0,
    cst_pool = cst_pool$0,
    cst_length$0 = cst_length$1,
    cst_priority_queue = cst_priority_queue$0,
    cst_max_allowed_alarm_time = cst_max_allowed_alarm_time$0,
    cst_now_interval_num_start = cst_now_interval_num_start$0,
    cst_now = cst_now$0,
    cst_max_interval_num = cst_max_interval_num$0,
    cst_start = cst_start$0,
    cst_config = cst_config$0,
    cst_timing_wheel = cst_timing_wheel$0,
    cst_Timing_wheel = cst_Timing_wheel$0,
    min_value = 0;
   function invariant(t){
    if(! caml_call2(symbol, t, min_value))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(caml_call2(symbol$0, t, max_num_bits)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function of_int(i){invariant(i); return i;}
   function symbol$2(t1, t2){var t = t1 + t2 | 0; invariant(t); return t;}
   function symbol$3(t1, t2){var t = t1 - t2 | 0; invariant(t); return t;}
   function pow2(t){return caml_call2(Core_Int63[47], Core_Int63[14], t);}
   function sexp_of_t$0(x_007){
    return caml_call2(Core[421], sexp_of_t, x_007);
   }
   function num_bits_internal(t){
    return caml_call3(Core_List[10], t, zero, symbol$2);
   }
   function num_bits(t){return num_bits_internal(t);}
   function invariant$0(t){
    if(caml_call1(Core_List[8], t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    function _fr_(num_key_bits){
     invariant(num_key_bits);
     if(caml_call2(symbol$1, num_key_bits, zero)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    }
    caml_call2(Core_List[9], t, _fr_);
    return invariant(num_bits_internal(t));
   }
   function t_of_sexp$0(x_006){
    var t = caml_call2(Core[422], t_of_sexp, x_006);
    invariant$0(t);
    return t;
   }
   function create_exn(opt, x_008){
    if(opt)
     var sth = opt[1], extend_to_max_num_bits = sth;
    else
     var extend_to_max_num_bits = 0;
    if(caml_call1(Core_List[8], x_008))
     caml_call1(Core[6], cst_Level_bits_create_exn_requ);
    function _ff_(bits){return caml_call2(Core[89], bits, 0);}
    if(caml_call2(Core_List[13], x_008, _ff_)){
     var
      _fg_ = [0, caml_call2(Core[421], Core[356], x_008), 0],
      _fh_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_),
          _fg_]];
     caml_call1(Core[253], _fh_);
    }
    function _fi_(_fq_, _fp_){return _fq_ + _fp_ | 0;}
    var num_bits = caml_call3(Core_List[10], x_008, 0, _fi_);
    if(caml_call2(Core[91], num_bits, max_num_bits)){
     var
      _fj_ =
        [0, [1, [0, _e_, [0, caml_call1(Core[356], max_num_bits), 0]]], 0],
      _fk_ = [0, [1, [0, _f_, [0, caml_call1(Core[356], num_bits), 0]]], _fj_],
      _fl_ = [0, caml_call2(Core[421], Core[356], x_008), _fk_],
      _fm_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_$0),
          _fl_]];
     caml_call1(Core[253], _fm_);
    }
    if(extend_to_max_num_bits)
     var
      _fn_ = caml_call1(Core[230], 1),
      _fo_ = caml_call2(Core_List[119], max_num_bits - num_bits | 0, _fn_),
      ints = caml_call2(Core[157], x_008, _fo_);
    else
     var ints = x_008;
    return caml_call2(Core_List[72], ints, of_int);
   }
   var level_bits_default = create_exn(0, _g_), compare = Core[352];
   function equal$0(x_012, x_013){
    return 0 === caml_call2(compare, x_012, x_013) ? 1 : 0;
   }
   function num_key_bits(t){return of_int(t);}
   function to_sexpable(t){
    if(caml_call2(Core[92], t, 0)){
     var
      _fc_ = [0, caml_call1(Core[356], t), 0],
      _fd_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_to_span_of),
          _fc_]];
     caml_call1(Core[253], _fd_);
    }
    var _fe_ = caml_call1(caml_call1(Core_Int63[47], Core_Int63[14]), t);
    return caml_call1(Core_Time_ns[1][127], _fe_);
   }
   function sexp_of_t$1(t){
    var _fb_ = to_sexpable(t);
    return caml_call1(Core_Time_ns[1][10], _fb_);
   }
   var
    one_nanosecond = 0,
    about_one_microsecond = 10,
    about_one_millisecond = 20,
    about_one_second = 30,
    about_one_day = 46;
   function mul(t, pow2){return t + pow2 | 0;}
   function div(t, pow2){return t - pow2 | 0;}
   function of_span_floor_pow2_ns(span){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][75])){
     var
      _e__ =
        [0, [1, [0, _h_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]], 0],
      _e$_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_of_span_fl),
          _e__]];
     caml_call1(Core[253], _e$_);
    }
    var _fa_ = caml_call1(Core_Time_ns[1][126], span);
    return caml_call1(Core_Int63[86], _fa_);
   }
   var
    _i_ = Core_Time_ns[1],
    _j_ =
      caml_call1
       (caml_call1
         (Core_Binable[6], [0, _i_[5], _i_[1], _i_[2], _i_[3], _i_[4]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    bin_size_t = _j_[1],
    bin_write_t = _j_[2],
    bin_read_t = _j_[3],
    bin_read_t$0 = _j_[4],
    bin_shape_t = _j_[5],
    bin_writer_t = _j_[6],
    bin_reader_t = _j_[7],
    bin_t = _j_[8],
    _k_ = Core_Time_ns[1],
    include =
      caml_call1
       (caml_call1(Base_Sexpable[1], [0, _k_[9], _k_[10]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    t_of_sexp$1 = include[1],
    sexp_of_t$2 = include[2],
    _l_ =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       t_of_sexp$1,
       sexp_of_t$2];
   function level_bits(r){return r[2];}
   function _m_(r, v){return [0, r[1], v, r[3]];}
   var
    _n_ = 0,
    level_bits$0 =
      [0, function(param){return 0;}, cst_level_bits, _n_, level_bits, _m_];
   function t_of_sexp$2(sexp_019){
    if(0 === sexp_019[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_039, sexp_019);
    var
     field_sexps_020 = sexp_019[1],
     alarm_precision_021 = [0, 0],
     level_bits_023 = [0, 0],
     capacity_025 = [0, 0],
     duplicates_027 = [0, 0],
     extra_028 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_020;
       for(;;){
        if(! param) break;
        var sexp_019$0 = param[1];
        if(1 !== sexp_019$0[0]) break b;
        var _e7_ = sexp_019$0[1];
        if(! _e7_) break c;
        var _e8_ = _e7_[1];
        if(0 !== _e8_[0]) break e;
        var field_sexps_031 = _e7_[2], field_name_029 = _e8_[1];
        if(field_sexps_031 && field_sexps_031[2]) break d;
        var
         tail_041 = param[2],
         field_sexp_030$3 =
           function(field_sexps_031){
            function field_sexp_030(param){
             if(! field_sexps_031)
              return caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_039, sexp_019);
             if(field_sexps_031[2])
              throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
             var x_042 = field_sexps_031[1];
             return x_042;
            }
            return field_sexp_030;
           },
         field_sexp_030 = field_sexp_030$3(field_sexps_031);
        if(caml_string_notequal(field_name_029, cst_alarm_precision$0))
         if(caml_string_notequal(field_name_029, cst_capacity))
          if(caml_string_notequal(field_name_029, cst_level_bits$0)){
           if(Sexplib0_Sexp_conv[26][1])
            extra_028[1] = [0, field_name_029, extra_028[1]];
          }
          else if(level_bits_023[1])
           duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
          else{
           var
            field_sexp_030$0 = field_sexp_030(0),
            fvalue_034 = t_of_sexp$0(field_sexp_030$0);
           level_bits_023[1] = [0, fvalue_034];
          }
         else if(capacity_025[1])
          duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
         else{
          var
           field_sexp_030$1 = field_sexp_030(0),
           fvalue_032 = caml_call1(Core[357], field_sexp_030$1);
          capacity_025[1] = [0, fvalue_032];
         }
        else if(alarm_precision_021[1])
         duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
        else{
         var
          field_sexp_030$2 = field_sexp_030(0),
          fvalue_035 = caml_call1(_l_[10], field_sexp_030$2);
         alarm_precision_021[1] = [0, fvalue_035];
        }
        var param = tail_041;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_039, sexp_019$0);
    }
    if(duplicates_027[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_039,
              duplicates_027[1],
              sexp_019);
    if(extra_028[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_039,
              extra_028[1],
              sexp_019);
    var
     _e9_ = alarm_precision_021[1],
     level_bits_024 = level_bits_023[1],
     match = capacity_025[1];
    if(! _e9_)
     return caml_call3
             (Sexplib0_Sexp_conv_error[15],
              error_source_039,
              sexp_019,
              [0,
               [0, 0 === alarm_precision_021[1] ? 1 : 0, cst_alarm_precision],
               0]);
    var alarm_precision_022 = _e9_[1];
    if(level_bits_024)
     var v_038 = level_bits_024[1], v_038$0 = v_038;
    else
     var v_038$0 = level_bits_default;
    return [0, alarm_precision_022, v_038$0, match];
   }
   function sexp_of_t$3(param){
    var
     capacity_048 = param[3],
     level_bits_046 = param[2],
     alarm_precision_044 = param[1],
     bnds_043 = 0;
    if(capacity_048)
     var
      v_049 = capacity_048[1],
      arg_051 = caml_call1(Core[356], v_049),
      bnd_050 = [1, [0, _p_, [0, arg_051, 0]]],
      bnds_043$0 = [0, bnd_050, bnds_043];
    else
     var bnds_043$0 = bnds_043;
    var
     arg_047 = sexp_of_t$0(level_bits_046),
     bnds_043$1 = [0, [1, [0, _q_, [0, arg_047, 0]]], bnds_043$0],
     arg_045 = caml_call1(_l_[11], alarm_precision_044),
     bnds_043$2 = [0, [1, [0, _r_, [0, arg_045, 0]]], bnds_043$1];
    return [1, bnds_043$2];
   }
   function alarm_precision(t){return to_sexpable(t[1]);}
   function max_num_level_bits(alarm_precision){
    return symbol$3(max_num_bits, num_key_bits(alarm_precision));
   }
   function invariant$1(t){
    function _e5_(param){
     var _e6_ = max_num_level_bits(t[1]);
     if(! caml_call2(symbol$0, num_bits_internal(t[2]), _e6_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
     var level_bits_fun = caml_call2(Base_Invariant[2], t, invariant$0);
     caml_call1(level_bits_fun, level_bits$0);
     return 0;
    }
    return caml_call4(Base_Invariant[1], _t_, t, sexp_of_t$3, _e5_);
   }
   function create(capacity, opt, alarm_precision, param){
    if(opt)
     var sth = opt[1], level_bits = sth;
    else
     var level_bits = level_bits_default;
    var max_num_bits = max_num_level_bits(alarm_precision);
    if(caml_call2(symbol$0, num_bits_internal(level_bits), max_num_bits))
     var level_bits$0 = level_bits;
    else
     var
      loop =
        function(t, remaining){
         if(! t) return 0;
         var t$0 = t[2], b = t[1];
         return caml_call2(symbol, b, remaining)
                 ? [0, remaining, 0]
                 : [0, b, loop(t$0, symbol$3(remaining, b))];
        },
      level_bits$0 = loop(level_bits, max_num_bits);
    return [0, alarm_precision, level_bits$0, capacity];
   }
   function microsecond_precision(param){
    return create(0, [0, create_exn(0, _u_)], about_one_microsecond, 0);
   }
   function durations(t){
    function _e2_(num_bits_accum, level_num_bits){
     var
      num_bits_accum$0 =
        num_bits_accum + caml_call1(to_int, level_num_bits) | 0,
      _e4_ =
        caml_call2(Core[90], num_bits_accum$0, Core_Int63[58] - 1 | 0)
         ? Core_Int63[59]
         : caml_call2(Core_Int63[47], Core_Int63[14], num_bits_accum$0),
      duration = caml_call1(Core_Time_ns[1][127], _e4_);
     return [0, num_bits_accum$0, duration];
    }
    var _e3_ = caml_call1(to_int, num_key_bits(t[1]));
    return caml_call3(Core_List[73], t[2], _e3_, _e2_);
   }
   var compare$0 = Core_Int63[110], sexp_of_t$4 = Core_Int63[99];
   function create$0(level_bits){
    var _e0_ = Core_Int63[14], _e1_ = pow2(level_bits);
    return caml_call2(Core_Int63[17], _e1_, _e0_);
   }
   function num_keys(num_bits){return pow2(num_bits);}
   var
    one = Core_Int63[14],
    symbol$4 = Core_Int63[17],
    bit_not = Core_Int63[45],
    sexp_of_t$5 = Core_Int63[99],
    equal$1 = Core_Int63[109];
   function create$1(bits_per_slot){
    return caml_call1(bit_not, caml_call2(symbol$4, pow2(bits_per_slot), one));
   }
   var
    to_int_exn = Core_Int63[5],
    zero$0 = Core_Int63[13],
    one$0 = Core_Int63[14],
    symbol$5 = Core_Int63[16],
    symbol$6 = Core_Int63[18],
    succ = Core_Int63[39],
    pred = Core_Int63[40],
    max_value = Core_Int63[59],
    of_int$0 = Core_Int63[69],
    sexp_of_t$6 = Core_Int63[99],
    symbol$7 = Core_Int63[103],
    symbol$8 = Core_Int63[104],
    symbol$9 = Core_Int63[105],
    symbol$10 = Core_Int63[106],
    symbol$11 = Core_Int63[107],
    symbol$12 = Core_Int63[108],
    equal$2 = Core_Int63[109],
    compare$1 = Core_Int63[110],
    min = Core_Int63[111],
    max = Core_Int63[112],
    ascending = Core_Int63[113],
    descending = Core_Int63[114],
    between = Core_Int63[115],
    clamp_exn = Core_Int63[116],
    clamp = Core_Int63[117],
    Replace_polymorphic_compare = Core_Int63[118],
    comparator = Core_Int63[119],
    Map = Core_Int63[120],
    Set = Core_Int63[121],
    validate_lbound = Core_Int63[128],
    validate_ubound = Core_Int63[129],
    validate_bound = Core_Int63[130];
   function to_int63(t){return t;}
   function of_int63(i){return i;}
   function scale_int(t, i){
    return caml_call2(symbol$6, t, caml_call1(of_int$0, i));
   }
   var
    to_int_exn$0 = Core_Int63[5],
    zero$1 = Core_Int63[13],
    one$1 = Core_Int63[14],
    symbol$13 = Core_Int63[16],
    symbol$14 = Core_Int63[17],
    rem = Core_Int63[25],
    succ$0 = Core_Int63[39],
    pred$0 = Core_Int63[40],
    bit_and = Core_Int63[42],
    shift_right = Core_Int63[48],
    max_value$0 = Core_Int63[59],
    min_value$0 = Core_Int63[60],
    of_int$1 = Core_Int63[69],
    sexp_of_t$7 = Core_Int63[99],
    symbol$15 = Core_Int63[103],
    symbol$16 = Core_Int63[104],
    symbol$17 = Core_Int63[105],
    symbol$18 = Core_Int63[106],
    symbol$19 = Core_Int63[107],
    symbol$20 = Core_Int63[108],
    equal$3 = Core_Int63[109],
    compare$2 = Core_Int63[110],
    min$0 = Core_Int63[111],
    max$0 = Core_Int63[112],
    ascending$0 = Core_Int63[113],
    descending$0 = Core_Int63[114],
    between$0 = Core_Int63[115],
    clamp_exn$0 = Core_Int63[116],
    clamp$0 = Core_Int63[117],
    Replace_polymorphic_compare$0 = Core_Int63[118],
    comparator$0 = Core_Int63[119],
    Map$0 = Core_Int63[120],
    Set$0 = Core_Int63[121],
    hash_fold_t = Core_Int63[122],
    hash = Core_Int63[123],
    hashable = Core_Int63[124],
    Table = Core_Int63[125],
    Hash_set = Core_Int63[126],
    Hash_queue = Core_Int63[127],
    validate_lbound$0 = Core_Int63[128],
    validate_ubound$0 = Core_Int63[129],
    validate_bound$0 = Core_Int63[130];
   function of_int63$0(i){return i;}
   function to_int63$0(t){return t;}
   function add(t, i){return caml_call2(symbol$13, t, i);}
   function add_clamp_to_max(t, i){
    return caml_call2(symbol$18, t, caml_call2(symbol$14, max_value$0, i))
            ? max_value$0
            : caml_call2(symbol$13, t, i);
   }
   function sub(t, i){return caml_call2(symbol$14, t, i);}
   function diff(t1, t2){return caml_call2(symbol$14, t1, t2);}
   function min_key_in_same_slot(t, min_key_in_same_slot_mask){return caml_call2(bit_and, t, min_key_in_same_slot_mask);
   }
   var
    _x_ = Set$0[1],
    _z_ = Map$0[1],
    _B_ = Set[1],
    _C_ = Map[1],
    _D_ =
      [0,
       sexp_of_t$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       equal$2,
       compare$1,
       min,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       [0,
        [0, _C_[9], _C_[10], _C_[11]],
        Map[2],
        Map[3],
        Map[4],
        Map[5],
        Map[6],
        Map[7],
        Map[8],
        Map[9],
        Map[10],
        Map[11],
        Map[12],
        Map[13],
        Map[14],
        Map[15],
        Map[16],
        Map[17],
        Map[18],
        Map[19],
        Map[20],
        Map[21],
        Map[22],
        Map[23],
        Map[24],
        Map[25],
        Map[26],
        Map[27],
        Map[28],
        Map[29],
        Map[30],
        Map[31],
        Map[32],
        Map[33],
        Map[34],
        Map[35],
        Map[36],
        Map[37],
        Map[38],
        Map[39],
        Map[40],
        Map[41],
        Map[42],
        Map[43],
        Map[44],
        Map[45],
        Map[46],
        Map[47],
        Map[48],
        Map[49],
        Map[50],
        Map[51],
        Map[52],
        Map[53],
        Map[54],
        Map[55],
        Map[56],
        Map[57],
        Map[58],
        Map[59],
        Map[60],
        Map[61],
        Map[62],
        Map[63],
        Map[64],
        Map[65],
        Map[66],
        Map[67],
        Map[68],
        Map[69],
        Map[70],
        Map[71],
        Map[72],
        Map[73],
        Map[74],
        Map[75],
        Map[76],
        Map[77],
        Map[78],
        Map[79],
        Map[80],
        Map[81],
        Map[82],
        Map[83],
        Map[84],
        Map[85],
        Map[86],
        Map[87],
        Map[88],
        Map[89],
        Map[90],
        Map[91],
        Map[92],
        Map[93],
        Map[94],
        Map[95],
        Map[96],
        Map[97],
        Map[98],
        Map[99],
        Map[100],
        Map[101],
        Map[102],
        Map[103],
        Map[104],
        Map[105],
        Map[106],
        Map[107]],
       [0,
        [0, _B_[1], _B_[2], _B_[11]],
        Set[2],
        Set[3],
        Set[4],
        Set[5],
        Set[6],
        Set[7],
        Set[8],
        Set[9],
        Set[10],
        Set[11],
        Set[12],
        Set[13],
        Set[14],
        Set[15],
        Set[16],
        Set[17],
        Set[18],
        Set[19],
        Set[20],
        Set[21],
        Set[22],
        Set[23],
        Set[24],
        Set[25],
        Set[26],
        Set[27],
        Set[28],
        Set[29],
        Set[30],
        Set[31],
        Set[32],
        Set[33],
        Set[34],
        Set[35],
        Set[36],
        Set[37],
        Set[38],
        Set[39],
        Set[40],
        Set[41],
        Set[42],
        Set[43],
        Set[44],
        Set[45],
        Set[46],
        Set[47],
        Set[48],
        Set[49],
        Set[50],
        Set[51],
        Set[52],
        Set[53],
        Set[54],
        Set[55],
        Set[56],
        Set[57],
        Set[58],
        Set[59],
        Set[60],
        Set[61],
        Set[62],
        Set[63],
        Set[64],
        Set[65],
        Set[66],
        Set[67],
        Set[68],
        Set[69],
        Set[70],
        Set[71],
        Set[72],
        Set[73],
        Set[74],
        Set[75]],
       max,
       zero$0,
       one$0,
       max_value,
       of_int63,
       to_int63,
       of_int$0,
       to_int_exn,
       scale_int,
       pred,
       succ,
       symbol$5],
    _v_ =
      [0,
       Hash_set[1],
       Hash_set[2],
       Hash_set[3],
       Hash_set[4],
       Hash_set[5],
       Hash_set[6],
       Hash_set[7]],
    _w_ =
      [0,
       Table[1],
       Table[2],
       Table[3],
       Table[4],
       Table[5],
       Table[6],
       Table[7],
       Table[8],
       Table[9],
       Table[10],
       Table[11],
       Table[12],
       Table[13],
       Table[14],
       Table[15],
       Table[16],
       Table[17],
       Table[18],
       Table[19],
       Table[20],
       Table[21],
       Table[22],
       Table[23],
       Table[24],
       Table[25],
       Table[26],
       Table[27],
       Table[28],
       Table[29],
       Table[30],
       Table[31],
       Table[32],
       Table[33],
       Table[34],
       Table[35],
       Table[36],
       Table[37],
       Table[38],
       Table[39],
       Table[40],
       Table[41],
       Table[42],
       Table[43],
       Table[44],
       Table[45],
       Table[46],
       Table[47],
       Table[48],
       Table[49],
       Table[50],
       Table[51],
       Table[52],
       Table[53],
       Table[54],
       Table[55],
       Table[56],
       Table[57],
       Table[58],
       Table[59],
       Table[60],
       Table[61],
       Table[62],
       Table[63],
       Table[64],
       Table[65],
       Table[66],
       Table[67],
       Table[68],
       Table[69],
       Table[70],
       Table[71],
       Table[72],
       Table[73],
       Table[74],
       Table[75],
       Table[76],
       Table[77],
       Table[78],
       Table[79],
       Table[80],
       Table[81],
       Table[82],
       Table[83],
       Table[84]],
    _y_ =
      [0,
       [0, _x_[1], _x_[2], _x_[11]],
       Set$0[2],
       Set$0[3],
       Set$0[4],
       Set$0[5],
       Set$0[6],
       Set$0[7],
       Set$0[8],
       Set$0[9],
       Set$0[10],
       Set$0[11],
       Set$0[12],
       Set$0[13],
       Set$0[14],
       Set$0[15],
       Set$0[16],
       Set$0[17],
       Set$0[18],
       Set$0[19],
       Set$0[20],
       Set$0[21],
       Set$0[22],
       Set$0[23],
       Set$0[24],
       Set$0[25],
       Set$0[26],
       Set$0[27],
       Set$0[28],
       Set$0[29],
       Set$0[30],
       Set$0[31],
       Set$0[32],
       Set$0[33],
       Set$0[34],
       Set$0[35],
       Set$0[36],
       Set$0[37],
       Set$0[38],
       Set$0[39],
       Set$0[40],
       Set$0[41],
       Set$0[42],
       Set$0[43],
       Set$0[44],
       Set$0[45],
       Set$0[46],
       Set$0[47],
       Set$0[48],
       Set$0[49],
       Set$0[50],
       Set$0[51],
       Set$0[52],
       Set$0[53],
       Set$0[54],
       Set$0[55],
       Set$0[56],
       Set$0[57],
       Set$0[58],
       Set$0[59],
       Set$0[60],
       Set$0[61],
       Set$0[62],
       Set$0[63],
       Set$0[64],
       Set$0[65],
       Set$0[66],
       Set$0[67],
       Set$0[68],
       Set$0[69],
       Set$0[70],
       Set$0[71],
       Set$0[72],
       Set$0[73],
       Set$0[74],
       Set$0[75]],
    _A_ =
      [0,
       [0, _z_[9], _z_[10], _z_[11]],
       Map$0[2],
       Map$0[3],
       Map$0[4],
       Map$0[5],
       Map$0[6],
       Map$0[7],
       Map$0[8],
       Map$0[9],
       Map$0[10],
       Map$0[11],
       Map$0[12],
       Map$0[13],
       Map$0[14],
       Map$0[15],
       Map$0[16],
       Map$0[17],
       Map$0[18],
       Map$0[19],
       Map$0[20],
       Map$0[21],
       Map$0[22],
       Map$0[23],
       Map$0[24],
       Map$0[25],
       Map$0[26],
       Map$0[27],
       Map$0[28],
       Map$0[29],
       Map$0[30],
       Map$0[31],
       Map$0[32],
       Map$0[33],
       Map$0[34],
       Map$0[35],
       Map$0[36],
       Map$0[37],
       Map$0[38],
       Map$0[39],
       Map$0[40],
       Map$0[41],
       Map$0[42],
       Map$0[43],
       Map$0[44],
       Map$0[45],
       Map$0[46],
       Map$0[47],
       Map$0[48],
       Map$0[49],
       Map$0[50],
       Map$0[51],
       Map$0[52],
       Map$0[53],
       Map$0[54],
       Map$0[55],
       Map$0[56],
       Map$0[57],
       Map$0[58],
       Map$0[59],
       Map$0[60],
       Map$0[61],
       Map$0[62],
       Map$0[63],
       Map$0[64],
       Map$0[65],
       Map$0[66],
       Map$0[67],
       Map$0[68],
       Map$0[69],
       Map$0[70],
       Map$0[71],
       Map$0[72],
       Map$0[73],
       Map$0[74],
       Map$0[75],
       Map$0[76],
       Map$0[77],
       Map$0[78],
       Map$0[79],
       Map$0[80],
       Map$0[81],
       Map$0[82],
       Map$0[83],
       Map$0[84],
       Map$0[85],
       Map$0[86],
       Map$0[87],
       Map$0[88],
       Map$0[89],
       Map$0[90],
       Map$0[91],
       Map$0[92],
       Map$0[93],
       Map$0[94],
       Map$0[95],
       Map$0[96],
       Map$0[97],
       Map$0[98],
       Map$0[99],
       Map$0[100],
       Map$0[101],
       Map$0[102],
       Map$0[103],
       Map$0[104],
       Map$0[105],
       Map$0[106],
       Map$0[107]];
   function sexp_of_pool_slots(of_a_054, x_055){
    function _eU_(_eZ_){return sexp_of_pool_slots(of_a_054, _eZ_);}
    var _eV_ = caml_call1(Tuple_pool[36][3][1], _eU_);
    function _eW_(_eY_){return sexp_of_pool_slots(of_a_054, _eY_);}
    var _eX_ = caml_call1(Tuple_pool[36][3][1], _eW_);
    return caml_call7
            (Tuple_pool[36][1][8],
             sexp_of_t$7,
             Core_Time_ns_alternate_sexp[92],
             of_a_054,
             Core[356],
             _eX_,
             _eV_,
             x_055);
   }
   function sexp_of_t$8(of_a_056, x_057){
    function _eS_(_eT_){return sexp_of_pool_slots(of_a_056, _eT_);}
    return caml_call2(Tuple_pool[36][3][1], _eS_, x_057);
   }
   var
    null$0 = Tuple_pool[36][3][4],
    null$1 = Tuple_pool[36][3][4],
    is_null = Tuple_pool[36][3][5],
    free = Tuple_pool[36][14];
   function key(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][3]);
   }
   function at(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][4]);
   }
   function value(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][5]);
   }
   function level_index(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][6]);
   }
   function prev(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][7]);
   }
   function set_prev(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][7], x);
   }
   function next(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][8]);
   }
   function set_next(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][8], x);
   }
   function is_valid(p, t){return caml_call2(Tuple_pool[36][6], p, t);}
   var grow = Tuple_pool[36][12], is_full = Tuple_pool[36][13];
   function of_external_exn(pool, t){
    if(is_valid(pool, t)) return t;
    var
     _eR_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_got_invalid_a);
    return caml_call1(Core[253], _eR_);
   }
   function link(pool, prev, next){
    set_next(pool, prev, next);
    return set_prev(pool, next, prev);
   }
   function iter(pool, first, f){
    var current = [0, first], continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return 0;
     var next$0 = next(pool, current[1]);
     caml_call1(f, current[1]);
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function slots(r){return r[11];}
   function max_allowed_key(r){return r[10];}
   function set_max_allowed_key(r, v){r[10] = v; return 0;}
   function min_allowed_key(r){return r[9];}
   function set_min_allowed_key(r, v){r[9] = v; return 0;}
   function length(r){return r[8];}
   function set_length(r, v){r[8] = v; return 0;}
   function diff_max_min_allowed_key(r){return r[7];}
   function min_key_in_same_slot_mask(r){return r[6];}
   function keys_per_slot(r){return r[5];}
   function bits_per_slot(r){return r[4];}
   function slots_mask(r){return r[3];}
   function bits(r){return r[2];}
   function index(r){return r[1];}
   function _J_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], v];
   }
   var
    _K_ = 0,
    slots$0 = [0, function(param){return 0;}, cst_slots, _K_, slots, _J_];
   function _L_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], v, r[11]];
   }
   var
    _M_ = [0, set_max_allowed_key],
    max_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_key,
       _M_,
       max_allowed_key,
       _L_];
   function _N_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11]];
   }
   var
    _O_ = [0, set_min_allowed_key],
    min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_min_allowed_key,
       _O_,
       min_allowed_key,
       _N_];
   function _P_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11]];
   }
   var
    _Q_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _Q_, length, _P_];
   function _R_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _S_ = 0,
    diff_max_min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_diff_max_min_allowed_key,
       _S_,
       diff_max_min_allowed_key,
       _R_];
   function _T_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _U_ = 0,
    min_key_in_same_slot_mask$0 =
      [0,
       function(param){return 0;},
       cst_min_key_in_same_slot_mask,
       _U_,
       min_key_in_same_slot_mask,
       _T_];
   function _V_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _W_ = 0,
    keys_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_keys_per_slot,
       _W_,
       keys_per_slot,
       _V_];
   function _X_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _Y_ = 0,
    bits_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_bits_per_slot,
       _Y_,
       bits_per_slot,
       _X_];
   function _Z_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    ___ = 0,
    slots_mask$0 =
      [0, function(param){return 0;}, cst_slots_mask, ___, slots_mask, _Z_];
   function _$_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _aa_ = 0,
    bits$0 = [0, function(param){return 0;}, cst_bits, _aa_, bits, _$_];
   function _ab_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _ac_ = 0,
    index$0 = [0, function(param){return 0;}, cst_index, _ac_, index, _ab_];
   function sexp_of_t$9(of_a_065, param){
    var
     diff_max_min_allowed_key_079 = param[7],
     min_key_in_same_slot_mask_077 = param[6],
     keys_per_slot_075 = param[5],
     bits_per_slot_073 = param[4],
     slots_mask_071 = param[3],
     bits_069 = param[2],
     index_067 = param[1],
     length_081 = param[8],
     min_allowed_key_083 = param[9],
     max_allowed_key_085 = param[10],
     slots_087 = param[11],
     arg_088 = caml_call1(Sexplib0_Sexp_conv[23], slots_087),
     bnds_066 = [0, [1, [0, _ad_, [0, arg_088, 0]]], 0],
     arg_086 = caml_call1(sexp_of_t$7, max_allowed_key_085),
     bnds_066$0 = [0, [1, [0, _ae_, [0, arg_086, 0]]], bnds_066],
     arg_084 = caml_call1(sexp_of_t$7, min_allowed_key_083),
     bnds_066$1 = [0, [1, [0, _af_, [0, arg_084, 0]]], bnds_066$0],
     arg_082 = caml_call1(Core[356], length_081),
     bnds_066$2 = [0, [1, [0, _ag_, [0, arg_082, 0]]], bnds_066$1],
     arg_080 = caml_call1(_D_[1], diff_max_min_allowed_key_079),
     bnds_066$3 = [0, [1, [0, _ah_, [0, arg_080, 0]]], bnds_066$2],
     arg_078 = caml_call1(sexp_of_t$5, min_key_in_same_slot_mask_077),
     bnds_066$4 = [0, [1, [0, _ai_, [0, arg_078, 0]]], bnds_066$3],
     arg_076 = caml_call1(_D_[1], keys_per_slot_075),
     bnds_066$5 = [0, [1, [0, _aj_, [0, arg_076, 0]]], bnds_066$4],
     arg_074 = caml_call1(sexp_of_t, bits_per_slot_073),
     bnds_066$6 = [0, [1, [0, _ak_, [0, arg_074, 0]]], bnds_066$5],
     arg_072 = caml_call1(sexp_of_t$4, slots_mask_071),
     bnds_066$7 = [0, [1, [0, _al_, [0, arg_072, 0]]], bnds_066$6],
     arg_070 = caml_call1(sexp_of_t, bits_069),
     bnds_066$8 = [0, [1, [0, _am_, [0, arg_070, 0]]], bnds_066$7],
     arg_068 = caml_call1(Core[356], index_067),
     bnds_066$9 = [0, [1, [0, _an_, [0, arg_068, 0]]], bnds_066$8];
    return [1, bnds_066$9];
   }
   function slot(t, key){
    var slots_mask = t[3], bits_per_slot = t[4];
    return caml_call1
            (to_int_exn$0,
             caml_call2
              (bit_and,
               caml_call2(shift_right, key, bits_per_slot),
               slots_mask));
   }
   function next_slot(t, slot){
    var t$0 = t[3];
    return (slot + 1 | 0) & caml_call1(Core_Int63[5], t$0);
   }
   function min_key_in_same_slot$0(t, key){
    return min_key_in_same_slot(key, t[6]);
   }
   function compute_min_allowed_key(t, prev_level_max_allowed_key){
    return caml_call2(equal$3, prev_level_max_allowed_key, max_value$0)
            ? max_value$0
            : min_key_in_same_slot$0
              (t, caml_call1(succ$0, prev_level_max_allowed_key));
   }
   function levels(r){return r[5];}
   function elt_key_lower_bound(r){return r[4];}
   function set_elt_key_lower_bound(r, v){r[4] = v; return 0;}
   function min_elt(r){return r[3];}
   function set_min_elt(r, v){r[3] = v; return 0;}
   function pool(r){return r[2];}
   function set_pool(r, v){r[2] = v; return 0;}
   function length$1(r){return r[1];}
   function set_length$0(r, v){r[1] = v; return 0;}
   function _ao_(r, v){return [0, r[1], r[2], r[3], r[4], v];}
   var
    _ap_ = 0,
    levels$0 = [0, function(param){return 0;}, cst_levels, _ap_, levels, _ao_];
   function _aq_(r, v){return [0, r[1], r[2], r[3], v, r[5]];}
   var
    _ar_ = [0, set_elt_key_lower_bound],
    elt_key_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_elt_key_lower_bound,
       _ar_,
       elt_key_lower_bound,
       _aq_];
   function _as_(r, v){return [0, r[1], r[2], v, r[4], r[5]];}
   var
    _at_ = [0, set_min_elt],
    min_elt$0 =
      [0, function(param){return 0;}, cst_min_elt, _at_, min_elt, _as_];
   function _au_(r, v){return [0, r[1], v, r[3], r[4], r[5]];}
   var
    _av_ = [0, set_pool],
    pool$0 = [0, function(param){return 0;}, cst_pool, _av_, pool, _au_];
   function _aw_(r, v){return [0, v, r[2], r[3], r[4], r[5]];}
   var
    _ax_ = [0, set_length$0],
    length$2 =
      [0, function(param){return 0;}, cst_length$0, _ax_, length$1, _aw_];
   function is_empty(t){return caml_call2(Core[90], t[1], 0);}
   function num_levels(t){return t[5].length - 1;}
   function min_allowed_key$1(t){return caml_check_bound(t[5], 0)[1][9];}
   function max_allowed_key$1(t){
    var _eQ_ = num_levels(t) - 1 | 0;
    return caml_check_bound(t[5], _eQ_)[1 + _eQ_][10];
   }
   function internal_iter(t, f){
    var _eI_ = caml_call2(Core[91], t[1], 0);
    if(_eI_){
     var
      pool = t[2],
      levels = t[5],
      _eK_ = levels.length - 1 - 1 | 0,
      _eJ_ = 0;
     if(_eK_ >= 0){
      var level_index = _eJ_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        var slots = level[11], _eN_ = slots.length - 1 - 1 | 0, _eM_ = 0;
        if(_eN_ >= 0){
         var slot_index = _eM_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)) iter(pool, elt, f);
          var _eP_ = slot_index + 1 | 0;
          if(_eN_ === slot_index) break;
          var slot_index = _eP_;
         }
        }
       }
       var _eO_ = level_index + 1 | 0;
       if(_eK_ === level_index) break;
       var level_index = _eO_;
      }
     }
     var _eL_ = 0;
    }
    else
     var _eL_ = _eI_;
    return _eL_;
   }
   function compute_diff_max_min_allowed_k(level_bits, bits_per_slot){
    var bits = symbol$2(level_bits, bits_per_slot);
    if(caml_call2(equal, bits, max_num_bits)) return _D_[26];
    var _eH_ = num_keys(bits);
    return caml_call1(_D_[32], _eH_);
   }
   function min_elt$1(t){
    if(is_empty(t)) return caml_call1(null$1, 0);
    if(! caml_call1(is_null, t[3])) return t[3];
    var
     pool = t[2],
     min_elt_already_found = [0, caml_call1(null$1, 0)],
     min_key_already_found = [0, max_value$0],
     level_index = [0, 0],
     num_levels$0 = num_levels(t);
    for(;;){
     if(! caml_call2(Core[92], level_index[1], num_levels$0)){
      t[3] = min_elt_already_found[1];
      t[4] = min_key_already_found[1];
      return t[3];
     }
     var
      _eE_ = level_index[1],
      level = caml_check_bound(t[5], _eE_)[1 + _eE_];
     if(caml_call2(symbol$18, level[9], min_key_already_found[1]))
      level_index[1] = num_levels$0;
     else if(caml_call2(Core[90], level[8], 0))
      level_index[1]++;
     else{
      var
       slots = level[11],
       slot_min_key =
         [0, min_key_in_same_slot$0(level, caml_call2(max$0, level[9], t[4]))],
       slot$0 = [0, slot(level, slot_min_key[1])];
      for(;;){
       var _eF_ = slot$0[1];
       if(! caml_call1(is_null, caml_check_bound(slots, _eF_)[1 + _eF_]))
        break;
       if(! caml_call2(symbol$19, slot_min_key[1], min_key_already_found[1]))
        break;
       slot$0[1] = next_slot(level, slot$0[1]);
       slot_min_key[1] = add(slot_min_key[1], level[5]);
      }
      var _eG_ = slot$0[1], first = caml_check_bound(slots, _eG_)[1 + _eG_];
      if(1 - caml_call1(is_null, first)){
       var continue$0 = [0, 1], current = [0, first];
       for(;;){
        if(! continue$0[1]) break;
        var current_key = key(pool, current[1]);
        if(caml_call2(symbol$16, current_key, min_key_already_found[1])){
         min_elt_already_found[1] = current[1];
         min_key_already_found[1] = current_key;
        }
        var next$0 = next(pool, current[1]);
        a:
        {
         if
          (!
           caml_call2(Core[246], next$0, first)
           && ! caml_call2(Core[90], level_index[1], 0)){current[1] = next$0; break a;}
         continue$0[1] = 0;
        }
       }
      }
      level_index[1]++;
     }
    }
   }
   function add_elt(x_135, to_add){
    var
     pool$0 = x_135[2],
     key$0 = key(pool$0, to_add),
     _ex_ = caml_call2(symbol$15, key$0, min_allowed_key$1(x_135)),
     _ey_ =
       _ex_ ? caml_call2(symbol$16, key$0, max_allowed_key$1(x_135)) : _ex_;
    if(1 - _ey_){
     var pool = x_135[2], r = [0, 0], _em_ = 0, _en_ = 0;
     internal_iter
      (x_135,
       function(elt){
        var _eC_ = r[1], _eD_ = value(pool, elt);
        r[1] = [0, [0, key(pool, elt), _eD_], _eC_];
        return 0;
       });
     var
      elts_115 = caml_call1(Core_List[34], r[1]),
      max_allowed_key_113 = max_allowed_key$1(x_135),
      min_allowed_key_111 = min_allowed_key$1(x_135),
      bnds_110 = 0,
      _el_ =
        function(param){
         var
          key_105 = param[1],
          bnds_104 = [0, [1, [0, _aD_, [0, arg_108, 0]]], 0],
          arg_106 = caml_call1(sexp_of_t$7, key_105),
          bnds_104$0 = [0, [1, [0, _aE_, [0, arg_106, 0]]], bnds_104];
         return [1, bnds_104$0];
        },
      arg_116 = caml_call2(Core[421], _el_, elts_115),
      bnds_110$0 = [0, [1, [0, _aF_, [0, arg_116, 0]]], bnds_110],
      arg_114 = caml_call1(sexp_of_t$7, max_allowed_key_113),
      bnds_110$1 = [0, [1, [0, _aG_, [0, arg_114, 0]]], bnds_110$0],
      arg_112 = caml_call1(sexp_of_t$7, min_allowed_key_111),
      bnds_110$2 = [0, [1, [0, _aH_, [0, arg_112, 0]]], bnds_110$1],
      _eo_ =
        [0,
         [1,
          [0, _a7_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(x_135)), 0]]],
         [0, [1, [0, _a6_, [0, [1, bnds_110$2], _en_]]], _em_]],
      _ep_ =
        [0,
         [1,
          [0, _a8_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(x_135)), 0]]],
         _eo_],
      _eq_ = [0, [1, [0, _a9_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _ep_],
      _er_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key),
          _eq_]];
     caml_call1(Core[253], _er_);
    }
    var level_index = [0, 0];
    for(;;){
     var _ez_ = level_index[1];
     if
      (!
       caml_call2
        (symbol$18, key$0, caml_check_bound(x_135[5], _ez_)[1 + _ez_][10]))
      break;
     level_index[1]++;
    }
    var
     level_index$0 = level_index[1],
     level = caml_check_bound(x_135[5], level_index$0)[1 + level_index$0],
     _eA_ = caml_call2(symbol$15, key$0, level[9]),
     _eB_ = _eA_ ? caml_call2(symbol$16, key$0, level[10]) : _eA_;
    if(1 - _eB_){
     var
      _es_ = 0,
      _et_ = 0,
      _eu_ =
        [0,
         [1,
          [0,
           _a$_,
           [0, sexp_of_t$9(function(param){return _a__;}, level), _et_]]],
         _es_],
      _ev_ = [0, [1, [0, _ba_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _eu_],
      _ew_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key$0),
          _ev_]];
     caml_call1(Core[253], _ew_);
    }
    level[8] = level[8] + 1 | 0;
    caml_call4
     (Tuple_pool[36][33], pool$0, to_add, Tuple_pool[36][2][6], level_index$0);
    var
     slot$0 = slot(level, key$0),
     slots = level[11],
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(caml_call1(is_null, first)){
     caml_check_bound(slots, slot$0)[1 + slot$0] = to_add;
     return link(pool$0, to_add, to_add);
    }
    var prev$0 = prev(pool$0, first);
    link(pool$0, prev$0, to_add);
    return link(pool$0, to_add, first);
   }
   function internal_add_elt(t, elt){
    var key$0 = key(t[2], elt);
    if(caml_call2(symbol$19, key$0, t[4])){t[3] = elt; t[4] = key$0;}
    add_elt(t, elt);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function ensure_valid_key(t, key){
    var
     _ej_ = caml_call2(symbol$19, key, min_allowed_key$1(t)),
     _ek_ = _ej_ || caml_call2(symbol$18, key, max_allowed_key$1(t));
    if(! _ek_) return _ek_;
    var
     _ef_ =
       [0,
        [1, [0, _bb_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(t)), 0]]],
        0],
     _eg_ =
       [0,
        [1, [0, _bc_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(t)), 0]]],
        _ef_],
     _eh_ = [0, [1, [0, _bd_, [0, caml_call1(sexp_of_t$7, key), 0]]], _eg_],
     _ei_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_add_at_interv),
         _eh_]];
    return caml_call1(Core[253], _ei_);
   }
   function internal_add(t, key, at, value){
    ensure_valid_key(t, key);
    if(caml_call1(is_full, t[2])) t[2] = caml_call2(grow, 0, t[2]);
    var
     pool = t[2],
     _ed_ = caml_call1(null$1, 0),
     _ee_ = caml_call1(null$1, 0),
     elt =
       caml_call7(Tuple_pool[36][21], pool, key, at, value, -1, _ee_, _ed_);
    internal_add_elt(t, elt);
    return elt;
   }
   function internal_remove(t, elt){
    var pool = t[2], t2 = t[3];
    if(caml_call2(Tuple_pool[36][3][7], elt, t2))
     t[3] = caml_call1(null$1, 0);
    t[1] = t[1] - 1 | 0;
    var
     _d$_ = level_index(pool, elt),
     level = caml_check_bound(t[5], _d$_)[1 + _d$_];
    level[8] = level[8] - 1 | 0;
    var
     slots = level[11],
     slot$0 = slot(level, key(pool, elt)),
     first = caml_check_bound(slots, slot$0)[1 + slot$0],
     _ea_ = next(pool, elt);
    if(caml_call2(Core[246], elt, _ea_)){
     var _eb_ = caml_call1(null$1, 0);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _eb_;
     return;
    }
    if(caml_call2(Core[246], elt, first)){
     var _ec_ = next(pool, elt);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _ec_;
    }
    var _d9_ = next(pool, elt);
    set_next(pool, prev(pool, elt), _d9_);
    var _d__ = prev(pool, elt);
    return set_prev(pool, next(pool, elt), _d__);
   }
   var
    _be_ =
      [0,
       _D_,
       sexp_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$3,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       _A_,
       _y_,
       compare$2,
       hash_fold_t,
       hash,
       hashable,
       _w_,
       _v_,
       Hash_queue,
       max$0,
       min$0,
       zero$1,
       one$1,
       min_value$0,
       max_value$0,
       of_int63$0,
       to_int63$0,
       of_int$1,
       to_int_exn$0,
       add,
       sub,
       diff,
       succ$0,
       pred$0,
       rem],
    min_interval_num = _be_[31];
   function priority_queue(r){return r[7];}
   function max_allowed_alarm_time(r){return r[6];}
   function set_max_allowed_alarm_time(r, v){r[6] = v; return 0;}
   function now_interval_num_start(r){return r[5];}
   function set_now_interval_num_start(r, v){r[5] = v; return 0;}
   function now(r){return r[4];}
   function set_now(r, v){r[4] = v; return 0;}
   function max_interval_num(r){return r[3];}
   function start(r){return r[2];}
   function config(r){return r[1];}
   function _bf_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}
   var
    _bg_ = 0,
    priority_queue$0 =
      [0,
       function(param){return 0;},
       cst_priority_queue,
       _bg_,
       priority_queue,
       _bf_];
   function _bh_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}
   var
    _bi_ = [0, set_max_allowed_alarm_time],
    max_allowed_alarm_time$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_alarm_time,
       _bi_,
       max_allowed_alarm_time,
       _bh_];
   function _bj_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}
   var
    _bk_ = [0, set_now_interval_num_start],
    now_interval_num_start$0 =
      [0,
       function(param){return 0;},
       cst_now_interval_num_start,
       _bk_,
       now_interval_num_start,
       _bj_];
   function _bl_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}
   var
    _bm_ = [0, set_now],
    now$0 = [0, function(param){return 0;}, cst_now, _bm_, now, _bl_];
   function _bn_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}
   var
    _bo_ = 0,
    max_interval_num$0 =
      [0,
       function(param){return 0;},
       cst_max_interval_num,
       _bo_,
       max_interval_num,
       _bn_];
   function _bp_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}
   var
    _bq_ = 0,
    start$0 = [0, function(param){return 0;}, cst_start, _bq_, start, _bp_];
   function _br_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}
   var
    _bs_ = 0,
    config$0 = [0, function(param){return 0;}, cst_config, _bs_, config, _br_];
   function sexp_of_t_now(param, t){
    return caml_call1(Core_Time_ns_alternate_sexp[92], t[4]);
   }
   function alarm_precision$0(t){return alarm_precision(t[1]);}
   function at$0(tw, t){
    var p = tw[7], _d8_ = of_external_exn(p[2], t);
    return at(p[2], _d8_);
   }
   function value$0(tw, t){
    var p = tw[7], _d7_ = of_external_exn(p[2], t);
    return value(p[2], _d7_);
   }
   function interval_num(tw, t){
    var p = tw[7], _d6_ = of_external_exn(p[2], t);
    return key(p[2], _d6_);
   }
   function iter$0(t, f){var t$0 = t[7]; return internal_iter(t$0, f);}
   function compare$3(t1, t2){
    return caml_call2(Core_Time_ns_alternate_sexp[101], t1[1], t2[1]);
   }
   function sexp_of_t$10(sexp_of_a, t){
    var
     max_interval_num_167 = t[3],
     start_165 = t[2],
     config_163 = t[1],
     now_169 = t[4],
     r = [0, 0];
    iter$0
     (t,
      function(alarm){
       var _d5_ = r[1], _d4_ = value$0(t, alarm);
       r[1] = [0, [0, at$0(t, alarm), _d4_], _d5_];
       return 0;
      });
    var alarms_171 = caml_call2(Core_List[58], r[1], compare$3), bnds_162 = 0;
    function _d3_(param){
     var
      value_159 = param[2],
      at_157 = param[1],
      arg_160 = caml_call1(sexp_of_a, value_159),
      bnds_156 = [0, [1, [0, _bt_, [0, arg_160, 0]]], 0],
      arg_158 = caml_call1(Core_Time_ns_alternate_sexp[92], at_157),
      bnds_156$0 = [0, [1, [0, _bu_, [0, arg_158, 0]]], bnds_156];
     return [1, bnds_156$0];
    }
    var
     arg_172 = caml_call2(Core[421], _d3_, alarms_171),
     bnds_162$0 = [0, [1, [0, _bv_, [0, arg_172, 0]]], bnds_162],
     arg_170 = caml_call1(Core_Time_ns_alternate_sexp[92], now_169),
     bnds_162$1 = [0, [1, [0, _bw_, [0, arg_170, 0]]], bnds_162$0],
     arg_168 = caml_call1(_be_[2], max_interval_num_167),
     bnds_162$2 = [0, [1, [0, _bx_, [0, arg_168, 0]]], bnds_162$1],
     arg_166 = caml_call1(Core_Time_ns_alternate_sexp[92], start_165),
     bnds_162$3 = [0, [1, [0, _by_, [0, arg_166, 0]]], bnds_162$2],
     arg_164 = sexp_of_t$3(config_163),
     bnds_162$4 = [0, [1, [0, _bz_, [0, arg_164, 0]]], bnds_162$3];
    return [1, bnds_162$4];
   }
   function length$3(t){return t[7][1];}
   function is_empty$0(t){
    var _d2_ = length$3(t);
    return caml_call2(Core[90], _d2_, 0);
   }
   function pool$1(t){return t[7][2];}
   function interval_num_internal(time, alarm_precision){
    var
     _d0_ = caml_call1(Core_Time_ns_alternate_sexp[61], time),
     _d1_ = caml_call2(Core_Int63[48], _d0_, alarm_precision);
    return caml_call1(_be_[35], _d1_);
   }
   function interval_num_unchecked(t, time){
    return interval_num_internal(time, t[1][1]);
   }
   function interval_num$0(t, time){
    if(caml_call2(Core_Time_ns_alternate_sexp[98], time, min_time)){
     var
      _dY_ =
        [0,
         [1,
          [0, _bE_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], time), 0]]],
         0],
      _dZ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_),
          _dY_]];
     caml_call1(Core[253], _dZ_);
    }
    return interval_num_unchecked(t, time);
   }
   function interval_num_start_unchecked(t, interval_num){
    var
     interval_num$0 = caml_call1(_be_[36], interval_num),
     t$0 = t[1][1],
     _dX_ = caml_call2(Core_Int63[47], interval_num$0, t$0);
    return caml_call1(Core_Time_ns_alternate_sexp[62], _dX_);
   }
   function interval_num_start(t, interval_num){
    if(caml_call2(_be_[7], interval_num, min_interval_num)){
     var
      _dR_ =
        [0, [1, [0, _bF_, [0, caml_call1(_be_[2], min_interval_num), 0]]], 0],
      _dS_ =
        [0, [1, [0, _bG_, [0, caml_call1(_be_[2], interval_num), 0]]], _dR_],
      _dT_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$0),
          _dS_]];
     caml_call1(Core[253], _dT_);
    }
    if(caml_call2(_be_[6], interval_num, t[3])){
     var
      _dU_ = [0, [1, [0, _bH_, [0, caml_call1(_be_[2], t[3]), 0]]], 0],
      _dV_ =
        [0, [1, [0, _bI_, [0, caml_call1(_be_[2], interval_num), 0]]], _dU_],
      _dW_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$1),
          _dV_]];
     caml_call1(Core[253], _dW_);
    }
    return interval_num_start_unchecked(t, interval_num);
   }
   function next_alarm_fires_at_internal(t, key){
    return interval_num_start(t, caml_call1(_be_[42], key));
   }
   function next_alarm_fires_at(t){
    var elt = min_elt$1(t[7]);
    if(caml_call1(is_null, elt)) return 0;
    var key$0 = key(pool$1(t), elt);
    return caml_call2(_be_[9], key$0, t[3])
            ? 0
            : [0, next_alarm_fires_at_internal(t, key$0)];
   }
   function next_alarm_fires_at_exn(x_174){
    var elt = min_elt$1(x_174[7]);
    if(caml_call1(is_null, elt)){
     var
      _dJ_ = 0,
      _dK_ = 0,
      _dL_ =
        [0,
         [1,
          [0,
           _bB_,
           [0, sexp_of_t$10(function(param){return _bA_;}, x_174), _dK_]]],
         _dJ_],
      _dM_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi),
          _dL_]];
     caml_call1(Core[253], _dM_);
    }
    var key$0 = key(pool$1(x_174), elt);
    if(caml_call2(_be_[9], key$0, x_174[3])){
     var
      _dN_ = 0,
      _dO_ = 0,
      _dP_ =
        [0,
         [1,
          [0,
           _bD_,
           [0, sexp_of_t$10(function(param){return _bC_;}, x_174), _dO_]]],
         _dN_],
      _dQ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi$0),
          _dP_]];
     caml_call1(Core[253], _dQ_);
    }
    return next_alarm_fires_at_internal(x_174, key$0);
   }
   function compute_max_allowed_alarm_time(t){
    var max_allowed_key = max_allowed_key$1(t[7]);
    if(caml_call2(_be_[3], max_allowed_key, t[3])) return max_time;
    var
     _dF_ = Core_Time_ns[1][67],
     _dG_ = alarm_precision$0(t),
     _dH_ = caml_call2(Core_Time_ns[1][98], _dG_, _dF_),
     _dI_ = interval_num_start_unchecked(t, max_allowed_key);
    return caml_call2(Core_Time_ns_alternate_sexp[51], _dI_, _dH_);
   }
   function now_interval_num(t){return min_allowed_key$1(t[7]);}
   function max_allowed_alarm_interval_num(t){return interval_num$0(t, t[6]);}
   function interval_start(t, time){
    return interval_num_start_unchecked(t, interval_num$0(t, time));
   }
   function invariant$2(invariant_a, t){
    function _c0_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      priority_queue_fun =
        check
         (function(t){
           var pool = t[2];
           function _c$_(param){
            function check(f){return caml_call2(Base_Invariant[2], t, f);}
            if(! caml_call2(symbol$15, min_allowed_key$1(t), zero$1))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _a3_], 1);
            var _df_ = min_allowed_key$1(t);
            if(! caml_call2(symbol$15, max_allowed_key$1(t), _df_))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _a2_], 1);
            var
             levels_fun =
               check
                (function(levels){
                  var _dl_ = num_levels(t);
                  if(! caml_call2(Core[91], _dl_, 0))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _aV_], 1);
                  function _dm_(level_index$0, level){
                   if(! caml_call2(Core[90], level_index$0, level[1]))
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aU_], 1);
                   function _dn_(param){
                    function check(f){
                     return caml_call2(Base_Invariant[2], level, f);
                    }
                    var
                     slots_fun =
                       check
                        (function(slots){
                          function _du_(elt){
                           var _dx_ = 1 - caml_call1(is_null, elt);
                           if(! _dx_) return _dx_;
                           function _dv_(param){
                            if(! is_valid(pool, elt))
                             throw caml_maybe_attach_backtrace
                                    ([0, Assert_failure, _G_], 1);
                            caml_call1(invariant_a, value(pool, elt));
                            var n = next(pool, elt);
                            if(! caml_call1(is_null, n)){
                             var _dE_ = prev(pool, n);
                             if(! caml_call2(Tuple_pool[36][3][7], elt, _dE_))
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _F_], 1);
                            }
                            var p = prev(pool, elt);
                            if(! caml_call1(is_null, p)){
                             var _dD_ = next(pool, p);
                             if(! caml_call2(Tuple_pool[36][3][7], elt, _dD_))
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _E_], 1);
                            }
                            return 0;
                           }
                           function _dw_(x_062){
                            return sexp_of_t$8(function(param){return _H_;}, x_062);
                           }
                           caml_call4(Base_Invariant[1], _I_, elt, _dw_, _dv_);
                           return iter
                                   (pool,
                                    elt,
                                    function(elt){
                                     var _dy_ = level[9];
                                     if(! caml_call2(symbol$15, key(pool, elt), _dy_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aL_], 1);
                                     var _dz_ = level[10];
                                     if(! caml_call2(symbol$16, key(pool, elt), _dz_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aK_], 1);
                                     var _dA_ = t[4];
                                     if(! caml_call2(symbol$15, key(pool, elt), _dA_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aJ_], 1);
                                     var _dB_ = level[1], _dC_ = level_index(pool, elt);
                                     if(caml_call2(Core[90], _dC_, _dB_))
                                      return caml_call1(invariant_a, value(pool, elt));
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _aI_], 1);
                                    });
                          }
                          return caml_call2(Core_Array[22], slots, _du_);
                         }),
                     max_allowed_key_fun =
                       check
                        (function(max_allowed_key){
                          var
                           expect = add_clamp_to_max(level[9], level[7]),
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_128, b_129){
                           return caml_call2(compare$2, a_128, b_129);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos,
                                   sexp_of_t$7,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   max_allowed_key);
                         }),
                     min_allowed_key_fun =
                       check
                        (function(min_allowed_key){
                          if(! caml_call2(symbol$15, min_allowed_key, zero$1))
                           throw caml_maybe_attach_backtrace
                                  ([0, Assert_failure, _aM_], 1);
                          var
                           _dt_ = caml_call2(symbol$19, min_allowed_key, max_value$0);
                          if(! _dt_) return _dt_;
                          var
                           got = caml_call2(rem, min_allowed_key, level[5]),
                           expect = _D_[24],
                           sexpifier = _D_[1],
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_126, b_127){
                           return caml_call2(_D_[9], a_126, b_127);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$0,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   got);
                         }),
                     length_fun =
                       check
                        (function(length){
                          function _dr_(n, first){
                           if(caml_call1(is_null, first)) return n;
                           var r = [0, 0], current = [0, first], continue$0 = [0, 1];
                           for(;;){
                            if(! continue$0[1]) return n + r[1] | 0;
                            r[1]++;
                            var next$0 = next(pool, current[1]);
                            if(caml_call2(Core[246], next$0, first))
                             continue$0[1] = 0;
                            else
                             current[1] = next$0;
                           }
                          }
                          var _ds_ = caml_call3(Core_Array[23], level[11], 0, _dr_);
                          if(caml_call2(Core[90], length, _ds_)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aN_], 1);
                         }),
                     expect = compute_diff_max_min_allowed_k(level[2], level[4]),
                     diff_max_min_allowed_key_fun =
                       check
                        (function(eta){
                          var sexpifier = _D_[1], equal = 0, message = 0, here = 0;
                          function comparator(a_124, b_125){
                           return caml_call2(_D_[9], a_124, b_125);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$1,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   eta);
                         }),
                     min_key_in_same_slot_mask_fun =
                       check
                        (function(min_key_in_same_slot_mask){
                          if
                           (caml_call2
                             (equal$1, min_key_in_same_slot_mask, create$1(level[4])))
                           return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aO_], 1);
                         }),
                     keys_per_slot_fun =
                       check
                        (function(keys_per_slot){
                          var
                           expect = num_keys(level[4]),
                           sexpifier = _D_[1],
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_122, b_123){
                           return caml_call2(_D_[9], a_122, b_123);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$2,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   keys_per_slot);
                         }),
                     bits_per_slot_fun =
                       check
                        (function(bits_per_slot){
                          if(caml_call2(symbol, bits_per_slot, zero)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aP_], 1);
                         }),
                     expect$0 = create$0(level[2]),
                     slots_mask_fun =
                       check
                        (function(eta){
                          var equal = 0, message = 0, here = 0;
                          function comparator(a_120, b_121){
                           return caml_call2(compare$0, a_120, b_121);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$3,
                                   sexp_of_t$4,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect$0,
                                   eta);
                         }),
                     bits_fun =
                       check
                        (function(bits){
                          if(caml_call2(symbol$1, bits, zero)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aQ_], 1);
                         }),
                     index_fun =
                       check
                        (function(index){
                          if(caml_call2(Core[88], index, 0)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aR_], 1);
                         });
                    caml_call1(index_fun, index$0);
                    caml_call1(bits_fun, bits$0);
                    caml_call1(slots_mask_fun, slots_mask$0);
                    caml_call1(bits_per_slot_fun, bits_per_slot$0);
                    caml_call1(keys_per_slot_fun, keys_per_slot$0);
                    caml_call1
                     (min_key_in_same_slot_mask_fun, min_key_in_same_slot_mask$0);
                    caml_call1
                     (diff_max_min_allowed_key_fun, diff_max_min_allowed_key$0);
                    caml_call1(length_fun, length$0);
                    caml_call1(min_allowed_key_fun, min_allowed_key$0);
                    caml_call1(max_allowed_key_fun, max_allowed_key$0);
                    return caml_call1(slots_fun, slots$0);
                   }
                   function _do_(x_119){
                    return sexp_of_t$9(function(param){return _aS_;}, x_119);
                   }
                   caml_call4(Base_Invariant[1], _aT_, level, _do_, _dn_);
                   var _dp_ = caml_call2(Core[91], level_index$0, 0);
                   if(! _dp_) return _dp_;
                   var
                    _dq_ = level_index$0 - 1 | 0,
                    prev_level = caml_check_bound(levels, _dq_)[1 + _dq_],
                    got = level[5],
                    expect = caml_call1(_D_[33], prev_level[7]),
                    sexpifier = _D_[1],
                    equal = 0,
                    message = 0,
                    here = 0;
                   function comparator(a_131, b_132){
                    return caml_call2(_D_[9], a_131, b_132);
                   }
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$4,
                     sexpifier,
                     comparator,
                     here,
                     message,
                     equal,
                     expect,
                     got);
                   var
                    got$0 = level[9],
                    expect$0 = compute_min_allowed_key(level, prev_level[10]),
                    equal$0 = 0,
                    message$0 = 0,
                    here$0 = 0;
                   function comparator$0(a_133, b_134){
                    return caml_call2(compare$2, a_133, b_134);
                   }
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$5,
                            sexp_of_t$7,
                            comparator$0,
                            here$0,
                            message$0,
                            equal$0,
                            expect$0,
                            got$0);
                  }
                  return caml_call2(Core_Array[58], levels, _dm_);
                 }),
             elt_key_lower_bound_fun =
               check
                (function(elt_key_lower_bound){
                  if
                   (!
                    caml_call2
                     (symbol$15, elt_key_lower_bound, min_allowed_key$1(t)))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _aY_], 1);
                  if
                   (!
                    caml_call2
                     (symbol$16, elt_key_lower_bound, max_allowed_key$1(t)))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _aX_], 1);
                  var _dk_ = 1 - caml_call1(is_null, t[3]);
                  if(! _dk_) return _dk_;
                  if
                   (caml_call2(equal$3, elt_key_lower_bound, key(t[2], t[3])))
                   return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _aW_], 1);
                 }),
             min_elt_fun =
               check
                (function(elt){
                  var _di_ = 1 - caml_call1(is_null, elt);
                  if(! _di_) return _di_;
                  if(! is_valid(t[2], elt))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _a0_], 1);
                  var _dj_ = key(t[2], elt);
                  if(caml_call2(equal$3, t[4], _dj_)) return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _aZ_], 1);
                 }),
             pool_fun =
               check
                (function(t){
                  function _dg_(_dh_){return 0;}
                  return caml_call2(Tuple_pool[36][5], _dg_, t);
                 }),
             length_fun =
               check
                (function(length){
                  if(caml_call2(Core[88], length, 0)) return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _a1_], 1);
                 });
            caml_call1(length_fun, length$2);
            caml_call1(pool_fun, pool$0);
            caml_call1(min_elt_fun, min_elt$0);
            caml_call1(elt_key_lower_bound_fun, elt_key_lower_bound$0);
            return caml_call1(levels_fun, levels$0);
           }
           function _da_(x_130){
            function of_a_089(param){return _a4_;}
            var
             length_091 = x_130[1],
             pool_093 = x_130[2],
             min_elt_095 = x_130[3],
             elt_key_lower_bound_097 = x_130[4],
             levels_099 = x_130[5],
             bnds_090 = 0;
            function _dc_(_de_){return sexp_of_t$9(of_a_089, _de_);}
            var
             arg_100 = caml_call2(Core[288], _dc_, levels_099),
             bnds_090$0 = [0, [1, [0, _ay_, [0, arg_100, 0]]], bnds_090],
             arg_098 = caml_call1(sexp_of_t$7, elt_key_lower_bound_097),
             bnds_090$1 = [0, [1, [0, _az_, [0, arg_098, 0]]], bnds_090$0],
             arg_096 = sexp_of_t$8(of_a_089, min_elt_095),
             bnds_090$2 = [0, [1, [0, _aA_, [0, arg_096, 0]]], bnds_090$1];
            function _db_(_dd_){return sexp_of_pool_slots(of_a_089, _dd_);}
            var
             arg_094 = caml_call2(Tuple_pool[36][4], _db_, pool_093),
             bnds_090$3 = [0, [1, [0, _aB_, [0, arg_094, 0]]], bnds_090$2],
             arg_092 = caml_call1(Core[356], length_091),
             bnds_090$4 = [0, [1, [0, _aC_, [0, arg_092, 0]]], bnds_090$3];
            return [1, bnds_090$4];
           }
           return caml_call4(Base_Invariant[1], _a5_, t, _da_, _c$_);
          }),
      max_allowed_alarm_time_fun =
        check
         (function(max_allowed_alarm_time){
           var
            expect = compute_max_allowed_alarm_time(t),
            sexpifier = Core_Time_ns_alternate_sexp[92],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_183, b_184){
            return caml_call2(Core_Time_ns_alternate_sexp[101], a_183, b_184);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$6,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    max_allowed_alarm_time);
          }),
      now_interval_num_start_fun =
        check
         (function(now_interval_num_start){
           var
            expect = interval_num_start(t, now_interval_num(t)),
            sexpifier = Core_Time_ns_alternate_sexp[92],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_181, b_182){
            return caml_call2(Core_Time_ns_alternate_sexp[101], a_181, b_182);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$7,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    now_interval_num_start);
          }),
      now_fun =
        check
         (function(now){
           if(! caml_call2(Core_Time_ns_alternate_sexp[94], now, t[2]))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bL_], 1);
           if(! caml_call2(Core_Time_ns_alternate_sexp[95], now, max_time))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bK_], 1);
           var _c9_ = min_allowed_key$1(t[7]), _c__ = interval_num$0(t, t[4]);
           if(caml_call2(_be_[9], _c__, _c9_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bJ_], 1);
          }),
      max_interval_num_fun =
        check
         (function(max_interval_num){
           var
            got = interval_num$0(t, max_time),
            sexpifier = _be_[2],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_177, b_178){
            return caml_call2(_be_[22], a_177, b_178);
           }
           caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$8,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             max_interval_num,
             got);
           var
            got$0 = interval_num$0(t, interval_num_start(t, max_interval_num)),
            sexpifier$0 = _be_[2],
            equal$0 = 0,
            message$0 = 0,
            here$0 = 0;
           function comparator$0(a_179, b_180){
            return caml_call2(_be_[22], a_179, b_180);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$9,
                    sexpifier$0,
                    comparator$0,
                    here$0,
                    message$0,
                    equal$0,
                    max_interval_num,
                    got$0);
          }),
      start_fun =
        check
         (function(start){
           if(! caml_call2(Core_Time_ns_alternate_sexp[94], start, min_time))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bN_], 1);
           if(caml_call2(Core_Time_ns_alternate_sexp[95], start, max_time))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1);
          }),
      config_fun = check(invariant$1);
     caml_call1(config_fun, config$0);
     caml_call1(start_fun, start$0);
     caml_call1(max_interval_num_fun, max_interval_num$0);
     caml_call1(now_fun, now$0);
     caml_call1(now_interval_num_start_fun, now_interval_num_start$0);
     caml_call1(max_allowed_alarm_time_fun, max_allowed_alarm_time$0);
     caml_call1(priority_queue_fun, priority_queue$0);
     return iter$0
             (t,
              function(alarm){
               var
                _c2_ = interval_num$0(t, at$0(t, alarm)),
                _c3_ = interval_num(t, alarm);
               if(! caml_call2(_be_[9], _c3_, _c2_))
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _bQ_], 1);
               var
                _c4_ = interval_start(t, t[4]),
                _c5_ = interval_start(t, at$0(t, alarm));
               if(! caml_call2(Core_Time_ns_alternate_sexp[94], _c5_, _c4_))
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _bP_], 1);
               var
                _c6_ = alarm_precision$0(t),
                _c7_ = caml_call2(Core_Time_ns_alternate_sexp[54], t[4], _c6_),
                _c8_ = at$0(t, alarm);
               if(caml_call2(Core_Time_ns_alternate_sexp[97], _c8_, _c7_))
                return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _bO_], 1);
              });
    }
    function _c1_(x_176){
     return sexp_of_t$10(function(param){return _bR_;}, x_176);
    }
    return caml_call4(Base_Invariant[1], _bS_, t, _c1_, _c0_);
   }
   var debug = 0;
   function advance_clock(t, to, handle_removed){
    var _cY_ = caml_call2(Core_Time_ns_alternate_sexp[97], to, t[4]);
    if(_cY_){
     t[4] = to;
     var t_min_allowed_key = interval_num_unchecked(t, to);
     t[5] = interval_num_start_unchecked(t, t_min_allowed_key);
     var t$0 = t[7];
     if(caml_call2(symbol$16, t_min_allowed_key, min_allowed_key$1(t$0)))
      var match = 0;
     else{
      var
       level_index = [0, 0],
       result = [0, 1],
       prev_level_max_allowed_key = [0, caml_call1(pred$0, t_min_allowed_key)],
       levels = t$0[5],
       num_levels$0 = num_levels(t$0);
      for(;;){
       if(! caml_call2(Core[92], level_index[1], num_levels$0)){
        if(caml_call2(symbol$18, t_min_allowed_key, t$0[4])){
         t$0[3] = caml_call1(null$1, 0);
         t$0[4] = min_allowed_key$1(t$0);
        }
        var match = result[1];
        break;
       }
       var
        _cX_ = level_index[1],
        level = caml_check_bound(levels, _cX_)[1 + _cX_],
        min_allowed_key_before = level[9],
        prev_level_max_allowed_key$0 = prev_level_max_allowed_key[1],
        desired_min_allowed_key =
          compute_min_allowed_key(level, prev_level_max_allowed_key$0),
        level_min_allowed_key =
          min_key_in_same_slot$0
           (level,
            caml_call2
             (min$0,
              desired_min_allowed_key,
              caml_call2(max$0, level[9], t$0[4]))),
        level_min_allowed_key$0 = [0, level_min_allowed_key],
        slot$0 = [0, slot(level, level_min_allowed_key$0[1])],
        keys_per_slot = level[5],
        slots = level[11];
       for(;;){
        if
         (!
          caml_call2
           (symbol$19, level_min_allowed_key$0[1], desired_min_allowed_key))
         break;
        if(caml_call2(Core[90], level[8], 0))
         level_min_allowed_key$0[1] = desired_min_allowed_key;
        else{
         var
          _cU_ = slot$0[1],
          first = caml_check_bound(slots, _cU_)[1 + _cU_];
         if(1 - caml_call1(is_null, first)){
          var _cV_ = caml_call1(null$1, 0), _cW_ = slot$0[1];
          caml_check_bound(slots, _cW_)[1 + _cW_] = _cV_;
          var pool = t$0[2], current = [0, first], continue$0 = [0, 1];
          for(;;){
           if(! continue$0[1]) break;
           var next$0 = next(pool, current[1]);
           level[8] = level[8] - 1 | 0;
           if(caml_call2(symbol$15, key(pool, current[1]), t_min_allowed_key))
            add_elt(t$0, current[1]);
           else{
            t$0[1] = t$0[1] - 1 | 0;
            caml_call1(handle_removed, current[1]);
            caml_call2(free, pool, current[1]);
           }
           if(caml_call2(Core[246], next$0, first))
            continue$0[1] = 0;
           else
            current[1] = next$0;
          }
         }
         slot$0[1] = next_slot(level, slot$0[1]);
         level_min_allowed_key$0[1] =
          add_clamp_to_max(level_min_allowed_key$0[1], keys_per_slot);
        }
       }
       level[9] = desired_min_allowed_key;
       level[10] = add_clamp_to_max(desired_min_allowed_key, level[7]);
       if(caml_call2(equal$3, level[9], min_allowed_key_before)){level_index[1] = num_levels$0; result[1] = 0;}
       else{
        level_index[1] = level_index[1] + 1 | 0;
        prev_level_max_allowed_key[1] = level[10];
       }
      }
     }
     if(match){t[6] = compute_max_allowed_alarm_time(t); return 0;}
     var _cZ_ = debug;
    }
    else
     var _cZ_ = _cY_;
    return _cZ_;
   }
   function create$2(config, start){
    if
     (caml_call2
       (Core_Time_ns_alternate_sexp[98],
        start,
        Core_Time_ns_alternate_sexp[43])){
     var
      _cK_ =
        [0,
         [1,
          [0,
           _bT_,
           [0, caml_call1(Core_Time_ns_alternate_sexp[92], start), 0]]],
         0],
      _cL_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_create_got_st),
          _cK_]];
     caml_call1(Core[253], _cL_);
    }
    var level_bits = config[2], capacity$0 = config[3];
    function _cG_(index, param, level_bits){
     var
      levels = param[3],
      max_level_min_allowed_key = param[2],
      bits_per_slot = param[1],
      keys_per_slot = num_keys(bits_per_slot),
      diff_max_min_allowed_key =
        compute_diff_max_min_allowed_k(level_bits, bits_per_slot),
      min_key_in_same_slot_mask = create$1(bits_per_slot),
      min_allowed_key =
        min_key_in_same_slot
         (max_level_min_allowed_key, min_key_in_same_slot_mask),
      max_allowed_key =
        add_clamp_to_max(min_allowed_key, diff_max_min_allowed_key),
      _cO_ = caml_call1(null$1, 0),
      _cP_ = pow2(level_bits),
      _cQ_ = caml_call1(Core_Int63[5], _cP_),
      _cR_ = caml_call2(Core_Array[38], _cQ_, _cO_),
      level =
        [0,
         index,
         level_bits,
         create$0(level_bits),
         bits_per_slot,
         keys_per_slot,
         min_key_in_same_slot_mask,
         diff_max_min_allowed_key,
         0,
         min_allowed_key,
         max_allowed_key,
         _cR_],
      _cS_ = [0, level, levels],
      _cT_ =
        caml_call2(symbol$17, max_allowed_key, max_value$0)
         ? max_value$0
         : caml_call1(succ$0, max_allowed_key);
     return [0, symbol$2(level_bits, bits_per_slot), _cT_, _cS_];
    }
    var
     levels =
       caml_call3(Core_List[95], level_bits, [0, zero, zero$1, 0], _cG_)[3],
     _cH_ = caml_call1(Core_Array[90], levels),
     _cI_ = caml_call1(null$1, 0);
    if(capacity$0)
     var sth = capacity$0[1], capacity = sth;
    else
     var capacity = 1;
    var
     _cJ_ =
       [0,
        0,
        caml_call2(Tuple_pool[36][35], Tuple_pool[36][1][22], capacity),
        _cI_,
        zero$1,
        _cH_],
     _cM_ = Core_Time_ns_alternate_sexp[46],
     _cN_ = Core_Time_ns_alternate_sexp[46],
     t =
       [0,
        config,
        start,
        interval_num_internal(max_time, config[1]),
        _cN_,
        _cM_,
        max_time,
        _cJ_];
    t[6] = compute_max_allowed_alarm_time(t);
    advance_clock
     (t,
      start,
      function(param){
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bU_], 1);
      });
    return t;
   }
   function add_at_interval_num(t, at, value){
    var _cF_ = interval_num_start(t, at);
    return internal_add(t[7], at, _cF_, value);
   }
   function ensure_can_schedule_alarm(t, at){
    if(caml_call2(Core_Time_ns_alternate_sexp[97], at, t[6])){
     var
      _cy_ =
        [0,
         [1,
          [0, _bV_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[6]), 0]]],
         0],
      _cz_ =
        [0,
         [1,
          [0, _bW_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
         _cy_],
      _cA_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu),
          _cz_]];
     caml_call1(Core[253], _cA_);
    }
    var _cE_ = caml_call2(Core_Time_ns_alternate_sexp[98], at, t[5]);
    if(! _cE_) return _cE_;
    var
     _cB_ =
       [0,
        [1,
         [0, _bX_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[5]), 0]]],
        0],
     _cC_ =
       [0,
        [1,
         [0, _bY_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
        _cB_],
     _cD_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu$0),
         _cC_]];
    return caml_call1(Core[253], _cD_);
   }
   function add$0(t, at, value){
    ensure_can_schedule_alarm(t, at);
    var _cx_ = interval_num_unchecked(t, at);
    return internal_add(t[7], _cx_, at, value);
   }
   function remove(t, alarm){
    var t$0 = t[7], pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    return caml_call2(free, pool, elt);
   }
   function clear(t){
    var t$0 = t[7], _co_ = 1 - is_empty(t$0);
    if(_co_){
     t$0[1] = 0;
     var
      pool = t$0[2],
      free_elt = function(elt){return caml_call2(free, pool, elt);},
      levels = t$0[5],
      _cq_ = levels.length - 1 - 1 | 0,
      _cp_ = 0;
     if(_cq_ >= 0){
      var level_index = _cp_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        level[8] = 0;
        var slots = level[11], _ct_ = slots.length - 1 - 1 | 0, _cs_ = 0;
        if(_ct_ >= 0){
         var slot_index = _cs_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)){
           iter(pool, elt, free_elt);
           var _cv_ = caml_call1(null$1, 0);
           caml_check_bound(slots, slot_index)[1 + slot_index] = _cv_;
          }
          var _cw_ = slot_index + 1 | 0;
          if(_ct_ === slot_index) break;
          var slot_index = _cw_;
         }
        }
       }
       var _cu_ = level_index + 1 | 0;
       if(_cq_ === level_index) break;
       var level_index = _cu_;
      }
     }
     var _cr_ = 0;
    }
    else
     var _cr_ = _co_;
    return _cr_;
   }
   function mem(t, alarm){var t$0 = t[7]; return is_valid(t$0[2], alarm);}
   function reschedule_gen(t, alarm, key, at){
    if(1 - mem(t, alarm)) caml_call1(Core[6], cst_Timing_wheel_cannot_resche);
    ensure_can_schedule_alarm(t, at);
    var t$0 = t[7];
    ensure_valid_key(t$0, key);
    var pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][3], key);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][4], at);
    return internal_add_elt(t$0, elt);
   }
   function reschedule(t, alarm, at){
    return reschedule_gen(t, alarm, interval_num_unchecked(t, at), at);
   }
   function reschedule_at_interval_num(t, alarm, at){
    return reschedule_gen(t, alarm, at, interval_num_start(t, at));
   }
   function min_alarm_interval_num(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, key(pool$1(t), elt)];
   }
   function min_alarm_interval_num_exn(x_185){
    var elt = min_elt$1(x_185[7]);
    if(! caml_call1(is_null, elt)) return key(pool$1(x_185), elt);
    var
     _ck_ = 0,
     _cl_ = 0,
     _cm_ =
       [0,
        [1,
         [0,
          _b0_,
          [0, sexp_of_t$10(function(param){return _bZ_;}, x_185), _cl_]]],
        _ck_],
     _cn_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_min_alarm_int),
         _cm_]];
    return caml_call1(Core[253], _cn_);
   }
   function max_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     max_alarm_time = [0, Core_Time_ns_alternate_sexp[43]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return max_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _ci_ = max_alarm_time[1], _cj_ = at(pool, current[1]);
      max_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[103], _cj_, _ci_);
     }
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function min_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     min_alarm_time = [0, Core_Time_ns_alternate_sexp[45]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return min_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _cg_ = min_alarm_time[1], _ch_ = at(pool, current[1]);
      min_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[102], _ch_, _cg_);
     }
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function max_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, max_alarm_time_in_list(t, elt)];
   }
   function min_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, min_alarm_time_in_list(t, elt)];
   }
   function max_alarm_time_in_min_interval$0(x_186){
    var elt = min_elt$1(x_186[7]);
    if(caml_call1(is_null, elt)){
     var
      _cc_ = 0,
      _cd_ = 0,
      _ce_ =
        [0,
         [1,
          [0,
           _b2_,
           [0, sexp_of_t$10(function(param){return _b1_;}, x_186), _cd_]]],
         _cc_],
      _cf_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim),
          _ce_]];
     caml_call1(Core[253], _cf_);
    }
    return max_alarm_time_in_list(x_186, elt);
   }
   function min_alarm_time_in_min_interval$0(x_187){
    var elt = min_elt$1(x_187[7]);
    if(caml_call1(is_null, elt)){
     var
      _b__ = 0,
      _b$_ = 0,
      _ca_ =
        [0,
         [1,
          [0,
           _b4_,
           [0, sexp_of_t$10(function(param){return _b3_;}, x_187), _b$_]]],
         _b__],
      _cb_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim$0),
          _ca_]];
     caml_call1(Core[253], _cb_);
    }
    return min_alarm_time_in_list(x_187, elt);
   }
   function fire_past_alarms(t, handle_fired){
    var
     now = t[4],
     key = now_interval_num(t),
     t$0 = t[7],
     level = caml_check_bound(t$0[5], 0)[1],
     _b5_ = caml_call2(Core[91], level[8], 0);
    if(_b5_){
     var
      slot$0 = slot(level, key),
      slots = level[11],
      pool = t$0[2],
      first = [0, caml_check_bound(slots, slot$0)[1 + slot$0]],
      _b6_ = 1 - caml_call1(is_null, first[1]);
     if(_b6_){
      var current = [0, first[1]], continue$0 = [0, 1];
      for(;;){
       if(! continue$0[1]){var _b8_ = 0; break;}
       var elt = current[1], next$0 = next(pool, elt);
       if(caml_call2(Core[246], next$0, first[1]))
        continue$0[1] = 0;
       else
        current[1] = next$0;
       var _b7_ = at(pool, elt);
       if(caml_call2(Core_Time_ns_alternate_sexp[95], _b7_, now)){
        caml_call1(handle_fired, elt);
        internal_remove(t$0, elt);
        caml_call2(free, pool, elt);
        first[1] = caml_check_bound(slots, slot$0)[1 + slot$0];
       }
      }
     }
     else
      var _b8_ = _b6_;
     var _b9_ = _b8_;
    }
    else
     var _b9_ = _b5_;
    return _b9_;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel);
   var
    Timing_wheel =
      [0,
       [0,
        compare,
        sexp_of_t$1,
        equal$0,
        of_span_floor_pow2_ns,
        of_span_floor_pow2_ns,
        to_sexpable,
        one_nanosecond,
        about_one_day,
        about_one_microsecond,
        about_one_millisecond,
        about_one_second,
        mul,
        div,
        _l_],
       sexp_of_t$10,
       sexp_of_t_now,
       _be_,
       [0, sexp_of_t$8, null$0, at$0, interval_num, value$0],
       invariant$2,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        invariant$0,
        max_num_bits,
        create_exn,
        level_bits_default,
        num_bits],
       [0,
        t_of_sexp$2,
        sexp_of_t$3,
        invariant$1,
        create,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$2,
       alarm_precision$0,
       now,
       start,
       is_empty$0,
       length$3,
       iter$0,
       interval_num$0,
       now_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       fire_past_alarms,
       max_allowed_alarm_time,
       now_interval_num,
       max_allowed_alarm_interval_num,
       add$0,
       add_at_interval_num,
       mem,
       remove,
       reschedule,
       reschedule_at_interval_num,
       clear,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       min_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval$0,
       min_alarm_time_in_min_interval$0,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0, max_time, interval_num_internal, [0, invariant, zero]]];
   runtime.caml_register_global(219, Timing_wheel, cst_Timing_wheel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
