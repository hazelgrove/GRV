// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Stringext
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$2 = cst$4,
    cst$1 = cst$4,
    cst$0 = cst$4,
    cst = cst$4,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    cst_Stringext_rcut_empty_separ = "Stringext.rcut: empty separator",
    cst_Stringext_cut_empty_separa = "Stringext.cut: empty separator",
    cst_Stringext_Found_int = "Stringext.Found_int",
    cst_Stringext_Found_replace = "Stringext.Found_replace";
   function string_after(s, n){
    return caml_call3
            (Stdlib_String[15], s, n, caml_ml_string_length(s) - n | 0);
   }
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_call1(Stdlib_Buffer[1], 2 * len | 0),
     ___ = len - 1 | 0,
     _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      var c = caml_string_get(s, i), _$_ = c - 63 | 0;
      a:
      {
       b:
       {
        if(31 < _$_ >>> 0){
         var _aa_ = _$_ + 27 | 0;
         if(10 < _aa_ >>> 0) break b;
         switch(_aa_){case 0:case 6:case 7:case 10: break;default: break b;
         }
        }
        else if(26 >= _$_ - 1 >>> 0) break b;
        caml_call2(Stdlib_Buffer[12], buf, 92);
        caml_call2(Stdlib_Buffer[12], buf, c);
        break a;
       }
       caml_call2(Stdlib_Buffer[12], buf, c);
      }
      var _ab_ = i + 1 | 0;
      if(___ === i) break;
      var i = _ab_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   var of_char = caml_call1(Stdlib_String[1], 1);
   function full_split(str, on){
    if(caml_string_equal(str, cst$4)) return 0;
    var sep = caml_call1(of_char, on);
    function loop(acc, offset){
     try{
      var index = caml_call3(Stdlib_String[33], str, offset, on);
      if(index === offset)
       var _X_ = loop([0, sep, acc], index - 1 | 0);
      else
       var
        token =
          caml_call3
           (Stdlib_String[15], str, index + 1 | 0, offset - index | 0),
        _X_ = loop([0, sep, [0, token, acc]], index - 1 | 0);
      return _X_;
     }
     catch(_Y_){
      var _W_ = caml_wrap_exception(_Y_);
      if(_W_ === Stdlib[8])
       return 0 <= offset
               ? [0,
                 caml_call3(Stdlib_String[15], str, 0, offset + 1 | 0),
                 acc]
               : acc;
      throw caml_maybe_attach_backtrace(_W_, 0);
     }
    }
    return loop(0, caml_ml_string_length(str) - 1 | 0);
   }
   function split(max, str, on){
    if(max){
     var max$0 = max[1];
     if(caml_string_equal(str, cst$4)) return 0;
     if(1 === max$0) return [0, str, 0];
     var
      loop =
        function(offset, tokens){
         if(tokens === (max$0 - 1 | 0))
          return [0,
                  caml_call3
                   (Stdlib_String[15],
                    str,
                    offset,
                    caml_ml_string_length(str) - offset | 0),
                  0];
         try{
          var index = caml_call3(Stdlib_String[31], str, offset, on);
          if(index === offset)
           var _U_ = [0, cst, loop(offset + 1 | 0, tokens + 1 | 0)];
          else
           var
            token =
              caml_call3(Stdlib_String[15], str, offset, index - offset | 0),
            _U_ = [0, token, loop(index + 1 | 0, tokens + 1 | 0)];
          return _U_;
         }
         catch(_V_){
          var _T_ = caml_wrap_exception(_V_);
          if(_T_ === Stdlib[8])
           return [0,
                   caml_call3
                    (Stdlib_String[15],
                     str,
                     offset,
                     caml_ml_string_length(str) - offset | 0),
                   0];
          throw caml_maybe_attach_backtrace(_T_, 0);
         }
        };
     return loop(0, 0);
    }
    if(caml_string_equal(str, cst$4)) return 0;
    function loop$0(acc, offset){
     try{
      var index = caml_call3(Stdlib_String[33], str, offset, on);
      if(index === offset)
       var _R_ = loop$0([0, cst$0, acc], index - 1 | 0);
      else
       var
        token =
          caml_call3
           (Stdlib_String[15], str, index + 1 | 0, offset - index | 0),
        _R_ = loop$0([0, token, acc], index - 1 | 0);
      return _R_;
     }
     catch(_S_){
      var _Q_ = caml_wrap_exception(_S_);
      if(_Q_ === Stdlib[8])
       return [0, caml_call3(Stdlib_String[15], str, 0, offset + 1 | 0), acc];
      throw caml_maybe_attach_backtrace(_Q_, 0);
     }
    }
    return loop$0(0, caml_ml_string_length(str) - 1 | 0);
   }
   function trim_left_sub(s, last_char, len, chars){
    var final$0 = last_char + len | 0, last_char$0 = last_char, i = last_char;
    for(;;){
     if(i !== final$0){
      var _P_ = caml_string_get(s, i);
      if(caml_call2(Stdlib_String[14], chars, _P_)){
       var
        i$0 = i + 1 | 0,
        last_char$1 = i + 1 | 0,
        last_char$0 = last_char$1,
        i = i$0;
       continue;
      }
     }
     var new_len = len - (last_char$0 - last_char | 0) | 0;
     return caml_call3(Stdlib_String[15], s, last_char$0, new_len);
    }
   }
   function split_trim_left(str, on, trim){
    if(caml_string_equal(str, cst$4)) return 0;
    function loop(acc, offset){
     try{
      var index = offset;
      for(;;){
       if(0 > index) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var _L_ = caml_string_get(str, index);
       if(caml_call2(Stdlib_String[14], on, _L_)){
        if(index === offset)
         var _N_ = loop([0, cst$1, acc], index - 1 | 0);
        else
         var
          token = trim_left_sub(str, index + 1 | 0, offset - index | 0, trim),
          _N_ = loop([0, token, acc], index - 1 | 0);
        return _N_;
       }
       var i = index - 1 | 0, index = i;
      }
     }
     catch(_O_){
      var _M_ = caml_wrap_exception(_O_);
      if(_M_ === Stdlib[8])
       return [0, trim_left_sub(str, 0, offset + 1 | 0, trim), acc];
      throw caml_maybe_attach_backtrace(_M_, 0);
     }
    }
    return loop(0, caml_ml_string_length(str) - 1 | 0);
   }
   var Found_int = [248, cst_Stringext_Found_int, caml_fresh_oo_id(0)];
   function trim_left(s){
    var
     _G_ = 0 < caml_ml_string_length(s) ? 1 : 0,
     _H_ = _G_ ? caml_string_get(s, 0) !== 32 ? 1 : 0 : _G_;
    if(_H_) return s;
    var len = caml_ml_string_length(s);
    try{
     var _J_ = len - 1 | 0, _I_ = 0;
     if(_J_ >= 0){
      var i = _I_;
      for(;;){
       if(32 !== caml_string_get(s, i))
        throw caml_maybe_attach_backtrace([0, Found_int, i], 1);
       var _K_ = i + 1 | 0;
       if(_J_ === i) break;
       var i = _K_;
      }
     }
     return cst$2;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Found_int) throw caml_maybe_attach_backtrace(exn, 0);
     var non_space = exn[2];
     return caml_call3(Stdlib_String[15], s, non_space, len - non_space | 0);
    }
   }
   function find_from(opt, str, pattern){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    try{
     var
      _B_ = caml_ml_string_length(str) - caml_ml_string_length(pattern) | 0;
     if(_B_ >= start){
      var start$0 = start;
      for(;;){
       try{
        var _x_ = caml_ml_string_length(pattern) - 1 | 0, _w_ = 0;
        if(_x_ >= 0){
         var i = _w_;
         for(;;){
          var _z_ = caml_string_get(pattern, i);
          if(caml_string_get(str, i + start$0 | 0) !== _z_)
           throw caml_maybe_attach_backtrace(Stdlib[3], 1);
          var _A_ = i + 1 | 0;
          if(_x_ === i) break;
          var i = _A_;
         }
        }
        var _y_ = 1, _D_ = _y_;
       }
       catch(_F_){var _D_ = 0;}
       if(_D_) throw caml_maybe_attach_backtrace([0, Found_int, start$0], 1);
       var _E_ = start$0 + 1 | 0;
       if(_B_ === start$0) break;
       var start$0 = _E_;
      }
     }
     var _C_ = 0;
     return _C_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Found_int) return 0;
     var i$0 = exn[2];
     return [0, i$0];
    }
   }
   function replace_all(str, pattern, with$0){
    var
     plen = caml_ml_string_length(pattern),
     slen = caml_ml_string_length(str),
     buf = caml_call1(Stdlib_Buffer[1], slen),
     i = 0;
    for(;;){
     var match = find_from([0, i], str, pattern);
     if(! match){
      caml_call4(Stdlib_Buffer[18], buf, str, i, slen - i | 0);
      return caml_call1(Stdlib_Buffer[2], buf);
     }
     var j = match[1];
     caml_call4(Stdlib_Buffer[18], buf, str, i, j - i | 0);
     caml_call2(Stdlib_Buffer[16], buf, with$0);
     var i$0 = j + plen | 0, i = i$0;
    }
   }
   var
    Found_replace = [248, cst_Stringext_Found_replace, caml_fresh_oo_id(0)];
   function replace_all_assoc(str, tbl){
    var
     slen = caml_ml_string_length(str),
     buf = caml_call1(Stdlib_Buffer[1], slen),
     i = 0;
    for(;;){
     if(slen <= i) return caml_call1(Stdlib_Buffer[2], buf);
     try{
      var
       found = [0, 0],
       f$0 =
         function(i, found){
          function f(param){
           var
            with$0 = param[2],
            pattern = param[1],
            match = find_from([0, i], str, pattern);
           if(! match) return Stdlib[19];
           var j = match[1];
           if(j === i)
            throw caml_maybe_attach_backtrace
                   ([0, Found_replace, j, pattern, with$0], 1);
           found[1] = 1;
           return j;
          }
          return f;
         },
       f = f$0(i, found);
      if(tbl){
       var
        xs$0 = tbl[2],
        x$1 = tbl[1],
        fx$1 = f(x$1),
        x = x$1,
        fx = fx$1,
        param = xs$0;
       for(;;){
        if(! param) break;
        var xs = param[2], x$0 = param[1], fx$0 = f(x$0);
        if(runtime.caml_lessthan(fx$0, fx))
         var x = x$0, fx = fx$0, param = xs;
        else
         var param = xs;
       }
       var e = [0, [0, x, fx]];
      }
      else
       var e = 0;
      if(e)
       var
        _t_ = e[1],
        j$1 = _t_[2],
        match$0 = _t_[1],
        with$2 = match$0[2],
        pattern$1 = match$0[1],
        _u_ = found[1] ? [0, [0, j$1, pattern$1, with$2]] : 0,
        _v_ = _u_;
      else
       var _v_ = 0;
      var r = _v_;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Found_replace) throw caml_maybe_attach_backtrace(exn, 0);
      var
       with$0 = exn[4],
       pattern = exn[3],
       j = exn[2],
       r = [0, [0, j, pattern, with$0]];
     }
     if(! r){
      caml_call4(Stdlib_Buffer[18], buf, str, i, slen - i | 0);
      return caml_call1(Stdlib_Buffer[2], buf);
     }
     var
      match = r[1],
      with$1 = match[3],
      pattern$0 = match[2],
      j$0 = match[1];
     caml_call4(Stdlib_Buffer[18], buf, str, i, j$0 - i | 0);
     caml_call2(Stdlib_Buffer[16], buf, with$1);
     var i$0 = j$0 + caml_ml_string_length(pattern$0) | 0, i = i$0;
    }
   }
   function of_list(xs$0){
    var
     l = caml_call1(Stdlib_List[1], xs$0),
     s = caml_create_bytes(l),
     i = 0,
     param = xs$0;
    for(;;){
     if(! param) return caml_call1(Stdlib_Bytes[44], s);
     var xs = param[2], x = param[1];
     caml_bytes_set(s, i, x);
     var i$0 = i + 1 | 0, i = i$0, param = xs;
    }
   }
   function to_list(s){
    var i$1 = caml_ml_string_length(s) - 1 | 0, acc = 0, i = i$1;
    for(;;){
     if(-1 === i) return acc;
     var
      i$0 = i - 1 | 0,
      acc$0 = [0, caml_string_get(s, i), acc],
      acc = acc$0,
      i = i$0;
    }
   }
   function of_array(a){
    var
     len = a.length - 1,
     bytes = caml_create_bytes(len),
     _r_ = len - 1 | 0,
     _q_ = 0;
    if(_r_ >= 0){
     var i = _q_;
     for(;;){
      caml_bytes_set(bytes, i, runtime.caml_check_bound(a, i)[1 + i]);
      var _s_ = i + 1 | 0;
      if(_r_ === i) break;
      var i = _s_;
     }
    }
    return caml_call1(Stdlib_Bytes[44], bytes);
   }
   function to_array(s){
    function _o_(_p_){return caml_string_get(s, _p_);}
    return caml_call2(Stdlib_Array[1], caml_ml_string_length(s), _o_);
   }
   function cut(s, on){
    var sep_max = caml_ml_string_length(on) - 1 | 0;
    if(0 > sep_max)
     return caml_call1(Stdlib[1], cst_Stringext_cut_empty_separa);
    var s_max = caml_ml_string_length(s) - 1 | 0;
    if(0 > s_max) return 0;
    var k = [0, 0], i = [0, 0];
    try{
     for(;;){
      if((i[1] + sep_max | 0) > s_max){var _m_ = 0; return _m_;}
      if(caml_string_unsafe_get(s, i[1]) !== caml_string_unsafe_get(on, 0))
       i[1]++;
      else{
       k[1] = 1;
       for(;;){
        if(k[1] > sep_max) break;
        if
         (caml_string_unsafe_get(s, i[1] + k[1] | 0)
          !== caml_string_unsafe_get(on, k[1]))
         break;
        k[1]++;
       }
       if(k[1] > sep_max) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       i[1]++;
      }
     }
    }
    catch(_n_){
     var _k_ = caml_wrap_exception(_n_);
     if(_k_ !== Stdlib[3]) throw caml_maybe_attach_backtrace(_k_, 0);
     var
      left_end = i[1] - 1 | 0,
      right_start = (i[1] + sep_max | 0) + 1 | 0,
      _l_ =
        caml_call3
         (Stdlib_String[15],
          s,
          right_start,
          (s_max - right_start | 0) + 1 | 0);
     return [0,
             [0, caml_call3(Stdlib_String[15], s, 0, left_end + 1 | 0), _l_]];
    }
   }
   function rcut(s, on){
    var sep_max = caml_ml_string_length(on) - 1 | 0;
    if(0 > sep_max)
     return caml_call1(Stdlib[1], cst_Stringext_rcut_empty_separ);
    var s_max = caml_ml_string_length(s) - 1 | 0;
    if(0 > s_max) return 0;
    var k = [0, 0], i = [0, s_max];
    try{
     for(;;){
      if(sep_max > i[1]){var _i_ = 0; return _i_;}
      if
       (caml_string_unsafe_get(s, i[1])
        !== caml_string_unsafe_get(on, sep_max))
       i[1] += -1;
      else{
       var sep_start = i[1] - sep_max | 0;
       k[1] = sep_max - 1 | 0;
       for(;;){
        if(0 > k[1]) break;
        if
         (caml_string_unsafe_get(s, sep_start + k[1] | 0)
          !== caml_string_unsafe_get(on, k[1]))
         break;
        k[1] += -1;
       }
       if(0 > k[1]) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       i[1] += -1;
      }
     }
    }
    catch(_j_){
     var _g_ = caml_wrap_exception(_j_);
     if(_g_ !== Stdlib[3]) throw caml_maybe_attach_backtrace(_g_, 0);
     var
      left_end = (i[1] - sep_max | 0) - 1 | 0,
      right_start = i[1] + 1 | 0,
      _h_ =
        caml_call3
         (Stdlib_String[15],
          s,
          right_start,
          (s_max - right_start | 0) + 1 | 0);
     return [0,
             [0, caml_call3(Stdlib_String[15], s, 0, left_end + 1 | 0), _h_]];
    }
   }
   function chop_prefix(s, prefix){
    var
     prefix_l = caml_ml_string_length(prefix),
     string_l = caml_ml_string_length(s);
    if(string_l < prefix_l) return 0;
    try{
     var _b_ = prefix_l - 1 | 0, _a_ = 0;
     if(_b_ >= 0){
      var i = _a_;
      for(;;){
       var _d_ = caml_string_get(prefix, i);
       if(caml_string_get(s, i) !== _d_)
        throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       var _e_ = i + 1 | 0;
       if(_b_ === i) break;
       var i = _e_;
      }
     }
     var
      _c_ =
        [0,
         caml_call3(Stdlib_String[15], s, prefix_l, string_l - prefix_l | 0)];
     return _c_;
    }
    catch(_f_){return 0;}
   }
   function drop(s, n){
    var l = caml_ml_string_length(s);
    return l <= n ? cst$3 : caml_call3(Stdlib_String[15], s, n, l - n | 0);
   }
   function take(s, n){
    return caml_ml_string_length(s) <= n
            ? s
            : caml_call3(Stdlib_String[15], s, 0, n);
   }
   var
    Stringext =
      [0,
       string_after,
       quote,
       split,
       full_split,
       trim_left,
       split_trim_left,
       of_char,
       of_list,
       to_list,
       to_array,
       of_array,
       find_from,
       replace_all,
       replace_all_assoc,
       cut,
       rcut,
       chop_prefix,
       drop,
       take,
       trim_left_sub];
   runtime.caml_register_global(19, Stringext, "Stringext");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
