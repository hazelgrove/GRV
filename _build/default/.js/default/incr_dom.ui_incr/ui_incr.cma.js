// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ui_incr
//# unitInfo: Requires: Core__Time_ns, Expect_test_collector, Incr_map, Incr_select, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_incr = "Ui_incr",
    cst_ui_incr = "ui_incr";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Incremental = global_data.Incremental,
    Core_Time_ns = global_data.Core__Time_ns,
    Incr_map = global_data.Incr_map,
    Incr_select = global_data.Incr_select;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_incr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_incr);
   caml_call1(Expect_test_collector[5][1], "ui_incr/ui_incr.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_ui_incr, cst);
   var
    Incr = caml_call1(Incremental[80], [0]),
    _a_ = caml_call1(Core_Time_ns[65], 0),
    clock = caml_call3(Incr[78][3], 0, _a_, 0),
    sexp_of_state_witness = Incr[1],
    State = Incr[2],
    sexp_of_t = Incr[3],
    invariant = Incr[4],
    is_const = Incr[5],
    is_valid = Incr[6],
    is_necessary = Incr[7],
    const$0 = Incr[8],
    return$0 = Incr[9],
    map = Incr[10],
    symbol_map = Incr[11],
    map2 = Incr[12],
    map3 = Incr[13],
    map4 = Incr[14],
    map5 = Incr[15],
    map6 = Incr[16],
    map7 = Incr[17],
    map8 = Incr[18],
    map9 = Incr[19],
    map10 = Incr[20],
    map11 = Incr[21],
    map12 = Incr[22],
    map13 = Incr[23],
    map14 = Incr[24],
    map15 = Incr[25],
    bind = Incr[26],
    symbol_bind = Incr[27],
    bind2 = Incr[28],
    bind3 = Incr[29],
    bind4 = Incr[30],
    Infix = Incr[31],
    join = Incr[32],
    if$0 = Incr[33],
    freeze = Incr[34],
    depend_on = Incr[35],
    necessary_if_alive = Incr[36],
    for_all = Incr[37],
    exists = Incr[38],
    all = Incr[39],
    both = Incr[40],
    array_fold = Incr[41],
    reduce_balanced = Incr[42],
    Unordered_array_fold_update = Incr[43],
    unordered_array_fold = Incr[44],
    opt_unordered_array_fold = Incr[45],
    sum = Incr[46],
    opt_sum = Incr[47],
    sum_int = Incr[48],
    sum_float = Incr[49],
    Scope = Incr[50],
    Var = Incr[51],
    Observer = Incr[52],
    observe = Incr[53],
    Update = Incr[54],
    on_update = Incr[55],
    stabilize = Incr[56],
    am_stabilizing = Incr[57],
    Cutoff = Incr[58],
    set_cutoff = Incr[59],
    get_cutoff = Incr[60],
    lazy_from_fun = Incr[61],
    default_hash_table_initial_siz = Incr[62],
    memoize_fun = Incr[63],
    memoize_fun_by_key = Incr[64],
    weak_memoize_fun = Incr[65],
    weak_memoize_fun_by_key = Incr[66],
    user_info = Incr[67],
    set_user_info = Incr[68],
    append_user_info_graphviz = Incr[69],
    Node_value = Incr[70],
    node_value = Incr[71],
    Packed = Incr[72],
    pack = Incr[73],
    save_dot = Incr[74],
    save_dot_to_file = Incr[75],
    Let_syntax = Incr[76],
    Before_or_after = Incr[77],
    Clock = Incr[78],
    Expert = Incr[79],
    Map = caml_call1(Incr_map[52], Incr),
    Select =
      caml_call1
       (Incr_select[1],
        [0,
         Incr[2],
         Incr[3],
         Incr[4],
         Incr[5],
         Incr[6],
         Incr[7],
         Incr[8],
         Incr[9],
         Incr[10],
         Incr[11],
         Incr[12],
         Incr[13],
         Incr[14],
         Incr[15],
         Incr[16],
         Incr[17],
         Incr[18],
         Incr[19],
         Incr[20],
         Incr[21],
         Incr[22],
         Incr[23],
         Incr[24],
         Incr[25],
         Incr[26],
         Incr[27],
         Incr[28],
         Incr[29],
         Incr[30],
         Incr[31],
         Incr[32],
         Incr[33],
         Incr[34],
         Incr[35],
         Incr[36],
         Incr[37],
         Incr[38],
         Incr[39],
         Incr[40],
         Incr[41],
         Incr[42],
         Incr[43],
         Incr[44],
         Incr[45],
         Incr[46],
         Incr[47],
         Incr[48],
         Incr[49],
         Incr[50],
         Incr[51],
         Incr[52],
         Incr[53],
         Incr[54],
         Incr[55],
         Incr[56],
         Incr[57],
         Incr[58],
         Incr[59],
         Incr[60],
         Incr[61],
         Incr[62],
         Incr[63],
         Incr[64],
         Incr[65],
         Incr[66],
         Incr[67],
         Incr[68],
         Incr[69],
         Incr[70],
         Incr[71],
         Incr[72],
         Incr[73],
         Incr[74],
         Incr[75],
         Incr[76],
         Incr[77],
         Incr[78],
         Incr[79]]);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_ui_incr);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_incr);
   var
    Ui_incr =
      [0,
       Incr,
       clock,
       sexp_of_state_witness,
       State,
       sexp_of_t,
       invariant,
       is_const,
       is_valid,
       is_necessary,
       const$0,
       return$0,
       map,
       symbol_map,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind,
       symbol_bind,
       bind2,
       bind3,
       bind4,
       Infix,
       join,
       if$0,
       freeze,
       depend_on,
       necessary_if_alive,
       for_all,
       exists,
       all,
       both,
       array_fold,
       reduce_balanced,
       Unordered_array_fold_update,
       unordered_array_fold,
       opt_unordered_array_fold,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       Scope,
       Var,
       Observer,
       observe,
       Update,
       on_update,
       stabilize,
       am_stabilizing,
       Cutoff,
       set_cutoff,
       get_cutoff,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       Packed,
       pack,
       save_dot,
       save_dot_to_file,
       Let_syntax,
       Before_or_after,
       Clock,
       Expert,
       Map,
       Select];
   runtime.caml_register_global(15, Ui_incr, cst_Ui_incr);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1aV9pbmNyLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJjbG9jayJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdmlzaG51cy8ub3BhbS9ncnYtdGVzdC9saWIvaW5jcl9kb20vdWlfaW5jci91aV9pbmNyLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBS3FDOztJQUFBLE1BQUE7SUFBakNBLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQUFSQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBDb3JlXG5tb2R1bGUgSW5jciA9IEluY3JlbWVudGFsLk1ha2UgKClcblxuKCogVGhpcyBpcyB0aGUgZGVmYXVsdCBjbG9jayBmb3IgcnVubmluZyBjbGllbnRzLCBidXQgYm9uc2FpIHRlc3RzIGhhdmUgdGhlaXJcbiAgIG93biBzZXBhcmF0ZSBjbG9ja3MgKilcbmxldCBjbG9jayA9IEluY3IuQ2xvY2suY3JlYXRlIH5zdGFydDooVGltZV9ucy5ub3cgKCkpICgpXG5cbmluY2x1ZGUgSW5jclxubW9kdWxlIE1hcCA9IEluY3JfbWFwLk1ha2UgKEluY3IpXG5tb2R1bGUgU2VsZWN0ID0gSW5jcl9zZWxlY3QuTWFrZSAoSW5jcilcbiJdfQ==
