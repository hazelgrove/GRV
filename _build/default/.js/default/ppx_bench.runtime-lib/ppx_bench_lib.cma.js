// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_bench_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_bench_lib = [0];
   runtime.caml_register_global(0, Ppx_bench_lib, "Ppx_bench_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_bench_lib__Export
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_bench_lib_Export = [0];
   runtime.caml_register_global
    (0, Ppx_bench_lib_Export, "Ppx_bench_lib__Export");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_bench_lib__Benchmark_accumulator
//# unitInfo: Requires: Stdlib, Stdlib__Hashtbl, Stdlib__List, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_equal = runtime.caml_string_equal,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ".",
    null$0 = "<unknown>",
    cst$0 = "",
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    r = [0, 0],
    libname_ref = [0, null$0];
   function set(str){libname_ref[1] = str; return 0;}
   function unset(param){libname_ref[1] = null$0; return 0;}
   var t = [0, 0];
   function pop_exn(param){t[1] = caml_call1(Stdlib_List[6], t[1]); return 0;}
   function compare(t1, t2){return runtime.caml_int_compare(t1[1], t2[1]);}
   function get_module_name_opt(t){
    var str = t[3], len = runtime.caml_ml_string_length(str), i = 0;
    for(;;){
     if((i + 4 | 0) > len) return 0;
     if(caml_string_equal(caml_call3(Stdlib_String[15], str, i, 4), ".ml."))
      return [0,
              caml_call3
               (Stdlib_String[15], str, i + 4 | 0, (len - i | 0) - 4 | 0)];
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function with_test_spec(t, test_spec){
    return [0,
            t[1],
            t[2],
            t[3],
            t[4],
            t[5],
            t[6],
            t[7],
            t[8],
            test_spec,
            t[10]];
   }
   try{var _d_ = caml_sys_getenv("BENCHMARKS_RUNNER"), v = _d_;}
   catch(_s_){
    var _a_ = caml_wrap_exception(_s_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var v = cst$0;
   }
   var
    add_environment_var = caml_string_equal(v, "TRUE"),
    libs_to_entries = caml_call2(Stdlib_Hashtbl[1], 0, 10);
   function lookup_rev_lib(libname){
    try{
     var _q_ = caml_call2(Stdlib_Hashtbl[6], libs_to_entries, libname);
     return _q_;
    }
    catch(_r_){
     var _p_ = caml_wrap_exception(_r_);
     if(_p_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_p_, 0);
    }
   }
   function lookup_lib(libname){
    var _o_ = lookup_rev_lib(libname);
    return caml_call1(Stdlib_List[9], _o_);
   }
   try{caml_sys_getenv("FORCE_DROP_BENCH"); var _c_ = 1, force_drop = _c_;}
   catch(_n_){
    var _b_ = caml_wrap_exception(_n_);
    if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
    var force_drop = 0;
   }
   function get_mode(param){return force_drop ? -950194894 : 984731018;}
   function add_bench
   (name, code, filename, type_conv_path, line, startpos, endpos, test_spec){
    if(984731018 > get_mode(0)) return 0;
    var libname = libname_ref[1], ms = t[1];
    if(ms)
     var
      _k_ = caml_call1(Stdlib_List[9], ms),
      _l_ = [0, caml_call2(Stdlib_String[6], cst, _k_)];
    else
     var _l_ = 0;
    r[1]++;
    var
     entry =
       [0,
        r[1],
        code,
        type_conv_path,
        name,
        filename,
        line,
        startpos,
        endpos,
        test_spec,
        _l_],
     _m_ = [0, entry, lookup_rev_lib(libname)];
    return caml_call3(Stdlib_Hashtbl[5], libs_to_entries, libname, _m_);
   }
   function add_bench_module(name, param, _i_, _h_, _g_, _f_, _e_, f){
    if(984731018 > get_mode(0)) return 0;
    t[1] = [0, name, t[1]];
    try{caml_call1(f, 0); var _j_ = pop_exn(0); return _j_;}
    catch(ex$0){
     var ex = caml_wrap_exception(ex$0);
     pop_exn(0);
     throw caml_maybe_attach_backtrace(ex, 0);
    }
   }
   var
    Ppx_bench_lib_Benchmark_accumu =
      [0,
       [0, set, unset],
       [0, with_test_spec, compare, get_module_name_opt],
       add_environment_var,
       lookup_lib,
       add_bench,
       add_bench_module];
   runtime.caml_register_global
    (11,
     Ppx_bench_lib_Benchmark_accumu,
     "Ppx_bench_lib__Benchmark_accumulator");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
